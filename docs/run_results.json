{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "2025.5.20+0929d26", "generated_at": "2025-05-21T12:31:18.913874Z", "invocation_id": "1d598546-3e7c-410e-bde8-50e2784a6c62", "invocation_started_at": "2025-05-21T12:30:53.207652Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:54.694868Z", "completed_at": "2025-05-21T12:30:54.706447Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:54.711090Z", "completed_at": "2025-05-21T12:30:54.711108Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.06563353538513184, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_last_chats_date", "compiled": true, "compiled_code": "", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_last_chats_date`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:54.702078Z", "completed_at": "2025-05-21T12:30:54.710263Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:54.712646Z", "completed_at": "2025-05-21T12:30:54.712663Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10416913032531738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_sessions_gupshup_keyrpley_union", "compiled": true, "compiled_code": "", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_sessions_gupshup_keyrpley_union`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:54.703278Z", "completed_at": "2025-05-21T12:30:54.711932Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:54.753719Z", "completed_at": "2025-05-21T12:30:54.753735Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.14598655700683594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_waba_currency_by_each_month", "compiled": true, "compiled_code": "with transaction_currency as (\n   select subscription_id, \n  cast(date_trunc(date_at, month) as  date) as paid_month, \n  currency,\n  row_number() over (partition by subscription_id, date_trunc(date_at, month) order by date_at, id desc) rn ,\n  min(cast(date_trunc(date_at, month) as  date)) over (partition by subscription_id) as first_month\n  from dwh-wazzup.dbt_prod.stg_channels_waba_transactions\n),\n\ncalendar_subscription_id as (\n  select distinct subscription_id, month, first_month from transaction_currency\n  cross join dwh-wazzup.analytics_tech.months\n  where month>=first_month and month<=date_trunc(current_date, month)\n),\n\ntransaction_currency_deduplicated as (\n  select * from transaction_currency\n  where rn=1\n),\n\ncalendar_with_currency_data as (\n\nselect calendar_subscription_id.*, currency from  calendar_subscription_id \nleft join transaction_currency_deduplicated on transaction_currency_deduplicated.paid_month=calendar_subscription_id.month and transaction_currency_deduplicated.subscription_id=calendar_subscription_id.subscription_id),\ncalendar_to_fillna as (\n select *,\n               sum(case when currency is not null then 1 else 0 end) over (partition by subscription_id\n          order by month asc) as r_close\n          from calendar_with_currency_data),\n\ncalendar_filled_na as (\n\nselect * , \n          first_value(currency) over (partition by subscription_id, r_close order by month asc rows between unbounded preceding and unbounded following) as currency_filled\n          from calendar_to_fillna\n          )\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u0432\u0430\u043b\u044e\u0442\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 WABA \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c\nselect subscription_id,         -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\ncurrency_filled as currency,    -- \u0412\u0430\u043b\u044e\u0442\u0430\nmonth   -- \u041c\u0435\u0441\u044f\u0446\n from calendar_filled_na\n where subscription_id is not null", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_waba_currency_by_each_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:54.706997Z", "completed_at": "2025-05-21T12:30:54.713166Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:54.793879Z", "completed_at": "2025-05-21T12:30:54.793893Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.18345189094543457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_features_analytics_usages_by_month", "compiled": true, "compiled_code": "-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c\u0438 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0444\u0438\u0447\u0443 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0438\nSELECT date_trunc(date, month) as month,  -- \u041c\u0435\u0441\u044f\u0446\ncast(accountId as STRING) as account_id   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nFROM `dwh-wazzup`.`yandex_metrika`.`wazzup_hits_analytics` \nwhere accountId is not null and accountId!='nan'\ngroup by 1,2\nhaving count(*)>=2", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_features_analytics_usages_by_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:54.708671Z", "completed_at": "2025-05-21T12:30:54.713721Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:54.794516Z", "completed_at": "2025-05-21T12:30:54.794530Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.22233104705810547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_features_groupchats", "compiled": true, "compiled_code": "-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c\u0438 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0444\u0438\u0447\u0443 \u0433\u0440\u0443\u043f\u043f\u043e\u0432\u044b\u0445 \u0447\u0430\u0442\u043e\u0432\nSELECT date_trunc(_ibk, month) as month, -- \u041c\u0435\u0441\u044f\u0446\ncast(accountId as STRING) as account_id  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nFROM `dwh-wazzup`.`wazzup`.`messages_voice_groupchats` \nwhere chatType is not null\ngroup by 1,2", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_features_groupchats`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:54.704274Z", "completed_at": "2025-05-21T12:30:54.714057Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:54.795250Z", "completed_at": "2025-05-21T12:30:54.795263Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.2638435363769531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_localuserid_template_link_groupped", "compiled": true, "compiled_code": "with template_link_by_user as (\n    select\n    cmuserid,\n    localuserid,\n    last_value(regexp_extract(NET.HOST(templatelink),r'[^.]+')) over (\n        partition by cmuserid\n        order by datetime range between unbounded preceding and unbounded following\n    ) as last_templatelink\n    from `dwh-wazzup`.`mongo_db`.`df_events`\n    where event != 'visitka-enter' and templatelink is not null),\n\n    template_link_by_user_deduplicated as (\n        select cmuserid,localUserId,last_templateLink as template_link\n        from template_link_by_user\n        group by 1,2,3\n    )\nselect * from template_link_by_user_deduplicated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_localuserid_template_link_groupped`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:54.961630Z", "completed_at": "2025-05-21T12:30:54.968886Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:54.994084Z", "completed_at": "2025-05-21T12:30:54.994100Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.11964249610900879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_features_messages_sstt", "compiled": true, "compiled_code": "-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c\u0438 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0444\u0438\u0447\u0443 messages_voice_groupchats\nSELECT date_trunc(_ibk, month) as month, -- \u041c\u0435\u0441\u044f\u0446\ncast(accountId as STRING) as account_id  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430   \nFROM `dwh-wazzup`.`wazzup`.`messages_voice_groupchats` \nwhere isstt=True\ngroup by 1,2\nhaving count(*)>=4", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_features_messages_sstt`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:54.964038Z", "completed_at": "2025-05-21T12:30:54.992997Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:55.035895Z", "completed_at": "2025-05-21T12:30:55.035908Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.15880918502807617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_forecasts_registrations_by_months", "compiled": true, "compiled_code": "with forecasted_data as (\r\n  SELECT cast(date_trunc(forecast_timestamp,month) as date) as registration_month, \r\n  sum(cast(forecast_value as integer)) as registrations_by_month,\r\n  sum(cast(prediction_interval_upper_bound as integer))  as registrations_by_month_upper_bound,\r\n  sum(cast(prediction_interval_lower_bound as integer))  as registrations_by_month_lower_bound\r\n   FROM ML.FORECAST(MODEL `dwh-wazzup.1066401_wazzup_plan_vs_fact_metrics.model_registrations_forecasting`,  STRUCT(31 AS horizon, 0.8 AS confidence_level))\r\ngroup by 1\r\n),\r\n\r\nfact_data as (\r\n  select date_trunc(registration_date,month), \r\n  sum(registration_by_day) as registrations_by_month,\r\n  sum(registration_by_day) as registrations_by_month_upper_bound,\r\n  sum(registration_by_day) as registrations_by_month_lower_bound\r\n  \r\n    from `dwh-wazzup.1066401_wazzup_plan_vs_fact_metrics.table_for_forecasting_registrations`\r\ngroup by 1\r\n),\r\n\r\nregistration_data_forecasted_and_fact_union as (\r\n\r\nselect * from forecasted_data \r\nunion all \r\nselect * from fact_data)\r\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c\u044b\u043c \u0438 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439 \u043f\u043e\u043c\u0435\u0441\u044f\u0447\u043d\u043e\r\nselect registration_month,      -- \u041c\u0435\u0441\u044f\u0446 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\r\nsum(registrations_by_month) as registration_by_month_forecasted,                            -- \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439 (\u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u043e\u0441\u043b\u0435 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043c\u0435\u0441\u044f\u0446\u0430)\r\nsum(registrations_by_month_upper_bound) as registrations_by_month_upper_bound_forecasted,   -- \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439 \u043f\u043e \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u0433\u0440\u0430\u043d\u0438 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 (\u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u043e\u0441\u043b\u0435 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043c\u0435\u0441\u044f\u0446\u0430)\r\nsum(registrations_by_month_lower_bound) as registrations_by_month_lower_bound_forecasted    -- \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439 \u043f\u043e \u043d\u0438\u0436\u043d\u0435\u0439 \u0433\u0440\u0430\u043d\u0438 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 (\u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u043e\u0441\u043b\u0435 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043c\u0435\u0441\u044f\u0446\u0430)\r\nfrom registration_data_forecasted_and_fact_union\r\ngroup by 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_forecasts_registrations_by_months`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:54.981606Z", "completed_at": "2025-05-21T12:30:54.994746Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:55.075668Z", "completed_at": "2025-05-21T12:30:55.075682Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.19371914863586426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscription_end_and_start_with_account_type", "compiled": true, "compiled_code": "", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscription_end_and_start_with_account_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:54.969465Z", "completed_at": "2025-05-21T12:30:55.033105Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:55.076109Z", "completed_at": "2025-05-21T12:30:55.076120Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.23547077178955078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_waba_key_reply_invoice", "compiled": true, "compiled_code": "with key_reply_bills as \n(SELECT SPLIT(invoice_billing_month, ' ')[OFFSET(0)] as month, \n        SPLIT(invoice_billing_month, ' ')[OFFSET(1)] as year,* \nFROM `dwh-wazzup`.`analytics_tech`.`waba_sessions_and_subscription_key_reply`\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 WABA KeyReply\nselect PARSE_DATE('%m-%Y', concat(months.number, '-', year)) as paid_month, *\nfrom key_reply_bills\nleft join `dwh-wazzup`.`analytics_tech`.`month_russian_names` months on key_reply_bills.month=months.russian_name\nwhere year is not null", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_waba_key_reply_invoice`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:54.967153Z", "completed_at": "2025-05-21T12:30:55.035435Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:55.076729Z", "completed_at": "2025-05-21T12:30:55.076740Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.27580952644348145, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_postpay_revenue_bills", "compiled": true, "compiled_code": "select  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u043f\u043e\u0441\u0442\u043e\u043f\u043b\u0430\u0442\u043d\u0438\u043a\u043e\u0432\naccount_id,        -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nPARSE_DATE('%d.%m.%Y', month) as paid_date, -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\ncurrency,                       -- \u0412\u0430\u043b\u044e\u0442\u0430\nCOALESCE(CAST(REPLACE(bill_sum, ' ', '') AS int), 0) as sum_in_rubles,           -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\nCOALESCE(CAST(REPLACE(bill_sum, ' ', '') AS int), 0) as original_sum             -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\nfrom `dwh-wazzup`.`google_sheets`.`postpay_paying`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_postpay_revenue_bills`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:55.243408Z", "completed_at": "2025-05-21T12:30:55.254458Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:55.257623Z", "completed_at": "2025-05-21T12:30:55.257634Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.06238961219787598, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_account_administrators", "compiled": true, "compiled_code": "select                                -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e\u0431 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 Wazzup\n    guid,                                                       -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u0434\u043c\u0438\u043d\u0430\n    accountId as account_id,                                    -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    name,                                                       -- \u0418\u043c\u044f \u0430\u0434\u043c\u0438\u043d\u0430 \u0432 Telegram\n    telegramid as telegram_id,                                  -- Telegram ID\n    integrationsNotifications as integrations_notifications,    -- \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u043b\u0438 \u0443\u0432\u0435\u0434\u044b \u043f\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438?\n    subscriptionsNotifications as subscription_notifications,   -- \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u043b\u0438 \u0443\u0432\u0435\u0434\u044b \u043f\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438?\n    username                                                    -- Username Telegram\nfrom `dwh-wazzup`.`wazzup`.`accountAdministrators`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_account_administrators`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:55.246912Z", "completed_at": "2025-05-21T12:30:55.257095Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:55.259849Z", "completed_at": "2025-05-21T12:30:55.259859Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.09975028038024902, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_account_events__telegram_notifications", "compiled": true, "compiled_code": "SELECT          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438/\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u0442\u0435\u043b\u0435\u0433\u0440\u0430\u043c-\u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439\n    accountId as account_id,                                -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n    datetime(occured_at, 'Europe/Moscow') as occured_at,    -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f\n    adminId as admin_id,                                    -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u043a\u043e\u043c\u0443 \u043f\u0440\u0438\u0445\u043e\u0434\u044f\u0442 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f\n    (case when is_channel_notification_on or is_subscription_notification_on or is_integration_notification_on \n    then true\n    else false\n    end\n    ) as is_any_notification_on ,                           -- \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u043b\u0438 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u0445\u043e\u0442\u044f \u0431\u044b \u043d\u0430 \u043e\u0434\u043d\u0443 \u0438\u0437 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439: (\u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430, \u043a\u0430\u043d\u0430\u043b, \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f)\n    is_channel_notification_on,                             -- \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u043b\u0438 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u0430\u043d\u0430\u043b\u0430\n    is_subscription_notification_on,                        -- \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u043b\u0438 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    is_integration_notification_on                          -- \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u043b\u0438 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\nFROM  `dwh-wazzup`.`wazzup`.`analytic_events`\nwhere event_type=2", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_account_events__telegram_notifications`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:55.252605Z", "completed_at": "2025-05-21T12:30:55.258236Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:55.300860Z", "completed_at": "2025-05-21T12:30:55.300874Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.13980650901794434, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_accounts_events__partner_change", "compiled": true, "compiled_code": "select          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u043c \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\n    accountId as account_id,        -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts. id \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u0438\u043b\u0438 \u043a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0443/\u0440\u0435\u0444\u0435\u0440\u0430\u043b\u0443 (\u0440\u0435\u0431\u0435\u043d\u043e\u043a)\n    first_value(occured_at) over  (partition by accountId  order by occured_at) as first_value_occured_at,              -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    first_value(oldPartnerId) over (partition by accountId order by occured_at) as first_value_partner_id,              -- \u041f\u0435\u0440\u0432\u044b\u0439 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430. \u0415\u0441\u043b\u0438 null, \u0442\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0435 \u0431\u044b\u043b\u043e\n    first_value(oldRefParentId) over (partition by accountId order by occured_at) as first_value_refparent_id,          -- \u041f\u0435\u0440\u0432\u044b\u0439 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0440\u0435\u0444.\u043f\u0430\u043f\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430. \u0415\u0441\u043b\u0438 null, \u0442\u043e \u0440\u0435\u0444.\u043f\u0430\u043f\u044b \u043d\u0435 \u0431\u044b\u043b\u043e\n    datetime(occured_at) as start_occured_at,                      -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    coalesce(lag(datetime(occured_at),1 ) over (partition by accountId order by occured_at desc), datetime(current_timestamp,'Europe/Moscow')) as end_occured_at,    -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f, \u0434\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u044b\u043b \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n    newPartnerId as partner_id,                                    -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n    newRefParentId as refparent_id                                 -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u043f\u044b, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\nfrom `dwh-wazzup`.`wazzup`.`analytic_events`\nwhere event_type=1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_accounts_events__partner_change`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:55.249136Z", "completed_at": "2025-05-21T12:30:55.258806Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:55.301433Z", "completed_at": "2025-05-21T12:30:55.301445Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.17993450164794922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_accounts", "compiled": true, "compiled_code": "select          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 (\u043b\u0438\u0447\u043d\u044b\u0445 \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u043e\u0432)\n    id as account_id,               -- \u041d\u043e\u043c\u0435\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430. \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u043e \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438.\n    (case when id=83124875 then  DATETIME('2024-01-16','Europe/Moscow')\n    else \n    DATETIME(registerAt,'Europe/Moscow') \n    end)\n     as register_at,                -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 (83124875 - \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435)\n     (case when id=83124875 then  cast(DATETIME('2024-01-16','Europe/Moscow') as date)\n    else \n     cast(DATETIME(registerAt,'Europe/Moscow') as date)\n    end)\n    as register_date,       -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 (\u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 83124875 \u043e\u043f\u043b\u0430\u0442\u0430 \u0431\u0435\u0437\u043d\u0430\u043b\u043e\u043c \u043f\u043e \u0431\u0430\u043d\u043a\u0443 \u0431\u044b\u043b\u0430 \u0414\u043e \u0434\u0430\u0442\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. \u0412\u043e\u043b\u0435\u0432\u044b\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0430 \u043d\u0430 \u0434\u0435\u043d\u044c \u0434\u043e \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430)\n    country,                -- \u0421\u0442\u0440\u0430\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u043b\u043e\u043a\u0430\u0446\u0438\u0438 (ip)\n    regEmail,               -- Email, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430. \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 \u041b\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0430\n    activated AS is_activated_by_email,\n    currency,               -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430. \u0421\u0442\u0430\u0432\u0438\u0442\u0441\u044f \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043b\u043e\u043a\u0430\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. RUR - \u0440\u0443\u0431\u043b\u0438, USD - \u0434\u043e\u043b\u043b\u0430\u0440\u044b, EUR - \u0435\u0432\u0440\u043e, KZT - \u0442\u0435\u043d\u0433\u0435\n    details,                -- \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432 \"wazzup_staging.yml\"\n    name as account_name,   -- \u0418\u043c\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438.\n    timeZone as time_zone,  -- \u0427\u0430\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u044f\u0441 \u0412\u044b\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c. \u0427\u0430\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u044f\u0441 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 \u041b\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0430\n    json_value(details,'$.registrationInfo.ymId') as yandex_id,             -- \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u042f\u043d\u0434\u0435\u043a\u0441\u0430, \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u0430\u044f \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n    \n    coalesce((case when JSON_VALUE(details,'$.registrationInfo.url') LIKE '%yclid=%' then split(SPLIT(JSON_VALUE(details,'$.registrationInfo.url'),'yclid=')[OFFSET(1)],'&')[OFFSET(0)] end),\n    (case when JSON_VALUE(details,'$.registrationInfo.referer') LIKE '%yclid=%' then split(SPLIT(JSON_VALUE(details,'$.registrationInfo.referer'),'yclid=')[OFFSET(1)],'&')[OFFSET(0)] end))\n    as yclid,                  -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 yclid \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\n\n    json_value(details,'$.registrationInfo.referer') as referrer,           -- \u0421\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u0441\u0430\u0439\u0442, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u043f\u0430\u043b \u043d\u0430 \u043d\u0430\u0448 \u0441\u0430\u0439\u0442. \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c null\n    json_value(details,'$.registrationInfo.url') as ref,                    -- \u0420\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u044b\u043b \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d \u0430\u043a\u043a\u0430\u0443\u043d\u0442\n    JSON_VALUE(details, '$.discount') as discount,                          -- \u0421\u043a\u0438\u0434\u043a\u0430 \u0434\u043b\u044f \u043e\u043f\u043b\u0430\u0442\u044b. 0.35 \u0438 0.5 \u0443 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432\n    json_value(details,'$.registrationInfo.location.city') as city,         -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0433\u043e\u0440\u043e\u0434\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f ip\n    json_value(details,'$.registrationInfo.location.region') as region,     -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u043e\u043d\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f ip\n    lang as account_language,                                               -- \u042f\u0437\u044b\u043a \u043b\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0430. \u041c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 \u041b\u041a.\n    coalesce((case when JSON_VALUE(details,'$.registrationInfo.url') LIKE '%gclid=%' then split(SPLIT(JSON_VALUE(details,'$.registrationInfo.url'),'gclid=')[OFFSET(1)],'&')[OFFSET(0)] end),\n    (case when JSON_VALUE(details,'$.registrationInfo.referer') LIKE '%gclid=%' then split(SPLIT(JSON_VALUE(details,'$.registrationInfo.referer'),'gclid=')[OFFSET(1)],'&')[OFFSET(0)] end))\n    as gclid,                  -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 gclid \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\n    coalesce((case when JSON_VALUE(details,'$.registrationInfo.url') LIKE '%utm_source=%' then split(SPLIT(JSON_VALUE(details,'$.registrationInfo.url'),'utm_source=')[OFFSET(1)],'&')[OFFSET(0)] end),\n    (case when JSON_VALUE(details,'$.registrationInfo.referer') LIKE '%utm_source=%' then split(SPLIT(JSON_VALUE(details,'$.registrationInfo.referer'),'utm_source=')[OFFSET(1)],'&')[OFFSET(0)] end))\n    as utm_source,             -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM source \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\n    coalesce((case when JSON_VALUE(details,'$.registrationInfo.url') LIKE '%utm_medium=%' then split(SPLIT(JSON_VALUE(details,'$.registrationInfo.url'),'utm_medium=')[OFFSET(1)],'&')[OFFSET(0)] end),\n    (case when JSON_VALUE(details,'$.registrationInfo.referer') LIKE '%utm_medium=%' then split(SPLIT(JSON_VALUE(details,'$.registrationInfo.referer'),'utm_medium=')[OFFSET(1)],'&')[OFFSET(0)] end))\n    as utm_medium,             -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM medium \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\n   \n   coalesce( (CASE WHEN json_value(details, '$.registrationInfo.url') LIKE '%utm_campaign=%' AND json_value(details, '$.registrationInfo.url') LIKE '%utm_campaign=%D0%' THEN REGEXP_EXTRACT(split(split(json_value(details, '$.registrationInfo.url'), 'utm_campaign=')[OFFSET(1)], '&')[OFFSET (0)], r'\\|(.*)') END),\n                 (CASE WHEN json_value(details, '$.registrationInfo.url') LIKE '%utm_campaign=%' THEN split( split(json_value(details, '$.registrationInfo.url'), 'utm_campaign=')[OFFSET(1)], '&')[OFFSET (0)] END),\n                 (CASE WHEN json_value(details, '$.registrationInfo.referer') LIKE '%utm_campaign=%' AND json_value(details, '$.registrationInfo.referer') LIKE '%utm_campaign=%D0%'  THEN REGEXP_EXTRACT(split(split(json_value(details, '$.registrationInfo.referer'), 'utm_campaign=')[OFFSET(1)],'&')[OFFSET (0)],r'\\|(.*)' ) END),\n                 (CASE WHEN json_value(details, '$.registrationInfo.referer') LIKE '%utm_campaign=%' THEN split(split(json_value(details, '$.registrationInfo.referer'), 'utm_campaign=')[OFFSET(1)],'&')[OFFSET (0)] END))\n       AS utm_campaign,\n       \n    coalesce((case when JSON_VALUE(details,'$.registrationInfo.url') LIKE '%utm_term=%' then split(SPLIT(JSON_VALUE(details,'$.registrationInfo.url'),'utm_term=')[OFFSET(1)],'&')[OFFSET(0)] end),\n    (case when JSON_VALUE(details,'$.registrationInfo.referer') LIKE '%utm_term=%' then split(SPLIT(JSON_VALUE(details,'$.registrationInfo.referer'),'utm_term=')[OFFSET(1)],'&')[OFFSET(0)] end))\n    as utm_term,               -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM term \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\n    coalesce((case when JSON_VALUE(details,'$.registrationInfo.url') LIKE '%utm_content=%' then split(SPLIT(JSON_VALUE(details,'$.registrationInfo.url'),'utm_content=')[OFFSET(1)],'&')[OFFSET(0)] end),\n    (case when JSON_VALUE(details,'$.registrationInfo.referer') LIKE '%utm_content=%' then split(SPLIT(JSON_VALUE(details,'$.registrationInfo.referer'),'utm_content=')[OFFSET(1)],'&')[OFFSET(0)] end))\n    as utm_content,            -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM content \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\n    cast(json_extract(details, '$.demoAccountId') as INTEGER )as demo_account,          -- \u0414\u0435\u043c\u043e-\u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0443 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430. \u0421\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\n    type,                   -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    case when country in ('AM', 'AZ', 'BY', 'KZ', 'KG', 'MD', 'TJ', 'UZ', 'UA','RU') then 'CIS'     -- CIS - \u044d\u0442\u043e \u0441\u0442\u0440\u0430\u043d\u044b \u0421\u041d\u0413\n         when country is null then '\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e'\n         else 'non-CIS' end as region_type,                     -- \u0422\u0438\u043f \u0440\u0435\u0433\u0438\u043e\u043d\u0430. \u041a\u043e\u0433\u0434\u0430 null, \u0442\u043e '\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e'.\n    DATETIME(TIMESTAMP_SECONDS(cast(cast(JSON_VALUE(features,'$.whatsapp.createdAt') as BIGINT)/1000 as INTEGER)) ,'Europe/Moscow')  as whatsap_trial_start,    -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0442\u0440\u0438\u0430\u043b\u0430 Whatsapp-\u043a\u0430\u043d\u0430\u043b\u0430\n    DATETIME(TIMESTAMP_SECONDS(cast(cast(JSON_VALUE(features,'$.whatsapp.endOfTrial') as BIGINT)/1000 as INTEGER)) ,'Europe/Moscow')  as whatsap_trial,         -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0442\u0440\u0438\u0430\u043b\u0430 Whatsapp-\u043a\u0430\u043d\u0430\u043b\u0430\n    DATETIME(TIMESTAMP_SECONDS(cast(cast(JSON_VALUE(features,'$.instagram.createdAt') as BIGINT)/1000 as INTEGER)),'Europe/Moscow') as instagram_trial_start,   -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0442\u0440\u0438\u0430\u043b\u0430 \u0438\u043d\u0441\u0442\u0430\u0433\u0440\u0430\u043c-\u043a\u0430\u043d\u0430\u043b\u0430\n    DATETIME(TIMESTAMP_SECONDS(cast(cast(JSON_VALUE(features,'$.instagram.endOfTrial') as BIGINT)/1000 as INTEGER)),'Europe/Moscow') as instagram_trial,        -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0442\u0440\u0438\u0430\u043b\u0430 \u0438\u043d\u0441\u0442\u0430\u0433\u0440\u0430\u043c-\u043a\u0430\u043d\u0430\u043b\u0430\n    DATETIME(TIMESTAMP_SECONDS(cast(cast(JSON_VALUE(features,'$.tgapi.createdAt') as BIGINT)/1000 as INTEGER))    ,'Europe/Moscow') as tgapi_trial_start,       -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0442\u0440\u0438\u0430\u043b\u0430 \u0442\u0435\u043b\u0435\u0433\u0440\u0430\u043c-\u043a\u0430\u043d\u0430\u043b\u0430\n    DATETIME(TIMESTAMP_SECONDS(cast(cast(JSON_VALUE(features,'$.tgapi.endOfTrial') as BIGINT)/1000 as INTEGER))    ,'Europe/Moscow') as tgapi_trial,            -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0442\u0440\u0438\u0430\u043b\u0430 \u0442\u0435\u043b\u0435\u0433\u0440\u0430\u043c-\u043a\u0430\u043d\u0430\u043b\u0430\n    DATETIME(TIMESTAMP_SECONDS(cast(cast(JSON_VALUE(features,'$.wapi.createdAt') as BIGINT)/1000 as INTEGER))     ,'Europe/Moscow') as wapi_trial_start,        -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0442\u0440\u0438\u0430\u043b\u0430 \u0412\u0410\u0411\u0410-\u043a\u0430\u043d\u0430\u043b\u0430\n    DATETIME(TIMESTAMP_SECONDS(cast(cast(JSON_VALUE(features,'$.wapi.endOfTrial') as BIGINT)/1000 as INTEGER))     ,'Europe/Moscow') as wapi_trial,             -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0442\u0440\u0438\u0430\u043b\u0430 \u0412\u0410\u0411\u0410-\u043a\u0430\u043d\u0430\u043b\u0430 (\u0423\u0441\u0442\u0430\u0440\u0435\u043b\u043e)\n    DATETIME(TIMESTAMP_SECONDS(cast(cast(JSON_VALUE(features,'$.avito.createdAt') as BIGINT)/1000 as INTEGER))    ,'Europe/Moscow') as avito_trial_start,       -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0442\u0440\u0438\u0430\u043b\u0430 \u0430\u0432\u0438\u0442\u043e-\u043a\u0430\u043d\u0430\u043b\u0430\n    DATETIME(TIMESTAMP_SECONDS(cast(cast(JSON_VALUE(features,'$.avito.endOfTrial') as BIGINT)/1000 as INTEGER))    ,'Europe/Moscow') as avito_trial,            -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0442\u0440\u0438\u0430\u043b\u0430 \u0430\u0432\u0438\u0442\u043e-\u043a\u0430\u043d\u0430\u043b\u0430\n    DATETIME(TIMESTAMP_SECONDS(cast(cast(JSON_VALUE(features,'$.vk.createdAt') as BIGINT)/1000 as INTEGER))       ,'Europe/Moscow') as vk_trial_start,          -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0442\u0440\u0438\u0430\u043b\u0430 \u0432\u043a-\u043a\u0430\u043d\u0430\u043b\u0430\n    DATETIME(TIMESTAMP_SECONDS(cast(cast(JSON_VALUE(features,'$.vk.endOfTrial') as BIGINT)/1000 as INTEGER))       ,'Europe/Moscow') as vk_trial,               -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0442\u0440\u0438\u0430\u043b\u0430 \u0432\u043a-\u043a\u0430\u043d\u0430\u043b\u0430\n    DATETIME(TIMESTAMP_SECONDS(cast(cast(JSON_VALUE(features,'$.telegram.createdAt') as BIGINT)/1000 as INTEGER)) ,'Europe/Moscow') as telegram_trial_start,    -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0442\u0440\u0438\u0430\u043b\u0430 \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c-\u0411\u043e\u0442 -\u043a\u0430\u043d\u0430\u043b\u0430\n    DATETIME(TIMESTAMP_SECONDS(cast(cast(JSON_VALUE(features,'$.telegram.endOfTrial') as BIGINT)/1000 as INTEGER)) ,'Europe/Moscow') as telegram_trial,          -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0442\u0440\u0438\u0430\u043b\u0430 \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c-\u0411\u043e\u0442 -\u043a\u0430\u043d\u0430\u043b\u0430\n    DATETIME(TIMESTAMP_SECONDS(cast(cast(JSON_VALUE(features,'$.viber.createdAt') as BIGINT)/1000 as INTEGER)) ,'Europe/Moscow') as viber_trial_start,          -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0442\u0440\u0438\u0430\u043b\u0430 viber -\u043a\u0430\u043d\u0430\u043b\u0430\n    DATETIME(TIMESTAMP_SECONDS(cast(cast(JSON_VALUE(features,'$.viber.endOfTrial') as BIGINT)/1000 as INTEGER)) ,'Europe/Moscow') as viber_trial                -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0442\u0440\u0438\u0430\u043b\u0430 viber -\u043a\u0430\u043d\u0430\u043b\u0430\nfrom `dwh-wazzup`.`wazzup`.`accounts`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:55.254898Z", "completed_at": "2025-05-21T12:30:55.260304Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:55.340706Z", "completed_at": "2025-05-21T12:30:55.340721Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.21977591514587402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_accounts_events__role_choose", "compiled": true, "compiled_code": "SELECT \n    accountId AS account_id     -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n    , crm                       -- \u0412\u044b\u0431\u0440\u0430\u043d\u043d\u0430\u044f CRM \u043d\u0430 \u044d\u0442\u0430\u043f\u0435 \u043e\u043d\u0431\u043e\u0440\u0434\u0438\u043d\u0433\u0430\n    , role                      -- \u0420\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\nFROM \n    `dwh-wazzup`.`wazzup`.`analytic_events`  -- \u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0434\u0430\u043d\u043d\u044b\u0445\nWHERE \n    event_type = 3;          -- \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u0435\u043c \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u043e \u0442\u0438\u043f\u0443 (\u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u043d\u0431\u043e\u0440\u0434\u0438\u043d\u0433)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_accounts_events__role_choose`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:55.470269Z", "completed_at": "2025-05-21T12:30:55.477261Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:55.481908Z", "completed_at": "2025-05-21T12:30:55.481919Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.06034040451049805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_accounts_events__type_change", "compiled": true, "compiled_code": "select          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e \u0442\u0438\u043f\u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    accountId as account_id,            -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n    first_value(occured_at) over  (partition by accountId order by occured_at asc) as first_value_occured_at,       -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    first_value(oldType) over (partition by accountId order by occured_at asc) as first_value_type,                 -- \u041f\u0435\u0440\u0432\u044b\u0439 \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    occured_at as start_occured_at,                     -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    newType as type,                                    -- \u041d\u043e\u0432\u044b\u0439 \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    coalesce(lead(datetime(occured_at)) over (partition by accountId order by occured_at asc), datetime(current_timestamp, 'Europe/Moscow')) as end_occured_at      -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f , \u0434\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u044b\u043b \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nfrom  `dwh-wazzup`.`wazzup`.`analytic_events`\nwhere event_type=0", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_accounts_events__type_change`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:55.473460Z", "completed_at": "2025-05-21T12:30:55.482440Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:55.522598Z", "completed_at": "2025-05-21T12:30:55.522611Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.11807560920715332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_action", "compiled": true, "compiled_code": "select id,\n        enabled,\n        query,\n        userid as user_id,\n        settingsid as settings_id,\n        showOncePerVisit as show_once_per_visit,\n        updatedAt as updated_at,\n        createdAt as created_at,\n        type,\n        name,\n        _ibk\nfrom `dwh-wazzup`.`widget`.`action`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_action`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:55.475703Z", "completed_at": "2025-05-21T12:30:55.482938Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:55.524076Z", "completed_at": "2025-05-21T12:30:55.524087Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.2091960906982422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_action_event", "compiled": true, "compiled_code": "select id,\n        actionid as action_id,\n        settingsid as settings_id,\n        name,\n        updatedAt as updated_at,\n        createdAt as created_at,\n        _ibk\nfrom `dwh-wazzup`.`widget`.`action_event`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_action_event`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:55.477631Z", "completed_at": "2025-05-21T12:30:55.483637Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:55.524615Z", "completed_at": "2025-05-21T12:30:55.524626Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.20958280563354492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_affiliates", "compiled": true, "compiled_code": "select          -- \u0412 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432\u0441\u0435 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u0438\u0435 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u0438 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u044b. \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442.\n    childId as child_id,                    -- \u0418\u0434\u0435\u043d\u0442\u0444\u0438\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0434\u043e\u0447\u043a\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u0435\u0442 account_id \u0438\u0437 stg_accounts.\n    refParentId as refparent_id,            -- \u0420\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u043f\u0430 - \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u0438 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f. \u041d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440, \u044d\u0442\u043e \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0431\u044b\u0447\u043d\u044b\u0435 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u044b. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u0435\u0442 account_id \u0438\u0437 stg_accounts.\n    partnerId as partner_id,                -- \u0418\u0434\u0435\u043d\u0442\u0444\u0438\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u0435\u0442 account_id \u0438\u0437 stg_accounts. \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d.\n    refLinkCode as refLink_code,            -- \u0421\u0441\u044b\u043b\u043a\u0430, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0437\u0430\u0440\u0435\u0433\u0435\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\n    createdAt as created_at,                -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u043e\u0447\u043a\u0438\n    name                                    -- \u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nfrom `dwh-wazzup`.`wazzup`.`affiliates`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_affiliates`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:55.479638Z", "completed_at": "2025-05-21T12:30:55.484025Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:55.525240Z", "completed_at": "2025-05-21T12:30:55.525250Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.254408597946167, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_billingAffiliate", "compiled": true, "compiled_code": "select          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0432 \u041b\u041a.\u0422\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0431\u0430\u043b\u0430\u043d\u0441\u0430\n    case when accountId = 60569941 then 28266449 else accountid end as account_id,          -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts.\n    guid,                                                                                   -- \u0410\u0432\u0442\u043e\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u043f\u0438\u0441\u0438.\n    id AS ba_id,                                                                            -- ID \u0437\u0430\u043f\u0438\u0441\u0438 \u0438\u0437 billingAffiliate\n    cast(dateTime as date) as occured_date,                                                 -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f\n    cast(json_value(details,'$.subscriptionOwner') as integer) as subscription_owner,       -- \u041d\u043e\u043c\u0435\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043a\u043e\u043c\u0443 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043f\u043b\u0430\u0442\u0438\u043b\u0438. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts.\n    json_value(details,'$.subscriptionUpdateId') as subscription_update_id,                 -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u043f\u0438\u0441\u0438 \u043e\u0431 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_subscriptionUpdates.\n    dateTime as occured_at,                                                                 -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f.\n    currency,                                                                               -- \u0412\u0430\u043b\u044e\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u044b\u043b\u0430 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u0435\u043d\u0430 \u043e\u043f\u043b\u0430\u0442\u0430\n    abs(sum) as sum,                                                                        -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u043c\u043e\u0434\u0443\u043b\u044e\n    sum as original_sum,                                                                    -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    object,                                                                                 -- \u0422\u0438\u043f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    method,                                                                                 -- \u0421\u043f\u043e\u0441\u043e\u0431 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    cast(json_value(details, '$.invalid') as bool) as is_invalid,                           -- \u0410\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e \u043f\u0440\u0438 \u043e\u043f\u043b\u0430\u0442\u0435 \u0441\u0447\u0435\u0442\u043e\u0432. \u0415\u0441\u043b\u0438 \u043e\u043f\u043b\u0430\u0442\u0430 \u0431\u044b\u043b\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043d\u0435\u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0433\u043e \u0441\u0447\u0435\u0442\u0430, \u0442\u043e true, \u0438\u043d\u0430\u0447\u0435 false. \u041f\u0440\u0438 \u043e\u043f\u043b\u0430\u0442\u0435 \u0441 \u043d\u0435\u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0433\u043e \u0441\u0447\u0435\u0442\u0430 \u0434\u0435\u043d\u044c\u0433\u0438 \u0437\u0430\u0447\u0438\u0441\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0430 \u0431\u043e\u043d\u0443\u0441\u043d\u044b\u0439 \u0441\u0447\u0435\u0442 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430.\n    cast(json_value(details, '$.paymentGuid') as string) as payment_guid,                   -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043b\u0430\u0442\u0435\u0436\u0430, \u0435\u0441\u043b\u0438 \u043f\u043b\u0430\u0442\u0435\u0436 \u0431\u044b\u043b \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u0435\u043d \u043a\u0430\u0440\u0442\u043e\u0439. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_payments_card\n    cast(json_value(details, '$.invoiceId') as string) as invoice_id                        -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043b\u0430\u0442\u0435\u0436\u0430, \u0435\u0441\u043b\u0438 \u043f\u043b\u0430\u0442\u0435\u0436 \u0431\u044b\u043b \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u0435\u043d \u043f\u043e \u0431\u0435\u0437\u043d\u0430\u043b\u0443. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_payments_bills\nfrom `dwh-wazzup`.`wazzup`.`billingAffiliate`\nwhere not (accountId=96674295 and object='takeAway' and cast(dateTime as date)=cast(timestamp('2024-01-27') as date)) --\u044d\u0442\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u0435\u043b\u0430\u043b\u0438\u0441\u044c \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043f\u0440\u0430\u0432\u043e\u043a \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u0432 \u044f\u043d\u0432\u0430\u0440\u0435 https://wazzup.planfix.ru/task/1105536", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:54.971360Z", "completed_at": "2025-05-21T12:30:55.729873Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:55.734977Z", "completed_at": "2025-05-21T12:30:55.734990Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.775493860244751, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_profeat_seo_union_plan_fact_tables", "compiled": true, "compiled_code": "with plan_fact_relations as (select * from \n\n        (\n            select\n                cast('''`dwh-wazzup`.`profeat_seo`.`profeat_seo_plan_table`''' as string) as _dbt_source_relation,\n\n                \n                    cast(`metrics` as STRING) as `metrics` ,\n                    cast(`query` as STRING) as `query` ,\n                    cast(`_5_1_2023` as INT64) as `_5_1_2023` ,\n                    cast(`_6_1_2023` as INT64) as `_6_1_2023` ,\n                    cast(`_7_1_2023` as INT64) as `_7_1_2023` ,\n                    cast(`_8_1_2023` as INT64) as `_8_1_2023` ,\n                    cast(`_9_1_2023` as INT64) as `_9_1_2023` ,\n                    cast(`_10_1_2023` as INT64) as `_10_1_2023` ,\n                    cast(`_11_1_2023` as INT64) as `_11_1_2023` ,\n                    cast(`_12_1_2023` as INT64) as `_12_1_2023` ,\n                    cast(`_1_1_2024` as INT64) as `_1_1_2024` \n\n            from `dwh-wazzup`.`profeat_seo`.`profeat_seo_plan_table`\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('''`dwh-wazzup`.`profeat_seo`.`profeat_seo_fact_monthly`''' as string) as _dbt_source_relation,\n\n                \n                    cast(`metrics` as STRING) as `metrics` ,\n                    cast(`query` as STRING) as `query` ,\n                    cast(`_5_1_2023` as INT64) as `_5_1_2023` ,\n                    cast(`_6_1_2023` as INT64) as `_6_1_2023` ,\n                    cast(`_7_1_2023` as INT64) as `_7_1_2023` ,\n                    cast(null as INT64) as `_8_1_2023` ,\n                    cast(null as INT64) as `_9_1_2023` ,\n                    cast(null as INT64) as `_10_1_2023` ,\n                    cast(null as INT64) as `_11_1_2023` ,\n                    cast(null as INT64) as `_12_1_2023` ,\n                    cast(null as INT64) as `_1_1_2024` \n\n            from `dwh-wazzup`.`profeat_seo`.`profeat_seo_fact_monthly`\n\n            \n        )\n\n        )\n\nselect * from plan_fact_relations", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_profeat_seo_union_plan_fact_tables`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:55.732265Z", "completed_at": "2025-05-21T12:30:55.740941Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:55.745555Z", "completed_at": "2025-05-21T12:30:55.745566Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0612940788269043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_billingPackages", "compiled": true, "compiled_code": "select          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\n    accountId as account_id,        -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n    type,                           -- \u0422\u0438\u043f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0443 \u043a\u0430\u043d\u0430\u043b\u0430.\n    state,                          -- \u0421\u0442\u0430\u0442\u0443\u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    isFree as is_free,              -- \u041f\u0440\u0438\u0437\u043d\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0442\u043e\u043c \u0447\u0442\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u0430 (\u0432\u044b\u0434\u0430\u043d\u0430 \u043d\u0430\u043c\u0438 \u0431\u0435\u0437\u0432\u043e\u0437\u043c\u0435\u0434\u043d\u043e)\n    guid,                           -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438.\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f Postgress \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0437\u0430\u043f\u0438\u0441\u0438\n    tariff,                         -- \u0422\u0430\u0440\u0438\u0444 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    quantity,                       -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0432 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435. \u041d\u043e, \u0434\u043b\u044f tech-partner-postpay - 10000. \n    paidAt as paid_at,              -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438. \u0414\u0430\u0442\u0430 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u043e\u043f\u043b\u0430\u0442\u044b!\n    createdAt as created_at,        -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438.\n    expiresAt as expires_at,        -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0438\u0441\u0442\u0435\u043a\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    cast(json_value(autoRenewal,'$.enabled') as bool) as auto_renewal,      -- \u041f\u0440\u0438\u0437\u043d\u0430\u043a, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u043d\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u0440\u043e\u0434\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    period                          -- \u0414\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u043c\u0435\u0441\u044f\u0446\u0430\u0445\nfrom `dwh-wazzup`.`wazzup`.`billingPackages`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:55.739422Z", "completed_at": "2025-05-21T12:30:55.746270Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:55.785968Z", "completed_at": "2025-05-21T12:30:55.785979Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.09739208221435547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_blocks_list_edits", "compiled": true, "compiled_code": "select * \nfrom `dwh-wazzup`.`profeat`.`blocks_events_edits`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_blocks_list_edits`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:55.737725Z", "completed_at": "2025-05-21T12:30:55.747117Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:55.788524Z", "completed_at": "2025-05-21T12:30:55.788537Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.14288902282714844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_blocks_list", "compiled": true, "compiled_code": "select * \nfrom `dwh-wazzup`.`profeat`.`blocks_events`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_blocks_list`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:55.741641Z", "completed_at": "2025-05-21T12:30:55.747541Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:55.789401Z", "completed_at": "2025-05-21T12:30:55.789409Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.1799769401550293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_channelHistory", "compiled": true, "compiled_code": "select          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\u043c \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043a\u0430\u043d\u0430\u043b\u043e\u0432\n    dateTime as occured_at,         -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n    state,                          -- \u0421\u0442\u0430\u0442\u0443\u0441 \u043a\u0430\u043d\u0430\u043b\u0430 \u043f\u043e\u0441\u043b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    channelId as channel_id,        -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u0430\u043d\u0430\u043b\u0430, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 stg_channels.\n    packageId as package_id,        -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043a\u0430\u043d\u0430\u043b\u0430, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 stg_billingPackages\n    id,                             -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f.\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f Postgress \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0437\u0430\u043f\u0438\u0441\u0438\n    deleted,                        -- \u0415\u0441\u043b\u0438 \u043a\u0430\u043d\u0430\u043b \u0443\u0434\u0430\u043b\u0438\u043b\u0438 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f,\u0442\u043e True, \u0438\u043d\u0430\u0447\u0435 False\n    visible                         -- \u0415\u0441\u043b\u0438 \u043a\u0430\u043d\u0430\u043b \u0432\u0438\u0434\u0435\u043d \u0432 \u041b\u041a \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0442\u043e True, \u0438\u043d\u0430\u0447\u0435 False\nfrom `dwh-wazzup`.`wazzup`.`channelHistory`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_channelHistory`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:55.743853Z", "completed_at": "2025-05-21T12:30:55.787438Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:55.829770Z", "completed_at": "2025-05-21T12:30:55.829782Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.21982359886169434, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_channel_administrators", "compiled": true, "compiled_code": "select     -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u043b\u0438 \u0443 \u0430\u0434\u043c\u0438\u043d\u043e\u0432 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0443 \u043a\u0430\u043d\u0430\u043b\u0430\n        channelid as channel_id,                                       -- id \u043a\u0430\u043d\u0430\u043b\u0430 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_channels\n        adminid as admin_id,                                           -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u0434\u043c\u0438\u043d\u0430 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_account_administrators\n        phoneUnavailableNotification as phone_unavailable_notification -- \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0443 \u043a\u0430\u043d\u0430\u043b\u0430?\nfrom `dwh-wazzup`.`wazzup`.`channelAdministrators`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_channel_administrators`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:55.830547Z", "completed_at": "2025-05-21T12:30:55.954167Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:55.957198Z", "completed_at": "2025-05-21T12:30:55.957207Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2548799514770508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_channels", "compiled": true, "compiled_code": "select         -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043a\u0430\u043d\u0430\u043b\u043e\u0432\n    accountId as account_id,        -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts.\n    guid,                           -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u0430\u043d\u0430\u043b\u0430.\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f Postgress \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0437\u0430\u043f\u0438\u0441\u0438\n    phone,                          -- \u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430/username/\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u043f\u043f\u044b vk\n    cast(datetime(createdAt,'Europe/Moscow') as timestamp) as created_at,       -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u0430\u043d\u0430\u043b\u0430\n    state,                          -- \u0421\u0442\u0430\u0442\u0443\u0441 \u043a\u0430\u043d\u0430\u043b\u0430\n    cast(datetime(createdAt,'Europe/Moscow') as date) as created_date,          -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u0430\u043d\u0430\u043b\u0430\n    date_trunc(cast(createdAt as date),week(monday)) created_week,              -- \u041d\u0435\u0434\u0435\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u0430\u043d\u0430\u043b\u0430 (\u043d\u0430\u0447\u0430\u043b\u043e \u043d\u0435\u0434\u0435\u043b\u0438 = \u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a)\n    (case when cast(json_value(details,'$.isGupshupWaba') as bool) then True    \n    else False\n    end) as is_gupshup_waba,                                                    -- \u0424\u043b\u0430\u0433 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0439 \u0447\u0442\u043e Waba \u043a\u0430\u043d\u0430\u043b \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0443 Gupshup\n    concat(guid,'-',(case when cast(json_value(details,'$.isGupshupWaba') as bool) then True\n    else False\n    end)) as guid_gupshup,                                                      -- \u0421\u0442\u0440\u043e\u043a\u0430 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u044e\u0449\u0430\u044f guid \u0438 \u0444\u043b\u0430\u0433 Gupshup\n    transport,                      -- \u0422\u0438\u043f \u043a\u0430\u043d\u0430\u043b\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043c\u0435\u0441\u0441\u0435\u043d\u0434\u0436\u0435\u0440\u0443\n    temporary,                      -- \u041f\u0440\u0438\u0437\u043d\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u043a\u0430\u043d\u0430\u043b \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439\n    deleted,                        -- \u041f\u0440\u0438\u0437\u043d\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0442\u043e\u043c \u0447\u0442\u043e \u043a\u0430\u043d\u0430\u043b \u0431\u044b\u043b \u0443\u0434\u0430\u043b\u0435\u043d\n    packageid as package_Id,        -- \u0418\u043d\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    tariff                          -- \u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u0442\u0430\u0440\u0438\u0444 \u043a\u0430\u043d\u0430\u043b\u0430\nfrom `dwh-wazzup`.`wazzup`.`channels`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_channels`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:55.957670Z", "completed_at": "2025-05-21T12:30:56.006987Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.011345Z", "completed_at": "2025-05-21T12:30:56.011355Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.13988423347473145, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_channels_waba_application", "compiled": true, "compiled_code": "select                               -- \u042d\u0442\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0438 \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u043c GupShup. \n        guid,               -- guid \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\n        _ibk,               -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u043b\u0435\u043c \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f)\n        external_id,        -- Id, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u044b gupshup\n        waba_id,            -- Id waba, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 Wazzup \u0432\u043d\u0443\u0442\u0440\u0438 wazzup\n        name,               -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u044b gupshup\n        phone_number,       -- \u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 \u043a\u0430\u043d\u0430\u043b\u0430\n        created_at,         -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\n        updated_at,         -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\n        disabled_at         -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\nfrom `dwh-wazzup`.`wazzup`.`waba_application`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_application`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:55.961233Z", "completed_at": "2025-05-21T12:30:56.010046Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.013196Z", "completed_at": "2025-05-21T12:30:56.013205Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.13952279090881348, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_channels_waba_sessions", "compiled": true, "compiled_code": "select          -- \u042d\u0442\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0432\u0441\u0435\u043c \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f\u043c \u0437\u0430 \u0441\u0435\u0441\u0441\u0438\u0438 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_channels_waba_transactions\n    chatId as chat_id,                      -- \u0422\u0435\u043b\u0435\u0444\u043e\u043d \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0430\n    initiator,                              -- \u0418\u043d\u0438\u0446\u0438\u0430\u0442\u043e\u0440 \u0441\u0435\u0441\u0441\u0438\u0438 \u0438\u0437 \u0444\u0435\u0439\u0441\u0431\u0443\u043a\u0430\n    channelId as channel_id,                -- guid \u043a\u0430\u043d\u0430\u043b\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 stg_channels\n    state,                                  -- \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043e\u043f\u043b\u0430\u0442\u044b \u0441\u0435\u0441\u0441\u0438\u0438\n    transactionId as transaction_id,        -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 stg_channels_waba_transactions\n    country,                                -- \u0421\u0442\u0440\u0430\u043d\u0430 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0430\n    sessionType as session_type,            -- \u0422\u0438\u043f \u0441\u0435\u0441\u0441\u0438\u0438, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0444\u0435\u0439\u0441\u0431\u0443\u043a\u043e\u043c \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0442\u0430\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\n    sessionId as session_id,                -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 24\u0445 \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u0441\u0435\u0441\u0441\u0438\u0438 \u0438\u0437 \u0444\u0435\u0439\u0441\u0431\u0443\u043a\u0430, \u0442.\u0435. \u0437\u0430 \u044d\u0442\u0443 \u0441\u0435\u0441\u0441\u0438\u044e \u0441\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u0435\u043d\u044c\u0433\u0438\n    paidat as paid_at_waba_sessions         -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u0441\u0435\u0441\u0441\u0438\u0438\nfrom `dwh-wazzup`.`wazzup`.`wabaSessions`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_sessions`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.003035Z", "completed_at": "2025-05-21T12:30:56.010975Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.013849Z", "completed_at": "2025-05-21T12:30:56.013857Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1763911247253418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_channels_waba_transactions", "compiled": true, "compiled_code": "select          -- \u041e\u0442\u0440\u0430\u0436\u0430\u0435\u0442 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0435 \u0432\u0430\u0431\u0430.\n    dateTime as date_at,                        -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    _ibk as transaction_date,                   -- \u0414\u0430\u0442\u0430 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    id,                                         -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    amount,                                     -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f/\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f\n    type,                                       -- \u0422\u0438\u043f \u0442\u0440\u0430\u0437\u0430\u043a\u0446\u0438\u0438:\n    currency,                                   -- \u0412\u0430\u043b\u044e\u0442\u0430, \u043a\u0430\u043a \u0438 \u0432 \u041b\u041a\n    subscriptionId as subscription_id           -- guid \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 stg_billingPackages\nfrom `dwh-wazzup`.`wazzup`.`wabaTransactions`\nwhere id!=47231455      --*\u0432\u0438\u0434\u0438\u043c\u043e, \u0437\u0430\u0432\u0435\u0434\u043e\u043c\u043e \u043d\u0435\u0432\u0435\u0440\u043d\u0430\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f*", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_transactions`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.005068Z", "completed_at": "2025-05-21T12:30:56.011744Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.053729Z", "completed_at": "2025-05-21T12:30:56.053744Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.21643662452697754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_channels_waba_transactions_gupshup", "compiled": true, "compiled_code": "select                               -- \u042d\u0442\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0435 WABA \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u043e\u043c GupShup. \n        date_time               AS date_at,                                 -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0442\u0440\u0430\u043d\u0437\u043a\u0430\u0446\u0438\u0438\n        _ibk                    AS transaction_date,                        -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438     \n        cast(id AS int)         AS id,                                      -- id \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n        amount,                                                             -- \u0421\u0443\u043c\u043c\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n        total_amount,                                                       -- \u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043e\u043a\n        reason,                                                             -- \u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438: paySession, changeCurrency, cancelSession, correctionAmount \u0438\u043b\u0438 NULL\n        type,                                                               -- \u0422\u0438\u043f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438: batch, topup, withdrawal, payment, convertation\n        currency,                                                           -- \u0412\u0430\u043b\u044e\u0442\u0430: EUR, USD, RUR, KZT\n        service_subscription_id AS subscription_id,                         -- id \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0443\u0435\u0442 subscription_id is stg_subscriptionUpdates\n        waba_session_id,                                                    -- \u041a\u043b\u044e\u0447 \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0438 \u0441 waba_sessions_gupshup,\n        waba_subscription_id,                                               -- \u041a\u043b\u044e\u0447 \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0438 \u0441 waba_subscription_gupshup\n        application_guid                                                    -- id \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0438 \u0441 gupshup\nfrom `dwh-wazzup`.`wazzup`.`wabaTransaction_gupshup`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_transactions_gupshup`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.008661Z", "completed_at": "2025-05-21T12:30:56.014294Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.132823Z", "completed_at": "2025-05-21T12:30:56.132835Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2560100555419922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_country", "compiled": true, "compiled_code": "select          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 - \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0441\u0442\u0440\u0430\u043d \u0438 \u043a\u043e\u0434\u0430\u043c\u0438 \u0432 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0435 ISO2\n    iso2,                           -- \u0414\u0432\u0443\u0445\u0441\u0438\u043c\u0432\u043e\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u044b\n    russianName as russian_name     -- \u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\nfrom `dwh-wazzup`.`analytics_tech`.`country`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_country`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.173412Z", "completed_at": "2025-05-21T12:30:56.218577Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.221483Z", "completed_at": "2025-05-21T12:30:56.221493Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2531423568725586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_crmEmployees", "compiled": true, "compiled_code": "select                         -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430\u0445 \u0432 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    accountId as account_id,            -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    hasRole as has_role,                -- \u0415\u0441\u0442\u044c \u043b\u0438 \u0440\u043e\u043b\u044c \u0443 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430?\n    activatedAt as activated_at,        -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u0434\u0430\u0447\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u041c\u041f\n    userId as employee_user_id          -- ID \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430 \u0432 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\nfrom `dwh-wazzup`.`wazzup`.`crmEmployees`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_crmEmployees`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.222918Z", "completed_at": "2025-05-21T12:30:56.270313Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.274484Z", "completed_at": "2025-05-21T12:30:56.274494Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.09940242767333984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_crmMarketplace", "compiled": true, "compiled_code": "select          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043f\u043e \u043c\u0430\u0440\u043a\u0435\u0442\u043f\u043b\u0435\u0439\u0441\u043d\u044b\u043c \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\u043c\n    crmName as crm_name,            -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0439 CRM\n    crmCode as crm_code,            --\n    status,                         -- \u0421\u0442\u0430\u0442\u0443\u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    accountId as account_id         -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\nfrom `dwh-wazzup`.`wazzup`.`crmMarketplace`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_crmMarketplace`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.225253Z", "completed_at": "2025-05-21T12:30:56.271680Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.275995Z", "completed_at": "2025-05-21T12:30:56.276004Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.13836026191711426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_days", "compiled": true, "compiled_code": "SELECT          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430-\u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044c \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0434\u0430\u0442\u0430\u043c\u0438 \u043e\u0442 01-01-2017 \u0434\u043e 01-01-2040\n    date                       -- \u0414\u0430\u0442\u0430, \u0444\u043e\u0440\u043c\u0430\u0442 2022-11-29\nFROM `dwh-wazzup`.`analytics_tech`.`days`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_days`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.266343Z", "completed_at": "2025-05-21T12:30:56.273929Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.276518Z", "completed_at": "2025-05-21T12:30:56.276526Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1773383617401123, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_days_with_month_intervals", "compiled": true, "compiled_code": "select          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044c -\u043d\u0443\u0436\u043d\u0430 \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\n    date,               -- \u0418\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430\n    time_period,        -- \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0434\u0430\u0442\u0430\n    rn                  -- \u041f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043d\u043e\u0439 \u0434\u0430\u0442\u044b, \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f\nfrom `dwh-wazzup`.`analytics_tech`.`days_with_month_intervals`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_days_with_month_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.268839Z", "completed_at": "2025-05-21T12:30:56.275375Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.316955Z", "completed_at": "2025-05-21T12:30:56.316966Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.2185535430908203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_event", "compiled": true, "compiled_code": "select id,\n        name,\n        settingsid as settings_id,\n        dialogDelivered as dialog_delivered,\n        deviceType as device_type,\n        createdAt as created_at,\n        _ibk,\n        wazzupId as wazzup_id\nfrom `dwh-wazzup`.`widget`.`event`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_event`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.272397Z", "completed_at": "2025-05-21T12:30:56.276991Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.397208Z", "completed_at": "2025-05-21T12:30:56.397226Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2742173671722412, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_event_activation", "compiled": true, "compiled_code": "select id,\n        name,\n        wazzupId as wazzup_id,\n        settingsid as settings_id,\n        phone,\n        deviceType as device_type,\n        createdat as created_at,\n        _ibk\nfrom `dwh-wazzup`.`widget`.`event_activation`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_event_activation`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.398597Z", "completed_at": "2025-05-21T12:30:56.499196Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.502329Z", "completed_at": "2025-05-21T12:30:56.502340Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.27221226692199707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_exchangeRates", "compiled": true, "compiled_code": "select          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 - \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a \u0441 \u043a\u0443\u0440\u0441\u043e\u043c \u0432\u0430\u043b\u044e\u0442 \u043d\u0430 \u043a\u0430\u0436\u0434\u0443\u044e \u0434\u0430\u0442\u0443\n    data,               -- \u0414\u0430\u0442\u0430\n    currency,           -- \u0412\u0430\u043b\u044e\u0442\u0430\n    _ibk,               -- \u0414\u0430\u0442\u0430. _ibk \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 BigQuery\n    (case when _ibk='2024-03-14' and nominal='RUR' and currency='KZT' then 0.203750\n        when _ibk='2024-03-14' and nominal='RUR' and currency='USD' then 91.5449    \n        when _ibk='2024-03-14' and nominal='RUR' and currency='EUR' then 100.1869\n        when _ibk='2024-03-15' and nominal='RUR' and currency='KZT' then 0.203685\n        when _ibk='2024-03-15' and nominal='RUR' and currency='USD' then 91.6359\n        when _ibk='2024-03-15' and nominal='RUR' and currency='EUR' then 100.2625\n        when _ibk='2024-03-16' and nominal='RUR' and currency='KZT' then 0.204537\n        when _ibk='2024-03-16' and nominal='RUR' and currency='USD' then 91.87\n        when _ibk='2024-03-16' and nominal='RUR' and currency='EUR' then 99.9718\n        when _ibk='2024-03-17' and nominal='RUR' and currency='KZT' then 0.204537\n        when _ibk='2024-03-17' and nominal='RUR' and currency='USD' then 91.87\n        when _ibk='2024-03-17' and nominal='RUR' and currency='EUR' then 99.9718\n        when _ibk='2024-03-18' and nominal='RUR' and currency='KZT' then 0.204537\n        when _ibk='2024-03-18' and nominal='RUR' and currency='USD' then 91.87\n        when _ibk='2024-03-18' and nominal='RUR' and currency='EUR' then 99.9718\n        else cor_rate -- \u0423 \u043d\u0430\u0441 \u043d\u0435 \u043c\u0435\u043d\u044f\u043b\u0441\u044f \u043a\u0443\u0440\u0441 \u0441  14 \u043f\u043e 18 \u043c\u0430\u0440\u0442\u0430 2024 , \u0438\u0437-\u0437\u0430 \u044d\u0442\u043e\u0433\u043e \u0431\u044b\u043b\u043e \u0440\u0430\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0441 1\u0441 https://wazzup.planfix.ru/task/1187688\n    end) as cor_rate,           -- \u041a\u0443\u0440\u0441 \u0432\u0430\u043b\u044e\u0442\u044b. \u0415\u0441\u043b\u0438 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0434\u0435\u043d\u044c \u043a\u0443\u0440\u0441 null, \u0442\u043e \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 not null \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n    nominal                     -- \u041d\u043e\u043c\u0438\u043d\u0430\u043b \u0432\u0430\u043b\u044e\u0442\u044b. \u0415\u0441\u043b\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 currency = 'EUR', \u0430 nominal = 'RUR', \u044d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043c\u044b \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u043e\u0438\u0442 1 \u0435\u0432\u0440\u043e \u043d\u0430 \u0434\u0430\u0442\u0443.\nfrom `dwh-wazzup`.`wazzup`.`exchangeRates`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_exchangeRates`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.503749Z", "completed_at": "2025-05-21T12:30:56.552863Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.557040Z", "completed_at": "2025-05-21T12:30:56.557050Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.10020804405212402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_gate_channels", "compiled": true, "compiled_code": "select \n        subscription_id, -- \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u0430\u043d\u0430\u043b\u0430 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 wazzup.channels\n        channel_id --application_guid \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 wabaTransaction_gupshup\nfrom `dwh-wazzup`.`wazzup`.`gate_channels`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_gate_channels`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.506254Z", "completed_at": "2025-05-21T12:30:56.554115Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.558466Z", "completed_at": "2025-05-21T12:30:56.558476Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.13889765739440918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_google_ads", "compiled": true, "compiled_code": "SELECT *\nFROM `dwh-wazzup`.`wazzup`.`ads_AccountStats_3710513680`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_google_ads`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.547884Z", "completed_at": "2025-05-21T12:30:56.556423Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.559021Z", "completed_at": "2025-05-21T12:30:56.559030Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.17696857452392578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_inner_event", "compiled": true, "compiled_code": "select id,\n        _ibk,\n        createdAt as created_at,\n        userid as user_id,\n        other_text,\n        duration,\n        sum,\n        order_id,\n        details,\n        name\nfrom `dwh-wazzup`.`widget`.`inner_event`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_inner_event`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.550402Z", "completed_at": "2025-05-21T12:30:56.557529Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.598724Z", "completed_at": "2025-05-21T12:30:56.598734Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.21564364433288574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_integrations", "compiled": true, "compiled_code": "select          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043f\u043e \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\u043c. \u0425\u0440\u0430\u043d\u0438\u044f\u0442\u0441\u044f \u0432\u0441\u044f \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439\n    guid as integration_id,         -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438. \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f Postgres \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0437\u0430\u043f\u0438\u0441\u0438\n    accountid as account_id,        -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n    type as integration_type,       -- \u0422\u0438\u043f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    state,                          -- \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0432 wazzup_staging.yml\n    domain,                         -- \u0414\u043e\u043c\u0435\u043d \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    json_value(params,'$.marketplaceType') as marketplace_type,         -- \u0422\u0438\u043f api_v3 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0438\u0437 \u043c\u0430\u0440\u043a\u0435\u0442\u043f\u043b\u0435\u0439\u0441\u0430\n    apiKey as api_key,              -- Api \u043a\u043b\u044e\u0447 \u0434\u043b\u044f api_v3, megaplan, planfix \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439, \u0432 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f\n    scopeid as scope_id,            -- \u0421\u0442\u0430\u0440\u044b\u0439 scopeId \u0434\u043b\u044f \u0447\u0430\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u0434\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432, \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u0442\u0430\u0440\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\u043c\u0438\n    disabledto as disabled_to,      -- \u0415\u0441\u043b\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0432 state 'paused', \u0442\u0443\u0442 \u0431\u0443\u0434\u0435\u0442 \u0432\u0440\u0435\u043c\u044f, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0435\u0451 \u043d\u0443\u0436\u043d\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0432 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\n    datetime(cast(createdAt as TIMESTAMP),'Europe/Moscow') as created_at,           -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    cast(datetime(cast(createdAt as TIMESTAMP),'Europe/Moscow') as date)  as created_date,          -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    cast(deletedAt as TIMESTAMP) as deleted_at,         -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u044e\u0437\u0435\u0440\u043e\u043c\n    cast(deletedAt as date) as deleted_date,            -- \u0414\u0430\u0442\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u044e\u0437\u0435\u0440\u043e\u043c\n    cast(activatedAt as TIMESTAMP) as activated_at,     -- \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\u0445 \u0441 amo. \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u0433\u0434\u0430 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e\n    cast(activatedAt as date) as activated_date,        -- \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\u0445 \u0441 amo. \u0414\u0430\u0442\u0430 \u043a\u043e\u0433\u0434\u0430 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e\n    crmName as crm_name,                                -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 CRM. \u041f\u0438\u0448\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0441 \u043c\u0430\u0440\u043a\u0435\u0442\u043f\u043b\u0435\u0439\u0441\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439\n    coalesce(webhooksUrl, json_value(params,'$.webhooksUrl'),json_value(details,'$.api_v3.webhooksUri')) as web_hooks_url,  -- \u0410\u0434\u0440\u0435\u0441 \u0434\u043b\u044f \u0432\u0435\u0431\u0445\u0443\u043a\u043e\u0432 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 api_v2\n    _ibk,           -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 BigQuery\n    newOptions as new_options,          -- \u041e\u0431\u044a\u0435\u043a\u0442 \u0441 \u043e\u043f\u0446\u0438\u044f\u043c\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0432 wazzup_staging.yml\n    details,                            -- \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0432 wazzup_staging.yml\n    \n    cast((case \n        when deletedAt is not null then deletedAt\n        when lag( createdAt  ,1) over (partition by accountId order by createdAt  DESC) is null then  CURRENT_TIMESTAMP()\n        else lag( cast(createdAt as TIMESTAMP)  ,1) over (partition by accountId order by createdAt  DESC) \n        end) \n    as date) as integration_end_date                --\u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\nfrom `dwh-wazzup`.`wazzup`.`integrations`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_integrations`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.554858Z", "completed_at": "2025-05-21T12:30:56.598100Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.678478Z", "completed_at": "2025-05-21T12:30:56.678490Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.25631141662597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_minIncomingMessage", "compiled": true, "compiled_code": "select                                 -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u0433\u0434\u0430 \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0431\u044b\u043b\u043e \u043f\u0435\u0440\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\nf0_ as min_messages_at,                         -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\ncast(f0_ as date) as min_message_date,          -- \u0414\u0430\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\naccountId as account_id                         -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nfrom `dwh-wazzup`.`wazzup`.`minIncomingMessage`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_minIncomingMessage`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.717923Z", "completed_at": "2025-05-21T12:30:56.762034Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.764982Z", "completed_at": "2025-05-21T12:30:56.764991Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.254230260848999, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_months", "compiled": true, "compiled_code": "SELECT          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044c \u0441 \u043c\u0435\u0441\u044f\u0446\u0430\u043c\u0438\n    month                   -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u0435\u0441\u044f\u0446\u0430\nFROM `dwh-wazzup`.`analytics_tech`.`months`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_months`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.765905Z", "completed_at": "2025-05-21T12:30:56.816067Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.822647Z", "completed_at": "2025-05-21T12:30:56.822657Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.14262819290161133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_payment", "compiled": true, "compiled_code": "select id,\n        _ibk,\n        createdat as created_at,\n        userid as user_id,\n        subscriptionPlanid as subscription_plan_id,\n        orderId as order_id,\n        status\nfrom `dwh-wazzup`.`widget`.`payment`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_payment`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.768616Z", "completed_at": "2025-05-21T12:30:56.820147Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.824049Z", "completed_at": "2025-05-21T12:30:56.824057Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.1420760154724121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_payments_bank", "compiled": true, "compiled_code": "select          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0432 \u041b\u041a\n    accountId as account_id,            -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n    _ibk as paid_date,                  -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f\n    currency,                           -- \u0412\u0430\u043b\u044e\u0442\u0430\n    sumInRubles as sum_in_rubles,       -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445. \u0414\u043e 12 \u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043e \u0437\u0430\u043f\u044f\u0442\u043e\u0439, 2 \u043f\u043e\u0441\u043b\u0435.\n    sum as original_sum,                -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b. \u0414\u043e 12 \u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043e \u0437\u0430\u043f\u044f\u0442\u043e\u0439, 2 \u043f\u043e\u0441\u043b\u0435.\n    guid,                               -- \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 guid \u0438\u043b\u0438 null. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0432 wazzup_staging_payments.yml\n    object,                             -- \u0422\u0438\u043f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    method,                             -- C\u043f\u043e\u0441\u043e\u0431 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    details                             -- JSON \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0432 wazzup_staging_payments.yml\nfrom `dwh-wazzup`.`wazzup`.`billingAffiliate`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_payments_bank`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.812836Z", "completed_at": "2025-05-21T12:30:56.822142Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.824750Z", "completed_at": "2025-05-21T12:30:56.824759Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.18006396293640137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_payments_bills", "compiled": true, "compiled_code": "select          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u0447\u0435\u0442\u043e\u0432\n    accountId as account_id,                -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n    coalesce((case when paymentDate='1970-01-01' then cast(null as date) else paymentDate end),cast(updatedAt as date)) paid_date,  -- \u0414\u0430\u0442\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0430 (\u043e\u0442 \u0431\u0430\u043d\u043a\u0430). \u0415\u0441\u043b\u0438 \u043e\u043d\u0430 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442, \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u0434\u0430\u0442\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0447\u0435\u0442\u0430, \u0444\u043e\u0440\u043c\u0430\u0442 2022-11-29\n    (case when id=10807 then  cast('2022-05-09' as timestamp)       -- *\u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432*\n    when id=10118 then  cast('2022-05-09' as timestamp)\n    else paidInWazzupAt\n    end\n    ) as paid_in_wazzup_at,         \n    completedAt as completed_at,                            -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u0441\u0447\u0435\u0442\u0430\n    'RUR' as currency,                                      -- \u0412\u0430\u043b\u044e\u0442\u0430 (\u0412\u0435\u0437\u0434\u0435 \u0440\u0443\u0431\u043b\u0438)\n    (case when id=88070 then 8100               -- *\u044d\u0442\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u0435\u043b\u0430\u043b\u0438\u0441\u044c \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043f\u0440\u0430\u0432\u043e\u043a \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u0432 \u044f\u043d\u0432\u0430\u0440\u0435 https://wazzup.planfix.ru/task/1105536* \n    when id=88060 then 9000\n    when id=88099 then 8100\n    when id=87628 then 10530\n    else sum                                              \n    end)\n    as sum_in_rubles,                                           -- \u0421\u0443\u043c\u043c\u0430 \u0441\u0447\u0435\u0442\u0430. \u042d\u0442\u043e \u043f\u043e\u043b\u0435 sum \u0438\u0437 wazzup.biils. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0445 \u0440\u0430\u0441\u0447\u0435\u0442\u0430\u0445, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043e \u043d\u0430 sum_in_rubles/original_sum\n    (case when id=88070 then 8100                -- *\u044d\u0442\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u0435\u043b\u0430\u043b\u0438\u0441\u044c \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043f\u0440\u0430\u0432\u043e\u043a \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u0432 \u044f\u043d\u0432\u0430\u0440\u0435 https://wazzup.planfix.ru/task/1105536*\n    when id=88060 then 9000\n    when id=88099 then 8100\n    when id=87628 then 10530\n    else sum \n    end) as original_sum,                                       -- \u0421\u0443\u043c\u043c\u0430 \u0441\u0447\u0435\u0442\u0430. \u042d\u0442\u043e \u043f\u043e\u043b\u0435 sum \u0438\u0437 wazzup.biils. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0445 \u0440\u0430\u0441\u0447\u0435\u0442\u0430\u0445, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043e \u043d\u0430 sum_in_rubles/original_sum\n    cast(id as STRING) as guid,                                 -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0447\u0435\u0442\u0430.\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f Postgress \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 string\n    packageId as subscription_id,                               -- guid \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 stg_billingPackages\n    updatedAt as updated_at,                                    -- \u0414\u0430\u0442\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0447\u0435\u0442\u0430\n    status,                                                     -- \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0441\u0447\u0435\u0442\u0430\n    details,                                                    -- \u0414\u0435\u0442\u0430\u043b\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    id                                                          -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0447\u0435\u0442\u0430.\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f Postgress \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 int\nfrom `dwh-wazzup`.`wazzup`.`bills`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_payments_bills`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.816429Z", "completed_at": "2025-05-21T12:30:56.823688Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.864943Z", "completed_at": "2025-05-21T12:30:56.864951Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.3901369571685791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_payments_old_billing", "compiled": true, "compiled_code": "select          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0431\u0438\u043b\u043b\u0438\u043d\u0433\u0430. \u041d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f. \u041d\u0443\u0436\u043d\u0430 \u0434\u043b\u044f \u0438\u0441\u0442\u043e\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n    accountId as account_id,                            -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n    dateTime(dateTime,'Europe/Moscow') as paid_at,      -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b\n    _ibk as paid_date,                                  -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    currency as currency,                               -- \u0412\u0430\u043b\u044e\u0442\u0430\n    sumInRubles as sum_in_rubles,\n    sum,\n    object,\n    method,\n    json_value(details,'$.provider') as provider, \n    details,    \n    guid,\n    --\u0434\u0432\u0435 \u043a\u043e\u0448\u043c\u0430\u0440\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u0447\u043a\u0438 \u043d\u0438\u0436\u0435 \u043e\u0431\u0443\u0441\u043b\u043e\u0432\u0435\u043d\u044b \u0442\u0435\u043c, \u0447\u0442\u043e BigQuery \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u0447\u043a\u0438 \u0441 None. \u041e\u0442\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0430\u0440\u0441\u0438\u0442\u044c json \u0434\u0430\u043b\u044c\u0448\u0435 \u043f\u043e\u0441\u043b\u0435 None\n    datetime(cast(json_value(replace(replace(replace(details, \"'name': None, \",''),\"'isFree': None,\",''),\"'changedAt': None,\",'') ,'$.paidAt') as timestamp), 'Europe/Moscow') as start_at,\n    datetime(cast(json_value(replace(replace(replace(details, \"'name': None, \",''),\"'isFree': None,\",''),\"'changedAt': None,\",'') ,'$.expiresAt') as timestamp), 'Europe/Moscow') as end_at\nfrom `dwh-wazzup`.`wazzup`.`billing`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_payments_old_billing`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.820648Z", "completed_at": "2025-05-21T12:30:56.862976Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:56.943165Z", "completed_at": "2025-05-21T12:30:56.943178Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.43407559394836426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_plan_values", "compiled": true, "compiled_code": "select Date as date,\n       Registrations as registrations,\n       RegistrationsCost as registrations_cost,\n       Budget as budget,\n       WidgetCopied as widget_copied\nfrom `dwh-wazzup`.`widget`.`widget_plan_values`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_plan_values`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:56.944607Z", "completed_at": "2025-05-21T12:30:57.204707Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:57.208647Z", "completed_at": "2025-05-21T12:30:57.208659Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.42842674255371094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_pnl", "compiled": true, "compiled_code": "SELECT   \n        PARSE_DATE('%B %Y', statyi) as month,\n        abs(cast(vyruchka AS float64)) AS vyruchka,\n        abs(cast(vyruchka_sessii AS float64)) AS vyruchka_sessii,\n        abs(cast(vyruchka_podpiski AS float64)) AS vyruchka_podpiski,\n        abs(cast(vyruchka_vozvraty AS float64)) AS vyruchka_vozvraty,\n        abs(cast(sebestoimost AS float64)) AS sebestoimost,\n        abs(cast(sebestoimost_sessii AS float64)) AS sebestoimost_sessii,\n        abs(cast(sebestoimost_podpiski AS float64)) AS sebestoimost_podpiski,\n        abs(cast(valovaya_pribyl AS float64)) AS valovaya_pribyl,\n        abs(cast(valovaya_pribyl_sessii AS float64)) AS valovaya_pribyl_sessii,\n        abs(cast(valovaya_pribyl_podpiski AS float64)) AS valovaya_pribyl_podpiski,\n        abs(cast(uslovno_peremennye_raskhody AS float64)) AS uslovno_peremennye_raskhody,\n        abs(cast(uslovno_peremennye_raskhody_sessii AS float64)) AS uslovno_peremennye_raskhody_sessii,\n        abs(cast(uslovno_peremennye_raskhody_sessii_vyplaty_partneram AS float64)) AS uslovno_peremennye_raskhody_sessii_vyplaty_partneram,\n        abs(cast(uslovno_peremennye_raskhody_sessii_komissiya_na_vyplaty_partneram AS float64)) AS uslovno_peremennye_raskhody_sessii_komissiya_na_vyplaty_partneram,\n        abs(cast(uslovno_peremennye_raskhody_sessii_ekvairing AS float64)) AS uslovno_peremennye_raskhody_sessii_ekvairing,\n        abs(cast(uslovno_peremennye_raskhody_sessii_komissiya_stripe_za_vyvod_usd AS float64)) AS uslovno_peremennye_raskhody_sessii_komissiya_stripe_za_vyvod_usd,\n        abs(cast(uslovno_peremennye_raskhody_sessii_komissiya_za_oplatu_waba AS float64)) AS uslovno_peremennye_raskhody_sessii_komissiya_za_oplatu_waba,\n        abs(cast(uslovno_peremennye_raskhody_sessii_raskhody_na_konversatsiyu_valyuty AS float64)) AS uslovno_peremennye_raskhody_sessii_raskhody_na_konversatsiyu_valyuty,\n        abs(cast(uslovno_peremennye_raskhody_sessii_vat AS float64)) AS uslovno_peremennye_raskhody_sessii_vat,\n        abs(cast(uslovno_peremennye_raskhody_podpiski AS float64)) AS uslovno_peremennye_raskhody_podpiski,\n        abs(cast(uslovno_peremennye_raskhody_podpiski_infrastruktura AS float64)) AS uslovno_peremennye_raskhody_podpiski_infrastruktura,\n        abs(cast(uslovno_peremennye_raskhody_podpiski_raskhody_na_reklamu AS float64)) AS uslovno_peremennye_raskhody_podpiski_raskhody_na_reklamu,\n        abs(cast(uslovno_peremennye_raskhody_podpiski_raskhody_na_uchastie_v_konferentsiyakh AS float64)) AS uslovno_peremennye_raskhody_podpiski_raskhody_na_uchastie_v_konferentsiyakh,\n        abs(cast(uslovno_peremennye_raskhody_podpiski_vyplaty_partneram AS float64)) AS uslovno_peremennye_raskhody_podpiski_vyplaty_partneram,\n        abs(cast(uslovno_peremennye_raskhody_podpiski_komissiya_na_vyplaty_partneram AS float64)) AS uslovno_peremennye_raskhody_podpiski_komissiya_na_vyplaty_partneram,\n        abs(cast(uslovno_peremennye_raskhody_podpiski_ekvairing AS float64)) AS uslovno_peremennye_raskhody_podpiski_ekvairing,\n        abs(cast(uslovno_peremennye_raskhody_podpiski_komissiya_stripe_za_vyvod_usd AS float64)) AS uslovno_peremennye_raskhody_podpiski_komissiya_stripe_za_vyvod_usd,\n        abs(cast(uslovno_peremennye_raskhody_podpiski_raskhody_na_konversatsiyu_valyuty AS float64)) AS uslovno_peremennye_raskhody_podpiski_raskhody_na_konversatsiyu_valyuty,\n        abs(cast(uslovno_peremennye_raskhody_podpiski_vat AS float64)) AS uslovno_peremennye_raskhody_podpiski_vat,\n        abs(cast(marzhinalnaya_pribyl AS float64)) AS marzhinalnaya_pribyl,\n        abs(cast(marzhinalnaya_pribyl_sessii AS float64)) AS marzhinalnaya_pribyl_sessii,\n        abs(cast(marzhinalnaya_pribyl_podpiski AS float64)) AS marzhinalnaya_pribyl_podpiski\nFROM `dwh-wazzup`.`wazzup`.`pnl`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_pnl`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:57.210757Z", "completed_at": "2025-05-21T12:30:57.258356Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:57.262527Z", "completed_at": "2025-05-21T12:30:57.262538Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.10115504264831543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_postpay_test_accounts", "compiled": true, "compiled_code": "SELECT          -- \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u043c\u0438 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432 \u043f\u043e\u0441\u0442\u043e\u043f\u043b\u0430\u0442\u043d\u0438\u043a\u043e\u0432. \u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u0432 \u0433\u0443\u0433\u043b \u0448\u0438\u0442\u0435 https://docs.google.com/spreadsheets/d/1asPlgy2CWnaTFYgDN6YHsbd2qcah8KNmdBMAxf4UZIs/edit?gid=0#gid=0\n    partner_id,             -- Id \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    test_account_id         -- Id \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nFROM `dwh-wazzup`.`google_sheets`.`postpay_test_account_scheduled`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_postpay_test_accounts`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:57.254384Z", "completed_at": "2025-05-21T12:30:57.261403Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:57.264181Z", "completed_at": "2025-05-21T12:30:57.264190Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1379375457763672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_ratings", "compiled": true, "compiled_code": "select          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438 \u0438 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 Wazzup\n    guid,               -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0442\u0437\u044b\u0432\u0430. \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f Postgres \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0437\u0430\u043f\u0438\u0441\u0438\n    account_id,         -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n    rating,             -- \u0420\u0435\u0439\u0442\u0438\u043d\u0433. \u041e\u0442 1 \u0434\u043e 10\n    text,               -- \u0422\u0435\u043a\u0441\u0442 \u043e\u0442\u0437\u044b\u0432\u0430 \n    created_at,         -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0431\u044b\u043b\u0430 \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043e\u0446\u0435\u043d\u043a\u0430\n    _ibk,               -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 BigQuery\n    row_number() over (partition by account_id, _ibk order by created_at desc) as rn        -- \u041f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440. \u0427\u0435\u043c \u0432\u044b\u0448\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0442\u0435\u043c \u0440\u0430\u043d\u044c\u0448\u0435 \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d \u043e\u0442\u0437\u044b\u0432. \n\n from `dwh-wazzup`.`wazzup`.`ratings`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_ratings`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:57.252473Z", "completed_at": "2025-05-21T12:30:57.261776Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:57.264675Z", "completed_at": "2025-05-21T12:30:57.264683Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.1779029369354248, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_postpay_waba_revenue_gs", "compiled": true, "compiled_code": "SELECT\n    account_id,\n    PARSE_DATE('%d.%m.%Y', month)                          AS paid_date,\n    currency,\n    COALESCE(CAST(REPLACE(waba_sum, ' ', '') AS int), 0)   AS waba_sum_in_rubles\nFROM `dwh-wazzup`.`google_sheets`.`postpay_paying`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_postpay_waba_revenue_gs`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:57.256785Z", "completed_at": "2025-05-21T12:30:57.263067Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:57.303112Z", "completed_at": "2025-05-21T12:30:57.303133Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.21413373947143555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_settings", "compiled": true, "compiled_code": "select id,\n        whatsappNumber as whatsapp_number,\n        whatsappGreetingMessage as whatsapp_greeting_message,\n        userId as user_id,\n        _ibk,\n        createdat as created_at,\n        updatedAt as updated_at,\n        appendWazzupId as append_wazzup_id,\n        whatsappenabled as whatsapp_enabled,\n        telegramEnabled as telegram_enabled,\n        telegramusername as telegram_username,\n        name,\n        hidden\nfrom `dwh-wazzup`.`widget`.`settings`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_settings`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:57.259708Z", "completed_at": "2025-05-21T12:30:57.343127Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:57.425617Z", "completed_at": "2025-05-21T12:30:57.425628Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2575833797454834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_sites_data", "compiled": true, "compiled_code": "select *, \n    replace(\n        replace(replace(replace(usermobile, '+', ''), '-', ''), ')', ''), '(', ''\n    ) as phone from `dwh-wazzup`.`mongo_db`.`df_events`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_sites_data`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:57.423684Z", "completed_at": "2025-05-21T12:30:57.469626Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:57.472527Z", "completed_at": "2025-05-21T12:30:57.472536Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.25414228439331055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_statistics_setup_event", "compiled": true, "compiled_code": "select id,\n        _ibk,\n        createdAt as created_at,\n        updatedAt as updated_at,\n        domain,\n        widgetOwnerKey as widget_owner_key,\n        referrer,\n        widgetownerid as widget_owner_id,\n        widgetsettingsid as widget_settings_id\nfrom `dwh-wazzup`.`widget`.`statistics_setup_event`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_statistics_setup_event`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:57.478028Z", "completed_at": "2025-05-21T12:30:57.520930Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:57.524320Z", "completed_at": "2025-05-21T12:30:57.524329Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.0968475341796875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_subscription_plan", "compiled": true, "compiled_code": "select id,\n        planname as plan_name,\n        features,\n        duration,\n        unit,\n        _ibk,\n        createdat as created_at,\n        updatedat as updated_at,\n        amount\nfrom `dwh-wazzup`.`widget`.`subscription_plan`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_subscription_plan`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:57.475863Z", "completed_at": "2025-05-21T12:30:57.521676Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:57.525915Z", "completed_at": "2025-05-21T12:30:57.525924Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.13782525062561035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_subscriptionUpdates", "compiled": true, "compiled_code": "select          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a\n    guid,               -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f.\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f Postgress \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0437\u0430\u043f\u0438\u0441\u0438\n    subscriptionId as subscription_id,                          -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438.\u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u043e\u043b\u044e guid \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_billingPackages\n    activationReasonId as activation_reason_id,                 -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u0430 \u0434\u043e\u0447\u043a\u0430. null - \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0431\u0435\u0437 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    activationObject as activation_object,                      -- id/guid \u0437\u0430\u043f\u0438\u0441\u0438, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u044b\u043b\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u043e(\u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043e) \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0432 wazzup_staging.yml \n    balanceToWithdraw as balance_to_withdraw,                   -- \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0439 \u043e\u043f\u043b\u0430\u0442\u044b \u043a\u043e\u043b-\u0432\u043e \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0434\u043b\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    wapi_transactions as wapi_transactions,                     -- C\u0443\u043c\u043c\u0430 \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043f\u043e\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0412\u0410\u0411\u0410 \u0431\u0430\u043b\u0430\u043d\u0441\n    datetime(createdAt,'Europe/Moscow') as created_at,          -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n    datetime(updatedAt,'Europe/Moscow') as updated_at,          -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f (\u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0442\u0443\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 createdAt \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432)\n    cast(updatedAt as DATE) as updated_date,                    -- \u0414\u0430\u0442\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f (\u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0442\u0443\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 createdAt \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432)\n    sum as sum,                                                 -- \u0421\u0443\u043c\u043c\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0431\u0435\u0437 \u0443\u0447\u0435\u0442\u0430 \u0441\u043a\u0438\u0434\u043e\u043a\n    _ibk as created_date,                                       -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n    currency,                                                   -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438,\n    state,                                                      -- \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    json_value(data,'$.action') as action,                      -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435\n    cast(json_value(logs,'$.promotionType') as INTEGER) as promotion_type,      -- Id \u0430\u043a\u0446\u0438\u0438, \u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u043b\u0438 \u043f\u043e \u0430\u043a\u0446\u0438\u0438\n    json_value(logs,'$.period') as old_period,                  -- \u041f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    json_value(logs,'$.quantity') as old_quantity,              -- \u041a\u043e\u043b-\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    json_value(logs,'$.tariff') as old_tariff,                  -- \u0422\u0430\u0440\u0438\u0444 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    cast(json_value(data,'$.forAutoRenewal') as bool) as for_auto_renewal,      -- \u041f\u0440\u0438\u0437\u043d\u0430\u043a \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u043e\u0435 \u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0434\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \n    coalesce(json_value(logs,'$.newPeriod'),json_value(logs,'$.period')) as period,             -- \u041d\u043e\u0432\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    coalesce(json_value(logs,'$.newQuantity'),json_value(logs,'$.quantity')) as quantity,       -- \u041d\u043e\u0432\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432\n    coalesce(json_value(logs,'$.newTariff'),json_value(logs,'$.tariff')) as tariff,             -- \u041d\u043e\u0432\u044b\u0439 \u0442\u0430\u0440\u0438\u0444 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    cast(json_value(logs,'$.untilExpiredDays') as INTEGER) as until_expired_days,               -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u0434\u043e \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    cast(json_value(logs,'$.newUntilExpiredDays') as INTEGER) as new_until_expired_days,        -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u0434\u043e \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    cast(json_value(logs,'$.partnerDiscount') as numeric) as partner_discount                   -- % \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u043e\u0439 \u0441\u043a\u0438\u0434\u043a\u0438 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\nfrom `dwh-wazzup`.`wazzup`.`subscriptionUpdates`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:57.473384Z", "completed_at": "2025-05-21T12:30:57.522114Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:57.526558Z", "completed_at": "2025-05-21T12:30:57.526567Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.21796846389770508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_subscription", "compiled": true, "compiled_code": "select id,\n        paymentDate as payment_date,\n        _ibk,\n        dueDate as due_date,\n        userid as user_id,\n        subscriptionPlanid as subscription_plan_id\nfrom `dwh-wazzup`.`widget`.`subscription`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_subscription`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:57.518313Z", "completed_at": "2025-05-21T12:30:57.524996Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:57.566783Z", "completed_at": "2025-05-21T12:30:57.566795Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.21618008613586426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_template_visitors", "compiled": true, "compiled_code": "SELECT \n    localUserId, \n    regexp_extract(url,r'https:\\/\\/([\\w-]+).') as url,\n    datetime as datetime,\n    date(datetime) as date,\n    cmuserid\nFROM `dwh-wazzup`.`mongo_db`.`df_events`\nwhere event='visitka-enter'", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_template_visitors`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:57.522661Z", "completed_at": "2025-05-21T12:30:57.565286Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:57.646880Z", "completed_at": "2025-05-21T12:30:57.646893Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.25562453269958496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_unique_chats", "compiled": true, "compiled_code": "SELECT          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u0432\n    channelId as channel_id,        -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u0430\u043d\u0430\u043b\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u0435\u0442 guid \u0438\u0437 stg_channels\n    _ibk as date,                   -- \u0414\u0430\u0442\u0430 \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u0432\n    uniqueChats as unique_chats     -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u0432\nFROM `dwh-wazzup`.`wazzup`.`uniqueChats_aggregated`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_unique_chats`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:57.686990Z", "completed_at": "2025-05-21T12:30:57.734057Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:57.737206Z", "completed_at": "2025-05-21T12:30:57.737218Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2582840919494629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_user", "compiled": true, "compiled_code": "select id,\n        username,\n        telegram_username,\n        phone,\n        paymentMethodId as payment_method_id,\n        utm_source,\n        deviceTypes as device_types,\n        utm_campaign,\n        initRefferer,\n        utm_term,\n        utm_content,\n        utm_medium,\n        qualification,\n        token,\n        password,\n        password_salt,\n        email,\n        telegram_profile,\n        _ibk,\n        createdat as created_at,\n        updatedat as updated_at\nfrom `dwh-wazzup`.`widget`.`user`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_user`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:57.738638Z", "completed_at": "2025-05-21T12:30:57.789004Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:57.793299Z", "completed_at": "2025-05-21T12:30:57.793309Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.10285258293151855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_users", "compiled": true, "compiled_code": "SELECT          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0437\u0430\u043f\u0438\u0441\u044c \u0432 accounts \u0438 \u0432 users. \u0423 \u043e\u0434\u043d\u043e\u0433\u043e user \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c(\u0443 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432)\n    phone,              -- \u0422\u0435\u043b\u0435\u0444\u043e\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n    email,              -- \u0410\u0434\u0440\u0435\u0441 \u043f\u043e\u0447\u0442\u043e\u0432\u043e\u0433\u043e \u044f\u0449\u0438\u043a\u0430, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. \u0414\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u0435\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n    name                -- \u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0437\u0430\u0434\u0430\u0451\u0442\u0441\u044f \u0441\u0430\u043c\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c\nFROM  `dwh-wazzup`.`wazzup`.`users`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_users`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:57.741070Z", "completed_at": "2025-05-21T12:30:57.792047Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:57.794883Z", "completed_at": "2025-05-21T12:30:57.794892Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.14153838157653809, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_waba_channels_details", "compiled": true, "compiled_code": "select          -- \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u0435 \u0434\u043b\u044f \u0432\u0430\u0431\u0430-\u043a\u0430\u043d\u0430\u043b\u043e\u0432\n    channelId as channel_id,        -- guid \u043a\u0430\u043d\u0430\u043b\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 stg_channels\n    wabaid as waba_id,              -- id waba\n    fbAppDbHost fb_app_db_host,     -- \u0421\u043b\u0443\u0436\u0435\u0431\u043d\u043e\u0435 \u043f\u043e\u043b\u0435 \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0445\u0440\u0430\u043d\u0438\u043c \u043c\u0430\u0440\u043a\u0435\u0440 \u0432 \u043a\u0430\u043a\u043e\u0439 \u0411\u0414 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e \u0424\u0411\n    disabledAt as disabled_at,      -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u0430\u043d\u0430\u043b\u0430\n    tier                            -- \u0422\u0438\u0440 \u043a\u0430\u043d\u0430\u043b\u0430\nfrom `dwh-wazzup`.`wazzup`.`wabaChannelsDetails`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_waba_channels_details`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:57.784350Z", "completed_at": "2025-05-21T12:30:57.792743Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:57.795332Z", "completed_at": "2025-05-21T12:30:57.795341Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.1799318790435791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_waba_subscription_gupshup", "compiled": true, "compiled_code": "SELECT  id           --ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        , balance    --\u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        , currency   --\u0432\u0430\u043b\u044e\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        , created_at --\u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        , deleted_at --\u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        , _ibk       --\u0434\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nFROM `dwh-wazzup`.`wazzup`.`waba_subscription_gupshup`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_waba_subscription_gupshup`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:57.787483Z", "completed_at": "2025-05-21T12:30:57.793848Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:57.835073Z", "completed_at": "2025-05-21T12:30:57.835086Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.2196180820465088, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_weeks", "compiled": true, "compiled_code": "SELECT          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044c \u0441 \u043d\u0435\u0434\u0435\u043b\u044f\u043c\u0438 (\u0434\u0435\u043d\u044c \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0435\u0434\u0435\u043b\u0438 - \u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a)\n    week                    -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0435\u0434\u0435\u043b\u0438\nFROM `dwh-wazzup`.`analytics_tech`.`weeks`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_weeks`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:57.790471Z", "completed_at": "2025-05-21T12:30:57.795830Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:57.915553Z", "completed_at": "2025-05-21T12:30:57.915570Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.26610779762268066, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_yandex_direct", "compiled": true, "compiled_code": "SELECT    -- \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441 \u044f\u043d\u0434\u0435\u043a\u0441 \u0434\u0438\u0440\u0435\u043a\u0442\u0430\n          cast(date AS date) date                       -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u0430\u044f \u0434\u0430\u0442\u0430\n        , CAST(campaignid AS STRING) AS utm_campaign    -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM campaign \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\n        , CampaignName as campaign_name                 -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u043a\u043b\u0430\u043c\u044b\n        , impressions                                   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043a\u0430\u0437\u043e\u0432\n        , clicks                                        -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0438\u043a\u043e\u0432\n        , COST                                          -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\nFROM `dwh-wazzup`.`wazzup`.`yandex_direct`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_yandex_direct`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:57.956810Z", "completed_at": "2025-05-21T12:30:58.008914Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.012314Z", "completed_at": "2025-05-21T12:30:58.012330Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.26452064514160156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_yandex_direct_", "compiled": true, "compiled_code": "select campaignname as campaign_name,\n        campaignid as campaign_id,\n        impressions,\n        clicks,\n        cost,\n        bounces,\n        sessions,\n        ctr,\n        type,\n        goal,\n        campaignType as campaign_type,\n        date,\n        registrations as registrations_plan,\n        conversioncost as conversion_cost_plan,\n        budget,\n        widgetcopied as widget_copied,\n        direct_regs_count,\n        direct_copies_count,\n        conversions_count,\n        conversion_rate,\n        conversion_cost\nfrom `dwh-wazzup`.`widget`.`yandex_direct`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_yandex_direct_`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.060558Z", "completed_at": "2025-05-21T12:30:58.061198Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.065587Z", "completed_at": "2025-05-21T12:30:58.065598Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.0969696044921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.Profeat_site.test_cmuserid", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.013400Z", "completed_at": "2025-05-21T12:30:58.061966Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.066144Z", "completed_at": "2025-05-21T12:30:58.066153Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.1414341926574707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_yandex_metrika_data", "compiled": true, "compiled_code": "select *    -- \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0441 \u044f\u043d\u0434\u0435\u043a\u0441 \u043c\u0435\u0442\u0440\u0438\u043a\u0438\nFROM `dwh-wazzup`.`wazzup`.`yandex_metrika_data`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_yandex_metrika_data`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.016081Z", "completed_at": "2025-05-21T12:30:58.063499Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.067623Z", "completed_at": "2025-05-21T12:30:58.067631Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.17926621437072754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_yandex_metrika_visits", "compiled": true, "compiled_code": "select *\nfrom `dwh-wazzup`.`widget`.`yandex_metrika_visits`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_yandex_metrika_visits`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.017705Z", "completed_at": "2025-05-21T12:30:58.063953Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.068081Z", "completed_at": "2025-05-21T12:30:58.068092Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.21794438362121582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.Profeat_site.Profeat_site-on-run-start-0", "compiled": true, "compiled_code": "\nCREATE OR REPLACE FUNCTION dbt_nbespalov.good_balance(x array<FLOAT64>, transaction_type array<string>, subscription_update_id array<string>)\n  returns array<struct<good_balance_spent float64, subscription_update_id string>>\n  LANGUAGE js AS \"\"\"\n  output = []; good_balance_current=0;\n  for(i = 0; i < x.length; i++){\n    a = {};\n    if (transaction_type[i]  == 'good_balance') {\n      good_balance_current+=x[i]\n      a.good_balance=good_balance_current\n      a.good_balance_spent=0\n      output.push(a)\n  }\n   else if (transaction_type[i]  == 'bad_balance') {\n      a.good_balance=good_balance_current\n      a.good_balance_spent=0\n      a.transaction_type=transaction_type[i]\n      output.push(a)\n  } \n else if (transaction_type[i]  == 'subscription') {\n  if (good_balance_current>0 & x[i]<=good_balance_current){\n      good_balance_current -= x[i]\n      a.good_balance_spent=x[i]\n      a.subscription_update_id=subscription_update_id[i]\n      output.push(a)\n  }\n else if (good_balance_current>0 & x[i]>=good_balance_current){\n      a.good_balance_spent=good_balance_current\n      a.subscription_update_id=subscription_update_id[i]\n      good_balance_current = 0\n      \n      output.push(a)\n  }\n }\n  else {\n     a.good_balance=good_balance_current\n     a.subscription_update_id=subscription_update_id[i]\n     output.push(a)\n  }\n\n}\n\n  \n  return output;\n\"\"\";\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.064328Z", "completed_at": "2025-05-21T12:30:58.064872Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.068609Z", "completed_at": "2025-05-21T12:30:58.068619Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.25296759605407715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.Profeat_site.test_phones", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.268092Z", "completed_at": "2025-05-21T12:30:58.268877Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.272578Z", "completed_at": "2025-05-21T12:30:58.272589Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.24645781517028809, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.Profeat_site.wazzup_test_accounts", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.315966Z", "completed_at": "2025-05-21T12:30:58.316544Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.327310Z", "completed_at": "2025-05-21T12:30:58.327323Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.09728407859802246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.Profeat_site.widget_test_phones", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.317053Z", "completed_at": "2025-05-21T12:30:58.328813Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.370664Z", "completed_at": "2025-05-21T12:30:58.370675Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.14295530319213867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_telegram_notifications_dynamics", "compiled": true, "compiled_code": "with\n    partitions_notifications as (\n        select\n            account_id,             -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n            occured_at,             \n            admin_id,               -- ID \u0430\u0434\u043c\u0438\u043d\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n            is_any_notification_on, -- \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u043b\u0438 \u043b\u044e\u0431\u044b\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f\n            (\n                case\n                    when\n                        lag(is_any_notification_on) over (\n                            partition by account_id, admin_id order by occured_at desc\n                        )\n                        != is_any_notification_on\n                    then 1\n                    else 0\n                end\n            ) as partition_number\n\n        from `dwh-wazzup`.`dbt_nbespalov`.`stg_account_events__telegram_notifications`\n    ),\n\n    partition_rolling as (\n\n        select\n            *,\n            sum(partition_number) over (\n                partition by account_id, admin_id order by occured_at desc\n            ) as partition_number_rolling\n        from partitions_notifications\n    ),\n\n    partition_groupped as (\n\n        select\n            account_id,\n            admin_id,\n            is_any_notification_on,\n            partition_number_rolling,\n            min(occured_at) as partition_min    -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439\n        from partition_rolling\n\n        group by 1, 2, 3, 4\n    ),\n\n    partition_end as (\n\n        select\n            *,\n            coalesce(\n                lag(partition_min) over (\n                    partition by account_id, admin_id order by partition_min desc\n                ),\n                current_date\n            ) as partition_end_at   -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439. \u0418\u043b\u0438 \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u044b\n        from partition_groupped\n    )\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u0435\u0440\u0438\u043e\u0434\u044b \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439 \u0432 \u043b\u0438\u0447\u043d\u043e\u043c \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0435\nselect *,\ncast(partition_min as date) as start_date,  -- \u0414\u0430\u0442\u0430 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439\ncast(partition_end_at as date) as  end_date -- \u0414\u0430\u0442\u0430 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439. \u0418\u043b\u0438 \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0434\u0430\u0442\u0430, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u044b\nfrom partition_end\nwhere is_any_notification_on", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_telegram_notifications_dynamics`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.324832Z", "completed_at": "2025-05-21T12:30:58.367400Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.371213Z", "completed_at": "2025-05-21T12:30:58.371224Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.183091402053833, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_eventLogs", "compiled": true, "compiled_code": "select  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\u043c \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043f\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e\n        accountId as account_id, -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n        userid as user_id,  -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b users\n        subjectType as subject_type,    -- 3 - \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439, 10 - \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\n        subjectId as subject_id,    -- \u043e\u0431\u044a\u0435\u043a\u0442, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f. \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 - guid \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438 \u0438\u0437 integrations, \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 guid \u0438\u0437 billingPackages\n        logType as log_type,    -- api_v1_webhook, billingPackages - \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f , \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439, save_options, amo_unsorted_del, send_api_v2-like_webhook_error, before_conv_opts_backup, integrationWarning, integrationError, amo_unsorted, integrationReconnected, amo_chat_api_msg\n        level,\n        datetime(datetime,'Europe/Moscow') as occured_at,   -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u0444\u043e\u0440\u043c\u0430\u0442 2022-11-29T19:49:52.778Z\n        state,  -- \u0410\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e \u0434\u043b\u044f log_type = billingPackages. \u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f. active - \u0430\u043a\u0442\u0438\u0432\u043d\u0430\u044f; expired - \u0438\u0441\u0442\u0435\u043a\u043b\u0430; deleted - \u0443\u0434\u0430\u043b\u0435\u043d\u0430\n        datetime(paidat,'Europe/Moscow') as paid_at,    -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u0444\u043e\u0440\u043c\u0430\u0442 2022-11-29T19:49:52.778Z\n        datetime(date_add(expiresAt,interval accounts.time_zone hour)) as expires_at,   -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0438\u0441\u0442\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u0440\u043e\u043a\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u0444\u043e\u0440\u043c\u0430\u0442 2022-11-29T19:49:52.778Z\n        _ibk,   -- \u0414\u0430\u0442\u0430, \u0444\u043e\u0440\u043c\u0430\u0442 2022-11-29. \u0421\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u043f\u043e\u043b\u0435\u043c occured_at::date. _ibk \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 BigQuery\n        eventLogs.details,  -- \u0414\u0435\u0442\u0430\u043b\u0438 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n        id, -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u043f\u0438\u0441\u0438\n        datetime(date_add(promisedPaymentStartDate,interval accounts.time_zone hour)) as promised_payment_start_date,   -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430, \u0444\u043e\u0440\u043c\u0430\u0442: 2022-11-29T19:49:52.778Z\n        cast( datetime(date_add(promisedPaymentStartDate,interval accounts.time_zone hour)) as date) as promised_payment_start,\n        datetime(date_add(promisedPaymentEndDate,interval accounts.time_zone hour)) as promised_payment_end_date,   -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043d\u0446\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430, \u0444\u043e\u0440\u043c\u0430\u0442: 2022-11-29T19:49:52.778Z\n        cast(datetime(date_add(promisedPaymentEndDate,interval accounts.time_zone hour)) as date) as promised_payment_end,\n        autoRenewal,    -- \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0434\u043b\u0435\u043d\u0438\u0435?\n        case when promisedpaymentstartdate is not null then promisedpaymentstartdate    \n             when paidAt is not null and expiresat is not null and state='deleted' then null\n             when paidAt is not null and expiresat is not null then paidat\n             when promisedpaymentenddate is not null then dateTime\n        end as start_time,  -- \u0415\u0441\u043b\u0438 \u0434\u0430\u0442\u0430 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430 is not null, \u0442\u043e \u0434\u0430\u0442\u0430 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430; \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0434\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0438 \u0434\u0430\u0442\u0430 \u0438\u0441\u0442\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u0440\u043e\u043a\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0418 \u0441\u0442\u0430\u0442\u0443\u0441 = 'deleted', \u0442\u043e null ; \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0434\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0438 \u0434\u0430\u0442\u0430 \u0438\u0441\u0442\u0435\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u0442\u043e \u0434\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 ; \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0434\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430, \u0442\u043e \u0434\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430, \u0438\u043d\u0430\u0447\u0435 null.\n\n        case when  (state!='deleted' or state is null) and promisedpaymentenddate is not null and expiresat>=promisedpaymentenddate then expiresAt \n             when  (state!='deleted' or state is null) and promisedpaymentenddate is  null then expiresat \n             when promisedpaymentenddate is not null then promisedpaymentenddate\n        end as subscription_end,    -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u0444\u043e\u0440\u043c\u0430\u0442: 2022-11-29T19:49:52.778Z\n\n        case  when state not in ('deleted') or state is null  \n              then 'subscription'\n              else 'deleted' \n        end as event,      -- \u0421\u043e\u0431\u044b\u0442\u0438\u0435 \n        promisedPaymentType as promised_payment_type    -- \u0422\u0438\u043f \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430 (\u043f\u043e\u0432\u044b\u0448\u0435\u043d\u0438\u0435 \u0442\u0430\u0440\u0438\u0444\u0430, \u043f\u0435\u0440\u0438\u043e\u0434)\nfrom `dwh-wazzup`.`wazzup`.`eventLogs` eventLogs\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts\non eventLogs.accountId=accounts.account_id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_eventLogs`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.321311Z", "completed_at": "2025-05-21T12:30:58.369254Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.372534Z", "completed_at": "2025-05-21T12:30:58.372543Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.22371816635131836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts__first_partner_and_refparent_groupped", "compiled": true, "compiled_code": "with first_partner_and_refparentid_groupped as (            -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u0435\u0440\u0432\u044b\u043c\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u043c\u0438, \u0440\u0435\u0444.\u043f\u0430\u043f\u0430\u043c\u0438 \u0438 \u0434\u0430\u0442\u043e\u0439 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0441\u0432\u044f\u0437\u0438 \u0441 \u043d\u0438\u043c\u0438\n    select \n    (case when first_value_partner_id is null then 0\n    else first_value_partner_id                         \n    end) partner_id,                                        -- \u041f\u0435\u0440\u0432\u044b\u0439 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430. \u0415\u0441\u043b\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0435 \u0431\u044b\u043b\u043e (null), \u0442\u043e \u043f\u0440\u0438\u0441\u0432\u0430\u0435\u0432\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 0\n    (case when first_value_refparent_id is null then 0\n    else first_value_refparent_id\n    end) refparent_id,                                      -- \u041f\u0435\u0440\u0432\u044b\u0439 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0440\u0435\u0444.\u043f\u0430\u043f\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430. \u0415\u0441\u043b\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0435 \u0431\u044b\u043b\u043e (null), \u0442\u043e \u043f\u0440\u0438\u0441\u0432\u0430\u0435\u0432\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 0\n    account_id,                                             -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n    first_value_occured_at as end_occured_at                -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0442\u043e \u0435\u0441\u0442\u044c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430/\u0440\u0435\u0444.\u043f\u0430\u043f\u044b\n    \n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts_events__partner_change`\n    group by 1,2,3,4)                                       -- \u0413\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0447\u0442\u043e\u0431\u044b \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n\nselect * from first_partner_and_refparentid_groupped", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts__first_partner_and_refparent_groupped`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.323324Z", "completed_at": "2025-05-21T12:30:58.370060Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.375194Z", "completed_at": "2025-05-21T12:30:58.375204Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2624080181121826, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_partners_and_tech_partners", "compiled": true, "compiled_code": "select account_id,\n       register_at,\n       country,\n       region_type,\n       currency,\n       type,\n       regEmail,\n       demo_account\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`\nwhere type in ('partner','tech-partner')", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_partners_and_tech_partners`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.373196Z", "completed_at": "2025-05-21T12:30:58.537104Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.541349Z", "completed_at": "2025-05-21T12:30:58.541359Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2559187412261963, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts__first_type", "compiled": true, "compiled_code": "select          -- \u0422\u0430\u0431\u0438\u0446\u0430 \u0441 \u043f\u0435\u0440\u0432\u044b\u043c\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e \u0442\u0438\u043f\u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    first_value_occured_at as end_occured_at,       -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    first_value_type,                               -- \u041f\u0435\u0440\u0432\u044b\u0439 \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    account_id                                      -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts_events__type_change`\ngroup by 1,2,3", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts__first_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.542425Z", "completed_at": "2025-05-21T12:30:58.587048Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.595485Z", "completed_at": "2025-05-21T12:30:58.595496Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.1801750659942627, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_affiliate_accounts_with_subscriptions", "compiled": true, "compiled_code": "select \ndistinct \nguid, \naccount_id \nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate`\nwhere object='subscription'", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_affiliate_accounts_with_subscriptions`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.587392Z", "completed_at": "2025-05-21T12:30:58.596725Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.639678Z", "completed_at": "2025-05-21T12:30:58.639691Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.14240384101867676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_lk_card_and_bank", "compiled": true, "compiled_code": "select  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f\u043c\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0432 \u041b\u041a \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 object = 'payment' \u0438 method = '('bank','card','paypal')\n    occured_date,   -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f\n    account_id,     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    currency,       -- \u0412\u0430\u043b\u044e\u0442\u0430\n    sum             -- \u0421\u0443\u043c\u043c\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f\n  from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate`\n  where object='payment' and method in ('bank','card','paypal')", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_lk_card_and_bank`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.590541Z", "completed_at": "2025-05-21T12:30:58.597328Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.640250Z", "completed_at": "2025-05-21T12:30:58.640265Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.18053078651428223, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_paid_subscription_with_transports", "compiled": true, "compiled_code": "select distinct account_Id -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billingPackages \n    where paid_At is not null\n        -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0430\u043a\u043a\u0430\u043d\u0442\u043e\u0432 \u0441 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430\u043c\u0438", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_paid_subscription_with_transports`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.592205Z", "completed_at": "2025-05-21T12:30:58.597978Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.641063Z", "completed_at": "2025-05-21T12:30:58.641075Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2169198989868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_paid_subscription_with_type_and_tariff", "compiled": true, "compiled_code": "select  account_Id ,                                                   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    string_agg(distinct concat(type, ' - ', tariff)) as type_and_tariff -- \u041a\u0430\u043d\u0430\u043b\u044b \u0438 \u0442\u0430\u0440\u0438\u0444\u044b\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billingPackages \n    where paid_At is not null and type!='equipment'\n    group by 1\n        -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0438 \u0438\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0441 \u0442\u0430\u0440\u0438\u0444\u0430\u043c\u0438", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_paid_subscription_with_type_and_tariff`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.593714Z", "completed_at": "2025-05-21T12:30:58.637112Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.641687Z", "completed_at": "2025-05-21T12:30:58.641696Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2559804916381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_subscriptions", "compiled": true, "compiled_code": "select account_id,\n\ncount(distinct case when type='whatsapp' and state='active' and paid_at is not null then guid  end) as whatsapp_active_paid,\ncount(distinct case when type='instagram' and state='active' and paid_at is not null then guid  end) as instagram_active_paid,\ncount(distinct case when type='telegram' and state='active' and paid_at is not null then guid  end) as telegram_bot_active_paid,\ncount(distinct case when type='tgapi' and state='active' and paid_at is not null then guid end) as telegram_personal_active_paid,\ncount(distinct case when type='avito'  and state='active' and paid_at is not null then guid end) as avito_active_paid,\ncount(distinct case when type='vk'  and state='active' and paid_at is not null then guid end) as vk_active_paid,\ncount(distinct case when type='whatsapp' and paid_at is not null then guid end) as whatsapp_paid,\ncount(distinct case when type='instagram' and paid_at is not null then guid end) as instagram_paid,\ncount(distinct case when type='telegram' and paid_at is not null then guid end) as telegram_bot_paid,\ncount(distinct case when type='tgapi' and paid_at is not null then guid end) as telegram_personal_paid,\ncount(distinct case when type='avito'  and paid_at is not null then guid end) as avito_paid,\ncount(distinct case when type='vk' and paid_at is not null then guid end) as vk_paid\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages`\ngroup by 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_subscriptions`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.642894Z", "completed_at": "2025-05-21T12:30:58.803123Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.806380Z", "completed_at": "2025-05-21T12:30:58.806391Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.25280308723449707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_account_administrators_and_telegram_usernames", "compiled": true, "compiled_code": "with channel_administrators as (\n                select admin_id,\n                        max(phone_unavailable_notification) as phone_unavailable_notification\n                from `dwh-wazzup`.`dbt_nbespalov`.`stg_channel_administrators`\n                group by 1\n), --\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0438, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043a \u043a\u0430\u043a\u043e\u043c\u0443-\u043d\u0438\u0431\u0443\u0434\u044c \u043e\u0434\u043d\u043e\u043c\u0443 \u043a\u0430\u043d\u0430\u043b\u0443\n\naccount_administrators as (\n    select account_id,                              -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    string_agg(username,',') as telegram_username   -- \u042e\u0437\u0435\u0440\u043d\u0435\u0439\u043c \u0432 Telegram\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_account_administrators` account_administrators\n    left join channel_administrators\n                on channel_administrators.admin_id=account_administrators.guid\n    where (subscription_notifications or integrations_notifications or phone_unavailable_notification)\n    and username!=''\n    group by 1\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u044e\u0437\u0435\u0440\u043d\u0435\u0439\u043c\u0430\u043c\u0438 \u0432 Telegram \u0430\u0434\u043c\u0438\u043d\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\nselect *\nfrom account_administrators", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_account_administrators_and_telegram_usernames`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.808291Z", "completed_at": "2025-05-21T12:30:58.856116Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.861343Z", "completed_at": "2025-05-21T12:30:58.861353Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.1016683578491211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_minimum_trial_start_date_by_transport", "compiled": true, "compiled_code": "with accounts_with_trials as (select account_id,\n                                whatsap_trial_start,\n                                instagram_trial_start,\n                                avito_trial_start,\n                                vk_trial_start,\n                                telegram_trial_start,\n                                tgapi_trial_start\n                            from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`),\n\n channels_waba_trial as (\n   select account_id,\n  min(cast(datetime(created_at,'Europe/Moscow') as date))  as trial_start \n  from `dwh-wazzup`.`dbt_nbespalov`.`stg_channels` \n  where temporary=False and transport in ('waba','wapi')\n  group by 1\n ),\n\ntrials_unpivot as (\nSELECT * FROM accounts_with_trials\nUNPIVOT(trial_start FOR transport IN (whatsap_trial_start, instagram_trial_start,avito_trial_start, vk_trial_start, telegram_trial_start, tgapi_trial_start ))),\n\nall_trial_start_dates as (\n\nselect account_id , trial_start, transport from trials_unpivot\n\nunion all \n\nselect account_id, trial_start, 'waba' as transport from channels_waba_trial)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0442\u0440\u0438\u0430\u043b\u043e\u0432 \u043f\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0443 \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443\nselect account_id,                                      -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n(case when transport='whatsap_trial_start' then 'whatsapp'\nwhen transport='instagram_trial_start' then 'instagram'\nwhen transport='avito_trial_start' then 'avito'\nwhen transport='vk_trial_start' then 'vk'\nwhen transport='telegram_trial_start' then 'telegram'\nwhen transport='tgapi_trial_start' then 'tgapi'\nwhen transport='waba' then 'waba'\nend) as transport,                                      -- \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442 \u043a\u0430\u043d\u0430\u043b\u0430\ntrial_start,                                            -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0442\u0440\u0438\u0430\u043b\u0430\ndate_add(trial_start, interval 3 day) as trial_end_at   -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0442\u0440\u0438\u0430\u043b\u0430\nfrom all_trial_start_dates", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_minimum_trial_start_date_by_transport`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.851328Z", "completed_at": "2025-05-21T12:30:58.860780Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.863092Z", "completed_at": "2025-05-21T12:30:58.863102Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.13985204696655273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_minimum_trial_start_dates", "compiled": true, "compiled_code": "with accounts_with_trials as (select account_id,\n                                whatsap_trial_start,\n                                instagram_trial_start,\n                                avito_trial_start,\n                                vk_trial_start,\n                                telegram_trial_start,\n                                tgapi_trial_start\n                            from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`),\n\n channels_waba_trial as (\n   select account_id,\n  min(cast(datetime(created_at,'Europe/Moscow') as date))  as trial_start \n  from `dwh-wazzup`.`dbt_nbespalov`.`stg_channels` \n  where temporary=False and transport in ('waba','wapi')\n  group by 1\n ),\n\ntrials_unpivot as (\nSELECT * FROM accounts_with_trials\nUNPIVOT(trial_start FOR transport IN (whatsap_trial_start, instagram_trial_start,avito_trial_start, vk_trial_start, telegram_trial_start, tgapi_trial_start ))),\n\nall_trial_start_dates as (\n\nselect account_id , trial_start, transport from trials_unpivot\n\nunion all \n\nselect account_id, trial_start, 'waba' as transport from channels_waba_trial)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u0442\u0430\u043c\u0438 \u0442\u0440\u0438\u0430\u043b\u043e\u0432 \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\nselect account_id,                                                      -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n min(cast(trial_start as date)) as trial_start,                         -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0442\u0440\u0438\u0430\u043b\u0430\n  date_add(min(cast(trial_start as date)), interval 3 day) trial_end    -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0442\u0440\u0438\u0430\u043b\u0430\n from all_trial_start_dates\ngroup by 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_minimum_trial_start_dates`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.854037Z", "completed_at": "2025-05-21T12:30:58.861780Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.904534Z", "completed_at": "2025-05-21T12:30:58.904546Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.17917704582214355, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_with_trials_minimum_start_and_end_dates", "compiled": true, "compiled_code": "with accounts_with_trials as (select account_id,\n                                whatsap_trial_start,\n                                whatsap_trial,\n                                instagram_trial,\n                                instagram_trial_start,\n                                avito_trial,\n                                avito_trial_start,\n                                vk_trial_start,\n                                vk_trial,\n                                telegram_trial,\n                                telegram_trial_start,\n                                tgapi_trial,\n                                tgapi_trial_start\n                            from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`)\n ,channels_waba_trial as (\n        select account_id,\n                min(cast(datetime(created_at,'Europe/Moscow') as date))  as trial_end \n        from `dwh-wazzup`.`dbt_nbespalov`.`stg_channels`\n        where temporary=False \n              and transport in ('waba','wapi')\n        group by 1\n )\n,trials_end_unpivot as (\n        SELECT * \n        FROM accounts_with_trials\n        UNPIVOT(trial_end FOR transport IN (whatsap_trial, instagram_trial,avito_trial, vk_trial, telegram_trial, tgapi_trial ))\n)\n,trials_start_unpivot as (\n        SELECT *except(transport),\n        replace(transport,'_start','') as transport\n        FROM accounts_with_trials\nUNPIVOT(trial_start FOR transport IN (whatsap_trial_start, instagram_trial_start,avito_trial_start, vk_trial_start, telegram_trial_start, tgapi_trial_start   ))\n),trials_unpivot as (\nselect trials_start_unpivot.account_id, \n       trials_start_unpivot.trial_start,\n       trials_end_unpivot.trial_end,\n       trials_start_unpivot.transport\nfrom trials_start_unpivot\nleft join trials_end_unpivot on trials_end_unpivot.account_id = trials_start_unpivot.account_id \n                            and trials_end_unpivot.transport = trials_start_unpivot.transport \n),\n\nall_trial_end_dates as (\n\nselect account_id , trial_start,trial_end, transport from trials_unpivot\n\nunion all \n\nselect account_id, trial_end as trial_start, date_add(trial_end, interval 3 day), 'waba' as transport from channels_waba_trial)\n,defining_min_trial_start as (\nselect account_id,\n      min(trial_start) trial_start\nfrom all_trial_end_dates\ngroup by account_id)\nselect  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0441 \u0438\u0445 \u0434\u0430\u0442\u0430\u043c\u0438 \u0441\u0442\u0430\u0440\u0442\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0442\u0440\u0438\u0430\u043b\u043e\u0432\n      defining_min_trial_start.account_id,                                  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n       cast(defining_min_trial_start.trial_start as date) trial_start,      -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0442\u0440\u0438\u0430\u043b\u0430\n       cast(trial_end as date) trial_end                                    -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0442\u0440\u0438\u0430\u043b\u0430\nfrom defining_min_trial_start\nleft join all_trial_end_dates on all_trial_end_dates.trial_start = defining_min_trial_start.trial_start\n                                and all_trial_end_dates.account_id = defining_min_trial_start.account_id\ngroup by defining_min_trial_start.account_id,\n          cast(defining_min_trial_start.trial_start as date),\n          cast(trial_end as date)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_with_trials_minimum_start_and_end_dates`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.856779Z", "completed_at": "2025-05-21T12:30:58.863619Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.946554Z", "completed_at": "2025-05-21T12:30:58.946563Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.218735933303833, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels__not_temporary", "compiled": true, "compiled_code": "select     -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u043d\u0435\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u043a\u0430\u043d\u0430\u043b\u0430\u043c\u0438\n    account_id,     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    guid,           -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u0430\u043d\u0430\u043b\u0430\n    created_at,     -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u0430\u043d\u0430\u043b\u0430\n    state,          -- \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043a\u0430\u043d\u0430\u043b\u0430\n    created_date,   -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u0430\u043d\u0430\u043b\u0430\n    date_trunc(cast(created_at as date),week(monday)) as created_week,  -- \u041d\u0435\u0434\u0435\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u0430\u043d\u0430\u043b\u0430\n    case when transport = 'wapi' then 'waba'\n         else transport \n    end as transport,   -- \u0422\u0438\u043f \u043a\u0430\u043d\u0430\u043b\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043c\u0435\u0441\u0441\u0435\u043d\u0434\u0436\u0435\u0440\u0443\n    package_Id,         -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    first_value(guid) over (partition by account_id, transport order by created_at) as first_guid,  -- \u041f\u0435\u0440\u0432\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u0430\u043d\u0430\u043b\u0430 \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443 \u0438 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0443\n    (case\n        when guid = first_value(guid) over (partition by account_id, transport order by created_at) then True\n        else False\n        end) as is_new_channel, -- \u042d\u0442\u043e \u043d\u043e\u0432\u044b\u0439 \u043a\u0430\u043d\u0430\u043b?\n    deleted,    -- \u041a\u0430\u043d\u0430\u043b \u0443\u0434\u0430\u043b\u0435\u043d?\n    tariff      -- \u0422\u0430\u0440\u0438\u0444 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0443 \u043a\u0430\u043d\u0430\u043b\u0430\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_channels`\n    where temporary=False", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.858401Z", "completed_at": "2025-05-21T12:30:58.903851Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.947631Z", "completed_at": "2025-05-21T12:30:58.947643Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.25789761543273926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_channelHistory_with_active_partition", "compiled": true, "compiled_code": "with channel_history_with_state_group as (\n    select ch.occured_at,  -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f\n    (case when ch.deleted=True then 'deleted' \n    else ch.state\n    end) as \n    state,                 -- \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043a\u0430\u043d\u0430\u043b\u0430\n    ch.channel_id,         -- ID \u043a\u0430\u043d\u0430\u043b\u0430\n    (case when ch.state='active' then 1\n    else 0 end) as state_group, -- \u0413\u0440\u0443\u043f\u043f\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f. 1, \u0435\u0441\u043b\u0438 active, 0 \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445\n    ch.package_id,         -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    ch.id                  -- ID \u0437\u0430\u043f\u0438\u0441\u0438\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_channelHistory` ch\n    JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_channels` c on ch.channel_id = c.guid\n    WHERE cast(datetime(ch.occured_at,'Europe/Moscow') as timestamp) >= c.created_At\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0431\u044b\u043b\u0438 \u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043e \u043a\u0430\u043d\u0430\u043b\u0443\nselect *, \n    (case WHEN (state = lag(state, 1) OVER (partition by channel_id ORDER BY occured_at)) \n    and (package_Id= lag(package_id,1) OVER (partition by channel_id ORDER BY occured_at)) THEN 0 ELSE 1 END) AS title_changed  -- \u0411\u044b\u043b\u0438 \u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f. 1, \u0435\u0441\u043b\u0438 \u0434\u0430. 0, \u0435\u0441\u043b\u0438 \u043d\u0435\u0442.\n    from  channel_history_with_state_group", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_channelHistory_with_active_partition`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:58.905151Z", "completed_at": "2025-05-21T12:30:58.907067Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:58.986948Z", "completed_at": "2025-05-21T12:30:58.986961Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.24492478370666504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.Profeat_site.channels_snapshot", "compiled": true, "compiled_code": "\n\n\n\nselect \n\n* from `dwh-wazzup`.`dbt_nbespalov`.`stg_channels`\nwhere transport in ('waba','wapi')\n", "relation_name": "`dwh-wazzup`.`snapshots`.`channels_snapshot`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.111058Z", "completed_at": "2025-05-21T12:30:59.127593Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.134097Z", "completed_at": "2025-05-21T12:30:59.134109Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14814352989196777, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_waba__balance_spending", "compiled": true, "compiled_code": "with channels as (\n    select account_id,\n    phone,\n    guid,\n    transport\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_channels`),\n\nwaba_sessions as (\n    select chat_id,\n    initiator,\n    channel_id,\n    transaction_id,\n    state from `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_sessions`),\n\nwaba_transactions as (\n    select date_at,\n    id,\n    amount,\n    type from `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_transactions`\n),\nwaba_balance_spending as (\n    select\n    channels.account_id,        -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    channels.phone,             -- \u041d\u043e\u043c\u0435\u0440 \u043a\u0430\u043d\u0430\u043b\u0430 WABA\n    waba_sessions.chat_id,      -- \u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\n    waba_sessions.initiator,    -- \u0418\u043d\u0438\u0446\u0438\u0430\u0442\u043e\u0440 \u0441\u0435\u0441\u0441\u0438\u0438\n    waba_transactions.date_at,  -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u0435\u0441\u0441\u0438\u0438\n    waba_transactions.amount    -- \u0421\u0443\u043c\u043c\u0430 \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u043e \u0441\u0435\u0441\u0441\u0438\u0438\n    from channels\n    inner join waba_sessions on waba_sessions.channel_id=channels.guid\n    inner join waba_transactions on waba_transactions.id=waba_sessions.transaction_id\n    where channels.transport='wapi'\n    and waba_sessions.state != 'canceled' \n    and  waba_transactions.type='payment'\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u043a\u0430\u043d\u0430\u043b\u0430\u043c\u0438 WABA \u0438 \u0442\u0440\u0430\u0442\u0430\u043c\u0438 \u043f\u043e \u043d\u0438\u043c\nselect * from waba_balance_spending", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_waba__balance_spending`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.114925Z", "completed_at": "2025-05-21T12:30:59.134744Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.175990Z", "completed_at": "2025-05-21T12:30:59.176003Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.11264538764953613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.Profeat_site.unique_stg_channels_waba_transactions_gupshup_id.5ac0bb1fb2", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select id as unique_field\n  from `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_transactions_gupshup`\n  where id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.125484Z", "completed_at": "2025-05-21T12:30:59.135095Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.177380Z", "completed_at": "2025-05-21T12:30:59.177389Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.15018677711486816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_integrations_by_account_crm_employees_count_distinct", "compiled": true, "compiled_code": "-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430\u0445, \u0438\u0445 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u0438 \u0440\u043e\u043b\u044f\u0445\nSELECT account_id,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\ncount(distinct employee_user_id) as users_in_integration,   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0432 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\ncount(distinct case when has_role then employee_user_id end) as users_with_roles, -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0441 \u0440\u043e\u043b\u044f\u043c\u0438 \u0432 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\ncount(distinct case when activated_at is not null then employee_user_id end) as users_activated -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0441 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 \u0434\u043b\u044f \u041c\u041f\n FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_crmEmployees`\ngroup by 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_integrations_by_account_crm_employees_count_distinct`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.128112Z", "completed_at": "2025-05-21T12:30:59.136228Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.177911Z", "completed_at": "2025-05-21T12:30:59.177920Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1878798007965088, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_reward_by_month_and_account", "compiled": true, "compiled_code": "SELECT account_id,                  -- \u0430\u043a\u043a\u0430\u0443\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043f\u0440\u0438\u0448\u043b\u043e \u0432\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043d\u0438\u0435\n    date_sub(date_trunc(occured_date,month),interval 1 month) as paid_month,    -- \u043c\u0435\u0441\u044f\u0446. \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0437\u0430 \u0442\u043e\u0442 \u043f\u0435\u0440\u0438\u043e\u0434, \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u044b\u043b \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d \u0431\u0430\u043b\u0430\u043d\u0441, \u0442.\u0435. \u043c\u0435\u0441\u044f\u0446 \u043d\u0430\u0437\u0430\u0434 date_sub(occured_date,interval 1 month)\n    billing_affiliate.currency,     -- \u0432\u0430\u043b\u044e\u0442\u0430 \u041b\u041a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432\n    abs(sum(sum*coalesce(exchange_rates.cor_rate,1))) as sum_in_rubles,         -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445. \u043a\u0443\u0440\u0441 \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432\n    abs(sum(sum)) as original_sum                                               -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0432\u0430\u043b\u044e\u0442\u0435 \u041b\u041a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432\n\nFROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` billing_affiliate\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_exchangeRates` exchange_rates \non exchange_rates.currency=billing_affiliate.currency and \nbilling_affiliate.occured_date=exchange_rates.data and nominal='RUR'\nwhere object='reward'\ngroup by 1,2,3\n    -- \u041a\u044d\u0448\u0431\u044d\u043a \u0437\u0430 \u043e\u043f\u043b\u0430\u0442\u0443 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0437\u0430 \u043c\u0435\u0441\u044f\u0446", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_reward_by_month_and_account`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.132308Z", "completed_at": "2025-05-21T12:30:59.176386Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.219674Z", "completed_at": "2025-05-21T12:30:59.219689Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.22449970245361328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_waba_reward_by_account", "compiled": true, "compiled_code": "SELECT account_id                                                               -- \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n     , date_sub(occured_date, interval 1 MONTH)             AS paid_month       -- \u043c\u0435\u0441\u044f\u0446. \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0437\u0430 \u0442\u043e\u0442 \u043f\u0435\u0440\u0438\u043e\u0434, \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u044b\u043b \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d \u0431\u0430\u043b\u0430\u043d\u0441, \u0442.\u0435. \u043c\u0435\u0441\u044f\u0446 \u043d\u0430\u0437\u0430\u0434 date_sub(occured_date,interval 1 month)\n     , billing_affiliate.currency                                               -- \u0432\u0430\u043b\u044e\u0442\u0430 \u041b\u041a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432\n     , abs(sum(sum * coalesce(exchange_rates.cor_rate, 1))) AS sum_in_rubles    -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445. \u043a\u0443\u0440\u0441 \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u043d\u0430 \u0434\u0435\u043d\u044c \u0432\u044b\u043f\u043b\u0430\u0442\u044b\n     , abs(sum(sum))                                        AS original_sum     -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0432\u0430\u043b\u044e\u0442\u0435 \u041b\u041a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432\n\nFROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` billing_affiliate\nLEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_exchangeRates` exchange_rates ON exchange_rates.currency=billing_affiliate.currency \n                                                        AND billing_affiliate.occured_date=exchange_rates.data AND nominal='RUR'\nWHERE object ='rewardWaba' -- 10%, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u043c \u043f\u0440\u0438 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0432\u0430\u0431\u044b. \u0420\u0430\u0437 \u0432 \u043c\u0435\u0441\u044f\u0446 \u043e\u0442\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043a\u0440\u043e\u043d\u0434\u0436\u043e\u0431\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u044c. \u041a\u0440\u043e\u043d\u0434\u0436\u043e\u0431\u0430 \u043e\u0442\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432 \u043c\u0435\u0441\u044f\u0446 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u043e\u0441\u043b\u0435 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043d\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0443 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u043f\u044b \u0435\u0441\u0442\u044c \u0434\u043e\u0447\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043a\u0443\u043f\u0438\u043b\u0430 \u0440\u044f\u0434 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0432 \u043c\u0430\u0440\u0442\u0435. \u0417\u0430 \u044d\u0442\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0440\u0435\u0444 \u043f\u0430\u043f\u0435 \u043f\u0440\u0438\u0434\u0443\u0442 \u0431\u043e\u043d\u0443\u0441\u044b \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430, \u0442\u043e \u0435\u0441\u0442\u044c \u0432 \u0430\u043f\u0440\u0435\u043b\u0435.\nGROUP BY 1, 2, 3\n    -- \u0412\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442 \u043e\u0444. \u0438 \u0442\u0435\u0445. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u044b \u0437\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 Waba", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_waba_reward_by_account`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.129928Z", "completed_at": "2025-05-21T12:30:59.176969Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.220524Z", "completed_at": "2025-05-21T12:30:59.220536Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2659313678741455, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_reward_by_rewardtype_by_date", "compiled": true, "compiled_code": "WITH reward AS (\n  SELECT \n    account_id,\n    occured_date,\n    billing_affiliate.currency,\n    ABS(SUM(SUM*COALESCE(exchange_rates.cor_rate,1))) AS sum_in_rubles,\n    ABS(SUM(SUM))                                     AS original_sum\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` billing_affiliate\n  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_exchangeRates` exchange_rates ON exchange_rates.currency=billing_affiliate.currency AND billing_affiliate.occured_date=exchange_rates.data AND nominal = 'RUR'\n  WHERE object IN ('reward', 'noReward')\n  GROUP BY 1,2,3\n),\n\nrewardWaba AS (\n  SELECT \n    account_id,\n    occured_date,\n    billing_affiliate.currency,\n    ABS(SUM(SUM*COALESCE(exchange_rates.cor_rate,1))) AS sum_in_rubles_waba,\n    ABS(SUM(SUM))                                     AS original_sum_waba\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` billing_affiliate\n  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_exchangeRates` exchange_rates ON exchange_rates.currency=billing_affiliate.currency AND billing_affiliate.occured_date=exchange_rates.data AND nominal = 'RUR'\n  WHERE object = 'rewardWaba'\n  GROUP BY 1,2,3\n)\n\nSELECT\n  COALESCE(r.account_id, rw.account_id)                                 AS account_id,\n  CASE WHEN sum_in_rubles > 0 OR sum_in_rubles_waba > 0 \n  THEN DATE_SUB(COALESCE(r.occured_date, rw.occured_date),interval 1 month)\n  ELSE COALESCE(r.occured_date, rw.occured_date) END                    AS occured_date_sub,\n  COALESCE(r.currency, rw.currency)                                     AS currency,\n  COALESCE(sum_in_rubles, 0)                                            AS sum_in_rubles,\n  COALESCE(original_sum, 0)                                             AS original_sum,\n  COALESCE(sum_in_rubles_waba, 0)                                       AS sum_in_rubles_waba,\n  COALESCE(original_sum_waba, 0)                                        AS original_sum_waba\nFROM reward r\nFULL OUTER JOIN rewardWaba rw ON r.account_id = rw.account_id AND r.occured_date = rw.occured_date", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_reward_by_rewardtype_by_date`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.383985Z", "completed_at": "2025-05-21T12:30:59.390814Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.396716Z", "completed_at": "2025-05-21T12:30:59.396726Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14284777641296387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_exchange_rates_unpivoted", "compiled": true, "compiled_code": "with exchange_rates as (\n    select *except(cor_rate),\n     coalesce(cor_rate,first_value(cor_rate ignore nulls) over (partition by currency,nominal order by data ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) cor_rate\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_exchangeRates`\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043a\u0443\u0440\u0441\u0430\u043c\u0438 \u043e\u0431\u043c\u0435\u043d\u0430 \u0432\u0430\u043b\u044e\u0442\nselect *\nfrom exchange_rates\npivot\n(avg(cor_rate) FOR nominal IN ('USD', 'RUR','EUR')\n\n)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.388718Z", "completed_at": "2025-05-21T12:30:59.398821Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.441920Z", "completed_at": "2025-05-21T12:30:59.441930Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.10192251205444336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deleted", "compiled": true, "compiled_code": "with billing_affiliate as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate`\n),\n\nexchange_rates as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_exchangeRates`\n),\n\naccounts as (\n    select account_id, \n    type from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`\n),\n\nbilling_packages as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages`\n),\n\nsubscription_deleted as (\n    select occured_date as unsubscribe_date,                                            -- \u0414\u0430\u0442\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    billing_packages.type as subscription_type,                                         -- \u0422\u0438\u043f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    billing_affiliate.guid,                                                             -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    cast(billing_affiliate.account_id as string) as account_id,                         -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    coalesce(billing_affiliate.sum*cor_rate, billing_affiliate.sum) as sum_in_rubles    -- \u0421\u0443\u043c\u043c\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u043d\u0430 \u0431\u043e\u043d\u0443\u0441\u043d\u044b\u0439 \u0441\u0447\u0451\u0442\n    from billing_affiliate\n    inner join accounts on billing_affiliate.account_id = accounts.account_id\n    left join exchange_rates on billing_affiliate.occured_date = exchange_rates._ibk\n                                                            and billing_affiliate.currency = exchange_rates.currency\n                                                            and nominal = 'RUR'\n    inner join billing_packages on billing_packages.guid=billing_affiliate.guid                                                        \n    where object = 'unsubscribe' and accounts.type != 'employee'\n)\n\nselect * from subscription_deleted  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0430\u043f\u043f\u043e\u0440\u0442\u043e\u043c \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deleted`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.392425Z", "completed_at": "2025-05-21T12:30:59.401926Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.443196Z", "completed_at": "2025-05-21T12:30:59.443205Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.13968348503112793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_support_gifts", "compiled": true, "compiled_code": "with billing_affiliates as (\n     select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate`\n ),\n\n exchange_rates as (\n     select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_exchangeRates`\n ),\n\n accounts as (\n     select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`\n )\n            -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043d\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0438 \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u043e\u0442 \u0441\u0430\u043f\u043f\u043e\u0440\u0442\u0430\n select date_trunc(occured_date,month) as occured_month,                                            -- \u041c\u0435\u0441\u044f\u0446 \u0441\u043e\u0431\u044b\u0442\u0438\u044f\n        billing_affiliates.guid as subscription_id,                                                 -- guid \u0438\u0437 billingPackages \u0438\u043b\u0438 guid \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b payments \u0435\u0441\u043b\u0438 object - refund, bonus, transfer \n        billing_affiliates.account_id,                                                              -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        sum(coalesce(billing_affiliates.sum*cor_rate, billing_affiliates.sum)) as sum_in_rubles,    -- \u0421\u0443\u043c\u043c\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n        object                                                                                      -- \u0422\u0438\u043f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438. \u0411\u0435\u0440\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0438 \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0441\u0430\u043f\u043f\u043e\u0440\u0442\u043e\u043c\n        from billing_affiliates\n        inner join accounts on billing_affiliates.account_id = accounts.account_id\n        left join exchange_rates on billing_affiliates.occured_date = exchange_rates._ibk\n                                                            and billing_affiliates.currency = exchange_rates.currency\n                                                            and nominal = 'RUR'\n        where object in ('supportBonus','takeAway') and accounts.type != 'employee'\n  group by 1,2,3,5", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_support_gifts`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.394689Z", "completed_at": "2025-05-21T12:30:59.441483Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.444976Z", "completed_at": "2025-05-21T12:30:59.444986Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.17725181579589844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_channels_waba_sessions_gupshup", "compiled": true, "compiled_code": "select                                           -- \u042d\u0442\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0432\u0441\u0435\u043c \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f\u043c \u0437\u0430 \u0441\u0435\u0441\u0441\u0438\u0438 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_channels_waba_transactions_gupshup. Gupshup - \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u0412\u0410\u0411\u0410\n        phone as chat_id,                                                -- \u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439\n        null as initiator,                                               -- \u041f\u0443\u0441\u0442\u043e\u0435 \u043f\u043e\u043b\u0435 \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0438 \u0441 stg_channels_waba_sessions\n        coalesce(gate.subscription_id,application_guid) as channel_id,   -- id \u043a\u0430\u043d\u0430\u043b\u0430 \u0438\u043b\u0438 id \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f gupshup, \u0435\u0441\u043b\u0438 id \u043a\u0430\u043d\u0430\u043b\u0430 = NULL\n        state,                                                           -- \u0421\u0442\u0430\u0442\u0443\u0441  \u0441\u0435\u0441\u0441\u0438\u0438: paid, holded, canceled\n        id as transaction_id,                                            -- id \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0438 \u0441 stg_channels_waba_transactions_gupshup\n        country,                                                         -- \u0421\u0442\u0440\u0430\u043d\u0430: \u043a\u043e\u0434 \u0438\u0437 \u0441\u0442\u0440\u0430\u043d\u044b \u0438\u0437 \u0434\u0432\u0443\u0445 \u0431\u0443\u043a\u0432. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, RU (\u0420\u0424) \u0438\u043b\u0438 BG (\u0411\u043e\u043b\u0433\u0430\u0440\u0438\u044f)\n        type as session_type,                                            -- \u0422\u0438\u043f \u0448\u0430\u0431\u043b\u043e\u043d\u0430: marketing, service, utility, FEP, FTC, authentication\n        conversation_id as session_id,                                   -- id \u0441\u0435\u0441\u0441\u0438\u0438\n        paid_at as paid_at_waba_sessions,                                -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u0441\u0435\u0441\u0441\u0438\u0438\n        created_at,                                                      -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u0438   \n        _ibk as created_date                                             -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0438\nfrom `dwh-wazzup`.`wazzup`.`wabaSessions_gupshup_new` waba\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_gate_channels` gate on waba.application_guid = gate.channel_id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_sessions_gupshup`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.397242Z", "completed_at": "2025-05-21T12:30:59.442415Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.484558Z", "completed_at": "2025-05-21T12:30:59.484570Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2156965732574463, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_integrations_created", "compiled": true, "compiled_code": "select  integration_id,\n        account_id,\n        integration_type,\n        state,\n        domain,\n        disabled_to,\n        created_at,\n        created_date,\n        deleted_at,\n        deleted_date, \n        activated_at,\n        activated_date,\n        crm_name,\n        web_hooks_url,\n        marketplace_type,\n        _ibk,\n        cast((case \n            when state='active' then CURRENT_TIMESTAMP()\n            when deleted_at is not null then deleted_at\n            when lag( created_at  ,1) over (partition by account_id order by created_at  DESC) is null\n                then  CURRENT_TIMESTAMP()\n            else lag( cast(created_at as TIMESTAMP)  ,1) over (partition by account_id order by created_at  DESC) \n            end) as date) as integration_end_date,\n        (case \n        when integration_type in ('api_v2','api_v3') then web_hooks_url\n        when integration_type='api_v1' then domain\n        end)\n        as api_type_field\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_integrations`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_integrations_created`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.399203Z", "completed_at": "2025-05-21T12:30:59.443749Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.524036Z", "completed_at": "2025-05-21T12:30:59.524048Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.257584810256958, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_integrations_created_with_pipedrive", "compiled": true, "compiled_code": "with integrations as (\n    select integration_id,\n        account_id,\n        integration_type,\n        state,\n        domain,\n        disabled_to,\n        created_at,\n        created_date,\n        deleted_at,\n        deleted_date, \n        activated_at,\n        activated_date,\n        crm_name,\n        web_hooks_url,\n        marketplace_type,\n        _ibk,\n        (case \n        when integration_type in ('api_v2','api_v3') then web_hooks_url\n        when integration_type='api_v1' then domain\n        end)\n        as api_type_field\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_integrations`\n),\n\npipedrive_integrations as (\n     select id as integration_id,                   -- ID \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n        account_id,                                 -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        'pipedrive' as integration_type,            -- \u0422\u0438\u043f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n        status as state,                            -- \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n        domain,                                     -- \u0414\u043e\u043c\u0435\u043d \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n        cast(null as timestamp) as disabled_to,     -- \u0415\u0441\u043b\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0432 state 'paused', \u0442\u0443\u0442 \u0431\u0443\u0434\u0435\u0442 \u0432\u0440\u0435\u043c\u044f, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0435\u0451 \u043d\u0443\u0436\u043d\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0432 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\n        cast(created_at as datetime) as created_at, -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n        cast( created_at as date) as created_date,  -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n        deleted_at,                                 -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u044e\u0437\u0435\u0440\u043e\u043c\n        cast(deleted_at as date) as deleted_date,   -- \u0414\u0430\u0442\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u044e\u0437\u0435\u0440\u043e\u043c\n        cast(null as TIMESTAMP) as activated_at,    -- \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\u0445 \u0441 amo. \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u0433\u0434\u0430 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e\n        cast(null as date) as activated_date,       -- \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\u0445 \u0441 amo. \u0414\u0430\u0442\u0430 \u043a\u043e\u0433\u0434\u0430 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e\n        cast(null as string) as crm_name,           -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 CRM. \u041f\u0438\u0448\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0441 \u043c\u0430\u0440\u043a\u0435\u0442\u043f\u043b\u0435\u0439\u0441\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439\n        cast(null as string) as web_hooks_url,      -- \u0410\u0434\u0440\u0435\u0441 \u0434\u043b\u044f \u0432\u0435\u0431\u0445\u0443\u043a\u043e\u0432 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 api_v2\n        cast(null as string) as marketplace_type,   -- \u0422\u0438\u043f api_v3 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0438\u0437 \u043c\u0430\u0440\u043a\u0435\u0442\u043f\u043b\u0435\u0439\u0441\u0430\n        cast( created_at as date) as _ibk,          -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 BigQuery\n         cast(null as string) as api_type_field     -- web_hooks_url \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 api_v2 \u0438 api_v3. domain \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 api_v1\n    from `dwh-wazzup`.`wazzup`.`pipedrive_integrations`\n),\n\nintegrations_with_pipedrive as (\n    select * from integrations\n    union all\n    select * from pipedrive_integrations\n)\n\n\nselect  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e \u043d\u0438\u043c, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f pipedrive\n        *, \n        (case when  (created_date=deleted_date)   \n        or (integration_type like '%api%' and crm_name is null and web_hooks_url is null and marketplace_type is null and api_type_field is null) \n        then True else False end) as is_integration_not_valid,  --\u043d\u0435 \u0432\u0441\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u044b: \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u0431\u044b\u043b\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u044b \u0432 \u0442\u043e\u0442 \u0436\u0435 \u0434\u0435\u043d\u044c \u0438\u043b\u0438 \u043f\u043e \u043d\u0438\u043c \u043d\u0435\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 (\u0432 \u0441\u043b\u0443\u0447\u0430\u0435 api_v3), \u0442\u043e \u043c\u044b \u0438\u0445 \u043d\u0435 \u0441\u0447\u0438\u0442\u0430\u0435\u043c\n\n        \n        cast((case \n            when state='active' then CURRENT_TIMESTAMP()\n            when deleted_at is not null then deleted_at\n            when lag( created_at  ,1) over (partition by account_id order by created_at  DESC) is null\n                then  CURRENT_TIMESTAMP()\n            else lag( cast(created_at as TIMESTAMP)  ,1) over (partition by account_id order by created_at  DESC) \n            end) as date) as integration_end_date -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n            from integrations_with_pipedrive", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_integrations_created_with_pipedrive`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.649025Z", "completed_at": "2025-05-21T12:30:59.656560Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.662970Z", "completed_at": "2025-05-21T12:30:59.662985Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.18102145195007324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_integrations_min_max_date", "compiled": true, "compiled_code": "select MIN(CAST(created_date AS DATE)) as min_date,\n       MAX(CAST(created_date AS DATE)) as max_date\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_integrations`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_integrations_min_max_date`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.654155Z", "completed_at": "2025-05-21T12:30:59.663890Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.706252Z", "completed_at": "2025-05-21T12:30:59.706263Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.10118484497070312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_successful_payments_card_based_on_payment_table", "compiled": true, "compiled_code": "with refunded_payments as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_payment`\n    where status = 'refundSucceeded'\n)\nselect\n        concat(created_at,user_id) as ID,\n        created_at,\n        user_id,\n        'payment' as payment_type,\n        subscription_plan_id,\n        null as duration,\n        null as duration_period,\n        order_id as order_id\nfrom  `dwh-wazzup`.`dbt_nbespalov`.`stg_payment` payments\nwhere status =  'succeeded'\n        and not exists (\n                select refunded_payments.order_Id \n                from refunded_payments\n                where payments.order_Id = refunded_payments.order_Id\n)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_successful_payments_card_based_on_payment_table`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.657180Z", "completed_at": "2025-05-21T12:30:59.664250Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.707432Z", "completed_at": "2025-05-21T12:30:59.707443Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1397705078125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_bank", "compiled": true, "compiled_code": "select  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u0432 \u041b\u041a. \u0422\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0442\u043e\u0434\u044b bank, paypal \u0438 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u044b alphabank, planfix\n    account_id,                         -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n    paid_date,                          -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f\n    currency,                           -- \u0412\u0430\u043b\u044e\u0442\u0430\n    sum_in_rubles,                      -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445. \u0414\u043e 12 \u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043e \u0437\u0430\u043f\u044f\u0442\u043e\u0439, 2 \u043f\u043e\u0441\u043b\u0435.\n    original_sum,                       -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b. \u0414\u043e 12 \u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043e \u0437\u0430\u043f\u044f\u0442\u043e\u0439, 2 \u043f\u043e\u0441\u043b\u0435.\n    guid                                -- \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 guid \u0438\u043b\u0438 null. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0432 wazzup_staging_payments.yml\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_bank`\n    where object = 'payment'\n    and method in ('bank', 'paypal')\n    and json_value(details, \"$.provider\") in ('alphabank','planfix')", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_bank`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.659271Z", "completed_at": "2025-05-21T12:30:59.704757Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.708318Z", "completed_at": "2025-05-21T12:30:59.708327Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1761162281036377, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_bills", "compiled": true, "compiled_code": "-- \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u0447\u0435\u0442\u043e\u0432\nselect account_id, --case when id = 138647 then 60391971 else account_id end as account_id, --\u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u0430\u044f \u043e\u043f\u043b\u0430\u0442\u0430 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0437\u0430\u0434\u0430\u0447\u0438 1424214\n       paid_date,         --case when id = 138647 then date('2024-09-30') else paid_date end  paid_date, \n    currency,           -- \u0412\u0430\u043b\u044e\u0442\u0430\n    sum_in_rubles,      -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    original_sum,       -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    guid,               -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0447\u0435\u0442\u0430. \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f Postgress \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 string\n    subscription_id,    -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    updated_at,         -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0447\u0435\u0442\u0430\n    completed_at,       -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u0441\u0447\u0435\u0442\u0430\n    status,             -- \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0441\u0447\u0435\u0442\u0430\n    id,                 -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0447\u0435\u0442\u0430. \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f Postgress \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 int\n    coalesce(cast(paid_in_wazzup_at as date), cast(completed_at as date), cast(updated_at as date),(case when paid_date='1970-01-01' then cast(null as date) else paid_date end)) as billing_date_subscription_start,   -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043f\u043e \u0431\u0438\u043b\u043b\u0438\u043d\u0433\u0443\n    coalesce(cast(paid_in_wazzup_at as date),cast(updated_at as date)) as paid_in_wazzup_date   -- \u0414\u0430\u0442\u0430 \u043f\u043e\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f \u0434\u0435\u043d\u0435\u0433 \u0432 Wazzup\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_bills`\n    where status in ('paid','paidInvalid') and not (account_id=96943190 and status='paidInvalid') \n    and json_value(details,'$.paymentInvalidationReason') is distinct from 'tech-partner-postpay' \n    and  id!=101910\n    and  id != 138647", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_bills`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.661077Z", "completed_at": "2025-05-21T12:30:59.706787Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.748907Z", "completed_at": "2025-05-21T12:30:59.748919Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.21694445610046387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_bills_only_invalid_first_month", "compiled": true, "compiled_code": "select bills.account_id, \npaid_date,\nsum(sum_in_rubles) as sum_in_rubles_invalid_bills\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_bills` bills\ninner join\n    `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts on accounts.account_id = bills.account_id\nwhere\n    bills.paid_date <= date_add(accounts.register_date, interval 1 month)\n    and accounts.type = 'standart' and status = 'paidInvalid'\ngroup by 1,2", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_bills_only_invalid_first_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.664685Z", "completed_at": "2025-05-21T12:30:59.708902Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.827909Z", "completed_at": "2025-05-21T12:30:59.827924Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.25756216049194336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_old_billing", "compiled": true, "compiled_code": "select  -- \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0431\u0438\u043b\u043b\u0438\u043d\u0433\u0430. \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u0432 2022\n    account_id,     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    paid_date,      -- \u0414\u0430\u0442\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    currency,       -- \u0412\u0430\u043b\u044e\u0442\u0430\n    sum_in_rubles,  -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    paid_at,        -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    (case when currency='RUR' then sum*40\n    else sum\n    end) as original_sum, -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    guid,           -- guid \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    (case when json_value(details,'$.provider') like '%account%' then split(json_value(details,'$.provider'),'_')[OFFSET(1)]\n        end\n    ) as payment_method,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u0435\u0441\u043b\u0438 \u043e\u043d \u043f\u043b\u0430\u0442\u0438\u043b\n    provider,       -- \u041f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u043e\u043f\u043b\u0430\u0442\u044b\n    object,         -- \u041f\u0440\u0435\u0434\u043c\u0435\u0442 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    method,         -- \u041c\u0435\u0442\u043e\u0434 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    start_at,       -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    end_at          -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_old_billing`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_old_billing`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.914814Z", "completed_at": "2025-05-21T12:30:59.921525Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.929021Z", "completed_at": "2025-05-21T12:30:59.929033Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14262795448303223, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_features_ratings", "compiled": true, "compiled_code": "-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c\u0438, \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c \u0438 \u043e\u0442\u0437\u044b\u0432\u043e\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0438 \u043e Wazzup\nselect * from `dwh-wazzup`.`dbt_nbespalov`.`stg_ratings`\nwhere rn=1  -- \u0411\u0435\u0440\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043e\u0442\u0437\u044b\u0432 \u043d\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_features_ratings`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.919170Z", "completed_at": "2025-05-21T12:30:59.929563Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.972531Z", "completed_at": "2025-05-21T12:30:59.972540Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.10258841514587402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_visitkas_visitors_with_visit_time", "compiled": true, "compiled_code": "with template_link_groupped as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_localuserid_template_link_groupped`\n    ),\n\nvisitka_enter as (\n    select template_visits.* except(cmuserid),\n    coalesce(template_visits.cmuserid,grp.cmuserid) cmuserid\n    from  `dwh-wazzup`.`dbt_nbespalov`.`stg_template_visitors` template_visits\n    left join template_link_groupped grp on template_visits.localuserid = grp.localuserid\n                                            and template_visits.url = grp.template_link\n\n    )\n\nselect template_link_groupped.cmuserid, \n    template_link,\n    visitka_enter.localuserid,\n    date,\n    datetime\n    from template_link_groupped \n    left join visitka_enter\n    on template_link_groupped.template_link = visitka_enter.url\n    and visitka_enter.localuserid != template_link_groupped.localuserid\n    and (visitka_enter.cmuserid != template_link_groupped.cmuserid or visitka_enter.cmuserid is null)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_visitkas_visitors_with_visit_time`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.922143Z", "completed_at": "2025-05-21T12:30:59.932122Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.973055Z", "completed_at": "2025-05-21T12:30:59.973066Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1403806209564209, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_visitkas_visitors_with_visit_time_all_visits", "compiled": true, "compiled_code": "with template_link_groupped as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_localuserid_template_link_groupped`\n    ),\n\nvisitka_enter as (\n    select template_visits.* except(cmuserid),\n    coalesce(template_visits.cmuserid,grp.cmuserid) cmuserid\n    from  `dwh-wazzup`.`dbt_nbespalov`.`stg_template_visitors` template_visits\n    left join template_link_groupped grp on template_visits.localuserid = grp.localuserid\n                                            and template_visits.url = grp.template_link\n\n    )\n\nselect template_link_groupped.cmuserid, \n    template_link,\n    visitka_enter.localuserid,\n    date,\n    datetime,\n    min(datetime) over (partition by template_link_groupped.cmuserId order by dateTime) activation_datetime\n    from template_link_groupped \n    join visitka_enter\n    on template_link_groupped.template_link = visitka_enter.url\nwhere template_link_groupped.cmuserId is not null\norder by template_link_groupped.cmuserId", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_visitkas_visitors_with_visit_time_all_visits`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.924149Z", "completed_at": "2025-05-21T12:30:59.932495Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.974201Z", "completed_at": "2025-05-21T12:30:59.974211Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1796722412109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_waba_balance_end_of_the_day_gupshup", "compiled": true, "compiled_code": "WITH transactions_calculation AS (\n                                  SELECT waba_subscription_id\n                                        , cast(wtg.date_at AS date)                                                                                          AS transaction_date\n                                        , wtg.currency\n                                        , sum(amount * coalesce(rur, 1)) OVER (PARTITION BY waba_subscription_id,wtg.currency ORDER BY id)                   AS cum_sum_in_rubles\n                                        , sum(amount) OVER (PARTITION BY waba_subscription_id,wtg.currency ORDER BY id)                                      AS cum_original_sum\n                                        , first_value(wtg.currency) OVER (PARTITION BY waba_subscription_id,cast(wtg.date_at AS date) ORDER BY id DESC)      AS last_currency_of_the_day\n                                        , first_value(wtg.currency) OVER (PARTITION BY waba_subscription_id,date_trunc(wtg.date_at, month) ORDER BY id DESC) AS last_currency_of_the_month\n                                        , id\n                                  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_transactions_gupshup` wtg\n                                      LEFT JOIN dwh-wazzup.dbt_prod.int_payments_exchange_rates_unpivoted exchange_rates_unpivoted\n                                                 ON exchange_rates_unpivoted._ibk = CAST (wtg.date_at AS DATE)\n                                                 AND exchange_rates_unpivoted.currency = wtg.currency\n                                 ),\n    transactions_per_day AS (\n                              SELECT DISTINCT waba_subscription_id\n                                             , transaction_date\n                                             , currency\n                                             , last_currency_of_the_day\n                                             , last_currency_of_the_month\n                                             , first_value(cum_sum_in_rubles) OVER (PARTITION BY waba_subscription_id,currency,transaction_date ORDER BY id DESC) AS cum_sum_in_rubles\n                                             , first_value(cum_original_sum)  OVER (PARTITION BY waba_subscription_id,currency,transaction_date ORDER BY id DESC) AS cum_original_sum\n                              FROM transactions_calculation tc\n                            ),\n    defining_lead_date AS (\n                           SELECT *\n                                  , lead(transaction_date, 1, current_date) OVER (PARTITION BY waba_subscription_id,currency ORDER BY transaction_date) AS next_date\n                           FROM transactions_per_day\n                         ),\n    creating_date_intervals AS (\n                                SELECT *\n                                FROM defining_lead_date\n                                JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_days` sd ON sd.date >= transaction_date AND sd.date < next_date\n                               )\nSELECT   creating_date_intervals.date AS balance_date\n       , cum_sum_in_rubles            AS balance_in_rubles\n       , cum_original_sum             AS balance_in_original_currency\n       , last_currency_of_the_day     AS currency\n       , waba_subscription_id         AS waba_subscription_id \nFROM creating_date_intervals\n    JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_waba_subscription_gupshup` ws ON creating_date_intervals.waba_subscription_id = ws.id\nWHERE creating_date_intervals.currency = last_currency_of_the_day\n        AND (date < CAST(deleted_at AS DATE)\n                OR deleted_at IS NULL)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_waba_balance_end_of_the_day_gupshup`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.926805Z", "completed_at": "2025-05-21T12:30:59.971997Z"}, {"name": "execute", "started_at": "2025-05-21T12:30:59.975236Z", "completed_at": "2025-05-21T12:30:59.975247Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.21576714515686035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_all_data_filtered_from_test", "compiled": true, "compiled_code": "select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_sites_data` \nwhere (phone not in (select * from `dwh-wazzup`.`dbt_nbespalov`.`test_phones`) or phone is null)\nand (cmuserid not in (select * from  `dwh-wazzup`.`dbt_nbespalov`.`test_cmuserid`) or cmuserid is null)\nand (cmuserid not in (select distinct cmuserid\n                    from `dwh-wazzup`.`dbt_nbespalov`.`test_phones` phones\n                    join `dwh-wazzup`.`dbt_nbespalov`.`stg_sites_data`  all_data  on phones.phones = all_data.phone \n                    where cmuserid is not null) or cmuserId is null)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:30:59.930190Z", "completed_at": "2025-05-21T12:30:59.973553Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:00.054463Z", "completed_at": "2025-05-21T12:31:00.054477Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.25594353675842285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_test_accounts", "compiled": true, "compiled_code": "with test_accounts_based_on_seed as (\n    select distinct account_id\n    from `dwh-wazzup`.`dbt_nbespalov`.`wazzup_test_accounts`),\naccounts_with_types as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`\n),\n\ntest_accounts_defined_by_other_criterias as (\n    select distinct account_id\n    from accounts_with_types\n    where regemail like '%@wazzup.online%' or lower(account_name) like '%\u0441\u0442\u0430\u0436\u0435\u0440%' or lower(account_name) like '%\u0441\u0442\u0430\u0436\u0451\u0440%')\n,all_test_accounts as (\n        select account_id       -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        from test_accounts_based_on_seed\n        union distinct\n        select account_id\n        from test_accounts_defined_by_other_criterias)\nselect *    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0438\u043b\u0438 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432\nfrom all_test_accounts", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_test_accounts`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.180184Z", "completed_at": "2025-05-21T12:31:00.185872Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:00.194714Z", "completed_at": "2025-05-21T12:31:00.194725Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.1439192295074463, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_users_filtered_from_test", "compiled": true, "compiled_code": "with tests as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`widget_test_phones`\n)\nselect id,\n        username,\n        telegram_username,\n        phone,\n        paymentMethodId as payment_method_id,\n        utm_source,\n        deviceTypes as device_types,\n        utm_campaign,\n        initRefferer,\n        utm_term,\n        utm_content,\n        utm_medium,\n        qualification,\n        token,\n        password,\n        password_salt,\n        email,\n        telegram_profile,\n        _ibk,\n        createdat as created_at,\n        cast(createdat as date) registration_date,\n        updatedat as updated_at\nfrom `dwh-wazzup`.`widget`.`user` user\nwhere not exists (select username\n                    from tests\n                    where user.username = tests.username\n                     )", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_users_filtered_from_test`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.186313Z", "completed_at": "2025-05-21T12:31:00.197602Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:00.239204Z", "completed_at": "2025-05-21T12:31:00.239217Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.10405611991882324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_first_autorenewal_date", "compiled": true, "compiled_code": "with accounts as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`\n),\n\neventLogs as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_eventLogs`\n)\n\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u0430\u0442\u043e\u0439 \u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0434\u043b\u0435\u043d\u0438\u044f \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443\nselect  accounts.account_id,                                -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        cast(min(paid_at) as date) as min_autorenewal_date  -- \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0434\u043b\u0435\u043d\u0438\u044f\nfrom eventLogs\n    join accounts  \n        on eventLogs.account_id=accounts.account_id\nwhere log_Type='billingPackages' and autorenewal\n    and eventLogs._ibk>='2022-04-01'\ngroup by 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_first_autorenewal_date`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.188792Z", "completed_at": "2025-05-21T12:31:00.198089Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:00.239723Z", "completed_at": "2025-05-21T12:31:00.239734Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.14290642738342285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_telegram_notifications_dynamics_check_times", "compiled": true, "compiled_code": "with notifications_all as (\n   select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_telegram_notifications_dynamics`\n),\n\ncheck_times AS (\n    SELECT account_id, start_date as TIME FROM notifications_all\n           UNION DISTINCT\n    SELECT account_id, end_date as TIME FROM notifications_all\n    )\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0438 \u0434\u0430\u0442\u0430\u043c\u0438 \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439 \u0432 Telegram (\u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u044f\u0445)\nselect * from check_times", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_telegram_notifications_dynamics_check_times`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.190794Z", "completed_at": "2025-05-21T12:31:00.199151Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:00.240954Z", "completed_at": "2025-05-21T12:31:00.240963Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.18118953704833984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscription_deleted_from_eventLogs", "compiled": true, "compiled_code": "\nwith deleted_at_to_deduplicate as (\n        select \n        subject_id as subscription_id,\n        occured_at as deleted_at,\n        row_number() over (partition by subject_id order by occured_at asc) rn\n        from `dwh-wazzup`.`dbt_nbespalov`.`stg_eventLogs` \n        where log_type='billingPackages'\n        and state='deleted'\n        and id not in (55215321,56146810,17248256,55229499,48304241,\n        69071521,25119641,53994778,54982890,56180437,54194487,54937180,\n        53994776) \n        /*\u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u043b\u0438 \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f. \u0418\u0445 \u043e\u0447\u0435\u043d\u044c \u043c\u0430\u043b\u043e \u0438 \u0441 2022 \u0433\u043e\u0434\u0430 \u0442\u0430\u043a\u043e\u0433\u043e \u043d\u0435 \u0431\u044b\u043b\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u0441\u0442\u0430\u0432\u0438\u043b\u0430 \u043f\u043b\u0435\u0439\u043d\u0442\u0435\u043a\u0441\u0442\u043e\u043c, \u0430 \u043d\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u043c \n        \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u0447\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 postgresql \n        with eventLogs_data as (select \n                    (case when \"details\"->>'state'='deleted' then 'deleted'\n                    when \"details\"->>'state'='active' then 'active'\n                    end\n                    ) as state, \n                    \"subjectId\",\n                    lag(\"details\"->>'state',1) over (partition by \"subjectId\" order by \"id\" desc) as previous_state ,\n                    id\n                    from \"eventLogs\" \n                    where \"details\"->>'state' in ('deleted','active')\n                    )\n\n                    select previous_state,\n                    state,\n                    \"subjectId\",\n                    id\n                    from eventLogs_data \n                    where previous_state='active' and state='deleted'\n        */\n        )\nselect subscription_id,                        -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\ndeleted_at from  deleted_at_to_deduplicate     -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f\nwhere rn=1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deleted_from_eventLogs`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.192797Z", "completed_at": "2025-05-21T12:31:00.199710Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:00.241700Z", "completed_at": "2025-05-21T12:31:00.241711Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2175753116607666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscription_information", "compiled": true, "compiled_code": "with subscription_information as (\n  select subject_id,        -- \u043e\u0431\u044a\u0435\u043a\u0442, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f. \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 - guid \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438 \u0438\u0437 integrations, \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 guid \u0438\u0437 billingPackages\n         occured_at,        -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u0444\u043e\u0440\u043c\u0430\u0442 2022-11-29T19:49:52.778Z\n         start_time,        -- \u0415\u0441\u043b\u0438 \u0434\u0430\u0442\u0430 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430 is not null, \u0442\u043e \u0434\u0430\u0442\u0430 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430; \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0434\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0438 \u0434\u0430\u0442\u0430 \u0438\u0441\u0442\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u0440\u043e\u043a\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0418 \u0441\u0442\u0430\u0442\u0443\u0441 = 'deleted', \u0442\u043e null ; \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0434\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0438 \u0434\u0430\u0442\u0430 \u0438\u0441\u0442\u0435\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u0442\u043e \u0434\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 ; \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0434\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430, \u0442\u043e \u0434\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430, \u0438\u043d\u0430\u0447\u0435 null\n         subscription_end,  -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u0444\u043e\u0440\u043c\u0430\u0442: 2022-11-29T19:49:52.778Z\n         event,             -- \u0421\u043e\u0431\u044b\u0442\u0438\u0435\n         account_id         -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n  from `dwh-wazzup`.`dbt_nbespalov`.`stg_eventLogs`\n  where log_type='billingPackages' \n        and (state not in ('expired') or state is null)\n    )\n        -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 eventlogs\nselect subscription_information.*,\n        billingPackages.* except(account_Id),\n    case when lag(event,1)  OVER (partition by subject_Id ORDER BY occured_at DESC)='deleted' then LAG(subscription_end,1) OVER (partition by subject_Id ORDER BY occured_at DESC)\n    end deleted_datetime,\n    type as subscription_type\nfrom  subscription_information\njoin `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billingPackages\n        on billingPackages.guid=subscription_information.subject_Id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscription_information`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.195486Z", "completed_at": "2025-05-21T12:31:00.240370Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:00.321893Z", "completed_at": "2025-05-21T12:31:00.321909Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2567167282104492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscription_who_paid_missing_data__datetime_and_expiresat_from_eventlogs", "compiled": true, "compiled_code": "\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0443 \u0430\u043a\u043a\u0430\u043d\u0442\u043e\u0432 \u043f\u043e eventlogs\n select distinct account_id,                    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        subject_id as subscription_id,          -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        occured_at as start_occured_at,         -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        cast(occured_at as date) as start_date, -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        cast(expires_at as date) as end_date,   -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        expires_at as end_occured_at            -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        from `dwh-wazzup`.`dbt_nbespalov`.`stg_eventLogs` where \n        log_type='billingPackages'\n        and expires_at is not null", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscription_who_paid_missing_data__datetime_and_expiresat_from_eventlogs`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.446143Z", "completed_at": "2025-05-21T12:31:00.455876Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:00.462263Z", "completed_at": "2025-05-21T12:31:00.462274Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.10379409790039062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscription_who_paid_missing_data__paidat_and_expiresat_from_eventlogs", "compiled": true, "compiled_code": " -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0443 \u0430\u043a\u043a\u0430\u043d\u0442\u043e\u0432 \u043f\u043e eventlogs\n select distinct account_id,                    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        subject_id as subscription_id,          -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        cast(paid_at as date) as start_date,    -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        cast(expires_at as date) as end_date,   -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        paid_at as start_occured_at,            -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        expires_at as end_occured_at            -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        from `dwh-wazzup`.`dbt_nbespalov`.`stg_eventLogs` \n        where log_type='billingPackages'\n        and expires_at is not null\n        and paid_at is not null", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscription_who_paid_missing_data__paidat_and_expiresat_from_eventlogs`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.451101Z", "completed_at": "2025-05-21T12:31:00.461903Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:00.465347Z", "completed_at": "2025-05-21T12:31:00.465355Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.10075116157531738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_payments_card", "compiled": true, "compiled_code": "with eventlogs as (                   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043e\u043f\u043b\u0430\u0442\n  select distinct TIMESTAMP_TRUNC(cast(promised_payment_start as timestamp), hour) as promised_payment_start,\n  TIMESTAMP_TRUNC(cast(promised_payment_start_date as timestamp), hour) as promised_payment_start_date ,\n  subject_id,\n  promised_payment_type,\n  TIMESTAMP_TRUNC(promised_payment_end_date, hour) as promised_payment_end_date\n   from  `dwh-wazzup`.`dbt_nbespalov`.`stg_eventLogs`\n  where promised_payment_start_date is not null \n  and promised_payment_end_date is not null\n)\n\n\nselect                                                              \n    accountId as account_id,                                -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n    cast(payments.completedAt as date) as paid_date,        -- \u0414\u0430\u0442\u0430 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0430 \u0432 state = completed, \u0444\u043e\u0440\u043c\u0430\u0442 2022-11-29. \u042d\u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0438\u043b\u0438 \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u0441\u0430\u043c\u0438 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043c \u0441\u0435\u0431\u0435 \u043f\u043b\u0430\u0442\u0435\u0436 \u0438 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0447\u0442\u043e \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0432\u0435\u0437\u0434\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c\n    payments.completedAt as paid_at,                        -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0430 \u0432 state = completed, \u0444\u043e\u0440\u043c\u0430\u0442 2022-11-29. \u042d\u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0438\u043b\u0438 \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u0441\u0430\u043c\u0438 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043c \u0441\u0435\u0431\u0435 \u043f\u043b\u0430\u0442\u0435\u0436 \u0438 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0447\u0442\u043e \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0432\u0435\u0437\u0434\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c\n    payments.currency,                                      -- \u0412\u0430\u043b\u044e\u0442\u0430, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f:RUR - \u0440\u0443\u0431\u043b\u0438, USD - \u0434\u043e\u043b\u043b\u0430\u0440\u044b, EUR - \u0435\u0432\u0440\u043e, KZT - \u0442\u0435\u043d\u0433\u0435\n    sum,                                                    -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b. \u0414\u043e 12 \u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043e \u0437\u0430\u043f\u044f\u0442\u043e\u0439, 2 \u043f\u043e\u0441\u043b\u0435\n    vat,                                                    -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0430\u043b\u043e\u0433\u0430. \u0414\u043e 12 \u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043e \u0437\u0430\u043f\u044f\u0442\u043e\u0439, 2 \u043f\u043e\u0441\u043b\u0435\n    guid as guid,                                           -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u043f\u043b\u0430\u0442\u044b.\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f Postgress \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0437\u0430\u043f\u0438\u0441\u0438\n    cast(json_value(payments.details,'$.partnerAccountId') as INTEGER) as partner_account_id, -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts (\u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 payment_provider = partner)\n    json_value(payments.details,'$.provider') as payment_provider,                   -- \u041e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043f\u043b\u0430\u0442\u0435\u0436\u0430: yandexkassa - \u042f\u043d\u0434\u0435\u043a\u0441 \u041a\u0430\u0441\u0441\u0430, tinkoff - \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444, stripe - Stripe, cashless - \u0431\u0435\u0437\u043d\u0430\u043b, \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u043d\u0435 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e, intellect_money/intellectMoney - \u0443\u0441\u0442\u0430\u0440\u0435\u043b\u043e \u0432 \u0441\u0432\u044f\u0437\u0438 \u0441 \u0443\u0445\u043e\u0434\u043e\u043c \u043e\u0442 IntellectMoney, partner - \u041e\u043f\u043b\u0430\u0442\u0430 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u043e\u0433\u043e \u0441\u0447\u0435\u0442\u0430. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c sum = 0, setPromisedPayment - \u041e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0439 \u043f\u043b\u0430\u0442\u0435\u0436. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c sum = 0\n    cast(json_value(payments.details,'$.isSbpPayment') as bool) as is_spb_payment,   -- \u042f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u043e\u043c \u0447\u0435\u0440\u0435\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0431\u044b\u0441\u0442\u0440\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 (\u0421\u041f\u0411)\n    json_value(payments.details,'$.subscriptionUpdateId') subscription_update_id,    -- guid \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c subscription_id. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_subscriptionUpdates\n    json_value(payments.details,'$.nextTimeAutoRenewal') as next_time_auto_renewal,  -- \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0440\u0430\u0437 \u0431\u0443\u0434\u0435\u0442 \u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0434\u043b\u0435\u043d\u0438\u0435\n    subscriptionId as subscription_id,                      -- \u0418\u043d\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u043e\u043b\u044e guid \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_billingPackages\n    state,                                                  -- \u0421\u0442\u0430\u0442\u0443\u0441 \u043f\u043b\u0430\u0442\u0435\u0436\u0430. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: created \u043f\u043b\u0430\u0442\u0435\u0436 \u0441\u043e\u0437\u0434\u0430\u043d, completed \u043f\u043b\u0430\u0442\u0435\u0436 \u043f\u0440\u043e\u0448\u0435\u043b, canceled \u043f\u043b\u0430\u0442\u0435\u0436 \u043e\u0442\u043c\u0435\u043d\u0435\u043d\n    payments.details,                                       -- JSON \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438, \u0434\u0435\u0442\u0430\u043b\u044f\u043c\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0432 yml\n    promised_payment_type,                                  -- \u0422\u0438\u043f \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: renewal, pay, addQuantity, raiseTariff\n    promised_payment_end_date,                              -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    promised_payment_start,                                 -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    datetime(date_add(cast(json_value(payments.details,'$.activeUntil') as timestamp),interval accounts.time_zone hour)) as active_until,\n    datetime(date_add(cast(json_value(payments.details,'$.startDate') as timestamp),interval accounts.time_zone hour)) as payments_start_date \n    from `dwh-wazzup`.`wazzup`.`payments`  payments\n    left join `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts \n    on accounts.account_id=payments.accountId\n    \n    left join eventlogs \n    on TIMESTAMP_TRUNC(date_add(cast(json_value(payments.details,'$.startDate') as timestamp),interval accounts.time_zone hour), hour)=eventlogs.promised_payment_start_date\n    and payments.subscriptionId=eventlogs.subject_id\n\n/*\nsum = 0 when state in ('created','completed')\ncreated - \u043f\u043b\u0430\u0442\u0435\u0436 \u0441\u043e\u0437\u0434\u0430\u043d, \u043d\u043e \u043d\u0435 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\ncompleted - \u043f\u043b\u0430\u0442\u0435\u0436 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\nsum = 0 , \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u043e\u0431\u0435\u0449\u0430\u043d\u044b\u043d\u0439 \u043f\u043b\u0430\u0442\u0435\u0436 \u0438\u043b\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u0430\u044f \u043e\u043f\u043b\u0430\u0442\u0430\n*/", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_payments_card`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.453792Z", "completed_at": "2025-05-21T12:31:00.462831Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:00.505299Z", "completed_at": "2025-05-21T12:31:00.505311Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.14360427856445312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_registration_data__first_parent_and_refparent", "compiled": true, "compiled_code": "-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u0430\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439, \u0441\u0432\u044f\u0437\u044f\u043c\u0438 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c/\u0440\u0435\u0444.\u043f\u0430\u043f\u043e\u0439 \u0438 \u0434\u0430\u0442\u043e\u0439 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0432\u044b\u0445 \u0441\u0432\u044f\u0437\u0435\u0439   \n\nwith first_partner_and_refparentid_groupped as (            -- \u0422\u044f\u043d\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441 \u043f\u0435\u0440\u0432\u044b\u043c\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u043c\u0438, \u0440\u0435\u0444.\u043f\u0430\u043f\u0430\u043c\u0438 \u0438 \u0434\u0430\u0442\u043e\u0439 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0441\u0432\u044f\u0437\u0438 \u0441 \u043d\u0438\u043c\u0438\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts__first_partner_and_refparent_groupped`\n),\n\naffiliates as (         -- \u0422\u044f\u043d\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432\u0441\u0435 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u0438\u0435 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u0438 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u044b. \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442.\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_affiliates`\n),\n\naccounts as (           -- \u0422\u044f\u043d\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` \n),\n\nregistration_data_with_first_parent_and_refparent as (          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u0430\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439, \u0441\u0432\u044f\u0437\u044f\u043c\u0438 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c/\u0440\u0435\u0444.\u043f\u0430\u043f\u043e\u0439 \u0438 \u0434\u0430\u0442\u043e\u0439 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0432\u044b\u0445 \u0441\u0432\u044f\u0437\u0435\u0439   \n\nselect \n    accounts.account_id,                                                                                        -- \u041d\u043e\u043c\u0435\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    register_at as start_occured_at,                                                                            -- \u041d\u0430\u0447\u0430\u043b\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0432\u044f\u0437\u0438 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u0438 \u0440\u0435\u0444.\u043f\u0430\u043f\u043e\u0439 (\u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430)\n    coalesce(datetime(end_occured_at),datetime(current_timestamp(),'Europe/Moscow')) as end_occured_at,         -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0442\u043e \u0435\u0441\u0442\u044c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430/\u0440\u0435\u0444.\u043f\u0430\u043f\u044b. \u0415\u0441\u043b\u0438 Null, \u0442\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u041c\u0421\u041a\n    coalesce(first_partner_and_refparentid.partner_id,affiliates.partner_id) as partner_id,                     -- \u041f\u0435\u0440\u0432\u044b\u0439 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430. \u0415\u0441\u043b\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0435 \u0431\u044b\u043b\u043e (null), \u0442\u043e \u043f\u0440\u0438\u0441\u0432\u0430\u0435\u0432\u0430\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 affilates\n    coalesce(first_partner_and_refparentid.refparent_id, affiliates.refparent_id) as refparent_id               -- \u041f\u0435\u0440\u0432\u044b\u0439 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0440\u0435\u0444.\u043f\u0430\u043f\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430. \u0415\u0441\u043b\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0435 \u0431\u044b\u043b\u043e (null), \u0442\u043e \u043f\u0440\u0438\u0441\u0432\u0430\u0435\u0432\u0430\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 affilates\n\nfrom accounts\nleft join first_partner_and_refparentid_groupped first_partner_and_refparentid\n    on accounts.account_id=first_partner_and_refparentid.account_id\nleft join affiliates\n    on affiliates.child_id=accounts.account_id\n)\n\n\nselect * from registration_data_with_first_parent_and_refparent", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_registration_data__first_parent_and_refparent`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.457075Z", "completed_at": "2025-05-21T12:31:00.465692Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:00.545465Z", "completed_at": "2025-05-21T12:31:00.545482Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1831517219543457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_registration_data__first_type", "compiled": true, "compiled_code": "-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0441 \u0434\u0430\u0442\u043e\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u043f\u0435\u0440\u0432\u044b\u043c \u0442\u0438\u043f\u043e\u043c \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0438 \u0434\u0430\u0442\u043e\u0439 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n\nwith accounts as (                  -- \u0422\u044f\u043d\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 stg_accounts\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`\n),\n\nint_accounts__first_type as (       -- \u0422\u044f\u043d\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 int_accounts__first_type\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts__first_type`\n),\n\nregistration_data_for_types as (                  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0441 \u0434\u0430\u0442\u043e\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u043f\u0435\u0440\u0432\u044b\u043c \u0442\u0438\u043f\u043e\u043c \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0438 \u0434\u0430\u0442\u043e\u0439 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430         \n    select accounts.account_id as account_id,           -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n    accounts.register_at as start_occured_at,           -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u043d\u0430\u0447\u0430\u043b\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0442\u0438\u043f\u0430\n    coalesce(int_accounts__first_type.first_value_type, accounts.type) as type,         -- \u0422\u0438\u043f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043d\u0438\u044f, \u0435\u0441\u043b\u0438 null, \u0442\u043e \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0432 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438\n    coalesce(datetime(end_occured_at), datetime(current_timestamp,'Europe/Moscow')) as end_occured_at       -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0435\u0441\u043b\u0438 null, \u0442\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n    from accounts left join int_accounts__first_type \n    on accounts.account_id=int_accounts__first_type.account_id\n    )\n\nselect * from registration_data_for_types", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_registration_data__first_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.459926Z", "completed_at": "2025-05-21T12:31:00.503921Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:00.546705Z", "completed_at": "2025-05-21T12:31:00.546718Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.23185276985168457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_minimum_trial_start_dates_situation", "compiled": true, "compiled_code": "with all_trial_dates as (\n            select *,\n                   row_number() over (partition by account_id order by date) rn\n            from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_minimum_trial_start_dates` starts\n            join `dwh-wazzup`.`dbt_nbespalov`.`stg_days`  days on starts.trial_start<= days.date and  days.date <=  starts.trial_end\n),\n\ntrials_at_the_moment as (\n            select account_id,\n                    rn as trial_at_the_moment,\n                    date as trial_date_at_the_moment\n            from all_trial_dates\n            where date = current_date()\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u0442\u0430\u043c\u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0442\u0440\u0438\u0430\u043b\u043e\u0432\nselect distinct all_trial_dates.account_id,\n     case when trials_at_the_moment.account_id is null \n            then max(all_trial_dates.date) over (partition by all_trial_dates.account_id)\n     when trial_end >= current_date() \n             then trial_date_at_the_moment\n     else max(trial_date_at_the_moment) over (partition by all_trial_dates.account_id) \n     end as trial_max_date_at_the_moment,               -- \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0442\u0440\u0438\u0430\u043b\u0430 \u0441\u0435\u0439\u0447\u0430\u0441\n\n     case when trial_end >= current_date() then cast(trial_at_the_moment as string)\n             else 'trial_ended'\n     end trial_max_day,                                 -- \u0415\u0441\u043b\u0438 \u0442\u0440\u0438\u0430\u043b \u0435\u0449\u0435 \u043d\u0435 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u0441\u044f, \u0442\u043e \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u044f \u043f\u043e account_id order by date\nfrom all_trial_dates\nleft join trials_at_the_moment on all_trial_dates.account_id = trials_at_the_moment.account_id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_minimum_trial_start_dates_situation`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.463564Z", "completed_at": "2025-05-21T12:31:00.546001Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:00.627576Z", "completed_at": "2025-05-21T12:31:00.627595Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.26999402046203613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_first_channel_added__by_transport", "compiled": true, "compiled_code": "select  account_id,                        -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    transport,                             -- \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442 \u043a\u0430\u043d\u0430\u043b\u0430\n    min(created_at) as channel_created_at  -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u0430\u043d\u0430\u043b\u0430\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary`\n    group by 1,2\n        -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u0435\u0440\u0432\u044b\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c \u043a\u0430\u043d\u0430\u043b\u043e\u043c \u043d\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0435 \u043f\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0443", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_first_channel_added__by_transport`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.724908Z", "completed_at": "2025-05-21T12:31:00.732606Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:00.738781Z", "completed_at": "2025-05-21T12:31:00.738792Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.10235381126403809, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_first_channel_date_and_transport", "compiled": true, "compiled_code": "with channels as (\n    select account_id, \n    created_at, \n    created_date,\n    transport,\n    row_number() over (partition by account_id order by created_at asc) rn\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary`),\n\nfirst_channel as (\n    select account_id,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    created_date,       -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u0430\u043d\u0430\u043b\u0430\n    transport           -- \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442 \u043a\u0430\u043d\u0430\u043b\u0430\n    from channels\n    where rn=1\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u0435\u0440\u0432\u044b\u043c\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043a\u0430\u043d\u0430\u043b\u0430\u043c\u0438 \u043d\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\nselect * from first_channel", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_first_channel_date_and_transport`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.727345Z", "completed_at": "2025-05-21T12:31:00.738106Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:00.742278Z", "completed_at": "2025-05-21T12:31:00.742288Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.14161086082458496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_active_with_active_subscription", "compiled": true, "compiled_code": "-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438 \u043a\u0430\u043d\u0430\u043b\u0430\u043c\u0438 \u0438 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\n select channels.account_Id,    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        channels.guid as channels_in_package,   -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u0430\u043d\u0430\u043b\u0430\n        transport,              -- \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442 \u043a\u0430\u043d\u0430\u043b\u0430\n        billingPackages.tariff, -- \u0422\u0430\u0440\u0438\u0444\n        paid_At                 -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary` channels\n    inner join `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billingPackages \n                                    on billingPackages.guid=channels.package_Id \n    where billingPackages.state='active' \n    --and paid_At is not null \n    and channels.deleted=False\n    and channels.state = 'active'", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_with_active_subscription`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.730970Z", "completed_at": "2025-05-21T12:31:00.739330Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:00.781919Z", "completed_at": "2025-05-21T12:31:00.781931Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.14030194282531738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_count_active_by_account", "compiled": true, "compiled_code": "with count_active as (\n    select channels.account_Id,     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n            count(distinct channels.guid) as channels_in_package    -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0432 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary` channels\n    inner join `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billingPackages \n                                    on billingPackages.guid=channels.package_Id \n    where billingPackages.state='active' \n    and \n       ((billingPackages.tariff = 'free' and paid_At is null) \n                                               or\n       (billingPackages.tariff != 'free' and paid_At is not null))                                          \n    and channels.deleted=False\n    group by 1)\nselect *    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443\nfrom count_active", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_count_active_by_account`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.733731Z", "completed_at": "2025-05-21T12:31:00.741782Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:00.782749Z", "completed_at": "2025-05-21T12:31:00.782761Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1779642105102539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_count_by_account", "compiled": true, "compiled_code": "with count_channels as (\n    select account_Id ,                             -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n            count(distinct guid) as channels_count  -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary`\n    where  deleted=False \n    group by 1\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443\nselect *\nfrom count_channels", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_count_by_account`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.735305Z", "completed_at": "2025-05-21T12:31:00.781287Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:00.823217Z", "completed_at": "2025-05-21T12:31:00.823228Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2183082103729248, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_transport_with_jinja", "compiled": true, "compiled_code": "select  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f\u0445 \u0432 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\nchannels.account_id,    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n count(distinct case when billing_packages.paid_at is not null \n and channels.state='active'\nand billing_packages.state='active'\nand billing_packages.is_free is distinct from True \n then channels.guid end) as channels_count_active_in_active_paid_subscription,      -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0432 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\ncount(distinct case when billing_packages.paid_at is not null \nand billing_packages.state='active'\nand billing_packages.is_free is distinct from True \n then channels.guid end) as channels_count_any_state_in_active_paid_subscription,   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0432 \u043b\u044e\u0431\u043e\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438 \u0432 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n\n\ncount(distinct case when channels.transport = 'avito' \nand billing_packages.paid_at is not null \nand billing_packages.state='active'\nand billing_packages.is_free is distinct from True \n then channels.guid end) as channels_avito_count_in_active_paid_subscription, -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0430 \u0432 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n\n count(distinct case when channels.transport = 'avito' \n and channels.state='active'\n and billing_packages.state='active'\nand billing_packages.paid_at is not null \nand billing_packages.is_free is distinct from True \n\n then channels.guid end) as channels_avito_active_count_in_active_paid_subscription -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0430 \u0432 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n  ,\n\ncount(distinct case when channels.transport = 'waba' \nand billing_packages.paid_at is not null \nand billing_packages.state='active'\nand billing_packages.is_free is distinct from True \n then channels.guid end) as channels_waba_count_in_active_paid_subscription, -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0430 \u0432 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n\n count(distinct case when channels.transport = 'waba' \n and channels.state='active'\n and billing_packages.state='active'\nand billing_packages.paid_at is not null \nand billing_packages.is_free is distinct from True \n\n then channels.guid end) as channels_waba_active_count_in_active_paid_subscription -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0430 \u0432 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n  ,\n\ncount(distinct case when channels.transport = 'whatsapp' \nand billing_packages.paid_at is not null \nand billing_packages.state='active'\nand billing_packages.is_free is distinct from True \n then channels.guid end) as channels_whatsapp_count_in_active_paid_subscription, -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0430 \u0432 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n\n count(distinct case when channels.transport = 'whatsapp' \n and channels.state='active'\n and billing_packages.state='active'\nand billing_packages.paid_at is not null \nand billing_packages.is_free is distinct from True \n\n then channels.guid end) as channels_whatsapp_active_count_in_active_paid_subscription -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0430 \u0432 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n  ,\n\ncount(distinct case when channels.transport = 'instagram' \nand billing_packages.paid_at is not null \nand billing_packages.state='active'\nand billing_packages.is_free is distinct from True \n then channels.guid end) as channels_instagram_count_in_active_paid_subscription, -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0430 \u0432 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n\n count(distinct case when channels.transport = 'instagram' \n and channels.state='active'\n and billing_packages.state='active'\nand billing_packages.paid_at is not null \nand billing_packages.is_free is distinct from True \n\n then channels.guid end) as channels_instagram_active_count_in_active_paid_subscription -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0430 \u0432 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n  ,\n\ncount(distinct case when channels.transport = 'tgapi' \nand billing_packages.paid_at is not null \nand billing_packages.state='active'\nand billing_packages.is_free is distinct from True \n then channels.guid end) as channels_tgapi_count_in_active_paid_subscription, -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0430 \u0432 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n\n count(distinct case when channels.transport = 'tgapi' \n and channels.state='active'\n and billing_packages.state='active'\nand billing_packages.paid_at is not null \nand billing_packages.is_free is distinct from True \n\n then channels.guid end) as channels_tgapi_active_count_in_active_paid_subscription -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0430 \u0432 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n  ,\n\ncount(distinct case when channels.transport = 'vk' \nand billing_packages.paid_at is not null \nand billing_packages.state='active'\nand billing_packages.is_free is distinct from True \n then channels.guid end) as channels_vk_count_in_active_paid_subscription, -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0430 \u0432 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n\n count(distinct case when channels.transport = 'vk' \n and channels.state='active'\n and billing_packages.state='active'\nand billing_packages.paid_at is not null \nand billing_packages.is_free is distinct from True \n\n then channels.guid end) as channels_vk_active_count_in_active_paid_subscription -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0430 \u0432 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n  ,\n\ncount(distinct case when channels.transport = 'telegram' \nand billing_packages.paid_at is not null \nand billing_packages.state='active'\nand billing_packages.is_free is distinct from True \n then channels.guid end) as channels_telegram_count_in_active_paid_subscription, -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0430 \u0432 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n\n count(distinct case when channels.transport = 'telegram' \n and channels.state='active'\n and billing_packages.state='active'\nand billing_packages.paid_at is not null \nand billing_packages.is_free is distinct from True \n\n then channels.guid end) as channels_telegram_active_count_in_active_paid_subscription -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0430 \u0432 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n  \n\n\n\n\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary` channels\nleft join  `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billing_packages\non channels.package_id=billing_packages.guid\nwhere deleted=false\ngroup by 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_transport_with_jinja`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.739871Z", "completed_at": "2025-05-21T12:31:00.822083Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:00.903373Z", "completed_at": "2025-05-21T12:31:00.903386Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.25408077239990234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_waba_per_week", "compiled": true, "compiled_code": "with waba_channels as (\n    select created_week,\n           guid,\n           is_new_channel\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary`\n    where transport = 'wapi'\n    ),\nwaba_created_per_week as (\n    select created_week,\n    is_new_channel,\n    \n    count(guid) as channels_count,\n    from waba_channels\n    group by 1,2\n    )\nselect * from waba_created_per_week", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_waba_per_week`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.987822Z", "completed_at": "2025-05-21T12:31:00.996283Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.002433Z", "completed_at": "2025-05-21T12:31:01.002444Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14145231246948242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_agg", "compiled": true, "compiled_code": "with\n    channels as (\n        select\n            account_id,\n            (\n                case\n                    when transport in ('waba', 'wapi')\n                    then 'waba'\n                    when transport = 'vk'\n                    then 'vk'\n                    else transport\n                end\n            ) as transport,\n            guid,\n            deleted,\n            state,\n            created_at\n        from `dwh-wazzup`.`dbt_nbespalov`.`stg_channels`\n        where temporary = false\n    ),\n\n    channel_history_with_active_partition as (\n        select\n            *,\n            sum(title_changed) over (\n                partition by channel_id order by id\n            ) as partition_no\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_channelHistory_with_active_partition`\n    ),\n\n    channel_agg as (\n        select\n            channels.state as channel_state,\n            transport,\n            coalesce(guid, channel_id) as channel_id,\n            occured_at,\n            (\n                case\n                    when\n                        lead(occured_at, 1) over (partition by channel_id order by id)\n                        is not null\n                    then lead(occured_at, 1) over (partition by channel_id order by id)\n                    when channels.state = 'active' and deleted = false\n                    then current_timestamp\n                    else occured_at\n                end\n            ) as occured_at_next,\n            partition_no,\n            package_id,\n            coalesce(\n                channel_history_with_active_partition.state, channels.state\n            ) as channel_current_state,\n            account_id,\n            created_at\n        from channels\n        left join\n            channel_history_with_active_partition\n            on channels.guid = channel_history_with_active_partition.channel_id\n    ),\n\n    min_occured_at as (\n        select channel_id, min(occured_at) as occured_at_next\n        from channel_agg\n        where transport in ('telegram', 'vk')\n        group by 1\n    ),\n\n    channel_start_telegram_vk as (\n        select\n            'active' as channel_state,          -- \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043a\u0430\u043d\u0430\u043b\u0430\n            transport,                          -- \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442 \u043a\u0430\u043d\u0430\u043b\u0430\n            min_occured_at.channel_id,          -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u0430\u043d\u0430\u043b\u0430\n            created_at as occured_at,           -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f\n            min_occured_at.occured_at_next,     -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u043e\u0431\u044b\u0442\u0438\u044f\n            0 as partition_no,                  -- \u041f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n            cast(null as string) as package_id, -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n            'active' as channel_current_state,  -- \u0422\u0435\u043a\u0443\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043a\u0430\u043d\u0430\u043b\u0430\n            account_id, -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n            created_at  -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u0430\u043d\u0430\u043b\u0430\n        from min_occured_at\n        left join channel_agg on channel_agg.channel_id = min_occured_at.channel_id\n        where transport in ('telegram', 'vk')\n        group by 1,2,3,4,5,6,7,8,9,10\n    ),\n\n    channel_agg_with_created_date as (\n        select *\n        from channel_agg\n        union all\n        select *\n        from channel_start_telegram_vk\n    )\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438 \u043a\u0430\u043d\u0430\u043b\u0430\u043c\u0438\nselect *\nfrom channel_agg_with_created_date", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_agg`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.991659Z", "completed_at": "2025-05-21T12:31:01.001952Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.005866Z", "completed_at": "2025-05-21T12:31:01.005876Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.14163684844970703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_channels_gupshup_migration_dynamics", "compiled": true, "compiled_code": "with snapshot as (\n    select *\n    from `dwh-wazzup`.`snapshots`.`channels_snapshot`\n    where temporary = False\n    and deleted = False\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043a\u0430\u043d\u0430\u043b\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0435\u0440\u0435\u0448\u043b\u0438 \u0441 Key-Reply \u043d\u0430 GupShup\nselect date_trunc(dbt_valid_to,week(monday)) week_dt,   -- \u041d\u0435\u0434\u0435\u043b\u044f \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430 \u0441 Key-Reply \u043d\u0430 GupShup\n        count(distinct guid) migrated_channels_count,   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0435\u0448\u0435\u0434\u0448\u0438\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432\nfrom snapshot   \nwhere dbt_valid_to is not null\ngroup by 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_channels_gupshup_migration_dynamics`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.996638Z", "completed_at": "2025-05-21T12:31:01.004814Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.046373Z", "completed_at": "2025-05-21T12:31:01.046384Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.13987374305725098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_waba_withdrawals", "compiled": true, "compiled_code": "SELECT ba.account_id\n     , ba.occured_date\n     , ba.occured_at\n     , ba.currency\n     , sum                      AS original_sum\n     , coalesce(sum * rur, sum) AS sum_in_rubles\nFROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba\n    LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted\n            ON exchange_rates_unpivoted._ibk = ba.occured_date\n    AND exchange_rates_unpivoted.currency = ba.currency\nWHERE object = 'withdrawal'", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_waba_withdrawals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.994417Z", "completed_at": "2025-05-21T12:31:01.005300Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.047429Z", "completed_at": "2025-05-21T12:31:01.047440Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1804032325744629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_first_payment_billing", "compiled": true, "compiled_code": "select account_id, -- \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        sum((case when partners_card_and_bank_payments.currency='RUR' then 1 else exchange_rates.RUR end)*sum) as billing_sum,  -- \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u041b\u041a\n        min(occured_date) as first_billing_date_partner -- \u0434\u0430\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u041b\u041a\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_payments_lk_card_and_bank` partners_card_and_bank_payments\nleft join  `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates \n          on partners_card_and_bank_payments.occured_date=exchange_rates._ibk and partners_card_and_bank_payments.currency=exchange_rates.currency\ngroup by 1\n    -- \u041f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u041b\u041a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_first_payment_billing`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:00.999369Z", "completed_at": "2025-05-21T12:31:01.006386Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.087091Z", "completed_at": "2025-05-21T12:31:01.087103Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2151775360107422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_full_sum__free_subscripions", "compiled": true, "compiled_code": "with billing_packages_with_tarif_info as (SELECT billingPackages.*, \n(case when billingPackages.period=12 then 0.8\nwhen billingPackages.period=6 then 0.9\nelse 1\nend) as period_discount,                    -- \u0421\u043a\u0438\u0434\u043a\u0430 \u0437\u0430 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 (10% \u0437\u0430 \u043f\u043e\u043b\u0433\u043e\u0434\u0430, 20% \u0437\u0430 \u0433\u043e\u0434)\ncast(created_at as date) as created_date,   -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nwazzup_tariff.sum as tariff_price,          -- \u0426\u0435\u043d\u0430 \u0442\u0430\u0440\u0438\u0444\u0430\naccounts.currency,                          -- \u0412\u0430\u043b\u044e\u0442\u0430\nbillingPackages.type as subscription_type   -- \u0422\u0438\u043f (\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442) \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages`  billingPackages \n left join `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts on accounts.account_id=billingPackages.account_id\nleft join `dwh-wazzup`.`analytics_tech`.`wazzup_tariff` wazzup_tariff \non wazzup_tariff.currency=accounts.currency \nand billingPackages.tariff=wazzup_tariff.tariff\nwhere is_free=True and period<13),\n\nsubscription_sum_with_full_price as (\n\nselect *, tariff_price*period_discount*period*quantity as full_tarif_sum \nfrom billing_packages_with_tarif_info),\n\nsubscrption_with_full_price_converted as (\n\nselect subscription_sum_with_full_price.*,  (case\n        when subscription_sum_with_full_price.currency = 'RUR'  then full_tarif_sum\n        when RUR is not null then  full_tarif_sum * RUR\n        when subscription_sum_with_full_price.currency = 'EUR'  and RUR is null then  full_tarif_sum * 85 \n        when subscription_sum_with_full_price.currency = 'USD'  and RUR is null then  full_tarif_sum * 75\n        when subscription_sum_with_full_price.currency = 'KZT' and RUR is null then  full_tarif_sum * 0.24\n    end) as full_tarif_sum_in_rubles from subscription_sum_with_full_price  -- \u0426\u0435\u043d\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445 \u0441 \u0444\u0438\u043a\u0441 \u043a\u0443\u0440\u0441\u043e\u043c\n\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted \n    on exchange_rates_unpivoted._ibk = subscription_sum_with_full_price.created_date\n    and exchange_rates_unpivoted.currency = subscription_sum_with_full_price.currency)\n\nselect subscrption_with_full_price_converted.*, \naccounts.type as account_type from subscrption_with_full_price_converted \ninner join `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts \non subscrption_with_full_price_converted.account_id=accounts.account_id\nwhere full_tarif_sum_in_rubles is not null\nand accounts.type not in ('partner-demo','employee','child-postpay')", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_full_sum__free_subscripions`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:01.003112Z", "completed_at": "2025-05-21T12:31:01.047032Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.127099Z", "completed_at": "2025-05-21T12:31:01.127109Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.25277018547058105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_first_integration_date_and_type", "compiled": true, "compiled_code": "with integrations_data as (\n    select account_id, \n    first_value((case when is_integration_not_valid then null else integration_type end) ignore nulls) over (partition by account_id order by created_at asc rows between unbounded preceding and unbounded following) as \n    integration_type_valid,\n    first_value(integration_type) over (partition by account_id order by created_at asc rows between unbounded preceding and unbounded following) as integration_type,\n    first_value((case when is_integration_not_valid then null else created_date end) ignore nulls) over (partition by account_id order by created_at asc rows between unbounded preceding and unbounded following) as \n    integration_type_valid_created_date,\n    first_value(created_date) over (partition by account_id order by created_at asc rows between unbounded preceding and unbounded following) as \n    created_date  from `dwh-wazzup`.`dbt_nbespalov`.`int_integrations_created_with_pipedrive`\n),\n\nfirst_integration as ( \n    select account_id,                      -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    integration_type,                       -- \u0422\u0438\u043f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    integration_type_valid,                 -- \u0422\u0418\u043f \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    integration_type_valid_created_date,    -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    created_date                            -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    from integrations_data\n    group by 1,2,3,4,5)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u0435\u0440\u0432\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\u043c\u0438, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u043d\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\nselect * from first_integration", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_first_integration_date_and_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:01.251943Z", "completed_at": "2025-05-21T12:31:01.263014Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.268331Z", "completed_at": "2025-05-21T12:31:01.268341Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.10405182838439941, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_integrations_with_type", "compiled": true, "compiled_code": "with integrations as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_integrations_created_with_pipedrive`\n),\n\naffiliates as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_affiliates`\n),\n\ntech_partner_info as (\n    select * from `dwh-wazzup`.`analytics_tech`.`tech_partner_info_account_crm_marketplace_bq`\n),\n\ncrm_marketplace as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_crmMarketplace`\n),\n\nintegration_types as (\n    select  integration_type, \n    api_type_field,  \n    integrations.created_at,\n    integrations.integration_end_date,\n    integrations.account_id,\n\t(case \n    when  integration_type not like '%api%' then integration_type\n    when marketplace_type is not null then marketplace_type\n    when crm_marketplace.crm_name is not null then  crm_marketplace.crm_name\n    when integration_type not like '%api%' then integration_type\n    when integrations.crm_name is not null then integrations.crm_name\n    when api_type_field like '%myenvy%' then 'EnvyCRM'\t\n    when api_type_field like '%s20%' then 'alfacrm_v3'\n    when api_type_field like '%apimonster%' then 'Api Monster'\n    when api_type_field like '%oasis38%' then 'oasisCRM'\n    when api_type_field like '%cbox%' then 'cboxCRM'\n    when api_type_field like '%clientbase%' then 'clientbase'\n    when api_type_field like '%envybox%' then 'EnvyCRM'\n    when api_type_field like '%ngrok%' then 'megaplan'\n    when api_type_field like '%brizo%' then 'brizoCRM'\n    when api_type_field like '%brizohooks%' then 'brizoCRM'\n    when api_type_field like '%clientix%' then 'klientiks'\n    when api_type_field like '%doktor365%' then 'doktor365'\n    when tech_partner_info.crm_name='JokerCRM' then 'JokerCRM'\n    when api_type_field is null then 'api'\n    when api_type_field like '%fitbase%' then 'fitbase'\n    when (REGEXP_EXTRACT(api_type_field,  r'([a-z0-9-]*)\\.[a-z]*\\/'))  is null then 'api'\n    else REGEXP_EXTRACT(api_type_field,  r'([a-z0-9-]*)\\.[a-z]*\\/')\n    END) as integration_type_api,\n    coalesce(crm_marketplace.crm_name,coalesce(tech_partner_info.crm_name, marketplace_refparent.crm_name)) as marketplace_name, \n    --\u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0435\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u0438\u0437 \u043d\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u043a\u0435. \u0435\u0441\u043b\u0438 \u0435\u0433\u043e \u043d\u0435\u0442, \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0438\u043a\u0430 \u043e\u0442\u0434\u0435\u043b\u0430 \u043f\u0440\u043e\u0434\u0430\u0436\n    tech_partner_info.isMarketplace as is_marketplace,\n    partner_id,\n    from integrations\n    left join affiliates on cast(affiliates.child_id as string)=cast(integrations.account_id as string)\n    left join tech_partner_info on tech_partner_info.account_id=cast(affiliates.partner_id as string)\n    left join tech_partner_info marketplace_refparent on marketplace_refparent.account_id=cast(affiliates.refparent_id as string)\n    left join crm_marketplace on crm_marketplace.account_id=affiliates.partner_id),\n\ninegrations_with_marketplace_name as (\nselect integration_type,            -- \u0422\u0438\u043f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f\n    integration_types.account_id,   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    created_at,                     -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    integration_end_date,           -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    partner_id,                     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n     (\n    case when integration_type not like '%api%' then  coalesce(crm_marketplace.crm_name,integration_type)\n    when crm_marketplace.crm_name is not null then crm_marketplace.crm_name\n    when integration_type_api!='api' then coalesce(integration_types.marketplace_name, integration_type_api)\n    when marketplace_name is not null then marketplace_name\n    else 'api'\n    end\n    ) as integration_type_with_api  -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    from integration_types\n    left join crm_marketplace on LOWER(integration_types.integration_type_api)=lower(crm_marketplace.crm_code))\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0442\u0438\u043f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 api \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nselect * from inegrations_with_marketplace_name", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_integrations_with_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:01.257381Z", "completed_at": "2025-05-21T12:31:01.266013Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.271045Z", "completed_at": "2025-05-21T12:31:01.271054Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.10344123840332031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_integrations_with_type_with_pipedrive", "compiled": true, "compiled_code": "with integrations as (\n    select *, \n    row_number() over (partition by account_id, created_date order by created_at desc) as rn_created_on_day\n     from `dwh-wazzup`.`dbt_nbespalov`.`int_integrations_created_with_pipedrive`\n),\n\nintegrations_deduplicated as (\n    select * from integrations\n    where rn_created_on_day=1\n),\n\nintegrations_with_correct_end_date as (\n    select *, lag(created_date,1,current_date) over (partition by account_id order by created_date desc)\n    as next_integration_created_date\n     from integrations_deduplicated\n\n),\n\naffiliates as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_affiliates`\n),\n\ntech_partner_info as (\n    select * from `dwh-wazzup`.`analytics_tech`.`tech_partner_info_account_crm_marketplace_bq`\n),\n\ncrm_marketplace as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_crmMarketplace`\n),\n\nintegration_types as (\n    select  integration_type, \n    api_type_field,  \n    integrations.created_at,\n    (case when integrations.integration_end_date>=next_integration_created_date \n    then next_integration_created_date\n    else integration_end_date\n    end) as integration_end_date,\n    integrations.account_id,\n    state,\n\t(case \n    when  integration_type not like '%api%' then integration_type\n    when marketplace_type is not null then marketplace_type\n    when crm_marketplace.crm_name is not null then  crm_marketplace.crm_name\n    when integration_type not like '%api%' then integration_type\n    when integrations.crm_name is not null then integrations.crm_name\n    when api_type_field like '%myenvy%' then 'EnvyCRM'\t\n    when api_type_field like '%s20%' then 'alfacrm_v3'\n    when api_type_field like '%apimonster%' then 'Api Monster'\n    when api_type_field like '%oasis38%' then 'oasisCRM'\n    when api_type_field like '%cbox%' then 'cboxCRM'\n    when api_type_field like '%clientbase%' then 'clientbase'\n    when api_type_field like '%envybox%' then 'EnvyCRM'\n    when api_type_field like '%ngrok%' then 'megaplan'\n    when api_type_field like '%brizo%' then 'brizoCRM'\n    when api_type_field like '%brizohooks%' then 'brizoCRM'\n    when api_type_field like '%clientix%' then 'klientiks'\n    when api_type_field like '%doktor365%' then 'doktor365'\n    when tech_partner_info.crm_name='JokerCRM' then 'JokerCRM'\n    when api_type_field is null then 'api'\n    when api_type_field like '%fitbase%' then 'fitbase'\n    when (REGEXP_EXTRACT(api_type_field,  r'([a-z0-9-]*)\\.[a-z]*\\/'))  is null then 'api'\n    else REGEXP_EXTRACT(api_type_field,  r'([a-z0-9-]*)\\.[a-z]*\\/')\n    END) as integration_type_api,\n    coalesce(crm_marketplace.crm_name,coalesce(tech_partner_info.crm_name, marketplace_refparent.crm_name)) as marketplace_name, \n    domain,\n    --\u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0435\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u0438\u0437 \u043d\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u043a\u0435. \u0435\u0441\u043b\u0438 \u0435\u0433\u043e \u043d\u0435\u0442, \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0438\u043a\u0430 \u043e\u0442\u0434\u0435\u043b\u0430 \u043f\u0440\u043e\u0434\u0430\u0436\n    tech_partner_info.isMarketplace as is_marketplace,\n    partner_id,\n    from integrations_with_correct_end_date integrations\n    left join affiliates on cast(affiliates.child_id as string)=cast(integrations.account_id as string)\n    left join tech_partner_info on tech_partner_info.account_id=cast(affiliates.partner_id as string)\n    left join tech_partner_info marketplace_refparent on marketplace_refparent.account_id=cast(affiliates.refparent_id as string)\n    left join crm_marketplace on crm_marketplace.account_id=affiliates.partner_id),\n\ninegrations_with_marketplace_name as (\nselect integration_type,            -- \u0422\u0438\u043f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f\n    integration_types.account_id,   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    created_at,                     -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    integration_end_date,           -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    partner_id,                     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    state,                          -- \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n     (\n    case when integration_type not like '%api%' then  coalesce(crm_marketplace.crm_name,integration_type)\n    when crm_marketplace.crm_name is not null then crm_marketplace.crm_name\n    when integration_type_api!='api' then coalesce(integration_types.marketplace_name, integration_type_api)\n    when marketplace_name is not null then marketplace_name\n    else 'api'\n    end\n    ) as integration_type_with_api, -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    domain                          -- \u0414\u043e\u043c\u0435\u043d \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    from integration_types\n    left join crm_marketplace on LOWER(integration_types.integration_type_api)=lower(crm_marketplace.crm_code)\n    and status='published'),\n\n    integration_with_dates as (\n\nselect *,\ncast(created_at as date ) as integration_start_date,                -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\ndate_trunc(created_at, month) as integration_start_month,           -- \u041c\u0435\u0441\u044f\u0446 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\ndate_trunc(integration_end_date, month) as integration_end_month    -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n from inegrations_with_marketplace_name)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0442\u0438\u043f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 api \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f pipedrive\n select * from integration_with_dates", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_integrations_with_type_with_pipedrive`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:01.261204Z", "completed_at": "2025-05-21T12:31:01.268859Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.311131Z", "completed_at": "2025-05-21T12:31:01.311142Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.14181733131408691, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_integrations_active_period", "compiled": true, "compiled_code": "with integrations_min_max_date as \n\n(select * from `dwh-wazzup`.`dbt_nbespalov`.`int_integrations_min_max_date`),\n\ngenerated_periods as (\n    select Period\n    from integrations_min_max_date t \n    join UNNEST(GENERATE_DATE_ARRAY(t.min_date, t.max_date)) period\n),\n\nspecific_integrations as (\n   select \n        account_id, \n        case when integration_type like '%amo%' then 'AMO'\n             when integration_type like  '%bitrix%' then 'Bitrix24'\n             when integration_type like  '%hubspot%' then 'Hubspot'\n             when integration_type like '%zoho%' then 'Zoho'\n             when integration_type like '%pipe%' then 'Pipedrive'  -- \u0442\u0438\u043f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0435\u0449\u0435 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0432\u0440\u043e\u0434\u0435\n             when integration_type like '%api%' then 'API'\n             end as integration_type,\n        created_date,\n        integration_end_date\n   from `dwh-wazzup`.`dbt_nbespalov`.`stg_integrations`\n   where    integration_type like '%amo%'    \n             or integration_type like  '%bitrix%' \n             or integration_type like  '%hubspot%'\n             or integration_type like '%zoho%'  \n             or integration_type like '%pipe%'  \n             or integration_type like '%api%')\n\n    select *\n    from specific_integrations\n    left join generated_periods ii   \n        on ii.period >= cast(created_date as date)\n           and ii.period <= integration_end_date", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_integrations_active_period`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:01.264107Z", "completed_at": "2025-05-21T12:31:01.271565Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.350774Z", "completed_at": "2025-05-21T12:31:01.350785Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.18173718452453613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_old_billing_with_who_paid", "compiled": true, "compiled_code": "with billing_data as (\nselect  account_id,\n        guid,\n        paid_at, \n        object,\n        payment_method,\n        start_at,\n        end_at\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_old_billing` \n        ),\n\nbilling_data_with_nulls as (\nselect *, \nsum(case when payment_method is not null then 1 end) over (partition by account_id order by paid_at) as r_close\n\nfrom billing_data),\n\nbilling_data_with_fill_null as \n\n(select account_id,\n        guid,\n        object,\n        paid_at, \n        start_at,\n        end_at,\n        first_value(payment_method) over (partition by account_id,r_close order by paid_at asc) as partner_account_id \n        from  billing_data_with_nulls),\n                      \nbilling_data_cleared as (\n    select account_id,          -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        guid,                   -- guid \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n        paid_at as start_at,    -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        end_at,                 -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        cast(paid_at as date) as start_date,-- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        cast(end_at as date) as end_date,   -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        cast(partner_account_id as int) partner_account_id, -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        paid_at                 -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b\n        from billing_data_with_fill_null\n        where object='package' and paid_at is not null\n)\n    -- \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0431\u0438\u043b\u043b\u0438\u043d\u0433\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043f\u043b\u0430\u0442\u0435\u043b\u044c\u0449\u0438\u043a\u0435. \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u0432 2022\nselect * from billing_data_cleared", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_old_billing_with_who_paid`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:01.266465Z", "completed_at": "2025-05-21T12:31:01.311495Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.392589Z", "completed_at": "2025-05-21T12:31:01.392600Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.22254562377929688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid__count_distinct_visitkas_visitors", "compiled": true, "compiled_code": "Select distinct\n        cast(dt.date as date) date,\n        te.cmuserid,\n        te.localuserid as visitkas_users\nfrom `dwh-wazzup`.`analytics_tech`.`days` dt\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_visitkas_visitors_with_visit_time` te on cast(dt.date as date) = te.date\nwhere  te.cmuserid is not null", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid__count_distinct_visitkas_visitors`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:01.269219Z", "completed_at": "2025-05-21T12:31:01.391966Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.434986Z", "completed_at": "2025-05-21T12:31:01.434996Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2590334415435791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_abtest_group", "compiled": true, "compiled_code": "WITH all_data AS (\n  select cmuserid,\n  abTestsGroup,\n  profeat.jsonObjectKeys(abTestsGroup) key,\n  profeat.jsonObjectValues(abTestsGroup) values,\n  datetime\n  from `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test`\n  where abTestsGroup is not null\n  and cmuserid is not null\n  and event is distinct from 'visitka-enter'\n), \nkeys as (\nSELECT distinct cmuserid,\n            k,\n            offset\nFROM all_data,unnest(all_data.key) k\nWITH OFFSET AS offset\n),\nvalues as (\n  SELECT distinct all_data.cmuserid,\n                    k as abtest_name,\n                    v as abtest_group\n  FROM all_data,unnest(all_data.values) v\n  WITH OFFSET AS offset\n  join keys on all_data.cmuserid = keys.cmuserid\n                and OFFSET = keys.offset \n),\ncount_abgroup as (\nSELECT distinct cmuserid,\n                abtest_name,\n                abtest_group,\n                count(distinct abtest_group) over (partition by cmuserid,abtest_name) abgroup_count\nFROM values\nwhere abtest_group !='nan'\n)\nselect *\nfrom count_abgroup", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_abtest_group`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:01.518178Z", "completed_at": "2025-05-21T12:31:01.526585Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.530211Z", "completed_at": "2025-05-21T12:31:01.530220Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.1413109302520752, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_blocks_created", "compiled": true, "compiled_code": "with blocks_list as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_blocks_list`\n),\nall_events as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test`\n),\ndefining_next_events as (\nselect  events.cmuserid,\n        datetime as created_at,\n        lead(datetime) over (partition by events.cmuserid,firstevent order by datetime) saved_at,\n        event,\n        lead(event) over (partition by events.cmuserid,firstevent order by datetime) next_event,\n        firstevent,\n        SecondEvent\nfrom all_events  events\njoin blocks_list blocks on (events.event = blocks.FirstEvent \n                                    or events.event = blocks.SecondEvent)\n), first_created_block as ( \nselect cmuserid,\n       event,\n       min(created_at) as created_at,\n       min(saved_at) as saved_at,\n       date_diff(min(saved_at),min(created_at),second) as block_creation_time\nfrom defining_next_events\nwhere event = firstevent \n      and next_event = secondevent \ngroup by 1,2\n)\nselect *,\n percentile_cont(block_creation_time,0.75) over (partition by event) seventy_five_percentile\nfrom first_created_block", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_blocks_created`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:01.521803Z", "completed_at": "2025-05-21T12:31:01.529178Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.532887Z", "completed_at": "2025-05-21T12:31:01.532897Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.14014649391174316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_blocks_created_edits", "compiled": true, "compiled_code": "with blocks_list as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_blocks_list_edits`\n),\nall_events as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test`\n),\ndefining_next_events as (\nselect  events.cmuserid,\n        datetime as created_at,\n        lead(datetime) over (partition by events.cmuserid,first_event order by datetime) saved_at,\n        event,\n        lead(event) over (partition by events.cmuserid,first_event order by datetime) next_event,\n        first_event,\n        Second_Event\nfrom all_events  events\njoin blocks_list blocks on (events.event = blocks.First_Event \n                                    or events.event = blocks.Second_Event)\n), created_blocks as ( \nselect cmuserid,\n       event,\n      created_at as created_at,\n       saved_at as saved_at,\n       date_diff(saved_at,created_at,second) as block_creation_time\nfrom defining_next_events\nwhere event = first_event \n      and next_event = second_event \n)\nselect \n*,\nrow_number() over (partition by cmuserid,event) as block_number\nfrom created_blocks", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_blocks_created_edits`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:01.524419Z", "completed_at": "2025-05-21T12:31:01.530737Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.575520Z", "completed_at": "2025-05-21T12:31:01.575535Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1794579029083252, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_business_sphere_events_data", "compiled": true, "compiled_code": "with business_sphere_events_data as (\nselect\n    event,\n    first_value(event) over (partition by cmuserid order by datetime) as eventgroup,\n    row_number() over (partition by cmuserid order by datetime desc) rn,\n    first_value(datetime) over (partition by cmuserid order by datetime desc) business_select_datetime,\n    details.name,\n    cmuserid\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test` df\nwhere event like '%business-select%'\n        and cmuserid not in('4e9dd753-87c9-4056-b460-87454ba0ec63','30c7c64f-0523-4cb4-82c3-5de1986242dc')\n)\nselect * from business_sphere_events_data", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_business_sphere_events_data`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:01.527705Z", "completed_at": "2025-05-21T12:31:01.535337Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.616211Z", "completed_at": "2025-05-21T12:31:01.616224Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.17892217636108398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_localuserid_registration_date", "compiled": true, "compiled_code": "select distinct\n        cmuserid, \n       localuserid, \n       min(datetime) over (partition by cmuserid,localuserid) as registration_datetime,\n       cast(min(datetime) over (partition by cmuserid,localuserid) as date) as registration_date\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test` \nwhere event in ('register-confirm-code-success')\n        and cmuserid not in('4e9dd753-87c9-4056-b460-87454ba0ec63','30c7c64f-0523-4cb4-82c3-5de1986242dc')", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_localuserid_registration_date`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:01.531206Z", "completed_at": "2025-05-21T12:31:01.615536Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.657452Z", "completed_at": "2025-05-21T12:31:01.657464Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.21695446968078613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_localuserid_registration_attribution_devices", "compiled": true, "compiled_code": "select distinct localUserId, \n        date(dateTime) as event_date, \n        (case when url like '%?r=%' then url else null end) as url /* \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0442\u0440\u0430\u0444\u0430\u043a\u0430 */, \n        utm.utm_campaign, \n        utm.utm_source,\n        utm.utm_medium,\n        initReferrer,\n        device,\n        os,\n        row_number() over (partition by localUserId order by dateTime asc) as rn\n        from `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test`\n        where ((event in ('register-enter','sign-in-enter','landing.unique-visit')) or (event like '%business-select%') or (event like '%editor.add%'))", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_localuserid_registration_attribution_devices`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:01.533349Z", "completed_at": "2025-05-21T12:31:01.617212Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.697979Z", "completed_at": "2025-05-21T12:31:01.697991Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.25405168533325195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_cmuserid_movement_between_product_dimensions", "compiled": true, "compiled_code": "with all_data as (\nselect cmuserid,\n        event,\n        count(*) events_count\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test`\nwhere event in (\n  'editor.link.click',\n  'editor.tariff-change.click',\n  'editor.banner-off.click',\n  'editor.menu.click',\n  'my-sites.created-page.click',\n  'my-sites.analytics-disabled.click',\n  'my-sites.analytics.click',\n  'my-sites.statistics.click',\n  'my-sites.copy-link.click',\n  'my-sites.features.click',\n  'my-sites.profile.click',\n  'my-sites.create-new-pages-disabled.click',\n  'my-sites.create-new-pages.click',\n  'my-sites.notifications.click'\n)\ngroup by cmuserid,event),\nconversions_base as (\n  select cmuserid,\n        count(case when event in ('editor.menu.click',  'my-sites.analytics.click',\n                                                  'my-sites.statistics.click',\n                                                  'my-sites.copy-link.click',\n                                                  'my-sites.features.click',\n                                                  'my-sites.profile.click',\n                                                  'my-sites.notifications.click'\n                            ) then cmuserid  end)  as events_to_menu_count,\n         count(case when event in (\n                            'my-sites.created-page.click',\n                            'my-sites.create-new-pages.click'\n                            ) then cmuserid  end) as events_to_editor_count\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test`\nwhere event in (\n  'editor.link.click',\n  'editor.tariff-change.click',\n  'editor.banner-off.click',\n  'editor.menu.click',\n  'my-sites.created-page.click',\n  'my-sites.analytics-disabled.click',\n  'my-sites.analytics.click',\n  'my-sites.statistics.click',\n  'my-sites.copy-link.click',\n  'my-sites.features.click',\n  'my-sites.profile.click',\n  'my-sites.create-new-pages-disabled.click',\n  'my-sites.create-new-pages.click',\n  'my-sites.notifications.click'\n)\ngroup by cmuserid\n)\n\n,data_used_as_filters as(\n    select * from `dwh-wazzup`.`dbt_swazzup`.`int_cmuserid_all_info_that_used_as_filters`\n)\nselect data_used_as_filters.*,\n        event,\n        events_count,\n        events_to_editor_count,\n        events_to_menu_count\nfrom  data_used_as_filters\njoin all_data on data_used_as_filters.cmuserid = all_data.cmuserid\njoin conversions_base on data_used_as_filters.cmuserid = conversions_base.cmuserid", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_cmuserid_movement_between_product_dimensions`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:01.782941Z", "completed_at": "2025-05-21T12:31:01.790811Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.794457Z", "completed_at": "2025-05-21T12:31:01.794466Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.139923095703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_cmuserid_phone", "compiled": true, "compiled_code": "select cmuserid,\n    dateTime,\n    phone\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test`\nwhere usermobile is not null", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_cmuserid_phone`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:01.785880Z", "completed_at": "2025-05-21T12:31:01.793478Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.797019Z", "completed_at": "2025-05-21T12:31:01.797030Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.17752790451049805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_payments_attempts", "compiled": true, "compiled_code": "select\n    cmuserid,\n    if(e1.event = 'payment.attempt', 'payment.attempt.count', null) as event,\n    datetime,\n    date,\n    null as payment_success_count,\n    cast(null as timestamp) as next_date\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test` e1\nwhere event = 'payment.attempt'", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_payments_attempts`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:01.789280Z", "completed_at": "2025-05-21T12:31:01.795003Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.837909Z", "completed_at": "2025-05-21T12:31:01.837920Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1372220516204834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_payments_success", "compiled": true, "compiled_code": "select\n    localuserid, \n    cmuserid,\n    first_value(datetime) over (partition by cmuserid order by datetime) as first_payment_datetime,\n    datetime,\n    date(datetime) as date,\n    'payment.success' as event_name,\n    event,\n    details.name as payment_sum\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test`\nwhere event like '%payment.success%' and event not like '%payment.success.recurring%'", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_payments_success`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:01.791870Z", "completed_at": "2025-05-21T12:31:01.798919Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.877399Z", "completed_at": "2025-05-21T12:31:01.877409Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.17632484436035156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_payments_success_and_recurring", "compiled": true, "compiled_code": "select\n    localuserid, \n    cmuserid,\n    first_value(datetime) over (partition by cmuserid order by datetime) as first_payment_datetime,\n    datetime,\n    date(datetime) as date,\n    'payment.success' as event_name,\n    event,\n    details.name as payment_sum\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test`\nwhere event like '%payment.success%'", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_payments_success_and_recurring`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:01.795458Z", "completed_at": "2025-05-21T12:31:01.878094Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.959437Z", "completed_at": "2025-05-21T12:31:01.959452Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2147212028503418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_payments_trial_start", "compiled": true, "compiled_code": "select cmuserid, 1 as try_start\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test`\nwhere event = 'trial.start' and date >= '2022-04-10'", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_payments_trial_start`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:01.797495Z", "completed_at": "2025-05-21T12:31:01.878466Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:01.960136Z", "completed_at": "2025-05-21T12:31:01.960146Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2532954216003418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_payments_unsubscribe", "compiled": true, "compiled_code": "select cmuserid, datetime\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test`\nwhere event = 'payment.unsubscribe'", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_payments_unsubscribe`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:02.046117Z", "completed_at": "2025-05-21T12:31:02.056238Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:02.060942Z", "completed_at": "2025-05-21T12:31:02.060951Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14371562004089355, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_balances_end_of_month", "compiled": true, "compiled_code": "WITH test_accounts AS (\n                      SELECT account_id\n                      FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_test_accounts`\n                      ),\n     billing_affiliate AS (\n                      SELECT account_id\n                           , cast(ba.occured_at AS date)                                                                                  AS occured_date\n                           , ba.currency                                                                                                  AS currency\n                           , sum(original_sum) OVER (PARTITION BY account_id,ba.currency ORDER BY occured_at)                                  AS cum_original_sum\n                           , first_value(ba.currency) OVER (PARTITION BY account_id,cast(ba.occured_at AS date) ORDER BY occured_at DESC)      AS last_currency_of_the_day\n                           , first_value(ba.currency) OVER (PARTITION BY account_id,date_trunc(ba.occured_at, month) ORDER BY occured_at DESC) AS last_currency_of_the_month\n                           , occured_at\n                      FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba\n                          LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted \n                               ON exchange_rates_unpivoted._ibk = CAST (ba.occured_at AS DATE)\n                               AND exchange_rates_unpivoted.currency = ba.currency\n                      WHERE NOT EXISTS (\n                          SELECT 1\n                          FROM test_accounts\n                          WHERE test_accounts.account_id = ba.account_id\n                          )\n\n                      ),\n     transactions_per_day AS (\n                      SELECT DISTINCT account_id\n                                    , occured_date\n                                    , currency\n                                    , last_currency_of_the_day\n                                    , last_currency_of_the_month\n                                    , first_value(cum_original_sum) OVER (PARTITION BY account_id,currency,occured_date ORDER BY occured_at DESC) AS cum_original_sum\n                      FROM billing_affiliate tc\n                      ),\n     defining_lead_date AS (\n                      SELECT *\n                           , lead(occured_date, 1, current_date) OVER (PARTITION BY account_id,currency ORDER BY occured_date) AS next_date\n                      FROM transactions_per_day\n                      ),\n     creating_date_intervals AS (\n                      SELECT *\n                      FROM defining_lead_date\n                          JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_days` sd\n                          ON sd.date >= occured_date AND sd.date < next_date\n                      ),\n     defining_last_state_of_the_month AS (\n                      SELECT creating_date_intervals.date                                                                                   AS balance_date\n                           , cum_original_sum * coalesce(rur, 1)                                                                            AS balance_in_rubles\n                           , cum_original_sum                                                                                               AS balance_in_original_currency\n                           , last_currency_of_the_month                                                                                     AS currency\n                           , account_id                                                                                                     AS account_id\n                           , row_number() OVER (PARTITION BY date_trunc(creating_date_intervals.date, month),account_id ORDER BY date DESC) AS rn\n                           , rur\n                      FROM creating_date_intervals\n                          LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted\n                          ON exchange_rates_unpivoted._ibk = CAST (creating_date_intervals.date AS DATE)\n                          AND exchange_rates_unpivoted.currency = last_currency_of_the_month\n                      WHERE creating_date_intervals.currency = last_currency_of_the_month\n                      )\n                      -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0431\u0430\u043b\u0430\u043d\u0441\u044b \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u043d\u0430 \u043a\u043e\u043d\u0435\u0446 \u043c\u0435\u0441\u044f\u0446\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445 \u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\nSELECT date_trunc(balance_date, month)             AS balance_month                 -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\n     , cast(balance_in_rubles AS int64)            AS balance_in_rubles             -- \u0411\u0430\u043b\u0430\u043d\u0441 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n     , cast(balance_in_original_currency AS int64) AS balance_in_original_currency  -- \u0411\u0430\u043b\u0430\u043d\u0441 \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n     , currency                                                                     -- \u0412\u0430\u043b\u044e\u0442\u0430\n     , account_id                                                                   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nFROM defining_last_state_of_the_month\nWHERE rn = 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_balances_end_of_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:02.049836Z", "completed_at": "2025-05-21T12:31:02.060380Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:02.065899Z", "completed_at": "2025-05-21T12:31:02.065910Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.18433666229248047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_activation_activated_users_overall", "compiled": true, "compiled_code": "with first_date_defining as \n                              (select \n                                    distinct\n                                     users.id as user_id,\n                                    first_value(events.created_at) over (partition by users.id,wazzup_id order by events.created_at) first_time_value_over_userid\n                                from `dwh-wazzup`.`dbt_nbespalov`.`stg_users_filtered_from_test` users\n                                join `dwh-wazzup`.`dbt_nbespalov`.`stg_settings`  settings on users.id = settings.user_id\n                                join `dwh-wazzup`.`dbt_nbespalov`.`stg_event_activation` events on settings.id = events.settings_id \n                          )\n,ranks as (\n            select *,\n                    dense_rank() over (partition by user_id order by first_time_value_over_userid) rank\n            from first_date_defining\n            )\nselect * except(rank)\nfrom ranks\nwhere rank = 3", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_activation_activated_users_overall`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:02.053725Z", "completed_at": "2025-05-21T12:31:02.061458Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:02.105252Z", "completed_at": "2025-05-21T12:31:02.105269Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1425948143005371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_activation_users_active_periods", "compiled": true, "compiled_code": "with active_periods as (\n        select \n                        users.id as user_id,\n                        date_trunc(events._ibk,month) active_date,   \n                        'monthly' as period_type             \n        from `dwh-wazzup`.`dbt_nbespalov`.`stg_users_filtered_from_test` users\n        join `dwh-wazzup`.`dbt_nbespalov`.`stg_settings`  settings on users.id = settings.user_id\n        join `dwh-wazzup`.`dbt_nbespalov`.`stg_event_activation` events on settings.id = events.settings_id \n\n        union all\n\n        select \n                        users.id as user_id,\n                        date_trunc(events._ibk,week(monday)) active_date,   \n                        'weekly' as period_type             \n        from `dwh-wazzup`.`dbt_nbespalov`.`stg_users_filtered_from_test` users\n        join `dwh-wazzup`.`dbt_nbespalov`.`stg_settings`  settings on users.id = settings.user_id\n        join `dwh-wazzup`.`dbt_nbespalov`.`stg_event_activation` events on settings.id = events.settings_id \n)\nselect *\nfrom active_periods\nwhere date >= '2022-10-01' --\u043f\u0440\u0438\u043c\u0435\u0440\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_activation_users_active_periods`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:02.056782Z", "completed_at": "2025-05-21T12:31:02.063888Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:02.106190Z", "completed_at": "2025-05-21T12:31:02.106201Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1855626106262207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_successful_payments", "compiled": true, "compiled_code": "with subscription_plan_info as (\n    select * except(duration),\n    concat(duration,' ', unit) as duration\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_subscription_plan`\n ),filtered_users as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_users_filtered_from_test`\n ),inner_event as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_inner_event`\n ), \n    successful_payments_cleared_from_refunded as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_successful_payments_card_based_on_payment_table`\n ),\n    all_payments_union as (\n select\n       concat(date_trunc(inner_event.created_at,minute),inner_event.user_id) as id,\n        date_trunc(inner_event.created_at,minute) as paid_at,\n        cast(inner_event.created_at as date) paid_date,\n        inner_event.user_id,\n        case when name = 'bills_completed_partner' then 'cashless_partner'\n             when name = 'bills_completed_client' then 'cashless_client'\n             when name = 'payment_success_client' then 'payment_success_client'\n             when name = 'payment_success_partner' then 'payment_success_partner'\n             when name like '%payment_success%' then 'payment_success_old_event'\n        end as payment_type,\n        case when name like '%bills%' then 'cashlessPlan'\n             else subscrtiption_info.id\n        end  as subscription_plan_id,\n\n        inner_event.duration,\n        REGEXP_REPLACE(inner_event.duration,'[^0-9 ]','') duration_period,\n        inner_event.order_id,\n        inner_event.sum\nfrom  inner_event \njoin filtered_users on inner_event.user_id = filtered_users.id\nleft join subscription_plan_info  subscrtiption_info on inner_event.duration = subscrtiption_info.duration\n where (name like '%bills%' ) \n                         and (sum is null or sum is distinct from 0)\nunion all\n\nselect  distinct \n        concat(date_trunc(inner_event.created_at,minute),inner_event.user_id) as id,\n        date_trunc(inner_event.created_at,minute) as paid_at,\n        cast(inner_event.created_at as date) paid_date,\n        inner_event.user_id,        \n        case when name = 'bills_completed_partner' then 'cashless_partner'\n             when name = 'bills_completed_client' then 'cashless_client'\n             when name = 'payment_success_client' then 'payment_success_client'\n             when name = 'payment_success_partner' then 'payment_success_partner'\n             when name like '%payment_success%' then 'payment_success_old_event'\n        end as payment_type,\n         subscription_plan_id,\n        inner_event.duration,\n        REGEXP_REPLACE(inner_event.duration,'[^0-9 ]','') duration_period,\n        inner_event.order_id,\n        inner_event.sum\nfrom inner_event \njoin filtered_users on inner_event.user_id = filtered_users.id\nleft join subscription_plan_info  subscrtiption_info on inner_event.duration = subscrtiption_info.duration\nleft join successful_payments_cleared_from_refunded  on inner_event.order_id = successful_payments_cleared_from_refunded .order_id \n                                                        and inner_event.user_id = successful_payments_cleared_from_refunded .user_id\n\n where (name like '%payment_success%') \n                         and (sum is null or sum is distinct from 0)\n        and cast(inner_event.created_at as date) >= '2023-09-12' -- \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0441 \u044d\u0442\u043e\u0439 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0438 \u043f\u0430\u0434\u0430\u0442\u044c \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u043e\u0431 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u043e\u043f\u043b\u0430\u0442\u0435 \u0432 \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0435 \u043d\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432/\u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n      and not exists (\n             select order_id\n             from `dwh-wazzup`.`dbt_nbespalov`.`stg_payment` payment\n             where payment.order_id = inner_event.order_Id\n             and status = 'refundSucceeded'\n           )\n\nunion all\n\nselect\n        concat(date_trunc(payment.created_at,minute),user_id) as id,\n        date_trunc(payment.created_at,minute) as paid_at,\n        cast(payment.created_at as date) paid_date,\n        payment.user_id,\n        'payment_success_old_event' as payment_type,\n         subscription_plan_id as subscription_plan_id,\n        subscrtiption_info.duration,\n        REGEXP_REPLACE(subscrtiption_info.duration,'[^0-9 ]','') duration_period,\n        payment.order_id,\n        subscrtiption_info.amount as sum\nfrom successful_payments_cleared_from_refunded payment\njoin filtered_users on payment.user_id = filtered_users.id\njoin subscription_plan_info  subscrtiption_info on payment.subscription_plan_id = subscrtiption_info.id\n where  cast(payment.created_at as date) < '2023-09-12')\n,   defining_first_payment_date as (\n select user_id,\n        min(paid_date) first_paid_date,\n        min(paid_at) as first_paid_at\n from all_payments_union\n where sum is distinct from 1\n group by user_id\n)\nselect all_payments_union.*,\n        first_paid_date,\n        first_paid_at\nfrom all_payments_union\nleft join defining_first_payment_date using(user_id)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_successful_payments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:02.061983Z", "completed_at": "2025-05-21T12:31:02.106790Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:02.230989Z", "completed_at": "2025-05-21T12:31:02.231004Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.25849366188049316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_telegram_notifications_dynamics_distinct_intervals", "compiled": true, "compiled_code": "with check_times as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_telegram_notifications_dynamics_check_times`\n),\n\ndistinct_intervals AS (\n        SELECT account_id,                                                  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        TIME AS start_date,                                                 -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439\n        LEAD(TIME) OVER (PARTITION BY account_id ORDER BY TIME) end_date    -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439\n        FROM check_times)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439 \u0432 Telegram \u0441 \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438\nselect * from distinct_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_telegram_notifications_dynamics_distinct_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:02.064330Z", "completed_at": "2025-05-21T12:31:02.145558Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:02.231454Z", "completed_at": "2025-05-21T12:31:02.231467Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2592155933380127, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscription_who_paid_restore_missing_data__datetime_and_expiresat_deduplicated", "compiled": true, "compiled_code": "with missing_data_datetime_to_deduplicate as (\n         select *, \n         row_number() \n         over (partition by account_id, subscription_id, start_date order by end_date desc) rn \n         from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_who_paid_missing_data__datetime_and_expiresat_from_eventlogs`        \n         ),\n         \nmissing_data_datetime_deduplicated as (\n         select * from missing_data_datetime_to_deduplicate\n         where rn=1\n         )\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f  \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0443 \u0430\u043a\u043a\u0430\u043d\u0442\u043e\u0432 \u043f\u043e eventlogs \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0435\u0439 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\nselect * from missing_data_datetime_deduplicated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscription_who_paid_restore_missing_data__datetime_and_expiresat_deduplicated`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:02.316412Z", "completed_at": "2025-05-21T12:31:02.325474Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:02.329579Z", "completed_at": "2025-05-21T12:31:02.329589Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14536023139953613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_who_paid_restore_missing_data__paidat_and_expiresat_deduplicated", "compiled": true, "compiled_code": "with missing_data_paidat_and_expires_at_to_deduplicate as (\n         select *, \n         row_number() \n         over (partition by account_id, subscription_id, start_date order by end_date desc) rn \n         from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_who_paid_missing_data__paidat_and_expiresat_from_eventlogs`        \n         ),\n         \nmissing_data_paidat_and_expires_at_deduplicated as (\n         select * from missing_data_paidat_and_expires_at_to_deduplicate\n         where rn=1\n         )\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0443 \u0430\u043a\u043a\u0430\u043d\u0442\u043e\u0432 \u043f\u043e eventlogs \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0435\u0439 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\nselect * from missing_data_paidat_and_expires_at_deduplicated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_restore_missing_data__paidat_and_expiresat_deduplicated`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:02.320992Z", "completed_at": "2025-05-21T12:31:02.330149Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:02.378334Z", "completed_at": "2025-05-21T12:31:02.378344Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.1061701774597168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_card", "compiled": true, "compiled_code": "with payments_card as (select\n    account_id,                 -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    paid_date,                  -- \u0414\u0430\u0442\u0430 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0430 \u0432 state = completed\n    paid_at,                    -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0430 \u0432 state = completed\n    payments.currency,          -- \u0412\u0430\u043b\u044e\u0442\u0430\n    (case\n        when payments.currency = 'RUR'  then sum\n        when RUR is not null then  (sum-vat) * RUR\n        when payments.currency = 'EUR'  and RUR is null then  (sum-vat) * 85 \n        when payments.currency = 'USD'  and RUR is null then  (sum-vat) * 75\n        when payments.currency = 'KZT' and RUR is null then  (sum-vat) * 0.24\n    end) as sum_in_rubles,      -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    (sum-vat) as original_sum,  -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    (case\n        when payments.currency = 'USD'  then sum-vat\n        when USD is not null then  (sum-vat) / USD\n        when payments.currency = 'EUR'  and USD is null then  (sum-vat) /1.12\n        when payments.currency = 'USD'  and USD is null then  (sum-vat) * 75\n        when payments.currency = 'KZT' and USD is null then  (sum-vat) * 0.24\n        end \n    ) as sum_in_USD,            -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445\n    subscription_update_id,     -- ID \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\n    payment_provider,           -- \u041e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043f\u043b\u0430\u0442\u0435\u0436\u0430: yandexkassa - \u042f\u043d\u0434\u0435\u043a\u0441 \u041a\u0430\u0441\u0441\u0430, tinkoff - \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444, stripe - Stripe, cashless - \u0431\u0435\u0437\u043d\u0430\u043b, \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u043d\u0435 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e, intellect_money/intellectMoney - \u0443\u0441\u0442\u0430\u0440\u0435\u043b\u043e \u0432 \u0441\u0432\u044f\u0437\u0438 \u0441 \u0443\u0445\u043e\u0434\u043e\u043c \u043e\u0442 IntellectMoney, partner - \u041e\u043f\u043b\u0430\u0442\u0430 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u043e\u0433\u043e \u0441\u0447\u0435\u0442\u0430. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c sum = 0, setPromisedPayment - \u041e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0439 \u043f\u043b\u0430\u0442\u0435\u0436. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c sum = 0\n    is_spb_payment,             -- \u042f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u043e\u043c \u0447\u0435\u0440\u0435\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0431\u044b\u0441\u0442\u0440\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 (\u0421\u041f\u0411)\n    guid as guid,               -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u043f\u043b\u0430\u0442\u044b.\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f Postgress \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0437\u0430\u043f\u0438\u0441\u0438\n    partner_account_id,         -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u0435\u0441\u043b\u0438 \u043f\u043b\u0430\u0442\u0438\u043b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n    subscription_id,            -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    details,                    -- JSON \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438, \u0434\u0435\u0442\u0430\u043b\u044f\u043c\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0432 wazzup_staging_payments.yml\n    active_until,               -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430 \u043f\u043e \u0442\u0430\u0439\u043c \u0437\u043e\u043d\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    payments_start_date,        -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430 \u043f\u043e \u0442\u0430\u0439\u043c \u0437\u043e\u043d\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    promised_payment_type,      -- \u0422\u0438\u043f \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: renewal, pay, addQuantity, raiseTariff\n    promised_payment_start,     -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    promised_payment_end_date   -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_card`  payments\n    left join `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted \n    on exchange_rates_unpivoted._ibk = payments.paid_date\n    and exchange_rates_unpivoted.currency = payments.currency\n    where state = 'completed'\n  ) -- \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u043e\u043f\u043b\u0430\u0442\nselect * from payments_card", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_card`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:02.323228Z", "completed_at": "2025-05-21T12:31:02.332629Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:02.378943Z", "completed_at": "2025-05-21T12:31:02.378955Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.14472246170043945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts__partner_change_and_register_history", "compiled": true, "compiled_code": "-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432/\u0440\u0435\u0444.\u043f\u0430\u043f \u0441 \u0434\u0430\u0442\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n\nwith int_accounts_registration_data__first_parent_and_refparent as (            -- \u0422\u044f\u043d\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0434\u0430\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439, \u0441\u0432\u044f\u0437\u044f\u043c\u0438 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c/\u0440\u0435\u0444.\u043f\u0430\u043f\u043e\u0439 \u0438 \u0434\u0430\u0442\u043e\u0439 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0432\u044b\u0445 \u0441\u0432\u044f\u0437\u0435\u0439  \n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_registration_data__first_parent_and_refparent`\n),\n\npartner_data_change as (            -- \u0422\u044f\u043d\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u043c \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\n    select  \n        account_id,             -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n        start_occured_at,       -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        end_occured_at,         -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f, \u0434\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u044b\u043b \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n        partner_id,             -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        refparent_id            -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u043f\u044b\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts_events__partner_change` \n),\n\naccounts__partner_change_and_register_history as (          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432/\u0440\u0435\u0444.\u043f\u0430\u043f\n    select  account_id,                                                 -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n        start_occured_at,                                               -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0432\u044f\u0437\u0438 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u0438 \u0440\u0435\u0444.\u043f\u0430\u043f\u043e\u0439\n        cast(start_occured_at as date) as start_date,                   -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0432\u044f\u0437\u0438 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u0438 \u0440\u0435\u0444.\u043f\u0430\u043f\u043e\u0439\n        end_occured_at,                                                 -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043d\u0446\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0432\u044f\u0437\u0438 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u0438 \u0440\u0435\u0444.\u043f\u0430\u043f\u043e\u0439\n        cast(end_occured_at as date) as end_date,                       -- \u0414\u0430\u0442\u0430 \u043a\u043e\u043d\u0446\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0432\u044f\u0437\u0438 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u0438 \u0440\u0435\u0444.\u043f\u0430\u043f\u043e\u0439\n        partner_id,                                                     -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        refparent_id                                                    -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u043f\u044b\n    from int_accounts_registration_data__first_parent_and_refparent \n\n    UNION ALL \n\n    select \n        account_id,                                                     -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n        start_occured_at,                                               -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441\u0432\u044f\u0437\u0438 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u0438 \u0440\u0435\u0444.\u043f\u0430\u043f\u043e\u0439\n        cast(start_occured_at as date) as start_date,                   -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441\u0432\u044f\u0437\u0438 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u0438 \u0440\u0435\u0444.\u043f\u0430\u043f\u043e\u0439\n        end_occured_at,                                                 -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043d\u0446\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441\u0432\u044f\u0437\u0438 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u0438 \u0440\u0435\u0444.\u043f\u0430\u043f\u043e\u0439\n        cast(end_occured_at as date) as end_date,                       -- \u0414\u0430\u0442\u0430 \u043a\u043e\u043d\u0446\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441\u0432\u044f\u0437\u0438 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u0438 \u0440\u0435\u0444.\u043f\u0430\u043f\u043e\u0439\n        partner_id,                                                     -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        refparent_id                                                    -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u043f\u044b\n    from partner_data_change \n)\n\nselect * from accounts__partner_change_and_register_history", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts__partner_change_and_register_history`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:02.326065Z", "completed_at": "2025-05-21T12:31:02.338370Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:02.380045Z", "completed_at": "2025-05-21T12:31:02.380054Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.18381190299987793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts__type_change_history", "compiled": true, "compiled_code": "-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u0439 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\n\nwith type_change as (           -- \u0411\u0435\u0440\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043f\u043e \u0442\u0438\u043f\u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\n    select \n        account_id,                         -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts \n        type,                               -- \u041d\u043e\u0432\u044b\u0439 \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        start_occured_at,                   -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        end_occured_at                      -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f , \u0434\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u044b\u043b \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts_events__type_change`\n),\n\ntype_change_first_values as (           -- \u0411\u0435\u0440\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u0434\u0430\u0442\u043e\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u043f\u0435\u0440\u0432\u044b\u043c \u0442\u0438\u043f\u043e\u043c \u0438 \u0434\u0430\u0442\u043e\u0439 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \n    select \n        account_id,                                 -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts \n        type,                                       -- \u041f\u0435\u0440\u0432\u044b\u0439 \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        start_occured_at,                           -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u043d\u0430\u0447\u0430\u043b\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0442\u0438\u043f\u0430\n        end_occured_at                              -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0435\u0441\u043b\u0438 null, \u0442\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_registration_data__first_type`\n),\n\ntype_change_history as (            -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u0439 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \n    select \n        account_id,                                             -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts \n        type,                                                   -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        datetime(start_occured_at) as start_occured_at,         -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u043d\u0430\u0447\u0430\u043b\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0442\u0438\u043f\u0430\n        cast(start_occured_at as date) as start_date,           -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u043d\u0430\u0447\u0430\u043b\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0442\u0438\u043f\u0430\n        datetime(end_occured_at) as end_occured_at,             -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0435\u0441\u043b\u0438 null, \u0442\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n        cast(end_occured_at as date) as end_date                -- \u0414\u0430\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0435\u0441\u043b\u0438 null, \u0442\u043e \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0434\u0430\u0442\u0430\n    from type_change_first_values\n\n    UNION ALL \n\n    select \n        account_id,                                         -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts \n        type,                                               -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        datetime(start_occured_at) as start_occured_at,     -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        cast(start_occured_at as date) as start_date,       -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        datetime(end_occured_at) as end_occured_at,         -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        cast(end_occured_at as date) as end_date            -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    from type_change\n)\n    \nselect * from type_change_history", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts__type_change_history`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:02.330749Z", "completed_at": "2025-05-21T12:31:02.379606Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:02.459681Z", "completed_at": "2025-05-21T12:31:02.459695Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.22157669067382812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_agg_deduplicated", "compiled": true, "compiled_code": "\n\nwith channel_agg as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_agg`\n),\n\n\nchannel_agg_deduplicated as (\n    select package_id,\n    partition_no,\n    ca.account_id,\n    channel_id, \n    transport,\n    (case \n    when min(DATETIME(occured_at, 'Europe/Moscow')) is null then min(DATETIME(created_At, 'Europe/Moscow')) \n    else min(DATETIME(occured_at, 'Europe/Moscow')) end) as min_datetime,\n    max(DATETIME(occured_at_next, 'Europe/Moscow')) as max_datetime \n    from channel_agg ca\n    where channel_current_state='active'\n    group by 1,2,3,4,5\n),\nchanenels_with_waba_subscription as (\nselect  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438 \u043a\u0430\u043d\u0430\u043b\u0430\u043c\u0438 \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0435\u0439 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n(case when partition_no is null and channels_deduplicated.transport='waba' then channels.package_id else channels_deduplicated.package_id end) as package_id,   -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nchannels_deduplicated.partition_no, -- \u041f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\nchannels_deduplicated.account_id,   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nchannels_deduplicated.channel_id,   -- ID \u043a\u0430\u043d\u0430\u043b\u0430\nchannels_deduplicated.transport,    -- \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442 \u043a\u0430\u043d\u0430\u043b\u0430\nchannels_deduplicated.min_datetime, -- \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\nchannels_deduplicated.max_datetime  -- \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\nfrom channel_agg_deduplicated channels_deduplicated\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_channels` channels\non channels.guid=channels_deduplicated.channel_id)\nselect * from chanenels_with_waba_subscription", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_agg_deduplicated`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:02.333204Z", "completed_at": "2025-05-21T12:31:02.381115Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:02.500018Z", "completed_at": "2025-05-21T12:31:02.500031Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2624781131744385, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.Profeat_site.unique_int_accounts_partners_first_payment_billing_account_id.aad280f75a", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select account_id as unique_field\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_first_payment_billing`\n  where account_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:02.586104Z", "completed_at": "2025-05-21T12:31:02.593774Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:02.598870Z", "completed_at": "2025-05-21T12:31:02.598883Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14255023002624512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_integrations_active_groupped_by_accounts_type", "compiled": true, "compiled_code": "with accounts_info as (\n    Select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`),\nspecific_integrations as (\n   select \n        account_id, \n                 (case when integration_type like '%amo%' then 'AMO'\n                      when integration_type like  '%bitrix%' then 'Bitrix24'\n                      when integration_type like  '%hubspot%' then 'Hubspot'\n                      when integration_type like '%zoho%' then 'Zoho'\n                      when integration_type like '%pipe%' then 'Pipedrive'  -- \u0442\u0438\u043f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0435\u0449\u0435 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0432\u0440\u043e\u0434\u0435\n                      when integration_type like '%api%' then 'API'\n                      when integration_type like '%planfix%' then 'Planfix'\n                      when integration_type like '%megaplan%' then 'Megaplan'\n                      when integration_type like '%salesforce%' then 'Salesforce'\n                  end) as integration_type,\n\n                  row_number() over (partition by account_id order by created_at desc) rn,\n                  domain\n   from `dwh-wazzup`.`dbt_nbespalov`.`int_integrations_with_type_with_pipedrive`\n   where state = 'active'\n),\naccount_and_integrations as (\n    select accounts_info.account_id,\n           integration_type,\n           domain\n    from accounts_info\n    left join specific_integrations on accounts_info.account_id = specific_integrations.account_id and rn=1\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443\nselect account_id,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n       max(if(integration_type is not null, integration_type,'does_not_have_an_active_integration')) active_integration_name,   -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n       max(if(integration_type is not null, domain,'does_not_have_an_active_integration')) domain                               -- \u0414\u043e\u043c\u0435\u043d \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\nFrom account_and_integrations\ngroup by account_id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_integrations_active_groupped_by_accounts_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:02.591405Z", "completed_at": "2025-05-21T12:31:02.599533Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:02.643372Z", "completed_at": "2025-05-21T12:31:02.643382Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.10147619247436523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_integrations_last_created_integration_by_account_id", "compiled": true, "compiled_code": "with accounts_info as (\n    Select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`),\nspecific_integrations as (\n   select \n        account_id, \n                 (case when integration_type like '%amo%' then 'AMO'\n                      when integration_type like  '%bitrix%' then 'Bitrix24'\n                      when integration_type like  '%hubspot%' then 'Hubspot'\n                      when integration_type like '%zoho%' then 'Zoho'\n                      when integration_type like '%pipe%' then 'Pipedrive'  -- \u0442\u0438\u043f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0435\u0449\u0435 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0432\u0440\u043e\u0434\u0435\n                      when integration_type like '%api%' then 'API'\n                      when integration_type like '%planfix%' then 'Planfix'\n                      when integration_type like '%megaplan%' then 'Megaplan'\n                      when integration_type like '%salesforce%' then 'Salesforce'\n                  end) as integration_type,\n\n                  row_number() over (partition by account_id order by created_at desc) rn\n   from `dwh-wazzup`.`dbt_nbespalov`.`int_integrations_with_type_with_pipedrive`\n),\naccount_and_integrations as (\n    select accounts_info.account_id,\n           integration_type\n    from accounts_info\n    left join specific_integrations on accounts_info.account_id = specific_integrations.account_id and rn=1\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u0443\u044e \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nselect account_id,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n       max(if(integration_type is not null, integration_type,'does_not_have_an_active_integration')) last_integration_name  -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0431\u044b\u043b\u0430. \u0415\u0441\u043b\u0438 \u043d\u0435 \u0431\u044b\u043b\u043e - 'does_not_have_an_active_integration'\nFrom account_and_integrations\ngroup by account_id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_integrations_last_created_integration_by_account_id`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:02.594204Z", "completed_at": "2025-05-21T12:31:02.601407Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:02.643979Z", "completed_at": "2025-05-21T12:31:02.643990Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.13983440399169922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_integrations_not_deleted_and_error_groupped_by_accounts_type", "compiled": true, "compiled_code": "with accounts_info as (\n    Select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`),\nspecific_integrations as (\n   select \n        account_id, \n                 (case when integration_type like '%amo%' then 'AMO'\n                      when integration_type like  '%bitrix%' then 'Bitrix24'\n                      when integration_type like  '%hubspot%' then 'Hubspot'\n                      when integration_type like '%zoho%' then 'Zoho'\n                      when integration_type like '%pipe%' then 'Pipedrive'  -- \u0442\u0438\u043f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0435\u0449\u0435 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0432\u0440\u043e\u0434\u0435\n                      when integration_type like '%api%' then 'API'\n                      when integration_type like '%planfix%' then 'Planfix'\n                      when integration_type like '%megaplan%' then 'Megaplan'\n                      when integration_type like '%salesforce%' then 'Salesforce'\n                  end) as integration_type,\n\n                  row_number() over (partition by account_id order by created_at desc) rn\n   from `dwh-wazzup`.`dbt_nbespalov`.`int_integrations_with_type_with_pipedrive`\n   where state not in ('deleted','error')\n),\naccount_and_integrations as (\n    select accounts_info.account_id,\n           integration_type\n    from accounts_info\n    left join specific_integrations on accounts_info.account_id = specific_integrations.account_id and rn=1\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0435\u0441\u043b\u0438 \u0435\u0451 \u0441\u0442\u0430\u0442\u0443\u0441 \u043d\u0435 'error', 'deleted'\nselect account_id,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n       max(if(integration_type is not null, integration_type,'does_not_have_a_not_deleted_and_errorless_integration')) not_deleted_and_errorless_integration_name   -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0442\u0430\u043a\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0435\u0441\u0442\u044c. \u0415\u0441\u043b\u0438 \u043d\u0435\u0442 - 'does_not_have_a_not_deleted_and_errorless_integration'\nFrom account_and_integrations\ngroup by account_id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_integrations_not_deleted_and_error_groupped_by_accounts_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:02.596561Z", "completed_at": "2025-05-21T12:31:02.642887Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:02.646388Z", "completed_at": "2025-05-21T12:31:02.646396Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.18312311172485352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_who_paid__old_payments_last_guid", "compiled": true, "compiled_code": "with billing_data_cleared as\n\n (select * from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_old_billing_with_who_paid`)\n,\nbilling_data_cleared_with_rn as\n    (select account_id,                 -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n            guid,                       -- guid \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n            partner_account_id,         -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u0435\u0441\u043b\u0438 \u043e\u043d \u043f\u043b\u0430\u0442\u0435\u043b\u044c\u0449\u0438\u043a\n            row_number() over (partition by account_id order by paid_at desc) as rn_number_billing \n     from billing_data_cleared\n),\n\nbilling_data_cleared_last_row as  (\n    select * \n    from billing_data_cleared_with_rn\n    where rn_number_billing=1           -- \u0411\u0435\u0440\u0443\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u043e\u043f\u043b\u0430\u0442\u044b\n    )\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c\u0438 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u0433\u0443\u0438\u0434\u043e\u043c \u043f\u043b\u0430\u0442\u0435\u0436\u0430\nselect * from billing_data_cleared_last_row", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_who_paid__old_payments_last_guid`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:02.599884Z", "completed_at": "2025-05-21T12:31:02.644589Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:02.724883Z", "completed_at": "2025-05-21T12:31:02.724898Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.22056150436401367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid__count_distinct_visitkas_visitors_min_max_date", "compiled": true, "compiled_code": "SELECT\n    MIN(Date) AS min_date,\n    MAX(Date) AS max_date\n  FROM\n    `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid__count_distinct_visitkas_visitors`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid__count_distinct_visitkas_visitors_min_max_date`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:02.602024Z", "completed_at": "2025-05-21T12:31:02.645835Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:02.726114Z", "completed_at": "2025-05-21T12:31:02.726126Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.26183271408081055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_business_sphere_event_description", "compiled": true, "compiled_code": "with business_sphere_events_data as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_business_sphere_events_data`\n),\n    business_spheres_source as (\n        select * from `dwh-wazzup`.`analytics_tech`.`business_spheres`\n        ),\n\n    business_sphere_event_description as (\n        select\n    business_sphere_events_data.event,\n    business_sphere_events_data.eventgroup,\n    name,\n    case\n        when\n            business_spheres_source.description\n            in ('\u041a\u043e\u043d\u0432\u0435\u0440\u0441\u0438\u043e\u043d\u043d\u044b\u0439 \u043b\u0435\u043d\u0434\u0438\u043d\u0433', '\u0414\u0440\u0443\u0433\u043e\u0439 \u0442\u0438\u043f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b', '\u041c\u0443\u043b\u044c\u0442\u0438\u0441\u0441\u044b\u043b\u043a\u0430')\n        then '\u041d\u0435 \u0443\u043a\u0430\u0437\u0430\u043b \u0441\u0444\u0435\u0440\u0443 \u0431\u0438\u0437\u043d\u0435\u0441\u0430'\n        else business_spheres_source.description\n    end as business_spheres_filter,\n    business_spheres_source.eventgroupname_description,\n    coalesce(business_sphere_events_data.name, business_spheres_source.description) as business_spheres_filter_description,\n    cmuserid,\n    case\n        when event = 'business-select.custom' and length(name) = 0\n        then 'no'\n        when\n            (\n                event in (\n                    'business-select.main-site',\n                    'business-select.main-personal',\n                    'business-select.main-company'\n                )\n                and event = eventgroup\n            )\n        then 'no'\n        else 'yes'\n    end as includeinmetrics,\n    business_select_datetime\n    from business_sphere_events_data left join business_spheres_source\n    on business_sphere_events_data.event = business_spheres_source.eventname\n    and business_sphere_events_data.eventgroup = business_spheres_source.eventgroupname\nwhere rn = 1\n    )\n\nselect * from business_sphere_event_description", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_business_sphere_event_description`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:02.856082Z", "completed_at": "2025-05-21T12:31:03.006882Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.012180Z", "completed_at": "2025-05-21T12:31:03.012193Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.3281254768371582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.Profeat_site.accepted_values_int_cmuserid_business_sphere_events_data_event__business_select_main_other__business_select_site_other__business_select_other__business_select_undefined__business_select_site_crypto__business_select_main_site__business_select_site_rieltor__business_select_site_law__business_select_company_crypto__business_select_custom__business_select_main_link__business_select_main_link_1__business_select_main_link_2__business_select_main_link_3__business_select_main_default__business_select_main_company__business_select_company_shop__business_select_company_cafe__business_select_company_medical__business_select_company_hotel__business_select_company_auto__business_select_company_other__business_select_beauty__business_select_internet_marketing__business_select_education__business_select_store__business_select_mlm__business_select_health__business_select_smm__business_select_needlework__business_select_cooking__business_select_main_landing__business_select_main_personal__business_select_personal_beauty__business_select_personal_coach__business_select_personal_fitness__business_select_personal_teacher__business_select_personal_magician__business_select_personal_other.725b70bcb2", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        event as value_field,\n        count(*) as n_records\n\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_business_sphere_events_data`\n    group by event\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'business-select.main-other','business-select.site-other','business-select.other','business-select.undefined','business-select.site-crypto','business-select.main-site','business-select.site-rieltor','business-select.site-law','business-select.company-crypto','business-select.custom','business-select.main-link','business-select.main-link-1','business-select.main-link-2','business-select.main-link-3','business-select.main-default','business-select.main-company','business-select.company-shop','business-select.company-cafe','business-select.company-medical','business-select.company-hotel','business-select.company-auto','business-select.company-other','business-select.beauty','business-select.internet-marketing','business-select.education','business-select.store','business-select.mlm','business-select.health','business-select.smm','business-select.needlework','business-select.cooking','business-select.main-landing','business-select.main-personal','business-select.personal-beauty','business-select.personal-coach','business-select.personal-fitness','business-select.personal-teacher','business-select.personal-magician','business-select.personal-other'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:02.961901Z", "completed_at": "2025-05-21T12:31:03.007348Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.012848Z", "completed_at": "2025-05-21T12:31:03.012859Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.23824477195739746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.Profeat_site.accepted_values_int_cmuserid_business_sphere_events_data_eventgroup__business_select_main_other__business_select_other__business_select_site_other__business_select_undefined__business_select_site_crypto__business_select_main_site__business_select_site_rieltor__business_select_site_law__business_select_company_crypto__business_select_custom__business_select_main_link__business_select_main_link_1__business_select_main_link_2__business_select_main_link_3__business_select_main_default__business_select_main_company__business_select_company_shop__business_select_company_cafe__business_select_company_medical__business_select_company_hotel__business_select_company_auto__business_select_company_other__business_select_beauty__business_select_internet_marketing__business_select_education__business_select_store__business_select_mlm__business_select_health__business_select_smm__business_select_needlework__business_select_cooking__business_select_main_landing__business_select_main_personal__business_select_personal_beauty__business_select_personal_coach__business_select_personal_fitness__business_select_personal_teacher__business_select_personal_magician__business_select_personal_other.1189abcebc", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        eventgroup as value_field,\n        count(*) as n_records\n\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_business_sphere_events_data`\n    group by eventgroup\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'business-select.main-other','business-select.other','business-select.site-other','business-select.undefined','business-select.site-crypto','business-select.main-site','business-select.site-rieltor','business-select.site-law','business-select.company-crypto','business-select.custom','business-select.main-link','business-select.main-link-1','business-select.main-link-2','business-select.main-link-3','business-select.main-default','business-select.main-company','business-select.company-shop','business-select.company-cafe','business-select.company-medical','business-select.company-hotel','business-select.company-auto','business-select.company-other','business-select.beauty','business-select.internet-marketing','business-select.education','business-select.store','business-select.mlm','business-select.health','business-select.smm','business-select.needlework','business-select.cooking','business-select.main-landing','business-select.main-personal','business-select.personal-beauty','business-select.personal-coach','business-select.personal-fitness','business-select.personal-teacher','business-select.personal-magician','business-select.personal-other'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.001581Z", "completed_at": "2025-05-21T12:31:03.009406Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.014029Z", "completed_at": "2025-05-21T12:31:03.014038Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.27709341049194336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_phone__last_value", "compiled": true, "compiled_code": "with stg_cmuserid_phone as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_cmuserid_phone`\n    ),\n\nphones_by_users as (\n    select * from stg_cmuserid_phone\n    ),\n\nphones_by_users_to_deduplicate as (\n    select cmuserid,\n    row_number() over (partition by cmuserid order by datetime desc) rn,\n    phone\n    from phones_by_users),\n    \nphones_by_users_deduplicated as\n    (select * from phones_by_users_to_deduplicate\n    where rn=1)\n\n\nselect cmuserid, phone from phones_by_users_deduplicated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_phone__last_value`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.004544Z", "completed_at": "2025-05-21T12:31:03.013295Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.093468Z", "completed_at": "2025-05-21T12:31:03.093478Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.296741247177124, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_events_close_to_payment", "compiled": true, "compiled_code": "with payments_with_times as (\n  select datetime,cmuserid,event\n  from `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_success`\n  where cast(datetime as date) >= '2023-10-18' --\u0440\u0435\u043b\u0438\u0437 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u044f\u043c\u0438\n), events_that_can_cause_payment as (\n   select event \n   from profeat.942313_events_lead_to_payments needed_events\n),events_all as (\n    select * \n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test`\n    where  datetime >= '2023-10-18' --\u0440\u0435\u043b\u0438\u0437 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u044f\u043c\u0438\n),\ndefining_what_caused as (\nselect events_all.cmuserid,\n        max(events_all.datetime) over (partition by events_all.cmuserid,payments_with_times.event,payments_with_times.datetime) max_time_before_payment,\n        events_all.event,\n        events_all.datetime as event_time,\n        payments_with_times.event as paid_event,\n        payments_with_times.datetime as payment_time\nfrom events_all\njoin payments_with_times on events_all.cmuserid = payments_with_times.cmuserid and events_all.datetime < payments_with_times.datetime\njoin events_that_can_cause_payment on events_all.event = events_that_can_cause_payment.event\n\n)\nselect *\nfrom defining_what_caused\n\n\n--(events_all.event like '%payment.success%'and events_all.event not like '%payment.success.recurring%') or", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_events_close_to_payment`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.007841Z", "completed_at": "2025-05-21T12:31:03.014662Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.132692Z", "completed_at": "2025-05-21T12:31:03.132705Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.28488874435424805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_successful__event_count_next_date", "compiled": true, "compiled_code": "with stg_payments_success_and_recurring as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_success_and_recurring` \n),\n\nint_payments_successful__event_count_next_date as  (\n    select\n    cmuserid,\n    'payment.success.all' as event,\n    cast(datetime as timestamp) as datetime,\n    datetime as date,\n    count(event) over (\n        partition by cmuserid order by datetime\n    ) as payment_success_count,\n    lag(datetime) over (partition by cmuserid order by datetime) as next_date\nfrom stg_payments_success_and_recurring\nwhere event = 'payment.success' \n)\n\nselect * from int_payments_successful__event_count_next_date", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_successful__event_count_next_date`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.010002Z", "completed_at": "2025-05-21T12:31:03.052875Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.133340Z", "completed_at": "2025-05-21T12:31:03.133350Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3183259963989258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_successful_payments_without_pro_demo", "compiled": true, "compiled_code": "select *\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_successful_payments`\nwhere sum is distinct from 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_successful_payments_without_pro_demo`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.261036Z", "completed_at": "2025-05-21T12:31:03.269828Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.278938Z", "completed_at": "2025-05-21T12:31:03.278948Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.06564736366271973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_telegram_notifications_dynamics_deduped_intervals", "compiled": true, "compiled_code": "with distinct_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_telegram_notifications_dynamics_distinct_intervals`\n),\nsubscription_all as (\n    select account_id,\n           start_date,\n           end_date \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_telegram_notifications_dynamics`\n),\ndeduped_intervals AS (\n          SELECT a.account_id,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n          a.start_date,         -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439\n          a.end_date            -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439\n          FROM distinct_intervals a\n          JOIN subscription_all b\n          ON a.account_id = b.account_id \n          AND a.start_date BETWEEN b.start_date AND b.end_date \n          AND a.end_date BETWEEN b.start_date AND b.end_date\n          GROUP BY 1,2,3)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439 \u0432 Telegram \u0441 \u043d\u0435\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\nselect * from deduped_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_telegram_notifications_dynamics_deduped_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.263143Z", "completed_at": "2025-05-21T12:31:03.272780Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.279716Z", "completed_at": "2025-05-21T12:31:03.279726Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.10431241989135742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_old_billing_fixed_expiration_date", "compiled": true, "compiled_code": "with billing_with_who_paid as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_old_billing_with_who_paid`\n),\n\npaidat_and_expires_at_from_eventlogs as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_restore_missing_data__paidat_and_expiresat_deduplicated`\n),\n\nbilling_data_with_fixed_dates as (\n    select \n    billing_with_who_paid.account_id,\n    billing_with_who_paid.start_date,\n    billing_with_who_paid.guid,\n    billing_with_who_paid.partner_account_id,\n    billing_with_who_paid.start_at,\n    paidat_and_expires_at_from_eventlogs.end_date as end_date\n    from billing_with_who_paid \n    left join paidat_and_expires_at_from_eventlogs\n    on billing_with_who_paid.start_date <= paidat_and_expires_at_from_eventlogs.start_date\n    and billing_with_who_paid.start_date>=date_add(paidat_and_expires_at_from_eventlogs.start_date, interval -3 day)\n    and billing_with_who_paid.guid=paidat_and_expires_at_from_eventlogs.subscription_id),\n\nbilling_data_with_fixed_dates_to_deduplicate as (\n    select *, row_number() over (partition by guid, start_date order by end_date desc) rn from billing_data_with_fixed_dates\n),\n\nbilling_data_with_fixed_dates_deduplicated as (\n    select account_id,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    start_date,         -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    guid,               -- guid \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    partner_account_id, -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    start_at,           -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    end_date            -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    from billing_data_with_fixed_dates_to_deduplicate\n    where rn=1\n)   -- \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0431\u0438\u043b\u043b\u0438\u043d\u0433\u0430 \u0441 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0439 \u0434\u0430\u0442\u043e\u0439 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438. \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u0432 2022\nselect * from billing_data_with_fixed_dates_deduplicated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_old_billing_fixed_expiration_date`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.265586Z", "completed_at": "2025-05-21T12:31:03.276359Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.280403Z", "completed_at": "2025-05-21T12:31:03.280411Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1434326171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_all_payments_union", "compiled": true, "compiled_code": "with bills_pay as (\n    select account_id,\n            paid_date, \n            currency,\n            sum_in_rubles,\n            original_sum,\n            null as sum_in_USD,\n             null as partner_account_id, \n            'bills_pay' as data_source\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_bills`\n),\ncard_pay as (\n    select  account_id,\n            paid_date,\n            currency,\n            sum_in_rubles,\n            original_sum,\n            sum_in_USD,\n            partner_account_id,\n            (case when is_spb_payment then 'card_pay_spb_payment'\n            when not is_spb_payment then 'card_pay_tinkof_not_sbp'\n            when payment_provider is not null then CONCAT('card_pay_', payment_provider)\n            else 'card_pay'\n            end)\n             as data_source \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_card`\n    where original_sum!=0\n),\n\nbank_pay as (\n    select account_id,\n            paid_date,\n            currency,\n            sum_in_rubles,\n            original_sum,\n            null as sum_in_USD,\n            null as partner_account_id,\n            'bank_pay' as data_source \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_bank`\n\n    UNION ALL\n    select account_id,\n            paid_date,\n            currency,\n            sum_in_rubles,\n            original_sum,\n            null as sum_in_USD,\n            null as partner_account_id,\n            'bank_pay' as data_source \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_old_billing`\n    where object = 'payment'\n    and method in ('bank', 'paypal')\n),\n\npostpay_bills as (\n    select cast(account_id as integer) as account_id,\n            paid_date,\n            currency,\n            sum_in_rubles,\n            original_sum,\n            null as sum_in_USD,\n             null as partner_account_id,\n            'post_pay' as data_source \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_postpay_revenue_bills`\n    where account_id is not null\n\n),\n\nall_revenue as \n(select account_id,\n        paid_date, \n        currency,\n        data_source,\n        partner_account_id,\n        sum(sum_in_rubles) as sum_in_rubles,\n        sum(sum_in_USD) as sum_in_USD,\n        sum(original_sum) as original_sum \nfrom (\n    select * from bills_pay\n    UNION ALL\n    select * from card_pay\n    UNION ALL \n    select * from bank_pay\n    UNION ALL \n    select * from postpay_bills\n    ) rev\ngroup by 1,2,3,4,5),\n    correcting_emfi as (\nselect \n        case when account_id = 60569941 then 28266449 else account_Id end as account_id, --\u044d\u0442\u043e \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u0439 \u0441\u043b\u0443\u0447\u0430\u0439. \u043e\u0431\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442 \u043e\u0434\u043d\u043e\u043c\u0443 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0443, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 6056.. \u0434\u043b\u044f \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445, \u0430 \u043f\u043e\u0442\u043e\u043c \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 2826.\n        paid_date,                                                                                    -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n        case when account_Id = 60569941 then 'RUR' else currency end as currency,                     -- \u0412\u0430\u043b\u044e\u0442\u0430\n        data_source,                                                                                  -- \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043e\u043f\u043b\u0430\u0442\u044b\n        partner_account_id,                                                                           -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u0435\u0441\u043b\u0438 \u043e\u043d \u043f\u043b\u0430\u0442\u0438\u043b\n        sum(sum_in_rubles) as sum_in_rubles,                                                          -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n        sum(case when account_Id = 60569941 then NULL else sum_in_usd end) as sum_in_USD,             -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445\n        sum(case when account_Id = 60569941 then sum_in_rubles else original_sum end) as original_sum -- \u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\nfrom all_revenue\ngroup by 1,2,3,4,5\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u0441 \u0432\u0430\u043b\u044e\u0442\u0430\u043c\u0438 \u0438 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u043c \u043e\u043f\u043b\u0430\u0442\u044b\nselect *\nfrom correcting_emfi", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_all_payments_union`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.270355Z", "completed_at": "2025-05-21T12:31:03.280807Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.400291Z", "completed_at": "2025-05-21T12:31:03.400303Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.18288278579711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_all_payments_union_bills_with_paid_in_wazzup", "compiled": true, "compiled_code": "with bills_pay as (\n    select account_id,\n            paid_in_wazzup_date as paid_date, \n            currency,\n            sum_in_rubles,\n            original_sum,\n            null as sum_in_USD,\n             null as partner_account_id, \n            'bills_pay' as data_source\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_bills`\n),\ncard_pay as (\n    select  account_id,\n            paid_date,\n            currency,\n            sum_in_rubles,\n            original_sum,\n            sum_in_USD,\n            partner_account_id,\n            (case when is_spb_payment then 'card_pay_spb_payment'\n            when not is_spb_payment then 'card_pay_tinkof_not_sbp'\n            when payment_provider is not null then CONCAT('card_pay_', payment_provider)\n            else 'card_pay'\n            end)\n             as data_source \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_card`\n    where original_sum!=0\n),\n\nbank_pay as (\n    select account_id,\n            paid_date,\n            currency,\n            sum_in_rubles,\n            original_sum,\n            null as sum_in_USD,\n            null as partner_account_id,\n            'bank_pay' as data_source \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_bank`\n\n    UNION ALL\n    select account_id,\n            paid_date,\n            currency,\n            sum_in_rubles,\n            original_sum,\n            null as sum_in_USD,\n            null as partner_account_id,\n            'bank_pay' as data_source \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_old_billing`\n    where object = 'payment'\n    and method in ('bank', 'paypal')\n),\n\npostpay_bills as (\n    select cast(account_id as integer) as account_id,\n            paid_date,\n            currency,\n            sum_in_rubles,\n            original_sum,\n            null as sum_in_USD,\n             null as partner_account_id,\n            'post_pay' as data_source \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_postpay_revenue_bills`\n\n),\n\nall_revenue as \n(select account_id,                             -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        paid_date,                              -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n        currency,                               -- \u0412\u0430\u043b\u044e\u0442\u0430\n        data_source,                            -- \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043e\u043f\u043b\u0430\u0442\u044b\n        partner_account_id,                     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u0435\u0441\u043b\u0438 \u043e\u043d \u043f\u043b\u0430\u0442\u0438\u043b\n        sum(sum_in_rubles) as sum_in_rubles,    -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n        sum(sum_in_USD) as sum_in_USD,          -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445\n        sum(original_sum) as original_sum       -- \u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\nfrom (\n    select * from bills_pay\n    UNION ALL\n    select * from card_pay\n    UNION ALL \n    select * from bank_pay\n    UNION ALL \n    select * from postpay_bills\n    ) rev\ngroup by 1,2,3,4,5)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439, \u0434\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u0434\u043e Wazzup \u0441 \u0432\u0430\u043b\u044e\u0442\u0430\u043c\u0438 \u0438 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u043c \u043e\u043f\u043b\u0430\u0442\u044b \nselect * from all_revenue", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_all_payments_union_bills_with_paid_in_wazzup`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.273317Z", "completed_at": "2025-05-21T12:31:03.281261Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.401089Z", "completed_at": "2025-05-21T12:31:03.401101Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.22535490989685059, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscription_updates__corect_date_and_filledna_tarif_period_quantity", "compiled": true, "compiled_code": "with subscription_updates_fillna_start as (\n     select *,\n                sum(case when period is not null then 1 end) over (partition by subscription_id\n                order by created_at) as period_close,\n                sum(case when quantity is not null then 1 end) over (partition by subscription_id\n                order by created_at) as quantity_close,\n                sum(case when tariff is not null then 1 end) over (partition by subscription_id\n                order by created_at) as tariff_close,\n                sum(case when old_period is not null then 1 end) over (partition by subscription_id\n                order by created_at) as old_period_close,\n                sum(case when old_quantity is not null then 1 end) over (partition by subscription_id\n                order by created_at) as old_quantity_close,\n                sum(case when old_tariff is not null then 1 end) over (partition by subscription_id\n                order by created_at) as old_tariff_close,\n                sum(case when partner_discount is not null then 1 end) over (partition by subscription_id\n                order by created_at) as partner_discount_close\n                from `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates`  where state='activated' \n),\n\npayments_bills as (\n    select guid,                                                \n    account_id,\n    paid_date,\n    completed_at,\n    updated_at,\n    billing_date_subscription_start\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_bills`\n),\n\npayments_cards as (\n    select guid,\n    paid_at,\n    account_id,\n    partner_account_id,\n    active_until,\n    promised_payment_type,\n    payment_provider\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_card`\n    ),\n\nsubscription_updates_fillna_tarif_period_quantity as (\n    select guid,\n    subscription_id,\n    activation_reason_id,\n    activation_object,\n    balance_to_withdraw,\n    wapi_transactions,\n    created_at,\n    sum,\n    created_date,\n    currency,\n    action,\n    until_expired_days,\n    new_until_expired_days,\n    partner_discount,\n    --\u044d\u0442\u0438 \u043f\u043e\u043b\u044f \u043d\u0443\u0436\u043d\u044b \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0431\u0430\u043b\u0430\u043d\u0441 \u0432\u0430\u0431\u044b\n    cast(first_value(period) over (partition by subscription_id, period_close  order by created_at rows between unbounded preceding and unbounded following ) as integer) as period_new,\n    cast(first_value(quantity) over (partition by subscription_id, quantity_close order by created_at rows between unbounded preceding and unbounded following) as integer) as quantity_new,\n    first_value(tariff) over (partition by subscription_id, tariff_close order by created_at rows between unbounded preceding and unbounded following) as tariff_new,\n    cast(first_value(old_period) over (partition by subscription_id, old_period_close  order by created_at rows between unbounded preceding and unbounded following ) as integer) as period_old,\n    cast(first_value(old_quantity) over (partition by subscription_id, old_quantity_close order by created_at rows between unbounded preceding and unbounded following) as integer) as quantity_old,\n    first_value(old_tariff) over (partition by subscription_id, old_tariff_close order by created_at rows between unbounded preceding and unbounded following) as tariff_old,\n    first_value(partner_discount) over (partition by subscription_id, partner_discount_close order by created_at rows between unbounded preceding and unbounded following) as partner_discount_new\n    from subscription_updates_fillna_start\n),\n\nsubscription_updates_fillna_tarif_period_quantity_with_correct_dates as (\n    select                        -- \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f subscriptionUpdates. \u043d\u0435 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 action \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f period, quantity,tarif\n    subscriptions.guid,                                             -- id \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    subscriptions.subscription_id,                                  -- id \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    subscriptions.activation_reason_id,                             -- \u0442\u0443\u0442 \u0434\u043e\u043a \u0430\u043a\u0442 \u0440\u0438\u0437\u043e\u043d \u0438\u0434\n    subscriptions.activation_object,                                -- \u0442\u0443\u0442 \u0434\u043e\u043a \u0430\u043a\u0442\u0438\u0432 \u043e\u0431\u0436\u0435\u043a\u0442\n    subscriptions.balance_to_withdraw,                              -- \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0439 \u043e\u043f\u043b\u0430\u0442\u044b \u043a\u043e\u043b-\u0432\u043e \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0434\u043b\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    subscriptions.wapi_transactions,                                -- \u0441\u0443\u043c\u043c\u0430 \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043f\u043e\u043f\u043e\u043b\u043d\u044f\u0435\u043c waba \u0431\u0430\u043b\u0430\u043d\u0441\n    subscriptions.created_at,                                       -- \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u0438\n    subscriptions.sum,                                              -- \u043f\u043e\u043b\u043d\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043a\u0438\u0434\u043a\u0438 \u043d\u0430 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u0430\u044f \u0441\u043a\u0438\u0434\u043a\u0430 \u0438 \u0441\u0443\u043c\u043c\u0430 \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0441 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u043d\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f\n    subscriptions.created_date,                                     -- \u0434\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u0438\n    subscriptions.currency,                                         -- \u0432\u0430\u043b\u044e\u0442\u0430\n    (case when subscriptions.action is null and payments_cards.payment_provider='setPromisedPayment'\n    then 'setPromisedPayment'\n    else subscriptions.action\n    end) as action,                                                 -- \u0442\u0443\u0442 \u0434\u043e\u043a \u044d\u043a\u0448\u043d\n    subscriptions.until_expired_days,                               -- \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u0434\u043e \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    subscriptions.new_until_expired_days,                           -- \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u0434\u043e \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    subscriptions.partner_discount,                                 -- % \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u043e\u0439 \u0441\u043a\u0438\u0434\u043a\u0438 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    subscriptions.period_new,                                       -- \u041d\u043e\u0432\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    subscriptions.quantity_new,                                     -- \u041d\u043e\u0432\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432\n    subscriptions.tariff_new,                                       -- \u041d\u043e\u0432\u044b\u0439 \u0442\u0430\u0440\u0438\u0444 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    subscriptions.period_old,                                       -- \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    subscriptions.quantity_old,                                     -- \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    subscriptions.tariff_old,                                       -- \u0442\u0430\u0440\u0438\u0444 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    subscriptions.partner_discount_new,                             -- \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0439 % \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u0438\u0439 \u0441\u043a\u0438\u0434\u043a\u0438 -- //todo \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0433\u0434\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0438 \u043d\u0430\u0444\u0438\u0433 \u043d\u0443\u0436\u0435\u043d\n    payments_cards.partner_account_id,                              -- \u0435\u0441\u043b\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043e\u043f\u043b\u0430\u0442\u0438\u043b \u043f\u0430\u0440\u0442\u043d\u0435\u0440 - partner_account_id \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    (case when promised_payment_type in ('raiseTariff','addQuantity') then null else  active_until end) as active_until, -- \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430 \u043f\u043e \u043f\u0440\u043e\u0434\u043b\u0435\u043d\u0438\u044e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n       (case \n        when activation_reason_id='180' then cast('2021-10-19' as datetime)\n        when activation_reason_id='15535' then cast('2022-07-05' as datetime)\n        when activation_reason_id='8112' then cast('2022-03-28' as datetime)\n        when activation_reason_id='8629' then cast('2022-03-30' as datetime)\n        when activation_object='invoice' and payments_bills.updated_at is not null then cast(payments_bills.updated_at as datetime)\n        when activation_object='invoice' and payments_bills.completed_at is not null and payments_bills.updated_at is null then cast(payments_bills.completed_at as datetime)    \n        when activation_object='invoice' and payments_bills.updated_at is null and payments_bills.paid_date is not null and payments_bills.completed_at is null then cast(payments_bills.paid_date as datetime)\n        when activation_object in ('payment','partnerBalance') and payments_cards.paid_at is not null then cast(payments_cards.paid_at as datetime)\n\t\telse subscriptions.created_at end) as paid_at,              -- \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b\n    (case \n        when activation_reason_id='180' then cast('2021-10-19' as datetime)\n        when activation_reason_id='15535' then cast('2022-07-05' as datetime)\n        when activation_reason_id='8112' then cast('2022-03-28' as datetime)\n        when activation_reason_id='8629' then cast('2022-03-30' as datetime)\n        when activation_object='invoice' and  payments_bills.paid_date is not null then cast(payments_bills.paid_date   as datetime)\n        when activation_object='invoice' and payments_bills.updated_at is not null then cast(payments_bills.updated_at as datetime)    \n        when activation_object='invoice' and payments_bills.completed_at is not null then cast(payments_bills.completed_at as datetime)\n        when activation_object in ('payment','partnerBalance') and payments_cards.paid_at is not null then cast(payments_cards.paid_at as datetime)\n\t\telse subscriptions.created_at end) as paid_at_billing,      -- \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u0431\u0438\u043b\u043b\u0438\u043d\u0433\u0443\n\n     (case \n        when activation_reason_id='180' then cast('2021-10-19' as datetime)\n        when activation_reason_id='15535' then cast('2022-07-05' as datetime)\n        when activation_reason_id='8112' then cast('2022-03-28' as datetime)\n        when activation_reason_id='8629' then cast('2022-03-30' as datetime)\n        when activation_object='invoice' and payments_bills.billing_date_subscription_start is not null then payments_bills.billing_date_subscription_start  \n        when activation_object='invoice' and payments_bills.updated_at is not null then cast(payments_bills.updated_at as datetime)  \n        when activation_object='invoice' and payments_bills.completed_at is not null then cast(payments_bills.completed_at as datetime)\n        when activation_object='invoice' and  payments_bills.paid_date is not null then cast(payments_bills.paid_date   as datetime)\n          \n        \n        when activation_object in ('payment','partnerBalance') and payments_cards.paid_at is not null then cast(payments_cards.paid_at as datetime)\n\t\telse subscriptions.created_at end) as paid_at_billing_completed_at --\u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u0434\u0430\u0442\u043e\u0439 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0435 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u0430 \u0431\u0435\u0437\u043d\u0430\u043b\u043e\u043c. \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u0432\u0441\u0435 3 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442\n\n\n     from subscription_updates_fillna_tarif_period_quantity subscriptions\n    left join payments_bills on subscriptions.activation_reason_id=payments_bills.guid\n\tleft join payments_cards on subscriptions.activation_reason_id=payments_cards.guid\n    left join wazzup.accounts accounts on accounts.id=coalesce(payments_bills.account_id,payments_cards.account_id) \n    )    \nselect *, \ncast(paid_at as date) as paid_date,                                             -- \u0434\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n cast(paid_at_billing as date) as paid_at_billing_date,                         -- \u0434\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u0431\u0438\u043b\u043b\u0438\u043d\u0433\u0443\n cast(paid_at_billing_completed_at as date) as paid_at_billing_completed_date   -- \u0434\u0430\u0442\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u043b\u0430\u0442\u044b. \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u0432\u0441\u0435 3 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442\nfrom subscription_updates_fillna_tarif_period_quantity_with_correct_dates", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscription_updates__corect_date_and_filledna_tarif_period_quantity`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.276902Z", "completed_at": "2025-05-21T12:31:03.320916Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.402362Z", "completed_at": "2025-05-21T12:31:03.402373Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2648046016693115, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts__partner_and_refparent_change_deduplicated", "compiled": true, "compiled_code": "-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432/\u0440\u0435\u0444.\u043f\u0430\u043f \u0441 \u0434\u0430\u0442\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0431\u0435\u0437 \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e start_date \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\n-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043d\u0443\u0436\u043d\u0430 \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0434\u0435\u0440\u0436\u0430\u043b\u0438\u0441\u044c \u043c\u0435\u043d\u0435\u0435 1 \u0434\u043d\u044f, \u0442\u043e \u0435\u0441\u0442\u044c \u0431\u044b\u043b\u0438 \u0441\u0434\u0435\u043b\u0430\u043d\u044b \u0432 \u043e\u0434\u0438\u043d start_date. \u0411\u0435\u0440\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435.\n\nwith int_accounts__partner_change_and_register_data as (            -- \u0422\u044f\u043d\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432/\u0440\u0435\u0444.\u043f\u0430\u043f \u0441 \u0434\u0430\u0442\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts__partner_change_and_register_history`\n),\n\npartner_change_and_register_data_to_deduplicate as (            -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043d\u0443\u043c\u0435\u0440\u0430\u0446\u0438\u0435\u0439 \u0441\u0442\u0440\u043e\u043a \u0441 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u043c\u0438\u0441\u044f start_date \u0434\u043b\u044f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\n    select \n        * ,                                                                                             -- \u0411\u0435\u0440\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n        row_number() over (partition by account_id, start_date  order by end_occured_at desc) as rn     -- \u041d\u0443\u043c\u0435\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438 account_id, start_date \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u044f \u043f\u043e \u043f\u043e\u043b\u044e end_occured_at\n                                                                                    -- \u0427\u0435\u043c \u043d\u0438\u0436\u0435 \u043d\u043e\u043c\u0435\u0440, \u0442\u0435\u043c \u043f\u043e\u0437\u0434\u043d\u0435\u0435 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435\n    from int_accounts__partner_change_and_register_data\n),\n\npartner_change_and_register_data_deduplicated as (          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432/\u0440\u0435\u0444.\u043f\u0430\u043f \u0441 \u0434\u0430\u0442\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0431\u0435\u0437 \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e start_date \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\n    select * from partner_change_and_register_data_to_deduplicate       -- \u0411\u0435\u0440\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n    where rn=1                                                          -- \u0422\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e start_date\n)\n\nselect * from partner_change_and_register_data_deduplicated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts__partner_and_refparent_change_deduplicated`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.532251Z", "completed_at": "2025-05-21T12:31:03.547167Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.555613Z", "completed_at": "2025-05-21T12:31:03.555627Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.11029219627380371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_acccounts__type_change_deduplicated", "compiled": true, "compiled_code": "-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u0439 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0431\u0435\u0437 \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e start_date \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\n-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043d\u0443\u0436\u043d\u0430 \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0434\u0435\u0440\u0436\u0430\u043b\u0438\u0441\u044c \u043c\u0435\u043d\u0435\u0435 1 \u0434\u043d\u044f, \u0442\u043e \u0435\u0441\u0442\u044c \u0431\u044b\u043b\u0438 \u0441\u0434\u0435\u043b\u0430\u043d\u044b \u0432 \u043e\u0434\u0438\u043d start_date. \u0411\u0435\u0440\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435.\n\nwith type_change_history as (           -- \u0422\u044f\u043d\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438\u0441\u0442\u043e\u0440\u0438\u0439 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts__type_change_history`\n),\n\ntype_change_history_to_deduplicate as (         -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u0440\u043e\u043d\u0443\u043c\u0435\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438\n    select * ,\n    row_number() over (partition by account_id,start_date  order by end_occured_at desc) as rn      -- \u041d\u0443\u043c\u0435\u0440\u0443\u0435\u043c \u043f\u043e \u043f\u043e\u043b\u044f\u043c Id \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0438 \u0434\u0430\u0442\u043e\u0439 \u0441\u0442\u0430\u0440\u0442\u0430 \u0442\u0438\u043f\u0430. \n                                                                                                    -- \u0427\u0435\u043c \u043d\u0438\u0436\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0442\u0435\u043c \u043f\u043e\u0437\u0436\u0435 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435.\n    from type_change_history\n),\n\ntype_change_history_deduplicated as (           -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u0439 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432. \u0412\u0437\u044f\u0442\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0434\u043d\u0435.\n    select * from type_change_history_to_deduplicate            -- \u0422\u044f\u043d\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u0440\u043e\u043d\u0443\u043c\u0435\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438\n    where rn=1                                                  -- \u0411\u0435\u0440\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0432\u043e\u0435 \u0441 \u043a\u043e\u043d\u0446\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0442\u043e \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0430 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    )\n\nselect * from  type_change_history_deduplicated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_acccounts__type_change_deduplicated`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.542649Z", "completed_at": "2025-05-21T12:31:03.549783Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.556220Z", "completed_at": "2025-05-21T12:31:03.556230Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10921955108642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_agg_with_trials", "compiled": true, "compiled_code": "\nwith channels_agg_deduplicated as (\n    select \n    account_id,\n    package_id,\n    channel_id,\n    transport,\n    min_datetime,\n    max_datetime\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_agg_deduplicated`\n),\n\naccounts as (\n    select \n    account_id,\n    whatsap_trial, \n    instagram_trial,\n    tgapi_trial,\n    wapi_trial,\n    avito_trial,\n    vk_trial,\n    telegram_trial\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`\n),\n\nbilling_packages as (\n    select guid,\n    is_free\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages`\n),\n\nchannels_with_trials as (\n    select package_id,  -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    channels_agg_deduplicated.account_id,   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    channel_id,         -- ID \u043a\u0430\u043d\u0430\u043b\u0430\n    transport,          -- \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442 \u043a\u0430\u043d\u0430\u043b\u0430\n    min_datetime,       -- \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    cast(min_datetime as date) as min_date, -- \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    max_datetime,       -- \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    cast(max_datetime as date) as max_date, -- \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    is_free,            -- \u042d\u0442\u043e \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0439 \u043a\u0430\u043d\u0430\u043b?\n    whatsap_trial,      -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f WHATSAPP \u0442\u0440\u0438\u0430\u043b\u0430\n    instagram_trial,    -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f INSTAGRAM \u0442\u0440\u0438\u0430\u043b\u0430\n    tgapi_trial,        -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f TGAPI \u0442\u0440\u0438\u0430\u043b\u0430\n    wapi_trial,         -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f WABA \u0442\u0440\u0438\u0430\u043b\u0430\n    avito_trial,        -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f AVITO \u0442\u0440\u0438\u0430\u043b\u0430\n    vk_trial,           -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f VK \u0442\u0440\u0438\u0430\u043b\u0430\n    telegram_trial,     -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f TELEGRAM \u0442\u0440\u0438\u0430\u043b\u0430\n    cast((case when transport='whatsapp' then whatsap_trial\n    when transport='instagram' then instagram_trial\n    when transport='avito' then avito_trial\n    when transport='tgapi' then tgapi_trial\n    when transport='waba' then wapi_trial\n    when transport='avito' then avito_trial\n    when transport='vk' then vk_trial\n    when transport='telegram' then telegram_trial\n    end) as date) as trial_end_date                 -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0442\u0440\u0438\u0430\u043b\u0430\n    from channels_agg_deduplicated left join billing_packages\n    on billing_packages.guid=channels_agg_deduplicated.package_Id\n    left join accounts on accounts.account_id=channels_agg_deduplicated.account_id)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438 \u043a\u0430\u043d\u0430\u043b\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 \u0441 \u0442\u0440\u0438\u0430\u043b\u0430\u043c\u0438\nselect * from  channels_with_trials", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_agg_with_trials`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.534800Z", "completed_at": "2025-05-21T12:31:03.550133Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.556762Z", "completed_at": "2025-05-21T12:31:03.556771Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.1488666534423828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_partner_spendings_real_money", "compiled": true, "compiled_code": "WITH \n--------------------------------------- \u041f\u0430\u0440\u0442\u043d\u0435\u0440 \u043f\u043b\u0430\u0442\u0438\u0442 \u0437\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n\nwaba_balance_clients_partner_paid AS (\n  SELECT    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0442\u0440\u0430\u0442\u0430\u043c\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n    ba.account_id                                                                     AS partner_id,                -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ba.occured_date                                                                   AS occured_date,              -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    api.type                                                                          AS account_type,              -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    ba.currency                                                                       AS currency,                  -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    'balanceTopup_client'                                                             AS category,                  -- \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    (ba.sum / (1 - 0.1)) + balance_to_withdraw                                   AS tariff_price_sum,          -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e \u0442\u0430\u0440\u0438\u0444\u0443\n    balance_to_withdraw                                                          AS bonus_spent_by_client_sum, -- \u0411\u043e\u043d\u0443\u0441\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n    0.1                                                                               AS partner_discount,          -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ((((ba.sum / (1 - 0.1)) + balance_to_withdraw) - balance_to_withdraw) * 0.1) AS partner_comission,         -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ba.sum                                                                       AS partner_price_sum          -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates` su ON su.guid = ba.subscription_update_id\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts__type_change_history` api ON api.account_id = ba.account_id AND DATETIME(ba.occured_at) BETWEEN api.start_occured_at AND api.end_occured_at\n    WHERE su.action = 'balanceTopup'                      -- \u0411\u0435\u0440\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e WABA\n    AND ba.account_id != ba.subscription_owner            -- \u041e\u043f\u043b\u0430\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    AND api.type in ('partner', 'tech-partner')                              -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 - \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n),\n\nsubscriptions_clients_partner_paid AS (\n  SELECT  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0442\u0440\u0430\u0442\u0430\u043c\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n    ba.account_id                                                                     AS partner_id,                -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ba.occured_date                                                                   AS occured_date,              -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    api.type                                                                          AS account_type,              -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    ba.currency                                                                       AS currency,                  -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    'subscription_client'                                                                                              AS category,                   -- \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    (ba.sum / (1 - partner_discount)) + balance_to_withdraw                                                AS tariff_price_sum,           -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e \u0442\u0430\u0440\u0438\u0444\u0443\n    balance_to_withdraw                                                                                    AS bonus_spent_by_client_sum,  -- \u0411\u043e\u043d\u0443\u0441\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n    partner_discount,                                                                                                                          -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ((((ba.sum / (1 - partner_discount)) + balance_to_withdraw) - balance_to_withdraw) * partner_discount) AS partner_comission,          -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ba.sum                                                                                                 AS partner_price_sum           -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates` su ON su.guid = ba.subscription_update_id\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts__type_change_history` api ON api.account_id = ba.account_id AND DATETIME(ba.occured_at) BETWEEN api.start_occured_at AND api.end_occured_at\n    WHERE su.action != 'balanceTopup'                         -- \u0411\u0435\u0440\u0435\u043c \u0432\u0441\u0451, \u043a\u0440\u043e\u043c\u0435 WABA\n    AND (wapi_transactions IS NULL OR wapi_transactions = 0)  -- \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u0435\u0439\u0441\u044b \u0441 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u043f\u043b\u0430\u0442\u043e\u0439 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 WABA\n    AND ba.account_id != ba.subscription_owner                -- \u041e\u043f\u043b\u0430\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    AND api.type in ('partner', 'tech-partner')                              -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 - \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n\n),\n\nwaba_calculations_client AS ( -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0442\u0440\u0430\u0442\u0430\u043c\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0432 \u043a\u0435\u0439\u0441\u0430\u0445, \u043a\u043e\u0433\u0434\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u043b WABA+\u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u043e\u0434\u043d\u0438\u043c \u043f\u043b\u0430\u0442\u0435\u0436\u043e\u043c\n  SELECT\n    ba.account_id                                                                     AS partner_id,                -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ba.occured_date                                                                   AS occured_date,              -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    api.type                                                                          AS account_type,              -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    ba.currency                                                                       AS currency,                  -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    'balanceTopup_client'                                                                                 AS category,                         -- \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    wapi_transactions                                                                         AS tariff_price_sum,                 -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e \u0442\u0430\u0440\u0438\u0444\u0443\n    CASE WHEN balance_to_withdraw <= (su.sum - wapi_transactions) THEN 0\n      ELSE balance_to_withdraw - (su.sum - wapi_transactions) END                                 AS bonus_spent_by_client_sum,        -- \u0411\u043e\u043d\u0443\u0441\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n    0.1                                                                                            AS partner_discount,                 -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    CASE WHEN balance_to_withdraw < (su.sum - wapi_transactions) THEN (wapi_transactions * 0.1) \n      ELSE ((wapi_transactions - (balance_to_withdraw - (su.sum - wapi_transactions))) * 0.1) END AS partner_comission,                -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    CASE WHEN balance_to_withdraw < (su.sum - wapi_transactions) THEN (wapi_transactions * 0.9) \n      ELSE ((wapi_transactions - (balance_to_withdraw - (su.sum - wapi_transactions))) * 0.9) END AS partner_price_sum,  -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts__type_change_history` api ON api.account_id = ba.account_id AND DATETIME(ba.occured_at) BETWEEN api.start_occured_at AND api.end_occured_at\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates`su ON su.guid = ba.subscription_update_id\n    WHERE ba.object = 'subscription'                       -- \u0411\u0435\u0440\u0435\u043c \u0432\u0441\u0451, \u043a\u0440\u043e\u043c\u0435 WABA \u0431\u0430\u043b\u0430\u043d\u0441\u0430\n    AND api.type in ('partner', 'tech-partner')                               -- \u0411\u044b\u043b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    AND su.action != 'balanceTopup'                        -- \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437 subscriptionUpdates, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u0430\u0441\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\n    AND wapi_transactions > 0                              -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA > 0\n    AND ba.account_id != ba.subscription_owner             -- \u041e\u043f\u043b\u0430\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443\n),\n\nsubs_calculations_client AS ( -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0442\u0440\u0430\u0442\u0430\u043c\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 WABA \u0432 \u043a\u0435\u0439\u0441\u0430\u0445, \u043a\u043e\u0433\u0434\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u043b WABA+\u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u043e\u0434\u043d\u0438\u043c \u043f\u043b\u0430\u0442\u0435\u0436\u043e\u043c\n  SELECT\n    ba.account_id                                                                     AS partner_id,                -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ba.occured_date                                                                   AS occured_date,              -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    api.type                                                                          AS account_type,              -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    ba.currency                                                                       AS currency,                  -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    'subscription_client'                                                                                              AS category,                   -- \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    su.sum - wapi_transactions                                                           AS tariff_price_sum,          -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e \u0442\u0430\u0440\u0438\u0444\u0443\n    CASE WHEN balance_to_withdraw >= (su.sum - wapi_transactions) THEN (su.sum - wapi_transactions)\n      ELSE balance_to_withdraw  END                                                          AS bonus_spent_by_client_sum, -- \u0411\u043e\u043d\u0443\u0441\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n    partner_discount                                                                          AS partner_discount,          -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    CASE WHEN balance_to_withdraw >= (su.sum - wapi_transactions) THEN 0 \n      ELSE ((su.sum - balance_to_withdraw - wapi_transactions) * partner_discount) END       AS partner_comission,         -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    CASE WHEN balance_to_withdraw >= (su.sum - wapi_transactions) THEN 0 \n      ELSE ((su.sum - balance_to_withdraw - wapi_transactions) * (1 - partner_discount)) END AS partner_price_sum    -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts__type_change_history` api ON api.account_id = ba.account_id AND DATETIME(ba.occured_at) BETWEEN api.start_occured_at AND api.end_occured_at\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates`su ON su.guid = ba.subscription_update_id\n    WHERE ba.object = 'subscription'                        -- \u0411\u0435\u0440\u0435\u043c \u0432\u0441\u0451, \u043a\u0440\u043e\u043c\u0435 WABA \u0431\u0430\u043b\u0430\u043d\u0441\u0430\n    AND api.type in ('partner', 'tech-partner')                                -- \u0411\u044b\u043b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    AND su.action != 'balanceTopup'                         -- \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437 subscriptionUpdates, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u0430\u0441\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\n    AND wapi_transactions > 0                               -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA > 0\n    AND ba.account_id != ba.subscription_owner              -- \u041e\u043f\u043b\u0430\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443\n),\n\n\nclient_spending as (\n  SELECT \n    partner_id,                                                 -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    occured_date,                                               -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    account_type,                                               -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    currency,                                                   -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    category,                                                   -- \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    tariff_price_sum AS tariff_price_org,                       -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e \u0442\u0430\u0440\u0438\u0444\u0443\n    bonus_spent_by_client_sum AS bonus_spent_by_client_org,     -- \u0411\u043e\u043d\u0443\u0441\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n    partner_discount,                                           -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    partner_comission AS partner_comission_org,                 -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    partner_price_sum AS partner_price_org                      -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  FROM waba_balance_clients_partner_paid\n  FULL OUTER JOIN subscriptions_clients_partner_paid USING (partner_id, occured_date, account_type, currency, category, tariff_price_sum, bonus_spent_by_client_sum, partner_discount, partner_comission, partner_price_sum)\n  FULL OUTER JOIN waba_calculations_client USING (partner_id, occured_date, account_type, currency, category, tariff_price_sum, bonus_spent_by_client_sum, partner_discount, partner_comission, partner_price_sum)\n  FULL OUTER JOIN subs_calculations_client USING (partner_id, occured_date, account_type, currency, category, tariff_price_sum, bonus_spent_by_client_sum, partner_discount, partner_comission, partner_price_sum)\n),\n\n------------------------------------------ \u041f\u0430\u0440\u0442\u043d\u0435\u0440 \u043f\u043b\u0430\u0442\u0438\u0442 \u0437\u0430 \u0441\u0435\u0431\u044f\n\nwaba_balance_partner AS (\n  SELECT    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0442\u0440\u0430\u0442\u0430\u043c\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0441\u0435\u0431\u0435\n    ba.account_id                                                                     AS partner_id,                -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ba.occured_date                                                                   AS occured_date,              -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    api.type                                                                          AS account_type,              -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    ba.currency                                                                       AS currency,                  -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    'balanceTopup_partner'                                                                    AS category,                  -- \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    su.sum                                                                       AS tariff_price_sum,          -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e \u0442\u0430\u0440\u0438\u0444\u0443\n    0.1                                                                               AS partner_discount,          -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    su.sum * 0.1                                                                 AS partner_comission,         -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ba.sum                                                                       AS partner_price_sum          -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates` su ON su.guid = ba.subscription_update_id\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts__type_change_history` api ON api.account_id = ba.account_id AND DATETIME(ba.occured_at) BETWEEN api.start_occured_at AND api.end_occured_at\n    WHERE su.action = 'balanceTopup'                      -- \u0411\u0435\u0440\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e WABA\n    AND ba.account_id = ba.subscription_owner            -- \u041e\u043f\u043b\u0430\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441\u0435\u0431\u0435\n    AND api.type in ('partner', 'tech-partner')                              -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 - \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n),\n\nsubscriptions_partner AS (\n  SELECT  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0442\u0440\u0430\u0442\u0430\u043c\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441\u0435\u0431\u0435\n    ba.account_id                                                                     AS partner_id,                -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ba.occured_date                                                                   AS occured_date,              -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    api.type                                                                          AS account_type,              -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    ba.currency                                                                       AS currency,                  -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    'subscription_partner'                                                                                              AS category,                   -- \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    su.sum                                                                                                 AS tariff_price_sum,           -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e \u0442\u0430\u0440\u0438\u0444\u0443\n    partner_discount,                                                                                                                          -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    su.sum * partner_discount                                                                              AS partner_comission,          -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ba.sum                                                                                                 AS partner_price_sum           -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates` su ON su.guid = ba.subscription_update_id\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts__type_change_history` api ON api.account_id = ba.account_id AND DATETIME(ba.occured_at) BETWEEN api.start_occured_at AND api.end_occured_at\n    WHERE su.action != 'balanceTopup'                         -- \u0411\u0435\u0440\u0435\u043c \u0432\u0441\u0451, \u043a\u0440\u043e\u043c\u0435 WABA\n    AND (wapi_transactions IS NULL OR wapi_transactions = 0)  -- \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u0435\u0439\u0441\u044b \u0441 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u043f\u043b\u0430\u0442\u043e\u0439 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 WABA\n    AND ba.account_id = ba.subscription_owner                -- \u041e\u043f\u043b\u0430\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441\u0435\u0431\u0435\n    AND api.type in ('partner', 'tech-partner')                                  -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 - \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n),\n\nwaba_calculations_partner AS ( -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0442\u0440\u0430\u0442\u0430\u043c\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0432 \u043a\u0435\u0439\u0441\u0430\u0445, \u043a\u043e\u0433\u0434\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u043b WABA+\u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u043e\u0434\u043d\u0438\u043c \u043f\u043b\u0430\u0442\u0435\u0436\u043e\u043c\n  SELECT\n    ba.account_id                                                                     AS partner_id,                -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ba.occured_date                                                                   AS occured_date,              -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    api.type                                                                          AS account_type,              -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    ba.currency                                                                       AS currency,                  -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    'balanceTopup_partner'                                                                                 AS category,                         -- \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    wapi_transactions                                                                         AS tariff_price_sum,                 -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e \u0442\u0430\u0440\u0438\u0444\u0443\n    0.1                                                                                            AS partner_discount,                 -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    CASE WHEN balance_to_withdraw < (su.sum - wapi_transactions) THEN (wapi_transactions * 0.1) \n      ELSE ((wapi_transactions - (balance_to_withdraw - (su.sum - wapi_transactions))) * 0.1) END AS partner_comission,                -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    CASE WHEN balance_to_withdraw < (su.sum - wapi_transactions) THEN (wapi_transactions * 0.9) \n      ELSE ((wapi_transactions - (balance_to_withdraw - (su.sum - wapi_transactions))) * 0.9) END AS partner_price_sum,  -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts__type_change_history` api ON api.account_id = ba.account_id AND DATETIME(ba.occured_at) BETWEEN api.start_occured_at AND api.end_occured_at\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates`su ON su.guid = ba.subscription_update_id\n    WHERE ba.object = 'subscription'                       -- \u0411\u0435\u0440\u0435\u043c \u0432\u0441\u0451, \u043a\u0440\u043e\u043c\u0435 WABA \u0431\u0430\u043b\u0430\u043d\u0441\u0430\n    AND api.type in ('partner', 'tech-partner')                               -- \u0411\u044b\u043b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    AND su.action != 'balanceTopup'                        -- \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437 subscriptionUpdates, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u0430\u0441\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\n    AND wapi_transactions > 0                              -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA > 0\n    AND ba.account_id = ba.subscription_owner             -- \u041e\u043f\u043b\u0430\u0442\u0430 \u0441\u0435\u0431\u0435\n),\n\nsubs_calculations_partner AS ( -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0442\u0440\u0430\u0442\u0430\u043c\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 WABA \u0432 \u043a\u0435\u0439\u0441\u0430\u0445, \u043a\u043e\u0433\u0434\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u043b WABA+\u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u043e\u0434\u043d\u0438\u043c \u043f\u043b\u0430\u0442\u0435\u0436\u043e\u043c\n  SELECT\n    ba.account_id                                                                     AS partner_id,                -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ba.occured_date                                                                   AS occured_date,              -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    api.type                                                                          AS account_type,              -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    ba.currency                                                                       AS currency,                  -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    'subscription_partner'                                                                            AS category,                  -- \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    su.sum - wapi_transactions                                                           AS tariff_price_sum,          -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e \u0442\u0430\u0440\u0438\u0444\u0443\n    partner_discount                                                                          AS partner_discount,          -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    CASE WHEN balance_to_withdraw >= (su.sum - wapi_transactions) THEN 0 \n      ELSE ((su.sum - balance_to_withdraw - wapi_transactions) * partner_discount) END       AS partner_comission,         -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    CASE WHEN balance_to_withdraw >= (su.sum - wapi_transactions) THEN 0 \n      ELSE ((su.sum - balance_to_withdraw - wapi_transactions) * (1 - partner_discount)) END AS partner_price_sum    -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts__type_change_history` api ON api.account_id = ba.account_id AND DATETIME(ba.occured_at) BETWEEN api.start_occured_at AND api.end_occured_at\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates`su ON su.guid = ba.subscription_update_id\n    WHERE ba.object = 'subscription'                        -- \u0411\u0435\u0440\u0435\u043c \u0432\u0441\u0451, \u043a\u0440\u043e\u043c\u0435 WABA \u0431\u0430\u043b\u0430\u043d\u0441\u0430\n    AND api.type in ('partner', 'tech-partner')                                -- \u0411\u044b\u043b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    AND su.action != 'balanceTopup'                         -- \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437 subscriptionUpdates, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u0430\u0441\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\n    AND wapi_transactions > 0                               -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA > 0\n    AND ba.account_id = ba.subscription_owner              -- \u041e\u043f\u043b\u0430\u0442\u0430 \u0441\u0435\u0431\u0435\n),\n\n\npartner_spending as (\n  SELECT \n    partner_id,                                     -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    occured_date,                                   -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    account_type,                                   -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    currency,                                       -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    category,                                       -- \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    tariff_price_sum AS tariff_price_org,           -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e \u0442\u0430\u0440\u0438\u0444\u0443\n    0 AS bonus_spent_by_client_org,                 -- \u0411\u043e\u043d\u0443\u0441\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n    partner_discount,                               -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    partner_comission AS partner_comission_org,     -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    partner_price_sum AS partner_price_org          -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  FROM waba_balance_partner\n  FULL OUTER JOIN subscriptions_partner USING (partner_id, occured_date, account_type, currency, category, tariff_price_sum, partner_discount, partner_comission,partner_price_sum)\n  FULL OUTER JOIN waba_calculations_partner USING (partner_id, occured_date, account_type, currency, category, tariff_price_sum, partner_discount, partner_comission,partner_price_sum)\n  FULL OUTER JOIN subs_calculations_partner USING (partner_id, occured_date, account_type, currency, category, tariff_price_sum, partner_discount, partner_comission,partner_price_sum)\n),\n\noriginal_currency_data as (\n  SELECT \n    partner_id,                                     -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    occured_date,                                   -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    account_type,                                   -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    currency,                                       -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    category,                                       -- \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    tariff_price_org,                               -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e \u0442\u0430\u0440\u0438\u0444\u0443\n    bonus_spent_by_client_org,                      -- \u0411\u043e\u043d\u0443\u0441\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n    partner_discount,                               -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    partner_comission_org,                          -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    partner_price_org                               -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  FROM partner_spending\n  FULL OUTER JOIN client_spending USING (partner_id, occured_date, account_type, currency, category, tariff_price_org, bonus_spent_by_client_org, partner_discount, partner_comission_org, partner_price_org )\n\n),\n\noriginal_currency_and_rur_data as (\n  SELECT \n    partner_id,                                     -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    occured_date,                                   -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    account_type,                                   -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    ocd.currency,                                       -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    category,                                       -- \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    tariff_price_org,                               -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e \u0442\u0430\u0440\u0438\u0444\u0443\n    bonus_spent_by_client_org,                      -- \u0411\u043e\u043d\u0443\u0441\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n    partner_discount,                               -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    partner_comission_org,                          -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    partner_price_org,                              -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    tariff_price_org * COALESCE(cor_rate, 1) AS tariff_price_RUR,                               -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e \u0442\u0430\u0440\u0438\u0444\u0443\n    bonus_spent_by_client_org * COALESCE(cor_rate, 1) AS bonus_spent_by_client_RUR,                      -- \u0411\u043e\u043d\u0443\u0441\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n    partner_comission_org * COALESCE(cor_rate, 1) AS partner_comission_RUR,                          -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    partner_price_org * COALESCE(cor_rate, 1) AS partner_price_RUR                               -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  FROM original_currency_data ocd\n  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_exchangeRates`  er ON ocd.occured_date = er.data AND ocd.currency = er.currency AND nominal = 'RUR'\n\n)\n\n\nSELECT * \nFROM original_currency_and_rur_data", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_partner_spendings_real_money`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.547819Z", "completed_at": "2025-05-21T12:31:03.557495Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.676022Z", "completed_at": "2025-05-21T12:31:03.676034Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.18698835372924805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_business_sphere__events_description_by_users", "compiled": true, "compiled_code": "with int_cmuserid_business_sphere_event_description as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_business_sphere_event_description`\n    ),\n    business_spheres_source as (\n    select * from `dwh-wazzup`.`analytics_tech`.`business_spheres` \n    ),\n    business_sphere__events_description_by_users as (\n        select distinct\n        business_select_datetime,\n        event,\n        eventgroup,\n        includeinmetrics,\n        coalesce(\n            int_cmuserid_business_sphere_event_description.business_spheres_filter,\n            case\n                when\n                    business_spheres_source.description\n                    in ('\u041a\u043e\u043d\u0432\u0435\u0440\u0441\u0438\u043e\u043d\u043d\u044b\u0439 \u043b\u0435\u043d\u0434\u0438\u043d\u0433', '\u0414\u0440\u0443\u0433\u043e\u0439 \u0442\u0438\u043f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b', '\u041c\u0443\u043b\u044c\u0442\u0438\u0441\u0441\u044b\u043b\u043a\u0430')\n                then '\u041d\u0435 \u0443\u043a\u0430\u0437\u0430\u043b \u0441\u0444\u0435\u0440\u0443 \u0431\u0438\u0437\u043d\u0435\u0441\u0430'\n                else business_spheres_source.description\n            end\n        ) as business_spheres_filter,\n        coalesce(\n            int_cmuserid_business_sphere_event_description.eventgroupname_description, business_spheres_source.eventgroupname_description\n        ) as eventgroupname_description,\n        coalesce(name, business_spheres_source.description) as business_spheres_filter_description,\n        cmuserid\n        from  int_cmuserid_business_sphere_event_description left join business_spheres_source\n        on int_cmuserid_business_sphere_event_description.event = business_spheres_source.eventname\n    )\nselect * from business_sphere__events_description_by_users", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_business_sphere__events_description_by_users`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.550661Z", "completed_at": "2025-05-21T12:31:03.557993Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.676815Z", "completed_at": "2025-05-21T12:31:03.676828Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.22696781158447266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_attribution_devices_phone_payment_template", "compiled": true, "compiled_code": "\n\nwith registration_data as (\n    select * from\n    `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_localuserid_registration_date`\n),\n\nregistration_sources as (\n    select * from\n    `dwh-wazzup`.`dbt_nbespalov`.`int_localuserid_registration_attribution_devices`\n),\n\nfirst_payment_date as \n   (\n        select cmuserid, \n                min(date(datetime)) as first_payment_date,\n                min(datetime) as first_payment_datetime\n        from `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test` \n        where event = 'payment.success'\n        group by 1\n    ),\n\nlast_payment_date as \n    (\n         select cmuserid, max(date(datetime)) as last_payment_date\n        from `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test` \n        where\n            event in ('payment.success', 'payment.success.recurring')\n        group by 1\n    ),\nint_cmuserid_localuserid_template_link_groupped as \n (\n    select cmuserid,\n    template_link from\n    `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_localuserid_template_link_groupped`\n    group by 1,2),\n\nuser_mobiles as (\nselect * from  `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_phone__last_value`\n)\n    \nselect distinct\n    registration_data.cmuserid,\n    registration_data.registration_date as  registration_date,\n    registration_data.registration_datetime as  registration_datetime,\n    registration_sources.utm_campaign,\n    registration_sources.utm_source,\n    registration_sources.utm_medium,\n    first_payment_date.first_payment_date,\n    first_payment_date.first_payment_datetime,\n    last_payment_date.last_payment_date,\n    template_link,\n    phone,\n    case\n        when device = 'tablet' or os = 'Android'\n        then 'mobile'\n        when device is not null\n        then device\n        when os is null or os = 'Other'\n        then 'other'\n        when\n            os = 'Linux'\n            or os = 'Windows'\n            or os = 'Ubuntu'\n            or os = 'Mac OS'\n            or os = 'Mac OS X'\n        then 'desktop'\n    end as device,\n    os,\n    (\n        case\n            when url like '%?r=%'\n            then '\u0440\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u044b\u0439'\n            when\n                utm_source is null\n                and (\n                    replace(\n                        regexp_extract(initreferrer, r'(?:\\?|&)((?:[^=]+)=(?:[^&]*))'),\n                        'utm_source=',\n                        ''\n                    )\n                    like '%gclid%'\n                    or replace(\n                        regexp_extract(initreferrer, r'(?:\\?|&)((?:[^=]+)=(?:[^&]*))'),\n                        'utm_source=',\n                        ''\n                    )\n                    like '%gbraid%'\n                )\n            then 'unknow_google_ads'\n            when utm_source is null\n            then regexp_extract(initreferrer, r':\\/\\/([a-zA-Z.0-9-]*)\\/?')\n        end\n    ) as utm_traffic,\n    initreferrer\nfrom\n    registration_data \nleft join registration_sources \n    on registration_sources.localuserid = registration_data.localuserid and (registration_sources.rn =1 or registration_sources.rn is null)\nleft join\n     first_payment_date on registration_data.cmuserid = first_payment_date.cmuserid\nleft join last_payment_date on registration_data.cmuserid = last_payment_date.cmuserid\n\nleft join int_cmuserid_localuserid_template_link_groupped on registration_data.cmuserId = int_cmuserid_localuserid_template_link_groupped.cmuserId\nleft join user_mobiles on registration_data.cmuserid = user_mobiles.cmuserId \nwhere (rn = 1 or rn is null) and registration_data.cmuserid is not null", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_attribution_devices_phone_payment_template`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.553580Z", "completed_at": "2025-05-21T12:31:03.635218Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.678104Z", "completed_at": "2025-05-21T12:31:03.678113Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2654094696044922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_average_revenue_per_user", "compiled": true, "compiled_code": "with all_successful_payments as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_successful_payments_without_pro_demo` \n    where  sum is not null \n    --paid_date >= '2023-06-01' --\u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0432 \u0438\u044e\u043d\u0435 \u043d\u0430\u0447\u0430\u043b\u0438 \u043a\u043e \u0432\u0441\u0435\u043c \u043f\u043b\u0430\u0442\u0435\u0436\u0430\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432 inner_event.details->>'sum' , \u0434\u043e \u044d\u0442\u043e\u0433\u043e \u0442\u0430\u043c \u0431\u044b\u043b\u043e \u043f\u0443\u0441\u0442\u043e\n            \n),\n    stg_months as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_months`\n),\n    getting_first_row_in_a_group as (\nselect\n        paid_date\n        ,user_id\n        ,duration\n        ,duration_period\n        ,sum\n        ,case   when duration like '%month%' then date_add(paid_date, interval cast(duration_period as int) month )\n                when duration like '%days%' then date_add(paid_date, interval cast(duration_period as int) day )\n                when duration like '%year%' then date_add(paid_date, interval cast(duration_period as int) year )\n         end as till_what_date\n        ,months.month as active_month\nfrom all_successful_payments \njoin stg_months months on date_trunc(paid_date,month) <= months.month\n                      and months.month < date_trunc(case when duration like '%month%' then date_add(paid_date, interval cast(duration_period as int) month )\n                                               when duration like '%days%' then date_add(paid_date, interval cast(duration_period as int) day )\n                                                when duration like '%year%' then date_add(paid_date, interval cast(duration_period as int) year )\n                                        end,month)\n    ), --in case there were more than 1 payment in one month\n     defining_GMR as (\nselect distinct active_month\n                ,user_id\n                ,sum(sum) over (partition by user_id,active_month order by active_month)/count(*) over (partition by user_id,paid_date) as GMR\nfrom getting_first_row_in_a_group\n     )\n     select active_month,\n            user_id,\n            MAX(GMR) GMR\n     from defining_GMR\n     group by active_month,\n                user_id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_average_revenue_per_user`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.806863Z", "completed_at": "2025-05-21T12:31:03.815092Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.823871Z", "completed_at": "2025-05-21T12:31:03.823882Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.10532951354980469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_telegram_notifications_dynamics_combined_intervals", "compiled": true, "compiled_code": "with deduped_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_telegram_notifications_dynamics_deduped_intervals`\n),\n\ndeduped_intervals_with_flag as (\n    SELECT *,\n    start_date != IFNULL(LAG(end_date) OVER (PARTITION BY account_id ORDER BY start_date), start_date) as flag\n    FROM deduped_intervals),\n\ndeduped_intervals_with_group as (\n    SELECT *, \n    count(CASE WHEN flag THEN 1 END) OVER (PARTITION BY account_id ORDER BY start_date) grp\n    from deduped_intervals_with_flag\n),\n\ncombined_intervals AS (\n  SELECT account_id,            -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n  MIN(start_date) start_date,   -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439\n  MAX(end_date) end_date        -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439\n  FROM deduped_intervals_with_group\n  GROUP BY account_id, grp\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439 \u0432 Telegram \u0441 \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438\nselect * from combined_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_telegram_notifications_dynamics_combined_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.809259Z", "completed_at": "2025-05-21T12:31:03.815808Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.824540Z", "completed_at": "2025-05-21T12:31:03.824550Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10410523414611816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_first_subscription_date_and_type", "compiled": true, "compiled_code": "with subscriptions as (\nselect account_id,\n    start_date,\n    row_number() over (partition by account_id order by start_occured_at asc) rn,\n    subscription_id\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_who_paid_missing_data__paidat_and_expiresat_from_eventlogs`),\n\nfirst_subscription  as (\n    select account_id,\n    start_date,\n    subscription_id\n    from subscriptions\n    where rn=1\n),\n\nsubscriptions_parameters as (\n    select tariff_new, \n    period_new,\n    quantity_new,\n    subscription_id,\n    row_number() over (partition by subscription_id order by created_at asc) rn ,\n    created_date\n    from  `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_updates__corect_date_and_filledna_tarif_period_quantity`\n    where activation_object in ('payment','partnerBalance','invoice')),\n\nfirst_subscription_parameters as (\n    select * from subscriptions_parameters\n    where rn=1\n),\n\nsubscription_type as (\n    select type as subscription_type,\n    guid as subscription_id,\n    paid_at \n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages`\n    where paid_at is not null\n),\n\nsubscription_type_date_parameters as (\n    select \n    first_subscription.account_id,                          -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    first_subscription_parameters.tariff_new as tariff,     -- \u0422\u0430\u0440\u0438\u0444 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    first_subscription_parameters.period_new as period,     -- \u041f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    first_subscription_parameters.quantity_new as quantity, -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0432 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n    start_date,                                             -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    subscription_type.subscription_type,                    -- \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    paid_at,                                                -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    first_subscription.subscription_id                      -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    from first_subscription \n    left join first_subscription_parameters \n    on first_subscription.subscription_id=first_subscription_parameters.subscription_id\n    left join subscription_type\n    on subscription_type.subscription_id=first_subscription.subscription_id\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u0435\u0440\u0432\u0443\u044e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u043d\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0435 \u0441 \u0435\u0451 \u0442\u0438\u043f\u043e\u043c \u0438 \u0434\u0430\u0442\u043e\u0439\nselect * from subscription_type_date_parameters", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_first_subscription_date_and_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.811498Z", "completed_at": "2025-05-21T12:31:03.818930Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.825093Z", "completed_at": "2025-05-21T12:31:03.825102Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.14295578002929688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_who_paid__last_payment_guid_not_promised_payment", "compiled": true, "compiled_code": "with subscription_updates as (\n    select * from \n    `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_updates__corect_date_and_filledna_tarif_period_quantity`\n\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c\u0438 \u0438 ID \u043f\u0440\u0438\u0447\u0438\u043d\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f (\u043d\u0435 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0439 \u043f\u043b\u0430\u0442\u0435\u0436)\nselect \n\t\tdistinct billingPackages.account_id,    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n\t\tfirst_value((case when action ='setPromisedPayment' then null else activation_reason_id end) ignore nulls)\n\t\tover (partition by billingPackages.account_id order by subscription_updates.paid_at  desc  ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n)\n\t\tas activation_reason_id                 -- \u0442\u0443\u0442 \u0434\u043e\u043a \u0430\u043a\u0442 \u0440\u0438\u0437\u043e\u043d \u0438\u0434\n\t\tfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billingPackages\n\t\tleft join subscription_updates on billingPackages.guid=subscription_updates.subscription_id\n\t\twhere billingPackages.state='active' \n\t\tand (is_free=False or is_free is null) /* \u044d\u0442\u043e \u043d\u0435 \u0431\u0435\u0437\u0432\u043e\u0437\u043c\u0435\u0437\u0434\u043d\u043e \u043e\u0442\u0434\u0430\u043d\u043d\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 */", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_who_paid__last_payment_guid_not_promised_payment`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.816192Z", "completed_at": "2025-05-21T12:31:03.825842Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.945246Z", "completed_at": "2025-05-21T12:31:03.945257Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1807560920715332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_lost_revenue_due_to_quantity_and_tariff_change", "compiled": true, "compiled_code": "with\n    billing_packages_with_tarif_info as (\n        select\n            subscription_updates.*,\n            billingpackages.account_id,\n            (\n                case\n                    when subscription_updates.period_old = 12\n                    then 0.8\n                    when subscription_updates.period_old = 6\n                    then 0.9\n                    else 1\n                end\n            ) as period_discount,\n            wazzup_tariff_new.sum as tariff_price_new,  -- \u041d\u043e\u0432\u0430\u044f \u0446\u0435\u043d\u0430 \u0442\u0430\u0440\u0438\u0444\u0430\n            wazzup_tariff_old.sum as tariff_price_old   -- \u0421\u0442\u0430\u0440\u0430\u044f \u0446\u0435\u043d\u0430 \u0442\u0430\u0440\u0438\u0444\u0430\n        from\n            `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_updates__corect_date_and_filledna_tarif_period_quantity` subscription_updates\n        left join\n            `dwh-wazzup`.`analytics_tech`.`wazzup_tariff` wazzup_tariff_old\n            on wazzup_tariff_old.currency = subscription_updates.currency\n            and wazzup_tariff_old.tariff = subscription_updates.tariff_old\n        left join\n            `dwh-wazzup`.`analytics_tech`.`wazzup_tariff` wazzup_tariff_new\n            on wazzup_tariff_new.currency = subscription_updates.currency\n            and wazzup_tariff_new.tariff = subscription_updates.tariff_new\n        left join `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billingpackages\n        on billingpackages.guid=subscription_updates.subscription_id\n        where action in ('loweringTariff', 'subtractQuantity')\n    ),\n    subscription_sum_with_full_price as (\n        select\n            *,\n\n            (\n                case\n                    when action = 'subtractQuantity'\n                    then\n                        tariff_price_new * period_discount * period_old * quantity_old\n                        - tariff_price_new * period_discount * period_old * quantity_new\n                    when action = 'loweringTariff'\n                    then tariff_price_old - tariff_price_new\n                end\n            ) as lost_sum   -- \u041f\u043e\u0442\u0435\u0440\u044f\u043d\u043d\u0430\u044f \u043f\u0440\u0438\u0431\u044b\u043b\u044c\n        from billing_packages_with_tarif_info\n    )\nselect  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f \u043f\u043e\u0442\u0435\u0440\u044f\u043b\u0430 \u0434\u0435\u043d\u0435\u0433 \u0438\u0437-\u0437\u0430 \u0441\u043c\u0435\u043d\u044b \u0442\u0430\u0440\u0438\u0444\u0430\n    subscription_sum_with_full_price.*,\n    date_trunc(paid_date, month) as paid_month, -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    (\n        case\n            when subscription_sum_with_full_price.currency = 'RUR'\n            then coalesce(abs(lost_sum), 0)\n            when rur is not null\n            then coalesce(abs(lost_sum), 0) * rur\n            when subscription_sum_with_full_price.currency = 'EUR' and rur is null\n            then coalesce(abs(lost_sum), 0) * 85\n            when subscription_sum_with_full_price.currency = 'USD' and rur is null\n            then coalesce(abs(lost_sum), 0) * 75\n            when subscription_sum_with_full_price.currency = 'KZT' and rur is null\n            then coalesce(abs(lost_sum), 0) * 0.24\n        end\n    ) as lost_sum_in_rubles,    -- \u041f\u043e\u0442\u0435\u0440\u044f\u043d\u043d\u0430\u044f \u043f\u0440\u0438\u0431\u044b\u043b\u044c \u0432 \u0440\u0443\u0431\u043b\u044f\u0445 \u0441 \u0444\u0438\u043a\u0441. \u043a\u0443\u0440\u0441\u043e\u043c\nfrom subscription_sum_with_full_price\nleft join\n    `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted\n    on exchange_rates_unpivoted._ibk = subscription_sum_with_full_price.paid_date\n    and exchange_rates_unpivoted.currency = subscription_sum_with_full_price.currency", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_lost_revenue_due_to_quantity_and_tariff_change`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.819319Z", "completed_at": "2025-05-21T12:31:03.865638Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.946535Z", "completed_at": "2025-05-21T12:31:03.946545Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.22072315216064453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_subscripton_with_sum", "compiled": true, "compiled_code": "with billing_packages as (\n    select \n    account_id, \n    guid,\n    type as subscription_type,\n    is_free\n     from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages`\n),\n\nsubscription_updates as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_updates__corect_date_and_filledna_tarif_period_quantity`\n),\n\nsubscription_updated_info as (\n    select subscription_updates.subscription_id,    -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    period_new,                                     -- \u041d\u043e\u0432\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    subscription_updates.paid_at as start_at,       -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    subscription_updates.action,                    -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\n    subscription_updates.new_until_expired_days,    -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u0434\u043e \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043f\u0440\u0438 \u043f\u0440\u043e\u0434\u043b\u0435\u043d\u0438\u0438 \u0438\u043b\u0438 \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u0438 \u0442\u0430\u0440\u0438\u0444\u0430\n    subscription_updates.partner_account_id,        -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    subscription_updates.until_expired_days,        -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u0434\u043e \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0445 \u043e\u0442 new_until_expired_days\n    subscription_updates.active_until,              -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    subscription_updates.sum,                       -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    subscription_updates.wapi_transactions,         -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f WABA\n    subscription_updates.balance_to_withdraw,       -- \u0421\u0443\u043c\u043c\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043f\u0440\u0438 \u043e\u043f\u043b\u0430\u0442\u0435\n    subscription_updates.guid,                      -- ID \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    subscription_updates.currency,                  -- \u0412\u0430\u043b\u044e\u0442\u0430\n    subscription_updates.activation_reason_id,      -- ID \u043f\u0440\u0438\u0447\u0438\u043d\u044b \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    subscription_updates.paid_at_billing as paid_at_billing,            -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u0431\u0438\u043b\u043b\u0438\u043d\u0433\u0443 (04.03.2025)\n    subscription_updates.paid_at_billing_date as paid_at_billing_date,  -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u0431\u0438\u043b\u043b\u0438\u043d\u0433\u0443\n    subscription_updates.paid_at_billing_completed_at,                -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u0431\u0438\u043b\u043b\u0438\u043d\u0433\u0443 (04.03.2025)\n    subscription_updates.paid_at_billing_completed_date,                -- \u0414\u0430\u0442\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u0431\u0438\u043b\u043b\u0438\u043d\u0433\u0443\n    partner_discount,                               -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    billing_packages.is_free,                       -- \u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u0430\u044f?\n    billing_packages.subscription_type,             -- \u0422\u0438\u043f (\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442) \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    billing_packages.account_id,                    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    from subscription_updates\n    inner join billing_packages on billing_packages.guid=subscription_updates.subscription_id\n),\n\nsubscription_with_end_dates as (\n    select *, \n    (case when action='setPromisedPayment' then active_until\n    when activation_reason_id='7e65a671-4665-4db4-bb59-a73c704f0657' then cast('2022-02-13' as datetime)\n    else\n    null\n    end)\n    as end_at\n    from subscription_updated_info\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435 \u0441 \u0441\u0443\u043c\u043c\u043e\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u0438 \u0441\u0443\u043c\u043c\u043e\u0439 \u043e\u043f\u043b\u0430\u0442\u044b\nselect * from subscription_with_end_dates", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_subscripton_with_sum`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:03.821585Z", "completed_at": "2025-05-21T12:31:03.905226Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:03.947715Z", "completed_at": "2025-05-21T12:31:03.947724Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2582557201385498, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_type_and_partner_change_history", "compiled": true, "compiled_code": "-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0432\u0441\u0435\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0442\u0438\u043f\u043e\u0432 \u0438 \u0441\u0432\u044f\u0437\u0435\u0439 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u043c\u0438\n\nwith partner_data as (          -- \u0422\u044f\u043d\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432/\u0440\u0435\u0444.\u043f\u0430\u043f \u0441 \u0434\u0430\u0442\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0431\u0435\u0437 \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e start_date \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts__partner_and_refparent_change_deduplicated`\n),\n\ntype_change as (                -- \u0422\u044f\u043d\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438\u0441\u0442\u043e\u0440\u0438\u0439 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0431\u0435\u0437 \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e start_date \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_acccounts__type_change_deduplicated`\n),\n\ntype_and_partner_change as (            -- \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0441\u0432\u044f\u0437\u0435\u0439 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u043c\u0438/\u0440\u0435\u0444.\u043f\u0430\u043f\u0430\u043c\u0438 \u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\n    select \n        coalesce(partner_data.account_id,type_change.account_id) as account_id ,                        -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts \n        coalesce(partner_data.start_occured_at, type_change.start_occured_at) as start_occured_at,      -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n\n        (case \n            when type_change.end_occured_at < coalesce(type_change.end_occured_at,partner_data.end_occured_at) then type_change.end_occured_at\n            when partner_data.end_occured_at < coalesce(type_change.end_occured_at,partner_data.end_occured_at) then partner_data.end_occured_at\n            else coalesce(type_change.end_occured_at,partner_data.end_occured_at)\n        end) as end_occured_at,         -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043a\u043e\u043d\u0446\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \n                                        -- \u0411\u0435\u0440\u0435\u043c \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0443\u044e \u0434\u0430\u0442\u0443 \u0438\u0437 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 (\u043a\u043e\u043d\u0435\u0446 \u0441\u0432\u044f\u0437\u0435\u0439 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430/\u0440\u0435\u0444.\u043f\u0430\u043f\u044b \u0438\u043b\u0438 \u043a\u043e\u043d\u0435\u0446 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430), \u0442\u043e \u0435\u0441\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u043d\u043d\u044e\u044e \u0434\u0430\u0442\u0443. \u0415\u0441\u043b\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043e\u0434\u043d\u0430 (\u0432\u0442\u043e\u0440\u0430\u044f null), \u0442\u043e \u0431\u0435\u0440\u0435\u043c \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0443\u044e \n\n        partner_data.partner_id,                -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        partner_data.refparent_id,              -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u043f\u044b\n        type_change.type as account_type        -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    from  partner_data \n        full outer join type_change         -- \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u0431\u044b\u043b\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u0432\u0441\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0430\u043c \u0438\u0437 \u0434\u0432\u0443\u0445 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446. \n            on partner_data.account_id=type_change.account_id\n                and partner_data.start_date>=type_change.start_date\n                and partner_data.start_date<=type_change.end_date\n)\n\n\nselect          \n    *,       \n    cast(start_occured_at as date) as start_date,           -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    cast(end_occured_at as date) as end_date                -- \u0414\u0430\u0442\u0430 \u043a\u043e\u043d\u0446\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \n from type_and_partner_change", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_history`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.072473Z", "completed_at": "2025-05-21T12:31:04.082610Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.088237Z", "completed_at": "2025-05-21T12:31:04.088247Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14388251304626465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_postpay_waba_revenue_with_gupshup", "compiled": true, "compiled_code": "with defining_first_rn as (\n   select id,\n         row_number() over (partition by subscription_id order by cast(id as int)) rn\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_transactions_gupshup` wgt\njoin `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` bp  on wgt.subscription_id = bp.guid\nwhere guid  in (select distinct subscription_id from `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_transactions` where subscription_id is not null )\n)\n\nselect cast(child_Id as string) as account_id, \n   int_acccounts__type_change_deduplicated.type as account_type,\n   cast(partner_Id as string) as partner_id, \n   'tech-partner-postpay' as partner_type,\n   wabaTransactions.currency, \n   cast(DATETIME(date_at,'Europe/Moscow') as date) as paid_date,\n   amount\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_transactions_gupshup`  wabaTransactions\nleft join defining_first_rn on wabaTransactions.id = cast(defining_first_rn.id as int)  and rn = 1\ninner join `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billingPackages\n                on billingPackages.guid=wabaTransactions.subscription_id\ninner join `dwh-wazzup`.`dbt_nbespalov`.`int_acccounts__type_change_deduplicated` on billingPackages.account_id = int_acccounts__type_change_deduplicated.account_id\n                                                         and DATETIME(date_at,'Europe/Moscow') >= start_occured_at and DATETIME(date_at,'Europe/Moscow') < end_occured_at\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_affiliates` affilaites \n          on affilaites.child_Id= billingPackages.account_id\nwhere int_acccounts__type_change_deduplicated.type='child-postpay'\n      and partner_Id!=96955135\n   and wabaTransactions.type='topup'\n   and defining_first_rn.id is null\n\n\n\n   union all\n   select \n   cast(child_Id as string) as account_id, \n   int_acccounts__type_change_deduplicated.type as account_type,\n   cast(partner_Id as string) as partner_id, \n   'tech-partner-postpay' as partner_type,\n   wabaTransactions.currency, \n   cast(DATETIME(date_at,'Europe/Moscow') as date) as paid_date,\n   amount\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_transactions`  wabaTransactions\ninner join `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billingPackages\n                on billingPackages.guid=wabaTransactions.subscription_id\ninner join `dwh-wazzup`.`dbt_nbespalov`.`int_acccounts__type_change_deduplicated` on billingPackages.account_id = int_acccounts__type_change_deduplicated.account_id\n                                                         and DATETIME(date_at,'Europe/Moscow') >= start_occured_at and DATETIME(date_at,'Europe/Moscow') < end_occured_at\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_affiliates` affilaites \n          on affilaites.child_Id= billingPackages.account_id\nwhere int_acccounts__type_change_deduplicated.type='child-postpay'\n      and partner_Id!=96955135\n   and wabaTransactions.type='topup'", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_postpay_waba_revenue_with_gupshup`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.076776Z", "completed_at": "2025-05-21T12:31:04.083737Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.091039Z", "completed_at": "2025-05-21T12:31:04.091049Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.14301109313964844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_business_spheres", "compiled": true, "compiled_code": "with business_select_events as(\n                    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_business_sphere_events_data`\n), \nbusiness_select_events_description as (\n                    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_business_sphere_event_description` \n),\nbusiness_select_events_description_by_users as (\n                    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_business_sphere__events_description_by_users`\n)\n\nselect *\nfrom business_select_events_description_by_users", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_business_spheres`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.079487Z", "completed_at": "2025-05-21T12:31:04.085991Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.091610Z", "completed_at": "2025-05-21T12:31:04.091622Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.1419525146484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserId__count_visitkas_visitors_five_clients", "compiled": true, "compiled_code": "with registration_data as (\n    select cmuserid,\n            registration_datetime from  `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_attribution_devices_phone_payment_template` \n), \nvisitkas_visitors_with_visit_time as \n    (select visits_time.*,\n    first_value(datetime) over (partition by visits_time.cmuserid,template_link,localuserid order by datetime) first_time_value_over_localuserid \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_visitkas_visitors_with_visit_time` visits_time\n        join registration_data on visits_time.cmuserid = registration_data.cmuserid \n        where registration_datetime <= visits_time.datetime\n    ),\n\n    visitkas_visitors_with_visit_time_deduplicated as \n    (select cmuserid, \n            template_link,\n            first_time_value_over_localuserid,\n            dense_rank() over (partition by cmuserid,template_link order by first_time_value_over_localuserid,localuserid) rank,\n            localuserid,\n            count(distinct localUserId) over (partition by template_link,cmuserid) as visitkas_users \n            from visitkas_visitors_with_visit_time\n    )\nselect distinct cmuserid,template_link,first_time_value_over_localuserid as activation_datetime\nfrom visitkas_visitors_with_visit_time_deduplicated\nwhere rank = 5\nand cmuserid is not null", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserId__count_visitkas_visitors_five_clients`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.084266Z", "completed_at": "2025-05-21T12:31:04.092252Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.210764Z", "completed_at": "2025-05-21T12:31:04.210775Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1804361343383789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserId__count_visitkas_visitors_one_client", "compiled": true, "compiled_code": "with registration_data as (\n    select cmuserid,\n            registration_datetime from  `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_attribution_devices_phone_payment_template` \n), \nvisitkas_visitors_with_visit_time as \n    (select visits_time.*,\n    first_value(datetime) over (partition by visits_time.cmuserid,template_link,localuserid order by datetime) first_time_value_over_localuserid \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_visitkas_visitors_with_visit_time` visits_time\n        join registration_data on visits_time.cmuserid = registration_data.cmuserid \n        where registration_datetime <= visits_time.datetime\n    ),\n\n    visitkas_visitors_with_visit_time_deduplicated as \n    (select cmuserid, \n            template_link,\n            first_time_value_over_localuserid,\n            dense_rank() over (partition by cmuserid,template_link order by first_time_value_over_localuserid,localuserid) rank,\n            localuserid,\n            count(distinct localUserId) over (partition by template_link,cmuserid) as visitkas_users \n            from visitkas_visitors_with_visit_time\n    )\nselect distinct cmuserid,template_link,first_time_value_over_localuserid as activation_datetime\nfrom visitkas_visitors_with_visit_time_deduplicated\nwhere rank = 1\nand cmuserid is not null", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserId__count_visitkas_visitors_one_client`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.086444Z", "completed_at": "2025-05-21T12:31:04.132333Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.212225Z", "completed_at": "2025-05-21T12:31:04.212234Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2168104648590088, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserId__count_visitkas_visitors_ten_clients", "compiled": true, "compiled_code": "with registration_data as (\n    select cmuserid,\n            registration_datetime from  `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_attribution_devices_phone_payment_template` \n), \nvisitkas_visitors_with_visit_time as \n    (select visits_time.*,\n    first_value(datetime) over (partition by visits_time.cmuserid,template_link,localuserid order by datetime) first_time_value_over_localuserid \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_visitkas_visitors_with_visit_time` visits_time\n        join registration_data on visits_time.cmuserid = registration_data.cmuserid \n        where registration_datetime <= visits_time.datetime\n    ),\n\n    visitkas_visitors_with_visit_time_deduplicated as \n    (select cmuserid, \n            template_link,\n            first_time_value_over_localuserid,\n            dense_rank() over (partition by cmuserid,template_link order by first_time_value_over_localuserid,localuserid) rank,\n            localuserid,\n            count(distinct localUserId) over (partition by template_link,cmuserid) as visitkas_users \n            from visitkas_visitors_with_visit_time\n    )\nselect distinct cmuserid,template_link,first_time_value_over_localuserid as activation_datetime\nfrom visitkas_visitors_with_visit_time_deduplicated\nwhere rank = 10\nand cmuserid is not null", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserId__count_visitkas_visitors_ten_clients`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.088738Z", "completed_at": "2025-05-21T12:31:04.209259Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.213269Z", "completed_at": "2025-05-21T12:31:04.213278Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2533419132232666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid__visitkas_visitors_with_visit_time", "compiled": true, "compiled_code": "with registration_data as (\n    select cmuserid,\n            registration_datetime from  `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_attribution_devices_phone_payment_template` \n)select visits_time.*,\n    first_value(datetime) over (partition by visits_time.cmuserid,template_link,localuserid order by datetime) first_time_value_over_localuserid \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_visitkas_visitors_with_visit_time` visits_time\n        join registration_data on visits_time.cmuserid = registration_data.cmuserid \n        where registration_datetime <= visits_time.datetime", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid__visitkas_visitors_with_visit_time`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.337784Z", "completed_at": "2025-05-21T12:31:04.345631Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.352302Z", "completed_at": "2025-05-21T12:31:04.352312Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.1420440673828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_edited_1_block", "compiled": true, "compiled_code": "with registration_data as (\n    select cmuserid,\n            registration_datetime from  `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_attribution_devices_phone_payment_template` \n),\nedits as (\nselect all_data.cmuserid,\n       event,\n       datetime,\n       count(*) over (partition by all_data.cmuserid) edits_count,\n       row_number() over (partition by all_data.cmuserid order by datetime) rn \nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test` all_data\njoin registration_data on all_data.cmuserid = registration_data.cmuserid\nwhere (event like '%delete.click' or event like '%save.click')\nand all_data.datetime >= registration_datetime\n\n)\nselect cmuserid,\n        datetime as edits_datetime\nfrom edits\nwhere edits_count >= 1 \n          and rn = 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_edited_1_block`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.340558Z", "completed_at": "2025-05-21T12:31:04.346669Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.355301Z", "completed_at": "2025-05-21T12:31:04.355310Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.14272522926330566, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_edited_2_blocks", "compiled": true, "compiled_code": "with registration_data as (\n    select cmuserid,\n            registration_datetime from  `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_attribution_devices_phone_payment_template` \n),\nedits as (\nselect all_data.cmuserid,\n       event,\n       datetime,\n       count(*) over (partition by all_data.cmuserid) edits_count,\n       row_number() over (partition by all_data.cmuserid order by datetime) rn \nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test` all_data\njoin registration_data on all_data.cmuserid = registration_data.cmuserid\nwhere (event like '%delete.click' or event like '%save.click')\nand all_data.datetime >= registration_datetime\n\n)\nselect cmuserid,\n        datetime as edits_datetime\nfrom edits\nwhere edits_count >= 2 \n          and rn = 2", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_edited_2_blocks`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.342823Z", "completed_at": "2025-05-21T12:31:04.351654Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.355967Z", "completed_at": "2025-05-21T12:31:04.355976Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.14365744590759277, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_edited_3_blocks", "compiled": true, "compiled_code": "with registration_data as (\n    select cmuserid,\n            registration_datetime from  `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_attribution_devices_phone_payment_template` \n),\nedits as (\nselect all_data.cmuserid,\n       event,\n       datetime,\n       count(*) over (partition by all_data.cmuserid) edits_count,\n       row_number() over (partition by all_data.cmuserid order by datetime) rn \nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test` all_data\njoin registration_data on all_data.cmuserid = registration_data.cmuserid\nwhere (event like '%delete.click' or event like '%save.click')\nand all_data.datetime >= registration_datetime\n\n)\nselect cmuserid,\n        datetime as edits_datetime\nfrom edits\nwhere edits_count >= 3\n          and rn = 3", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_edited_3_blocks`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.347154Z", "completed_at": "2025-05-21T12:31:04.356485Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.478698Z", "completed_at": "2025-05-21T12:31:04.478710Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1831519603729248, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_cmuserid__last_payment_date", "compiled": true, "compiled_code": "select\n    ps.cmuserid,\n    template_link,\n    phone,\n    ps.last_payment_date,\n    pu.datetime as unsubscribe_date\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_attribution_devices_phone_payment_template` ps\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_unsubscribe` pu using (cmuserid)\nwhere (last_payment_date is not null) or (pu.datetime is not null)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_cmuserid__last_payment_date`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.348811Z", "completed_at": "2025-05-21T12:31:04.356914Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.479447Z", "completed_at": "2025-05-21T12:31:04.479461Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.22051239013671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_cohorts_by_registration_date__payment_template", "compiled": true, "compiled_code": "with\n    pre_events as (select * except(first_payment_datetime,payment_sum) from `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_success_and_recurring`\n                union all\n                select localuserid, cmuserid,null as datetime, registration_date as date, 'registration' as event_name, null as event \n                from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_localuserid_registration_date`\n                union all\n                select localuserid, cmuserid,datetime, date(datetime) as date, 'visitkas' as event_name,'visitkas' as event\n                from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_visitkas_visitors_with_visit_time` ),\n    events as (select * from pre_events right join `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_attribution_devices_phone_payment_template` us_data using (cmuserid))\nselect *\nexcept(datetime,event)\nfrom events", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_cohorts_by_registration_date__payment_template`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.352811Z", "completed_at": "2025-05-21T12:31:04.478261Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.481885Z", "completed_at": "2025-05-21T12:31:04.481893Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.25907087326049805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_funnel__payments", "compiled": true, "compiled_code": "with\n    reg_data as (\n        select\n            cmuserid,\n            registration_date,\n            utm_campaign,\n            utm_source,\n            utm_medium,\n            utm_traffic\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_attribution_devices_phone_payment_template`\n    ),\nregistration_trials_and_payments_tries as (\nselect\n    cmuserid,\n    event,\n    datetime,\n    date,\n    null as payment_success_count,\n    lag(datetime) over (partition by cmuserid order by datetime) as next_date\nfrom `dwh-wazzup`.`mongo_db`.`df_events`\nwhere\n    event in (\n        'payment.attempt',\n        'register-confirm-code-success',\n        'trial.start',\n        'payment.unsubscribe',\n        'trial.try-closed',\n        'payment.success.recurring'\n    )),\n\n\n\npayments_regs_trials_union as (\n        select *\n        from registration_trials_and_payments_tries\n\n        union all\n\n        select \n        cmuserid,\n        'payment.success.all' as event,\n        datetime,\n        date,\n        payment_success_count,\n        next_date\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_successful__event_count_next_date`\n\n        union all\n\n        select *\n        from `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_attempts`\n\n\n        union all\n        select  \n        cmuserid,\n        'payment.success' as event,\n        datetime,\n        date,\n        payment_success_count,\n        next_date\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_successful__event_count_next_date`)\n\n\n\nselect\n    p.cmuserid,\n    p.event,\n    p.datetime,\n    p.date,\n    p.payment_success_count,\n    p.next_date,\n    ts.try_start,\n    reg_data.registration_date,\n    reg_data.utm_campaign,\n    reg_data.utm_traffic,\n    utm_source,\n    utm_medium\nfrom reg_data\n\n\nleft join payments_regs_trials_union p using (cmuserid)\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_trial_start` ts using (cmuserid)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_funnel__payments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.606601Z", "completed_at": "2025-05-21T12:31:04.625963Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.634956Z", "completed_at": "2025-05-21T12:31:04.634968Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.11678767204284668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_cmuserid_copied_template_link", "compiled": true, "compiled_code": "with registration_data as (\n    select cmuserid,\n            registration_datetime from  `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_attribution_devices_phone_payment_template` \n)\nselect all_data.cmuserid,min(datetime) as copied_datetime \nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test` all_data\njoin registration_data on all_data.cmuserid = registration_data.cmuserid\nwhere\n    event in (\n        'editor-link.copy.click-new',\n        'editor-link.copy.click',\n        'qr.download-qrcode',\n        'qr.download-qrcode-card',\n        'my-sites.copy-link-icon.click',\n        'editor-link.share-vk.click',\n        'editor-link.share-tg.click',\n        'editor-link.share-inst.click',\n        'editor-link.share-tiktok.click',\n        'editor-link.share-fb.click',\n        'editor-link.share-tw.click',\n        'editor-link.share-mobile.click'\n    )\nand all_data.datetime >= registration_datetime\ngroup by all_data.cmuserid", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_cmuserid_copied_template_link`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.608657Z", "completed_at": "2025-05-21T12:31:04.626667Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.637839Z", "completed_at": "2025-05-21T12:31:04.637849Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1561131477355957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.stg_payments_promo_tariff", "compiled": true, "compiled_code": "select  all_data.cmuserid, date(dateTime) as date,\ndatetime,\nmin(dateTime) over (partition by all_data.cmuserId order by date) promo_tariff_datetime\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test` all_data\njoin `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_attribution_devices_phone_payment_template` registration_data on all_data.cmuserid = registration_data.cmuserid\nwhere event in ('promo_tariff.post','promo_tariff')\nand all_data.datetime >= registration_data.registration_datetime", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`stg_payments_promo_tariff`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.610692Z", "completed_at": "2025-05-21T12:31:04.634356Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.639114Z", "completed_at": "2025-05-21T12:31:04.639123Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.1958606243133545, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.Profeat_site.relationships_int_cmuserid_attribution_devices_phone_payment_template_cmuserid__cmuserid__ref_int_cmuserid_localuserid_registration_date_.111884ceb2", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select cmuserid as from_field\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_attribution_devices_phone_payment_template`\n    where cmuserid is not null\n),\n\nparent as (\n    select cmuserid as to_field\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_localuserid_registration_date`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.627462Z", "completed_at": "2025-05-21T12:31:04.638775Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.719023Z", "completed_at": "2025-05-21T12:31:04.719035Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.19451355934143066, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.Profeat_site.unique_int_cmuserid_attribution_devices_phone_payment_template_cmuserid.9a29e0b554", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select cmuserid as unique_field\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_attribution_devices_phone_payment_template`\n  where cmuserid is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.632630Z", "completed_at": "2025-05-21T12:31:04.639440Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.759593Z", "completed_at": "2025-05-21T12:31:04.759605Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2343311309814453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_notifications_active_by_month", "compiled": true, "compiled_code": "with\n    notification_on as (\n        select *\n        from  `dwh-wazzup`.`analytics_tech`.`months` month\n        inner join\n            `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_telegram_notifications_dynamics_combined_intervals` notifications\n            on month.month >= date_trunc(notifications.start_date, month)\n            and month.month <= date_trunc(notifications.end_date, month)\n    ),\n    notifications_active as (\n        select\n            (\n                case\n                    when\n                        date_trunc(start_date, month) = month\n                        and date_trunc(end_date, month) = month\n                    then date_diff(end_date, start_date, day) + 1\n                    when\n                        date_trunc(start_date, month) = month\n                        and date_trunc(end_date, month) > month\n                    then date_diff(last_day(month), start_date, day) + 1\n                    when date_trunc(start_date, month) < month\n                    then date_diff(end_date, month, day) + 1\n\n                    else date_diff(end_date, start_date, day)\n                end\n\n            ) as notification_active_days,\n            *\n        from notification_on\n    )\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c\u0438, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\nselect month,                                   -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\naccount_id,                                     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nsum(notification_active_days) as active_days    -- \u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439\nfrom notifications_active\ngroup by 1, 2", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_notifications_active_by_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.635674Z", "completed_at": "2025-05-21T12:31:04.719407Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.800937Z", "completed_at": "2025-05-21T12:31:04.800950Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2599306106567383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_channels_added_before_first_subscription", "compiled": true, "compiled_code": "with first_channels_by_transport as (\n    select *,\n    cast(channel_created_at as date) as channel_created_date\n     from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_first_channel_added__by_transport`),\n\nfirst_subscription as (\n    select account_id,\n    start_date as subscription_start from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_first_subscription_date_and_type`\n),\n\nregistration_info as (\n    select account_id, \n    date_add(register_date, INTERVAL 21 DAY) as  register_date\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`\n),\n\nchannels_before_first_subscription as (\n    select first_channels_by_transport.account_id, \n    first_channels_by_transport.transport, \n    coalesce(subscription_start,register_date) as typical_date,\n    channel_created_date\n    from first_channels_by_transport \n    left join first_subscription\n    on first_channels_by_transport.account_id=first_subscription.account_id\n    left join\n    registration_info\n    on first_subscription.account_id=registration_info.account_id\n    order by account_id, transport),\n\nfirst_transport_before_subscription as (\n    select account_id,                              -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    string_agg(transport, \",\") as transport_added   -- \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043a\u0430\u043d\u0430\u043b\u044b\n    from channels_before_first_subscription\n    where channel_created_date<=typical_date\n    group by 1)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043a\u0430\u043d\u0430\u043b\u0430\u043c\u0438, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u043e \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c\nselect * from  first_transport_before_subscription", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_channels_added_before_first_subscription`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.887957Z", "completed_at": "2025-05-21T12:31:04.894694Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.901414Z", "completed_at": "2025-05-21T12:31:04.901423Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10300183296203613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_with_sum_and_converted_currency_billing_date", "compiled": true, "compiled_code": "with payments as (          -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043e\u043f\u043b\u0430\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0441 \u0441\u0443\u043c\u043c\u043e\u0439 \u043d\u0435\u0440\u0430\u0432\u043d\u043e\u0439 \u043d\u0443\u043b\u044e\n    select *  from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_subscripton_with_sum`\n    where sum!=0\n),\n\npayments_with_currency as ( -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043e\u043f\u043b\u0430\u0442 \u0441 \u0432\u0430\u043b\u044e\u0442\u0430\u043c\u0438\n\nselect                      -- \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u043e\u043f\u043b\u0430\u0442\n    sum,                                                                                -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    payments.currency,                                                                  -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b: RUR, USD, EUR, KZT\n    paid_at_billing,                                                                    -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b (04.03.2025)\n    paid_at_billing_date,                                                               -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    paid_at_billing_completed_at,                                                       -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u043b\u0430\u0442\u044b (04.03.2025)\n    paid_at_billing_completed_date,                                                     -- \u0414\u0430\u0442\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u043b\u0430\u0442\u044b\n    period_new,                                                                         -- \u041f\u0435\u0440\u0438\u043e\u0434 \u043e\u043f\u043b\u0430\u0442\u044b: 1, 6, 12 \u043c\u0435\u0441\u044f\u0446\u0435\u0432\n    (case\n        when payments.currency = 'RUR'  then sum\n        when RUR is not null then  sum * RUR\n        when payments.currency = 'EUR'  and RUR is null then  sum * 85 \n        when payments.currency = 'USD'  and RUR is null then  sum * 75\n        when payments.currency = 'KZT' and RUR is null then  sum * 0.24\n    end) as sum_in_rubles,                                                              -- \u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044f \u0441\u0443\u043c\u043c\u044b \u0438\u0437 \u0434\u0440\u0443\u0433\u0438\u0445 \u0432\u0430\u043b\u044e\u0442 \u0432 \u0440\u0443\u0431\u043b\u0438 \u0441 \u0444\u0438\u043a\u0441 \u043a\u0443\u0440\u0441\u043e\u043c\n    coalesce((case\n        when payments.currency = 'RUR'  then wapi_transactions\n        when RUR is not null then  wapi_transactions * RUR\n        when payments.currency = 'EUR'  and RUR is null then  wapi_transactions * 85 \n        when payments.currency = 'USD'  and RUR is null then  wapi_transactions * 75\n        when payments.currency = 'KZT' and RUR is null then  wapi_transactions * 0.24\n    end),0) as wapi_transactions_in_rubles,                                             -- \u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044f \u0441\u0443\u043c\u043c\u044b \u0438\u0437 \u0434\u0440\u0443\u0433\u0438\u0445 \u0432\u0430\u043b\u044e\u0442 \u0432 \u0440\u0443\u0431\u043b\u0438 \u0434\u043b\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0441 \u0444\u0438\u043a\u0441 \u043a\u0443\u0440\u0441\u043e\u043c\n    sum as original_sum,                                                                -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    coalesce(wapi_transactions,0) as wapi_original_sum,                                 -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    (case\n        when payments.currency = 'USD'  then sum\n        when USD is not null then  sum / USD\n        when payments.currency = 'EUR'  and USD is null then  sum /1.12\n        when payments.currency = 'USD'  and USD is null then  sum * 75\n        when payments.currency = 'KZT' and USD is null then sum * 0.24\n        end\n    ) as sum_in_USD ,                                                                   -- \u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044f \u0441\u0443\u043c\u043c\u044b \u0438\u0437 \u0434\u0440\u0443\u0433\u0438\u0445 \u0432\u0430\u043b\u044e\u0442 \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u044b \u0441 \u0444\u0438\u043a\u0441 \u043a\u0443\u0440\u0441\u043e\u043c\n    (case\n        when payments.currency = 'USD'  then wapi_transactions\n        when USD is not null then  wapi_transactions / USD\n        when payments.currency = 'EUR'  and USD is null then  wapi_transactions /1.12\n        when payments.currency = 'USD'  and USD is null then  wapi_transactions * 75\n        when payments.currency = 'KZT' and USD is null then wapi_transactions * 0.24\n        end\n    ) as wapi_sum_in_USD ,                                                              -- \u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044f \u0441\u0443\u043c\u043c\u044b \u0438\u0437 \u0434\u0440\u0443\u0433\u0438\u0445 \u0432\u0430\u043b\u044e\u0442 \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u044b \u0434\u043b\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0441 \u0444\u0438\u043a\u0441 \u043a\u0443\u0440\u0441\u043e\u043c\n    guid,                                                                               -- guid \u043e\u043f\u043b\u0430\u0442\u044b\n    partner_account_id,                                                                 -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u0441\u043e\u0432\u0435\u0440\u0448\u0438\u0432\u0448\u0435\u0433\u043e \u043e\u043f\u043b\u0430\u0442\u0443\n    subscription_type,                                                                  -- \u0422\u0438\u043f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    balance_to_withdraw,                                                                -- \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0439 \u043e\u043f\u043b\u0430\u0442\u044b \u043a\u043e\u043b-\u0432\u043e \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0434\u043b\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438    \n    partner_discount,                                                                   -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 - 35% \u0438\u043b\u0438 50%\n    subscription_id,                                                                    -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    account_id,                                                                         -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    activation_reason_id,                                                               -- id/guid \u0437\u0430\u043f\u0438\u0441\u0438, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u044b\u043b\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u043e\u043d\u043e(\u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043e) \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u043e\u043b\u044e guid \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b payments \u0434\u043b\u044f activationObject = payment \u0438\u043b\u0438 partnerBalance. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u043e\u043b\u044e id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b bills \u0434\u043b\u044f activationObject = invoice\n    action                                                                              -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a: renewal, addQuantity, pay, raiseTariff, balanceTopup, templateMessages\n    from payments\n    left join `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted \n    on exchange_rates_unpivoted._ibk = payments.paid_at_billing_date\n    and exchange_rates_unpivoted.currency = payments.currency )\n\nselect * from payments_with_currency", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_and_converted_currency_billing_date`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.885854Z", "completed_at": "2025-05-21T12:31:04.895058Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.902082Z", "completed_at": "2025-05-21T12:31:04.902091Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14299607276916504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_key_product_metrics__conversion_c2_1_month", "compiled": true, "compiled_code": "SELECT account_id,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nmax(case when action='renewal' and state='activated' and first_subscription.paid_at is not null then True else False end) as is_renewal     -- True, \u0435\u0441\u043b\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u0431\u044b\u043b\u0430 \u043f\u0440\u043e\u0434\u043b\u0435\u043d\u0430\n\nFROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_first_subscription_date_and_type`  first_subscription\n\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates` subscription_updates \non first_subscription.subscription_id=subscription_updates.subscription_id\nwhere first_subscription.period=1\ngroup by 1\n    -- \u041a\u043e\u043d\u0432\u0435\u0440\u0441\u0438\u044f \u0432 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u0443\u044e \u043e\u043f\u043b\u0430\u0442\u0443 \u043c\u0435\u0441\u044f\u0447\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_key_product_metrics__conversion_c2_1_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.891643Z", "completed_at": "2025-05-21T12:31:04.901066Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.905327Z", "completed_at": "2025-05-21T12:31:04.905335Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.14351677894592285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptons_with_sum_and_correct_dates_joined_paidat", "compiled": true, "compiled_code": "with missing_subscription_data as (\n    select *,\n    cast(start_at as date) as start_date,\n    cast(null as date) as end_date from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_subscripton_with_sum`\n    where action in ('pay','renewal','subtractQuantity','addQuantity','raiseTariff')\n    and is_free is distinct from True\n),\n\nmissing_data_deduplicated as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_restore_missing_data__paidat_and_expiresat_deduplicated`\n),\n\nmissing_subscription_data_joined AS (\n  SELECT \n    coalesce(missing_data_deduplicated.start_date, missing_subscription_data.start_date) as start_date_corrected,\n    coalesce(missing_data_deduplicated.start_occured_at, missing_subscription_data.start_at) as start_at_corrected,\n    missing_subscription_data.start_at as missing_subscription_data_start_at,\n    missing_data_deduplicated.start_occured_at as missing_data_deduplicated_start_occured_at,\n    missing_subscription_data.start_date, \n    missing_subscription_data.account_id,\n    missing_subscription_data.subscription_id,\n    missing_subscription_data.partner_account_id,\n    missing_subscription_data.action AS action,\n    currency,\n    sum,\n    guid,\n    missing_subscription_data.start_at,\n    COALESCE(missing_subscription_data.end_date, missing_data_deduplicated.end_date) AS end_date,\n    subscription_type,\n    wapi_transactions \n  FROM \n    missing_subscription_data \n  LEFT JOIN \n    missing_data_deduplicated \n  ON \n    missing_subscription_data.account_id = missing_data_deduplicated.account_id\n        AND missing_subscription_data.start_date <= missing_data_deduplicated.start_date\n    and missing_subscription_data.start_date>=date_add(missing_data_deduplicated.start_date, interval -20 day)\n    AND missing_subscription_data.subscription_id = missing_data_deduplicated.subscription_id\n    ),\n\nmissing_subscription_data_joined_to_deduplicate as (\n    select *, \n    (case when start_date_corrected=start_date then True else False end) as same_start_date,\n    count(*) over (partition by subscription_id, start_date, guid) as duplicate_id\n    from missing_subscription_data_joined),\n\nmissing_subscription_data_joined_deduplicated as (\n    select *, sum(cast(same_start_date as int)) over (partition by guid) as is_there_same_start_date\n    from missing_subscription_data_joined_to_deduplicate\n),\n\nmissing_subscription_data_joined_deduplicated_same_start_date as (\n    select *  \n    from missing_subscription_data_joined_deduplicated\n    where (duplicate_id=1) or (duplicate_id>=2 and same_start_date=True and is_there_same_start_date>0) or (duplicate_id>=2)\n),\n\nmissing_subscription_data_joined_deduplicated_same_start_date_to_deduplicate_guid as (\n    select *, \n    row_number() over (partition by guid order by start_at_corrected asc) rn \n    from missing_subscription_data_joined_deduplicated_same_start_date\n),\n\nmissing_subscription_data_joined_deduplicated_guid as (\n    select *\n    from missing_subscription_data_joined_deduplicated_same_start_date_to_deduplicate_guid\n    where rn=1\n),\n\nmissing_subscription_data_joined_correct_start_at as (\n    select *, \n    count(*) over (partition by subscription_id, start_at_corrected) as duplicate_start_corrected\n     from missing_subscription_data_joined_deduplicated_guid\n),\n    missing_subscription_data_joined_corrected_start_at as (\n     select coalesce((case when duplicate_start_corrected>1  and missing_subscription_data_start_at is not null then missing_subscription_data_start_at else missing_data_deduplicated_start_occured_at end),missing_subscription_data_start_at)\n     as start_at_corrected,\n    start_date,\n    account_id,\n    subscription_id,\n    action,\n    partner_account_id,\n    currency,\n    sum,\n    guid,\n    start_at,\n    end_date,\n    subscription_type,\n    wapi_transactions\n    from missing_subscription_data_joined_correct_start_at\n    ),\n\nmissing_data_with_correct_dates as ( \nselect cast(start_at_corrected as date) as start_date,  -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nstart_at_corrected as start_at,                         -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\naccount_id,                                             -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nsubscription_id,                                        -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nguid,                                                   -- ID \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nend_date,                                               -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\npartner_account_id,                                     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\nsum,                                                    -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\ncurrency,                                               -- \u0412\u0430\u043b\u044e\u0442\u0430\naction,                                                 -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\nsubscription_type,                                      -- \u0422\u0438\u043f (\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442) \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nwapi_transactions                                       -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f WABA\n from missing_subscription_data_joined_corrected_start_at)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0443 \u0430\u043a\u043a\u0430\u043d\u0442\u043e\u0432 \u0441 \u0443\u0442\u043e\u0447\u043d\u0435\u043d\u0438\u0435\u043c \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0438 \u0441\u0443\u043c\u043c\u0430\u043c\u0438\n select * from missing_data_with_correct_dates", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptons_with_sum_and_correct_dates_joined_paidat`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.895558Z", "completed_at": "2025-05-21T12:31:04.904830Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:04.985439Z", "completed_at": "2025-05-21T12:31:04.985450Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1826026439666748, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_type_and_partner_change_with_partner_type", "compiled": true, "compiled_code": "-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0441\u0432\u044f\u0437\u0435\u0439 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432/\u0440\u0435\u0444.\u043f\u0430\u043f, \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n\nwith type_and_account_type_merged as (          -- \u0422\u044f\u043d\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432\u0441\u0435\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0442\u0438\u043f\u043e\u0432 \u0438 \u0441\u0432\u044f\u0437\u0435\u0439 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u043c\u0438\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_history`\n),\n\ntype_change_history_deduplicated as (           -- \u0422\u044f\u043d\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438\u0441\u0442\u043e\u0440\u0438\u0439 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0431\u0435\u0437 \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e start_date \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_acccounts__type_change_deduplicated`\n),\n\naccounts_type_and_partner_change_with_partner_type as (         -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0441\u0432\u044f\u0437\u0435\u0439 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432/\u0440\u0435\u0444.\u043f\u0430\u043f, \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    select \n        type_and_account_type_merged.account_id,            -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts \n        type_and_account_type_merged.partner_id,            -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        type_and_account_type_merged.refparent_id,          -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u043f\u044b\n        type_and_account_type_merged.account_type,          -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        partner_type_change.type as partner_type,           -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        (case \n            when partner_type_change.end_date <= type_and_account_type_merged.end_date then partner_type_change.end_occured_at\n            else coalesce(type_and_account_type_merged.end_occured_at, partner_type_change.end_occured_at)\n        end) as end_occured_at,                             -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n                                                                -- \u0415\u0441\u043b\u0438 \u0434\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0440\u0430\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0432 \u0442\u043e\u0442 \u0436\u0435 \u0434\u0435\u043d\u044c, \u0442\u043e \u0431\u0435\u0440\u0435\u043c \u0434\u0430\u0442\u0443 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430.\n                                                                -- \u0418\u043d\u0430\u0447\u0435 \u0431\u0435\u0440\u0435\u043c \u0434\u0430\u0442\u0443 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u0430\u043c\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430. (\u0418\u043b\u0438 \u043b\u044e\u0431\u043e\u0435 not null \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435)\n        (case \n            when partner_type_change.start_occured_at >= type_and_account_type_merged.start_occured_at then  partner_type_change.start_occured_at\n            else coalesce(type_and_account_type_merged.start_occured_at,  partner_type_change.start_occured_at)\n        end) as start_occured_at,                            -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n                                                                -- \u0415\u0441\u043b\u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043f\u043e\u0437\u0436\u0435 \u0438\u043b\u0438 \u0432 \u0442\u043e\u0442 \u0436\u0435 \u043c\u043e\u043c\u0435\u043d\u0442, \u0442\u043e \u0431\u0435\u0440\u0435\u043c \u0434\u0430\u0442\u0443 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430.\n                                                                -- \u0418\u043d\u0430\u0447\u0435 \u0431\u0435\u0440\u0435\u043c \u0434\u0430\u0442\u0443 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u0430\u043c\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430. (\u0418\u043b\u0438 \u043b\u044e\u0431\u043e\u0435 not null \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435)\n\n        (case \n            when partner_type_change.end_occured_at <= type_and_account_type_merged.end_occured_at then partner_type_change.end_date\n            else coalesce(type_and_account_type_merged.end_date, partner_type_change.end_date)\n        end) as end_date,                                   -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n                                                                -- \u0415\u0441\u043b\u0438 \u0434\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0440\u0430\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0432 \u0442\u043e\u0442 \u0436\u0435 \u0434\u0435\u043d\u044c, \u0442\u043e \u0431\u0435\u0440\u0435\u043c \u0434\u0430\u0442\u0443 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430.\n                                                                -- \u0418\u043d\u0430\u0447\u0435 \u0431\u0435\u0440\u0435\u043c \u0434\u0430\u0442\u0443 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u0430\u043c\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430. (\u0418\u043b\u0438 \u043b\u044e\u0431\u043e\u0435 not null \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435)\n\n        (case \n            when partner_type_change.start_occured_at >= type_and_account_type_merged.start_occured_at then  partner_type_change.start_date\n            else coalesce(type_and_account_type_merged.start_date,  partner_type_change.start_date)\n        end)\n        as start_date                                       -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n                                                                -- \u0415\u0441\u043b\u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043f\u043e\u0437\u0436\u0435 \u0438\u043b\u0438 \u0432 \u0442\u043e\u0442 \u0436\u0435 \u043c\u043e\u043c\u0435\u043d\u0442, \u0442\u043e \u0431\u0435\u0440\u0435\u043c \u0434\u0430\u0442\u0443 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430.\n                                                                -- \u0418\u043d\u0430\u0447\u0435 \u0431\u0435\u0440\u0435\u043c \u0434\u0430\u0442\u0443 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u0430\u043c\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430. (\u0418\u043b\u0438 \u043b\u044e\u0431\u043e\u0435 not null \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435)\n\n    from type_and_account_type_merged\n    left join type_change_history_deduplicated partner_type_change\n        on type_and_account_type_merged.partner_id = partner_type_change.account_id\n            and type_and_account_type_merged.start_date <= partner_type_change.end_date\n),\n\n\nmin_partner_type_to_deduplicate as (            -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u0439 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0441 \u043d\u0443\u043c\u0435\u0440\u0430\u0446\u0438\u0435\u0439 \u043f\u043e \u0434\u0430\u0442\u0430\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n  select \n    *,                                                                                  -- \u0411\u0435\u0440\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438\u0441\u0442\u043e\u0440\u0438\u0439 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0431\u0435\u0437 \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e start_date \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\n    row_number() over (partition by account_id order by start_date asc) as first_rn     -- \u041d\u0443\u043c\u0435\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430. \u0427\u0435\u043c \u0440\u0430\u043d\u044c\u0448\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435, \u0442\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u043d\u043e\u043c\u0435\u0440. \u0422\u043e \u0435\u0441\u0442\u044c \"1\" \u0443 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f.\n  from type_change_history_deduplicated \n),\n\nmin_partner_type as (           -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u0435\u0440\u0432\u044b\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\n  select * from min_partner_type_to_deduplicate             -- \u0411\u0435\u0440\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438\u0441\u0442\u043e\u0440\u0438\u0439 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0441 \u043d\u0443\u043c\u0435\u0440\u0430\u0446\u0438\u0435\u0439 \u043f\u043e \u0434\u0430\u0442\u0430\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n  where first_rn=1                                          -- \u0411\u0435\u0440\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u043f\u0435\u0440\u0432\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u0442\u043e \u0435\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0432\u043e\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 (\u0432 \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0430\u043a\u043a\u0430\u0443\u0442\u043d\u0430)\n),\n\n    \naccounts_type_and_partner_change_with_partner_type_without as (         -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0442\u0438\u043f, \u043f\u0430\u0440\u0442\u043d\u0435\u0440, \u0440\u0435\u0444.\u043f\u0430\u043f\u0430) \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0432\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435. \u0414\u0430\u0442\u0430 \u043a\u043e\u043d\u0446\u0430 = \u0434\u0430\u0442\u0430 \u043a\u043e\u043d\u0446\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f. \n    select \n        type_and_account_type_merged.account_id,                                -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts \n        type_and_account_type_merged.partner_id,                                -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        type_and_account_type_merged.refparent_id,                              -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u043f\u044b\n        type_and_account_type_merged.account_type,                              -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        cast(null as string) as partner_type,                                   -- \u0422\u0438\u043f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u0432\u0441\u0435\u0433\u0434\u0430 null \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u043e\u043b\u0435\n        partner_type_change.start_occured_at as end_occured_at,                 -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 (\u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f)\n        type_and_account_type_merged.start_occured_at as start_occured_at,      -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n        partner_type_change.start_date as end_date,                             -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430(\u0414\u0430\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f)\n        type_and_account_type_merged.start_date as start_date                   -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n\n    from type_and_account_type_merged\n        left join min_partner_type partner_type_change\n            on type_and_account_type_merged.partner_id = partner_type_change.account_id         -- \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a \u0441\u0442\u0440\u043e\u043a\u0430\u043c \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0435\u0440\u0432\u044b\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n\n    where type_and_account_type_merged.start_date < partner_type_change.start_date          -- \u0411\u0435\u0440\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u0440\u0430\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u043f\u0435\u0440\u0432\u043e\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435\n),\n\naccounts_type_and_partner_change_with_partner_type_without_to_deduplicate as (          -- \u041f\u0440\u043e\u043d\u0443\u043c\u0435\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0442\u0438\u043f, \u043f\u0430\u0440\u0442\u043d\u0435\u0440, \u0440\u0435\u0444.\u043f\u0430\u043f\u0430) \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0432\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435. \u0414\u0430\u0442\u0430 \u043a\u043e\u043d\u0446\u0430 = \u0434\u0430\u0442\u0430 \u043a\u043e\u043d\u0446\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f. \n    select \n        *, \n        row_number() over (partition by account_id order by end_date asc) rn            -- \u041d\u0443\u043c\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u043e id \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0435\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e, \u0442\u043e \u0447\u0435\u043c \u0440\u0430\u043d\u044c\u0448\u0435 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u043e\u0441\u044c, \u0442\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n    from accounts_type_and_partner_change_with_partner_type_without\n),\n\naccounts_type_and_partner_change_with_partner_type_without_deduplicated as (            -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0442\u0438\u043f, \u043f\u0430\u0440\u0442\u043d\u0435\u0440, \u0440\u0435\u0444.\u043f\u0430\u043f\u0430) \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0432\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435. \u0414\u0430\u0442\u0430 \u043a\u043e\u043d\u0446\u0430 = \u0434\u0430\u0442\u0430 \u043a\u043e\u043d\u0446\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f. \u0418\u0437\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u043e\u0442 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432. \n    select \n        account_id,                 -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts \n        partner_id,                 -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        refparent_id,               -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u043f\u044b\n        account_type,               -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        partner_type,               -- \u0422\u0438\u043f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        end_occured_at,             -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        start_occured_at,           -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n        end_date,                   -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        start_date                  -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n        \n    from accounts_type_and_partner_change_with_partner_type_without_to_deduplicate\n\n    where rn=1                      -- \u0411\u0435\u0440\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a\u0438, \u0433\u0434\u0435 end_date \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u043d\u044c\u0448\u0435, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0431\u044b\u043b\u043e \u0434\u0443\u0431\u043b\u0435\u0439\n),\naccounts_type_and_partner_change as (       -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0441\u0432\u044f\u0437\u0435\u0439 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432/\u0440\u0435\u0444.\u043f\u0430\u043f, \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n  \nselect * from accounts_type_and_partner_change_with_partner_type\nUNION ALL\nselect * from accounts_type_and_partner_change_with_partner_type_without_deduplicated\n)\n\nselect * from accounts_type_and_partner_change", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.899320Z", "completed_at": "2025-05-21T12:31:04.905655Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.025474Z", "completed_at": "2025-05-21T12:31:05.025487Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2215900421142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_postpay_waba_revenue", "compiled": true, "compiled_code": "select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_postpay_waba_revenue_with_gupshup`    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u043f\u043e\u0441\u0442\u043e\u043f\u043b\u0430\u0442\u043d\u0438\u043a\u043e\u0432 \u0437\u0430 WABA", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_postpay_waba_revenue`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:04.902687Z", "completed_at": "2025-05-21T12:31:05.024190Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.067351Z", "completed_at": "2025-05-21T12:31:05.067363Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.25658702850341797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_all_info_that_used_as_filters", "compiled": true, "compiled_code": "\n\nwith registration_data as (\n    select * from  `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_attribution_devices_phone_payment_template` \n),\n\nint_cmuserid_business_spheres as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_business_spheres` \n\n),abtests_all as  (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_abtest_group`\n ),\n\nint_all_filters as (\n    select distinct\n    registration_data.cmuserid,\n    registration_data.registration_date,\n    registration_data.utm_source,\n    registration_data.utm_campaign,\n    registration_data.utm_medium,\n    abtests.abtest_name,\n    abtests.abtest_group,\n    case \n        when abtests.cmuserid is not null\n            and abtests.abgroup_count = 1 then 'normal_client'\n        when abtests.cmuserid is not null \n            and abtests.abgroup_count > 1 then 'plural_groups'\n    end as abgroup_count_filter,\n    registration_data.initreferrer as initrefferer,\n    utm_traffic,\n    includeinmetrics,\n    os,\n    registration_data.device as devicetypes,\n    registration_data.template_link,\n    business_spheres_filter,\n    eventgroupname_description,\n    business_spheres_filter_description\n    from registration_data\n    left join abtests_all abtests on registration_data.cmuserId = abtests.cmuserid\n    left join int_cmuserid_business_spheres on registration_data.cmuserid = int_cmuserid_business_spheres.cmuserid\n    )\nselect * from int_all_filters", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_all_info_that_used_as_filters`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.152807Z", "completed_at": "2025-05-21T12:31:05.165760Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.169556Z", "completed_at": "2025-05-21T12:31:05.169566Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10485649108886719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_business_spheres_only_other", "compiled": true, "compiled_code": "with int_cmuserid_business_spheres as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_business_spheres`\n    ),\n    \n    int_cmuserid_attribution_devices_phone_payment_template as (\n        select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_attribution_devices_phone_payment_template`\n        ),\n    int_cmuserid_business_spheres_only_other as (\n        select distinct\n        int_cmuserid_business_spheres.cmuserid,\n        eventgroupname_description,\n        business_spheres_filter,\n        business_spheres_filter_description,\n        int_cmuserid_attribution_devices_phone_payment_template.utm_source,\n        int_cmuserid_attribution_devices_phone_payment_template.utm_campaign,\n        int_cmuserid_attribution_devices_phone_payment_template.utm_medium,\n        int_cmuserid_attribution_devices_phone_payment_template.template_link,\n        int_cmuserid_attribution_devices_phone_payment_template.initreferrer as initrefferer,\n        int_cmuserid_attribution_devices_phone_payment_template.device as devicetypes,\n        int_cmuserid_attribution_devices_phone_payment_template.utm_traffic,\n        int_cmuserid_attribution_devices_phone_payment_template.registration_date\n        from  int_cmuserid_business_spheres\n        left join  int_cmuserid_attribution_devices_phone_payment_template on int_cmuserid_business_spheres.cmuserid = int_cmuserid_attribution_devices_phone_payment_template.cmuserid\n    )    \n\nselect * from int_cmuserid_business_spheres_only_other", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_business_spheres_only_other`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.154956Z", "completed_at": "2025-05-21T12:31:05.166459Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.170493Z", "completed_at": "2025-05-21T12:31:05.170518Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.1444089412689209, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.Profeat_site.unique_int_cmuserid_business_spheres_cmuserid.29ec30d6e2", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select cmuserid as unique_field\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_business_spheres`\n  where cmuserid is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.162156Z", "completed_at": "2025-05-21T12:31:05.169037Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.173190Z", "completed_at": "2025-05-21T12:31:05.173199Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.14549994468688965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserId__count_visitkas_visitors", "compiled": true, "compiled_code": "with visitkas_visitors_with_visit_time as \n    (select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid__visitkas_visitors_with_visit_time`\n    ),\n\n    visitkas_visitors_with_visit_time_deduplicated as \n    (select cmuserid, \n            template_link,\n            first_time_value_over_localuserid,\n            dense_rank() over (partition by cmuserid,template_link order by first_time_value_over_localuserid,localuserid) rank,\n            localuserid,\n            count(distinct localUserId) over (partition by template_link,cmuserid) as visitkas_users \n            from visitkas_visitors_with_visit_time\n    )\nselect distinct cmuserid,template_link,first_time_value_over_localuserid as activation_datetime\nfrom visitkas_visitors_with_visit_time_deduplicated\nwhere rank = 3\nand cmuserid is not null", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserId__count_visitkas_visitors`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.164396Z", "completed_at": "2025-05-21T12:31:05.170053Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.213721Z", "completed_at": "2025-05-21T12:31:05.213733Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.18477559089660645, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid__active_users_monthly", "compiled": true, "compiled_code": "with visitkas_visitors_with_visit_time as \n    (select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid__visitkas_visitors_with_visit_time`\n    )\nselect cmuserid, \n        date_trunc(cast(datetime as date),month) date,\n        count(distinct localUserId) as visitkas_users \nfrom visitkas_visitors_with_visit_time\nwhere cmuserid is not null\ngroup by 1,2\nhaving count(distinct localUserId) >= 3", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid__active_users_monthly`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.167526Z", "completed_at": "2025-05-21T12:31:05.173709Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.295544Z", "completed_at": "2025-05-21T12:31:05.295559Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.22389578819274902, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid__active_users_weekly", "compiled": true, "compiled_code": "with visitkas_visitors_with_visit_time as \n    (select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid__visitkas_visitors_with_visit_time`\n    )\nselect cmuserid, \n            date_trunc(cast(datetime as date),week(monday)) week_trunc,\n            count(distinct localUserId) as visitkas_users \nfrom visitkas_visitors_with_visit_time\nwhere cmuserid is not null\ngroup by 1,2\nhaving count(distinct localUserId) >= 3", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid__active_users_weekly`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.170997Z", "completed_at": "2025-05-21T12:31:05.295012Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.337398Z", "completed_at": "2025-05-21T12:31:05.337408Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2558877468109131, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_edited_all", "compiled": true, "compiled_code": "\n\nwith int_cmuserid_edited_2_blocks as (\n    select * from  `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_edited_2_blocks`\n),\nint_cmuserid_edited_1_block as (\n    select * from  `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_edited_1_block`\n),\nint_cmuserid_edited_3_blocks as (\n    select * from  `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_edited_3_blocks`\n)\n\nselect int_cmuserid_edited_1_block.cmuserid, \n    int_cmuserid_edited_1_block.edits_datetime as edits_datetime_1_block,\n    int_cmuserid_edited_2_blocks.edits_datetime as edits_datetime_2_blocks,\n    int_cmuserid_edited_3_blocks.edits_datetime as edits_datetime_3_blocks\nfrom int_cmuserid_edited_1_block\nleft join int_cmuserid_edited_2_blocks on int_cmuserid_edited_1_block.cmuserid = int_cmuserid_edited_2_blocks.cmuserid\nleft join int_cmuserid_edited_3_blocks on int_cmuserid_edited_1_block.cmuserid = int_cmuserid_edited_3_blocks.cmuserid", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_edited_all`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.422711Z", "completed_at": "2025-05-21T12:31:05.433610Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.438165Z", "completed_at": "2025-05-21T12:31:05.438174Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10594391822814941, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_copy_and_activation_combined_time", "compiled": true, "compiled_code": "with registration_data as (\n    select cmuserid,\n            registration_datetime from  `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_attribution_devices_phone_payment_template` \n), activations as (\n    select distinct all_data.cmuserid,activation_datetime\n    from  `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_visitkas_visitors_with_visit_time_all_visits` all_data\n    join registration_data on all_data.cmuserid = registration_data.cmuserid\n    where all_data.datetime >= registration_datetime \n)\n,activation_copies as (\nselect cmuserid,copied_datetime\n from `dwh-wazzup`.`dbt_nbespalov`.`stg_cmuserid_copied_template_link` \nunion all\nselect *\nfrom activations\n)\nselect cmuserid,\n      min(copied_datetime) as copied_datetime\nfrom activation_copies\ngroup by 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_copy_and_activation_combined_time`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.425326Z", "completed_at": "2025-05-21T12:31:05.437183Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.442320Z", "completed_at": "2025-05-21T12:31:05.442329Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14488434791564941, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_cmuserid__business_sphere_phone", "compiled": true, "compiled_code": "with registration_date as (select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_attribution_devices_phone_payment_template`)\n\nselect\n    rc.cmuserid,\n    registration_date,\n    user_mobiles.phone,\n    (\n        case\n            when block_2.cmuserid is not null and copy.cmuserid is not null\n            then true\n            else false\n        end\n    ) as add_2_blocks_and_copied_link,\n    business_spheres_filter_description,\n    eventgroupname_description,\n    business_spheres_filter,\n    includeinmetrics\nfrom registration_date rc\nleft join\n    `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_edited_2_blocks` block_2 on rc.cmuserid = block_2.cmuserid\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_cmuserid_copied_template_link` copy on rc.cmuserid = copy.cmuserid\nleft join\n    `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_business_spheres` business_spheres\n    on business_spheres.cmuserid = rc.cmuserid\ninner join `dwh-wazzup`.`dbt_nbespalov`.`stg_cmuserid_phone` user_mobiles on rc.cmuserid = user_mobiles.cmuserid\norder by registration_date desc", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_cmuserid__business_sphere_phone`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.427689Z", "completed_at": "2025-05-21T12:31:05.437555Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.443220Z", "completed_at": "2025-05-21T12:31:05.443228Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.18419528007507324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_promo_tarif_disctinct_cmuserid", "compiled": true, "compiled_code": "select distinct cmuserid,\npromo_tariff_datetime as posted_datetime\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_promo_tariff`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_promo_tarif_disctinct_cmuserid`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.430157Z", "completed_at": "2025-05-21T12:31:05.441152Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.483749Z", "completed_at": "2025-05-21T12:31:05.483759Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1829824447631836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_billing_affiliate_subscription_payments_first_month", "compiled": true, "compiled_code": "with\n    billing_affiliate as (\n        select\n            billingaffiliate.account_id,\n            billingaffiliate.subscription_owner,\n            subscriptionupdates.paid_at_billing_date as occured_date,\n            subscriptionupdates.guid as subscriptionupdates_guid,\n                        (\n                case\n                    when billingaffiliate.currency = 'RUR'\n                    then billingaffiliate.sum\n                    when rur is not null\n                    then (billingaffiliate.sum) * rur\n                    when billingaffiliate.currency = 'EUR' and rur is null\n                    then (billingaffiliate.sum) * 85\n                    when billingaffiliate.currency = 'USD' and rur is null\n                    then (billingaffiliate.sum) * 75\n                    when billingaffiliate.currency = 'KZT' and rur is null\n                    then (billingaffiliate.sum) * 0.24\n                end\n            ) as sum_in_rubles,\n\n            (\n                case\n                    when billingaffiliate.currency = 'RUR'\n                    then billingaffiliate.sum - coalesce(abs(balance_to_withdraw), 0)\n                    when rur is not null\n                    then\n                        (billingaffiliate.sum - coalesce(abs(balance_to_withdraw), 0))\n                        * rur\n                    when billingaffiliate.currency = 'EUR' and rur is null\n                    then (billingaffiliate.sum - coalesce(balance_to_withdraw, 0)) * 85\n                    when billingaffiliate.currency = 'USD' and rur is null\n                    then (billingaffiliate.sum - coalesce(balance_to_withdraw, 0)) * 75\n                    when billingaffiliate.currency = 'KZT' and rur is null\n                    then\n                        (billingaffiliate.sum - coalesce(balance_to_withdraw, 0)) * 0.24\n                end\n            ) as sum_in_rubles_without_balance,\n\n            (\n                case\n                    when billingaffiliate.currency = 'RUR'\n                    then coalesce(abs(balance_to_withdraw), 0)\n                    when rur is not null\n                    then coalesce(abs(balance_to_withdraw), 0) * rur\n                    when billingaffiliate.currency = 'EUR' and rur is null\n                    then coalesce(abs(balance_to_withdraw), 0) * 85\n                    when billingaffiliate.currency = 'USD' and rur is null\n                    then coalesce(abs(balance_to_withdraw), 0) * 75\n                    when billingaffiliate.currency = 'KZT' and rur is null\n                    then coalesce(abs(balance_to_withdraw), 0) * 0.24\n                end\n            ) as balance_to_withdraw_in_rubles,\n\n            coalesce(balance_to_withdraw, 0) as balance_to_withdraw,\n            (\n                case\n                    when\n                        payments.sum = 0\n                        and payments.account_id = billingaffiliate.account_id\n                        and abs(billingaffiliate.sum) != subscriptionupdates.sum\n                        and balance_to_withdraw != 0\n                    then 0\n                    when\n                        payments.sum = 0\n                        and payments.account_id != billingaffiliate.account_id\n                        and abs(billingaffiliate.sum) != subscriptionupdates.sum\n                        and balance_to_withdraw != 0\n                    then 1\n                    when billingaffiliate.account_id!=subscription_owner then 1\n                    else 2\n                end\n            ) as has_partner_paid\n\n        from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` billingaffiliate\n        left join\n            `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted\n            on exchange_rates_unpivoted._ibk = billingaffiliate.occured_date\n            and exchange_rates_unpivoted.currency = billingaffiliate.currency\n        inner join\n            `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_and_converted_currency_billing_date` subscriptionupdates\n            on subscriptionupdates.guid = billingaffiliate.subscription_update_id\n        left join\n            `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_card` payments\n            on billingaffiliate.payment_guid = payments.guid\n        where object = 'subscription'\n    ),\n\n    billing_affiliate_to_deduplicate as (\n        select\n            *,\n            row_number() over (\n                partition by subscriptionupdates_guid order by has_partner_paid desc\n            ) as rn\n        from billing_affiliate\n    ),\n\n    billing_affiliated_deduplicated_and_aggregated_first_month as (\n        select\n            billing_affiliate_to_deduplicate.subscription_owner as account_id,\n            has_partner_paid,\n            occured_date,\n            sum(sum_in_rubles) as sum_in_rubles,\n            sum(balance_to_withdraw_in_rubles) as balance_to_withdraw_in_rubles\n        from billing_affiliate_to_deduplicate\n        inner join\n            `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts\n            on accounts.account_id = billing_affiliate_to_deduplicate.subscription_owner\n        where\n            billing_affiliate_to_deduplicate.occured_date\n            <= date_add(accounts.register_date, interval 1 month)\n            and accounts.type = 'standart'\n            and rn = 1\n        group by 1, 2, 3\n    ),\n    billing_affiliate_with_invalid_bills as (\n        select\n            billing_affiliated_deduplicated_and_aggregated_first_month.*,\n            sum_in_rubles_invalid_bills,\n            paid_date\n        from billing_affiliated_deduplicated_and_aggregated_first_month\n        left join\n            `dwh-wazzup`.`dbt_nbespalov`.`int_payments_bills_only_invalid_first_month` bills\n            on bills.account_id\n            = billing_affiliated_deduplicated_and_aggregated_first_month.account_id\n            and bills.paid_date\n            <= billing_affiliated_deduplicated_and_aggregated_first_month.occured_date\n    ),\n    balance_sum_in_rubles as (\n        select account_id, occured_date, min(sum_in_rubles) as sum_in_rubles\n        from billing_affiliate_with_invalid_bills\n        where has_partner_paid = 2\n        group by 1, 2\n    ),\n\n    invalid_bills_sum_in_rubles as (\n        select\n            account_id,\n            paid_date,\n            min(sum_in_rubles_invalid_bills) as sum_in_rubles_invalid_bills\n        from billing_affiliate_with_invalid_bills\n        where has_partner_paid = 2\n        group by 1, 2\n    ),\n\n    balance_sum_in_rubles_aggregated_by_account_id as (\n        select account_id, \n        sum(sum_in_rubles) as sum_in_rubles\n        from balance_sum_in_rubles\n        group by 1\n    ),\n\n    invalid_bills_sum_in_rubles_aggregated_by_account_id as (\n        select\n            account_id, \n            sum(sum_in_rubles_invalid_bills) as sum_in_rubles_invalid_bills\n        from invalid_bills_sum_in_rubles\n        group by 1\n    ),\n\n    bills_without_sum_in_rubles as (\n        select\n            balance_sum_in_rubles_aggregated_by_account_id.*,\n            sum_in_rubles_invalid_bills,\n            (\n                case\n                    when sum_in_rubles <= sum_in_rubles_invalid_bills\n                    then sum_in_rubles\n                    when sum_in_rubles > sum_in_rubles_invalid_bills\n                    then sum_in_rubles_invalid_bills\n                    else 0\n                end\n            ) as sum_in_rubles_without_invalid_bills\n        from balance_sum_in_rubles_aggregated_by_account_id\n        left join\n            invalid_bills_sum_in_rubles_aggregated_by_account_id\n            on invalid_bills_sum_in_rubles_aggregated_by_account_id.account_id\n            = balance_sum_in_rubles_aggregated_by_account_id.account_id\n    ),\n\n billing_without_sum_in_rubles as (   \n\nselect\n    account_id,\n    sum(\n        (\n            case\n                when sum_in_rubles_invalid_bills is not null\n                then sum_in_rubles + balance_to_withdraw_in_rubles\n                else sum_in_rubles\n            end\n        )\n    ) as sum_in_rubles_without_invalid_bills\nfrom billing_affiliate_with_invalid_bills\nwhere has_partner_paid != 2\ngroup by 1\nunion all\nselect account_id, \nsum_in_rubles_without_invalid_bills\nfrom bills_without_sum_in_rubles),\n\nbills_aggregated as (\nselect account_id,                                                              -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nsum(sum_in_rubles_without_invalid_bills) as sum_in_rubles_without_invalid_bills -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445 \u0431\u0435\u0437 \u043d\u0435\u0432\u0430\u043b\u0438\u0434\u043d\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432\nfrom billing_without_sum_in_rubles\ngroup by 1)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u0443\u043c\u043c \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c, \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u044b\u0445 \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\nselect * from bills_aggregated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_first_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.434757Z", "completed_at": "2025-05-21T12:31:05.442679Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.524049Z", "completed_at": "2025-05-21T12:31:05.524062Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.22174835205078125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_full_sum__paid_subscriptions", "compiled": true, "compiled_code": "with subscription_sum_with_period_and_quantity as (SELECT \nsubscription_sum.sum-subscription_sum.wapi_original_sum as sum, -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\nsubscription_sum.currency,                                      -- \u0412\u0430\u043b\u044e\u0442\u0430\npaid_at_billing_date,                                           -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\nbilling_packages.account_id,                                    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n(case when stg_subscriptionupdates.period='12' then 0.8\nwhen stg_subscriptionupdates.period='6' then 0.9\nelse 1\nend) as period_discount,                                        -- \u0421\u043a\u0438\u0434\u043a\u0430 \u0437\u0430 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 (10% \u0437\u0430 \u043f\u043e\u043b\u0433\u043e\u0434\u0430, 20% \u0437\u0430 \u0433\u043e\u0434)\npromotion_type,                                                 -- \u0422\u0438\u043f \u0430\u043a\u0446\u0438\u0438\nwazzup_tariff.sum as tariff_price,                              -- \u0426\u0435\u043d\u0430 \u0442\u0430\u0440\u0438\u0444\u0430\ncoalesce(cast(stg_subscriptionupdates.quantity as INTEGER), billing_packages.quantity) as quantity, -- \u041a\u043e\u043b-\u0432\u043e \u043f\u043e\u043a\u0443\u043f\u0430\u0435\u043c\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432\ncoalesce(cast(stg_subscriptionupdates.period as INTEGER), billing_packages.period) as period        -- \u041f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 (1, 6, 12)\n FROM `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_and_converted_currency_billing_date` subscription_sum\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates` stg_subscriptionupdates \non subscription_sum.guid=stg_subscriptionupdates.guid\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billing_packages\non billing_packages.guid=subscription_sum.subscription_id\nleft join `dwh-wazzup`.`analytics_tech`.`wazzup_tariff` wazzup_tariff on wazzup_tariff.currency=subscription_sum.currency \nand coalesce(stg_subscriptionupdates.tariff, billing_packages.tariff)=wazzup_tariff.tariff\nwhere stg_subscriptionupdates.action not in ('balanceTopup','templateMessages')\n),\n\nsubscription_sum_with_full_price as (\n\nselect *, (\n  case when promotion_type=751175 then tariff_price*period_discount*period*quantity\n  else sum\n  end) as full_tarif_sum                        -- \u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b. \u0424\u043e\u0440\u043c\u0443\u043b\u0430 \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0441\u043a\u0438\u0434\u043a\u0438 \u0437\u0430 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u043e\u043f\u043b\u0430\u0442\u044b\nfrom subscription_sum_with_period_and_quantity),\n\nsubscription_sum_with_full_price_with_converted_currency as (\n\nselect subscription_sum_with_full_price.*,  (case\n        when subscription_sum_with_full_price.currency = 'RUR'  then full_tarif_sum\n        when RUR is not null then  full_tarif_sum * RUR\n        when subscription_sum_with_full_price.currency = 'EUR'  and RUR is null then  full_tarif_sum * 85 \n        when subscription_sum_with_full_price.currency = 'USD'  and RUR is null then  full_tarif_sum * 75\n        when subscription_sum_with_full_price.currency = 'KZT' and RUR is null then  full_tarif_sum * 0.24\n    end) as full_tarif_sum_in_rubles from subscription_sum_with_full_price -- \u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted \n    on exchange_rates_unpivoted._ibk = subscription_sum_with_full_price.paid_at_billing_date\n    and exchange_rates_unpivoted.currency = subscription_sum_with_full_price.currency )\n\nselect * from subscription_sum_with_full_price_with_converted_currency  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_full_sum__paid_subscriptions`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.438768Z", "completed_at": "2025-05-21T12:31:05.484493Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.603573Z", "completed_at": "2025-05-21T12:31:05.603585Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2572214603424072, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_track_real_money_spending", "compiled": true, "compiled_code": "WITH billingaffiliate AS (\n                         SELECT sum\n                              , occured_at\n                              , object\n                              , coalesce(subscription_update_id,\n                                         CASE WHEN (object = 'payment' AND method = 'transfer' AND original_sum < 0)\n                                              OR   (object = 'convertation' AND original_sum < 0)\n                                              OR object = 'withdrawal'\n                                              THEN CAST(ba_id AS string) \n                                         END) AS subscription_update_id\n                              , subscription_update_id as subscription_update_id_for_condition\n                              , method\n                              , account_id\n                              , original_sum\n                              , guid as guid_\n                         FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate`\n                         )\n                         \n\n     ,billing_affiliate_data_with_transaction_type AS ( \n                         SELECT billingaffiliate.sum AS sum_in_rubles\n                              , occured_at\n                              , CASE --release_transfer \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0435\u0437\u0434\u0435 \u0441\u043e \u0441\u0442\u0430\u0440\u043e\u0433\u043e \u0431\u0438\u043b\u043b\u0438\u043d\u0433\u0430 \u043d\u0430 \u043d\u043e\u0432\u044b\u0439, \u0431\u0430\u043b\u0430\u043d\u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0445\u043e\u0434\u0438\u043b\u0441\u044f \u0432 \u0441\u0442\u0430\u0440\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435(billing), \u043f\u0435\u0440\u0435\u0435\u0437\u0436\u0430\u043b \u0432 \u043d\u043e\u043c\u0443\u044e(billingAffiliate) c \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0436\u0435\u043a\u0442\u043e\u043c.\n                                    WHEN object IN ('payment', 'release_transfer', 'transfer') AND billingaffiliate.original_sum >= 0 \n                                    THEN 'good_balance' --\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u0447\u0435\u0442\u0430 (origian_sum<0, \u0435\u0441\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u0435\u043b \u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443). \u0421\u044e\u0434\u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u043d\u0435\u0432\u0430\u043b\u0438\u0434\u043d\u044b\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u0438 (\u0441 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u043f\u043b\u0430\u0442\u0435\u0436\u043a\u043e\u0439 \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0435\u0432\u0435\u0440\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u0430). \u0412 \u0442\u0430\u043a\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 object = 'payment', provider = '1C', details->>'invalid' = 'true'\n                                    \n                                    WHEN object = 'subscription' --\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0435\u043d\u0435\u0433 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 (sub_upd.guid \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0440\u0430\u0437 \u0431\u044b\u043b null c object = 'subscription' \u0432 \u0441\u0435\u043d\u0442\u044f\u0431\u0440\u0435 2021, \u043b\u0438\u0431\u043e \u044d\u0442\u043e \u043a\u0435\u0439\u0441\u044b, \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0443\u0434\u0430\u043b\u044f\u044e\u0442, \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e subscription_update_state = 'deleted')\n                                        OR (object = 'payment' AND method = 'transfer' AND billingaffiliate.original_sum < 0) --\u0431\u044b\u043b\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0434\u0435\u043d\u0435\u0433 \u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443. \u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u044b \u0441\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0431\u043e\u043d\u0443\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443 \u043d\u0435\u0433\u043e \u0431\u044b\u043b\u0438.\n                                        OR (object = 'convertation' AND billingaffiliate.original_sum < 0)\n                                        OR object = 'withdrawal'\n                                        OR object = 'refund'\n                                        OR object = 'takeAway'\n                                        OR (object = 'transfer' AND billingaffiliate.original_sum < 0)\n                                    THEN 'subscription'\n                                    \n                                    WHEN billingaffiliate.sum >= 0 --\u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0439, \u043a\u043e\u0433\u0434\u0430 sum < 0  - \u043d\u0435\u0442, \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043a\u0430\u043a \u0431\u0443\u0434\u0442\u043e \u0431\u044b \u043d\u0435 \u043d\u0443\u0436\u043d\u043e\n                                    THEN 'bad_balance'\n                                 END    AS transaction_type\n                              , subscription_update_id -- \u043d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439. \u0412 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u0441 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c \u0434\u0435\u043d\u0435\u0433 subscription_update_id \u043d\u0435 \u043f\u0438\u0448\u0435\u0442\u0441\u044f, \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0434\u043b\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442.\n                              , object\n                              , billingaffiliate.account_id\n                         FROM billingaffiliate\n                             LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_and_converted_currency_billing_date` subscriptionupdates\n                         ON billingaffiliate.subscription_update_id=subscriptionupdates.guid\n                         --\u0414\u043e\u043f\u0438\u0441\u0430\u043b\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043f\u043e \u0443\u0447\u0435\u0442\u0443 \u043a\u0435\u0439\u0441\u043e\u0432 \u0441 \u043d\u0435\u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u043c\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u043c\u0438 (state != active \u0432 sub_updates). \u0415\u0432\u0441\u043b\u0438 \u0432 \u0431\u0438\u043b\u043b\u0438\u043d\u0433 \u0430\u0444\u0444\u0438\u043b\u0438\u044d\u0439\u0442 \u0435\u0441\u0442\u044c sub_upd_id, \u0430 \u0432 sub_updates \u043d\u0435\u0442, \u044d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u041d\u0415 \u0411\u042b\u041b\u041e \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u043e (state != 'activated'). \u0422\u0430\u043a\u0438\u0435 \u043a\u0435\u0439\u0441\u044b \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u043c\n                         WHERE billingaffiliate.subscription_update_id_for_condition IS NULL\n                         or NOT(billingaffiliate.subscription_update_id_for_condition IS NOT NULL and subscriptionUpdates.guid is null)\n                         \n                         ),\n     billing_with_good_balance_function AS (\n                         SELECT account_id\n                              , dbt_nbespalov.good_balance(\n                                array_agg(sum_in_rubles ORDER BY occured_at ASC)\n                              , array_agg(transaction_type ORDER BY occured_at ASC)\n                              , array_agg(subscription_update_id ORDER BY occured_at ASC)\n                             ) good_balance_data\n                         FROM billing_affiliate_data_with_transaction_type\n                         GROUP BY 1\n                         ),\n     billing_with_good_balance_function_data AS (-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u043b\u0438 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\n                         SELECT account_id                          -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n                              , good_balance.subscription_update_id -- \u0418\u043d\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u043e\u043b\u044e guid \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b subscriptionUpdates\n                              , good_balance.good_balance_spent     -- \u0421\u0443\u043c\u043c\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 (\"\u0421\u0447\u0435\u0442 \u043d\u0435\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u0435\u043d\", \u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u0434\u0435\u043d\u0435\u0433 \u0441 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u043e\u0433\u043e \u0441\u0447\u0435\u0442\u0430) \u0431\u043e\u043d\u0443\u0441\u043e\u0432\n                         FROM billing_with_good_balance_function\n                             CROSS JOIN unnest(billing_with_good_balance_function.good_balance_data) good_balance\n                         )\n\nSELECT  billing_with_good_balance_function_data.*except(subscription_update_id)\n      , CASE WHEN OBJECT = 'payment' AND METHOD = 'transfer' AND original_sum < 0\n             THEN NULL\n        ELSE subscription_update_id\n        END AS subscription_update_id\n      , occured_at AS good_balance_spent_datetime\nFROM billing_with_good_balance_function_data\nLEFT JOIN billingaffiliate USING(subscription_update_id,account_id)\n/* TODO \u043d\u0443\u0436\u043d\u044b \u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 null sub_update_id */", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_track_real_money_spending`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.692418Z", "completed_at": "2025-05-21T12:31:05.703448Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.707859Z", "completed_at": "2025-05-21T12:31:05.707867Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10531473159790039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_track_real_money_spending_without_duplicate_payments", "compiled": true, "compiled_code": "with\n    billing_affiliate_data_with_transaction_type as (\n        select\n            billingaffiliate.sum as sum_in_rubles,\n            occured_at,\n            (\n                case\n                    when object in ('payment','transfer') and billingaffiliate.original_sum>0 --\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u0447\u0435\u0442\u0430 (origian_sum<0, \u0435\u0441\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u0435\u043b \u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u0434\u0440\u0443\u0433\u043e\u043c\u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443)\n                    then 'good_balance'\n                    when object = 'subscription' and subscriptionupdates.guid is not null\n                    then 'subscription'\n                    when billingaffiliate.sum >= 0\n                    then 'bad_balance'\n                end\n            ) as transaction_type,\n            subscription_update_id,\n            object,\n            billingaffiliate.account_id\n        from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` billingaffiliate\n        left join `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_and_converted_currency_billing_date` subscriptionupdates\n        on billingaffiliate.subscription_update_id=subscriptionupdates.guid\n    ),\n\n    billing_with_good_balance_function as (\n        select\n            account_id,\n            dbt_nbespalov.good_balance(\n                array_agg(sum_in_rubles order by occured_at asc),\n                array_agg(transaction_type order by occured_at asc),\n                array_agg(subscription_update_id order by occured_at asc)\n            ) good_balance_data\n        from billing_affiliate_data_with_transaction_type\n        group by 1\n    ),\n\n    billing_with_good_balance_function_data as (\n\n        select                  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u0438: \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u043b\u0438 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \n            account_id,                                                                             -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n            good_balance.subscription_update_id,                                                    -- \u0418\u043d\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u043e\u043b\u044e guid \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b subscriptionUpdates \n            good_balance.good_balance_spent                                                         -- \u0421\u0443\u043c\u043c\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 (\"\u0421\u0447\u0435\u0442 \u043d\u0435\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u0435\u043d\", \u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u0434\u0435\u043d\u0435\u0433 \u0441 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u043e\u0433\u043e \u0441\u0447\u0435\u0442\u0430) \u0431\u043e\u043d\u0443\u0441\u043e\u0432\n        from billing_with_good_balance_function                                                 \n        cross join unnest(billing_with_good_balance_function.good_balance_data) good_balance\n    )\n\nselect *\nfrom billing_with_good_balance_function_data", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_track_real_money_spending_without_duplicate_payments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.696203Z", "completed_at": "2025-05-21T12:31:05.706747Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.711031Z", "completed_at": "2025-05-21T12:31:05.711040Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.11792707443237305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_correct_start_and_end_date_joined_datetime", "compiled": true, "compiled_code": "with missing_subscription_data_joined as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptons_with_sum_and_correct_dates_joined_paidat`\n),\n\nmissing_data_datetime_deduplicated as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_who_paid_restore_missing_data__datetime_and_expiresat_deduplicated`\n),\n\nmissing_subscription_data_joined_datetime AS (\n  SELECT \n    COALESCE(missing_subscription_data_joined.end_date, missing_data_datetime_deduplicated.end_date) AS end_date,   -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    missing_subscription_data_joined.account_id,              -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    missing_subscription_data_joined.subscription_id,         -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    missing_subscription_data_joined.start_date,              -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    missing_subscription_data_joined.start_at,                -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    missing_subscription_data_joined.action AS action,        -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\n    missing_subscription_data_joined.partner_account_id,      -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    sum,                                                      -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    currency,                                                 -- \u0412\u0430\u043b\u044e\u0442\u0430\n    guid,                                                     -- ID \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    subscription_type,                                        -- \u0422\u0438\u043f (\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442) \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    wapi_transactions                                         -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f WABA\n  FROM \n    missing_subscription_data_joined \n  LEFT JOIN \n    missing_data_datetime_deduplicated \n  ON \n    missing_subscription_data_joined.account_id = missing_data_datetime_deduplicated.account_id\n    AND missing_subscription_data_joined.start_date = missing_data_datetime_deduplicated.start_date\n    AND missing_subscription_data_joined.subscription_id = missing_data_datetime_deduplicated.subscription_id\n  WHERE \n    missing_subscription_data_joined.end_date IS NULL\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0443 \u0430\u043a\u043a\u0430\u043d\u0442\u043e\u0432 \u0441 \u0443\u0442\u043e\u0447\u043d\u0435\u043d\u0438\u0435\u043c \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438\nselect * from missing_subscription_data_joined_datetime", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_correct_start_and_end_date_joined_datetime`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.698799Z", "completed_at": "2025-05-21T12:31:05.707489Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.712127Z", "completed_at": "2025-05-21T12:31:05.712139Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.15732145309448242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_type_and_partner_change_with_partner_type_deduplicated", "compiled": true, "compiled_code": "-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0441\u0432\u044f\u0437\u0435\u0439 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432/\u0440\u0435\u0444.\u043f\u0430\u043f, \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 (\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f)\n -- \u0411\u0435\u0440\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0432 \u043e\u0434\u0438\u043d \u0434\u0435\u043d\u044c. \u0411\u0435\u0440\u0435\u043c \u0442\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0437\u0436\u0435.\n-- \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u044d\u0442\u0443 \u043c\u043e\u0434\u0435\u043b\u044c \u043a\u0430\u043a \u0442\u0430\u0431\u043b\u0438\u0446\u0443\n\n\nWITH accounts_type_and_partner_change_with_partner_type AS (            -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0441\u0432\u044f\u0437\u0435\u0439 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432/\u0440\u0435\u0444.\u043f\u0430\u043f, \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 (\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f)\n    SELECT \n        account_id,             -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n        partner_id,             -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        refparent_id,           -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u043f\u044b\n        account_type,           -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        partner_type,           -- \u0422\u0438\u043f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        end_occured_at,         -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        start_occured_at,       -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n        end_date,               -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        (CASE \n            WHEN account_id=42256887 AND account_type='tech-partner' -- *\u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0430 \u043a\u0430\u043a \u043a\u043e\u0441\u0442\u044b\u043b\u044c, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0440\u0430\u0437\u0431\u0435\u0440\u0443\u0441\u044c, \u043f\u043e\u0447\u0435\u043c\u0443 \u0442\u0430\u043c account_type - null* \u0441\u0442\u0430\u0440\u044b\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\n                THEN DATE('2023-12-28')            \n            WHEN account_id=31258487 AND account_type='standart' AND partner_type='partner' AND start_date=DATE('2024-03-12') \n                THEN DATE('2024-02-20')\n            ELSE start_date\n        END\n        ) AS start_date,       -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n\n    FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type`     -- \u0422\u044f\u043d\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0441\u0432\u044f\u0437\u0435\u0439 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432/\u0440\u0435\u0444.\u043f\u0430\u043f, \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n),\n\naccounts_type_and_partner_change_with_partner_type_to_deduplicate AS (          -- \u041f\u0440\u043e\u043d\u0443\u043c\u0435\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0441\u0432\u044f\u0437\u0435\u0439 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432/\u0440\u0435\u0444.\u043f\u0430\u043f, \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0442\u0438\u043f\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 (\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f)\"\n    SELECT \n        *,      -- \u0422\u044f\u043d\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n        row_number() OVER (partition by account_id, start_date ORDER BY end_occured_at desc) AS rn  -- \u041d\u0443\u043c\u0435\u0440\u0443\u0435\u043c \u043f\u043e \u043f\u043e\u043b\u044f\u043c account_id \u0438 start_date. \u0427\u0435\u043c \u043f\u043e\u0437\u0436\u0435 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f, \u0442\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u043d\u043e\u043c\u0435\u0440.\n                                                                                                    -- \u041d\u0443\u043c\u0435\u0440\u0443\u0435\u043c, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u0441\u0435\u044f\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u0434\u0435\u043b\u0430\u043d\u043d\u044b\u0435 \u0432 \u043e\u0434\u0438\u043d \u0434\u0435\u043d\u044c\n    FROM accounts_type_and_partner_change_with_partner_type\n\n    WHERE start_date != end_date            -- \u041d\u0435 \u0431\u0435\u0440\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u043b\u0438\u043d\u043d\u043e\u0439 \u043c\u0435\u043d\u044c\u0448\u0435 \u0441\u0443\u0442\u043e\u043a, \u0442\u043e \u0435\u0441\u0442\u044c \u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0447\u0430\u043b\u0438\u0441\u044c \u0438 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u0438\u0441\u044c \u0432 \u043e\u0434\u0438\u043d \u0434\u0435\u043d\u044c.\n),    \naccounts_type_and_partner_change_with_partner_type_deduplicated AS (\n    SELECT \n        account_id,                     -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n        (CASE \n            WHEN partner_id=0 \n                THEN null\n            ELSE partner_id             \n        END) AS partner_id,             -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 (null, \u0435\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \"0\")\n        (CASE \n            WHEN refparent_id=0 \n                THEN null\n            ELSE refparent_id \n        END) AS refparent_id,           -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u043f\u044b (null, \u0435\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \"0\")\n        account_type,                   -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        partner_type,                   -- \u0422\u0438\u043f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        end_occured_at,                 -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        start_occured_at,               -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n        end_date,                       -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        start_date                      -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n        FROM accounts_type_and_partner_change_with_partner_type_to_deduplicate\n    WHERE rn=1                  -- \u0411\u0435\u0440\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0432 \u043e\u0434\u0438\u043d \u0434\u0435\u043d\u044c. \u0411\u0435\u0440\u0435\u043c \u0442\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0437\u0436\u0435.\n)\nSELECT *\nFROM accounts_type_and_partner_change_with_partner_type_deduplicated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.701459Z", "completed_at": "2025-05-21T12:31:05.708383Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.751341Z", "completed_at": "2025-05-21T12:31:05.751352Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.19596505165100098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_conversions_to_post", "compiled": true, "compiled_code": "with int_all_filters as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_all_info_that_used_as_filters`\n),\npayments_table as (\n    select payments.datetime payment_datetime,\n           payments.date as payment_date,\n           payments.first_payment_datetime,\n           payments.cmuserid,\n           event,\n           payment_sum,\n           first_value(datetime) over (partition by cmuserid,event order by datetime) first_payment_datetime_in_a_group\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_success_and_recurring` payments\n)\n, post_conversions as (\n    select \n           promo_tariff_datetime as posted_datetime,\n           cmuserid,\n         'promo_tariff' as event\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_promo_tariff`\n   \n),posts_and_payments as (\n     select \n           payments_table.cmuserid cmuserid,\n           first_payment_datetime,\n           first_payment_datetime_in_a_group,\n           event,\n           payment_sum,\n           payment_datetime datetime,\n           payments_table.cmuserid paid,\n           null posted\n    from payments_table\n    union all\n    select \n            cmuserid cmuserid,\n           null as first_payment_datetime,\n           null as first_payment_datetime_in_a_group,\n           event,\n           null as payment_sum,\n           posted_datetime,\n           null as paid,\n           cmuserid posted\n    from post_conversions\n  )\nselect posts_and_payments.*,\n      registrations.* except(cmuserid)\nfrom posts_and_payments\njoin int_all_filters registrations on posts_and_payments.cmuserid = registrations.cmuserid", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_conversions_to_post`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.704571Z", "completed_at": "2025-05-21T12:31:05.711621Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.806882Z", "completed_at": "2025-05-21T12:31:05.806893Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2363133430480957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_cmuserid_events_caused_payments", "compiled": true, "compiled_code": "with data_used_as_filters as(\n    select * \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_all_info_that_used_as_filters`\n),  defining_what_caused as (\n    select * \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_events_close_to_payment`\n ),\ndefining_payment_type as (\nselect *,case when defining_what_caused.event like '%payment%' then false\n            else true end as know_how_paid,\n            date_diff(payment_time,event_time,minute) minutes_between_event_and_payment,\n            percentile_cont(date_diff(payment_time,event_time,minute),0.75) over () seventy_five_percentile\nfrom defining_what_caused \nwhere max_time_before_payment = event_time\n), all_successful_payments as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_success`\n)\n,unknown_payments as (\n    select distinct all_successful_payments.datetime,all_successful_payments.cmuserid,all_successful_payments.event\n    from all_successful_payments\n    left join defining_payment_type payment_types on all_successful_payments.cmuserid = payment_types.cmuserid \n                                                 and all_successful_payments.datetime = payment_types.payment_time\n    where cast(all_successful_payments.datetime as date) >= '2023-10-18' and payment_types.cmuserid is null \n), all_payments_together as (\nselect defining_payment_type.*\nfrom defining_payment_type\nunion all\nselect cmuserid,\n        null,\n        'unknown',\n        null,\n        null,\n        datetime,\n        false,\n        0,\n        (select max(seventy_five_percentile) from defining_payment_type)\nfrom unknown_payments\n)\nselect all_payments_together.*,\ndata_used_as_filters.* except(cmuserId)\nfrom all_payments_together\njoin data_used_as_filters on all_payments_together.cmuserid = data_used_as_filters.cmuserid", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_cmuserid_events_caused_payments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.708784Z", "completed_at": "2025-05-21T12:31:05.806453Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.887444Z", "completed_at": "2025-05-21T12:31:05.887456Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2734401226043701, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_created_blocks_edits_statistics", "compiled": true, "compiled_code": "with users_stages as (\n    select \n        cmuserid,\n        utm_source,\n        utm_campaign,\n        utm_medium,\n        initRefferer,\n        utm_traffic,\n        abtest_name,\n        abtest_group,\n        abgroup_count_filter,\n        devicetypes,\n        template_link,\n        business_spheres_filter,\n        eventgroupname_description,\n        business_spheres_filter_description,\n        registration_date\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_all_info_that_used_as_filters`\n    )\nselect blocks.cmuserid,\n      users_stages.registration_date,\n      case \n           when event = 'editor.main-edit.click' then 'hat_block_edited'\n           when event = 'editor.text-edit.click' then 'text_block_edited'\n           when event = 'editor.socials-edit.click' then 'socials_block_edited'\n           when event = 'editor.messengers-edit.click' then 'messengers_block_edited'\n           when event = 'editor.button-edit.click' then 'link_block_edited'\n           when event = 'editor.photos-edit.click' then 'photos_block_edited'\n           when event = 'editor.video-edit.click' then 'videos_block_edited'\n           when event = 'editor.separator-edit.click' then 'separator_block_edited'\n           when event = 'editor.price-edit.click' then 'price_block_edited'\n           when event = 'editor.map-edit.click' then 'map_block_edited'\n           when event = 'editor.products-edit.click' then 'products_block_edited'\n           when event = 'editor.faq-edit.click' then 'faq_block_edited'\n           when event = 'editor.reviews-edit.click' then 'reviews_block_edited'\n           when event = 'editor.banner-edit.click' then 'banner_block_edited'\n           when event = 'editor.html-edit.click' then 'html_block_edited'\n           when event = 'editor.timer-edit.click' then 'timer_block_edited'\n           when event = 'editor.priorityButton-edit.click' then 'priority_button_block_edited'\n           when event = 'editor.contactButton-edit.click' then 'button_contact_block_edited'\n      end as event,\n      block_creation_time,\n      block_number,\n       utm_source,\n        utm_campaign,\n        utm_medium,\n        initRefferer,\n        utm_traffic,\n        abtest_name,\n        abtest_group,\n        abgroup_count_filter,\n        devicetypes,\n        template_link,\n        business_spheres_filter,\n        eventgroupname_description,\n        business_spheres_filter_description\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_blocks_created_edits` blocks\njoin users_stages  on blocks.cmuserId = users_stages.cmuserId", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_created_blocks_edits_statistics`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.974142Z", "completed_at": "2025-05-21T12:31:05.987964Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.992724Z", "completed_at": "2025-05-21T12:31:05.992734Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10799789428710938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_created_blocks_statistics", "compiled": true, "compiled_code": "with users_stages as (\n    select \n        cmuserid,\n        utm_source,\n        utm_campaign,\n        utm_medium,\n        initRefferer,\n        utm_traffic,\n        abtest_name,\n        abtest_group,\n        abgroup_count_filter,\n        devicetypes,\n        template_link,\n        business_spheres_filter,\n        eventgroupname_description,\n        business_spheres_filter_description,\n        registration_date\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_all_info_that_used_as_filters`\n    )\nselect blocks.cmuserid,\n    users_stages.registration_date,\n      case when event = 'editor.add.click' then 'block_added'\n      when event = 'editor-add.main.click' then 'hat_block_added'\n      when event = 'editor-add.text.click' then 'text_block_added'\n      when event = 'editor-add.socials.click' then 'socials_block_added'\n      when event = 'editor-add.messengers.click' then 'messengers_block_added'\n      when event = 'editor-add.link.click' then 'link_block_added'\n      when event = 'editor-add.photos.click' then 'photos_block_added'\n      when event = 'editor-add.video.click' then 'videos_block_added'\n      when event = 'editor-add.separator.click' then 'separator_block_added'\n      when event = 'editor-add.price.click' then 'price_block_added'\n      when event = 'editor-add.map.click' then 'map_block_added'\n      when event = 'editor-add.products.click' then 'products_block_added'\n      when event = 'editor-add.faq.click' then 'faq_block_added'\n      when event = 'editor-add.reviews.click' then 'reviews_block_added'\n      when event = 'editor-add.banner.click' then 'banner_block_added'\n      when event = 'editor-add.html.click' then 'html_block_added'\n      when event = 'editor-add.timer.click' then 'timer_block_added'\n      when event = 'editor-add.priority-button.click' then 'priority_button_block_added'\n      when event = 'editor-add.button-contact.click' then 'button_contact_block_added'\n      end as event,\n      block_creation_time,\n       utm_source,\n        utm_campaign,\n        utm_medium,\n        initRefferer,\n        utm_traffic,\n        abtest_name,\n        abtest_group,\n        abgroup_count_filter,\n        devicetypes,\n        template_link,\n        business_spheres_filter,\n        eventgroupname_description,\n        business_spheres_filter_description\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_blocks_created` blocks\njoin users_stages  on blocks.cmuserId = users_stages.cmuserId", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_created_blocks_statistics`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.976896Z", "completed_at": "2025-05-21T12:31:05.988981Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:05.997271Z", "completed_at": "2025-05-21T12:31:05.997281Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14874768257141113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.Profeat_site.unique_int_cmuserid_business_spheres_only_other_cmuserid.eb775095fb", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select cmuserid as unique_field\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_business_spheres_only_other`\n  where cmuserid is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.983530Z", "completed_at": "2025-05-21T12:31:05.993059Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.037925Z", "completed_at": "2025-05-21T12:31:06.037938Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.14891886711120605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_cmuserid__left_users", "compiled": true, "compiled_code": "with active_users_monthly as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid__active_users_monthly`\n), \nphones as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_phone__last_value`\n),\ntemplate_links as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_localuserid_template_link_groupped`\n),\ndefining_drop_date as (\n                select distinct \n                      active_users_monthly.cmuserid,\n                      phone,\n                      first_value(date) over (partition by active_users_monthly.cmuserid order by date desc) as drop_date,\n                      template_link\n                from active_users_monthly\n                join  phones on active_users_monthly.cmuserId = phones.cmuserid\n                join template_links on active_users_monthly.cmuserId = template_links.cmuserid\n                          )\nselect *\nfrom defining_drop_date", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_cmuserid__left_users`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.985477Z", "completed_at": "2025-05-21T12:31:05.993407Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.038779Z", "completed_at": "2025-05-21T12:31:06.038790Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.18661189079284668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_left_users_dynamics", "compiled": true, "compiled_code": "with registration_data as (\n    select cmuserid,\n            registration_datetime \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_attribution_devices_phone_payment_template` \n),\nint_funnel_key_events__counting_users_on_each_stage as (\n    select distinct\n           cmuserid,\n           registration_date,\n           utm_source,\n           utm_campaign,\n           utm_medium,\n           initRefferer,\n           utm_traffic,\n           abtest_name,\n           abtest_group,\n           abgroup_count_filter,\n           devicetypes,\n           template_link,\n           business_spheres_filter,\n           eventgroupname_description,\n           business_spheres_filter_description\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_all_info_that_used_as_filters`\n)\n,\nvisitkas_visitors_with_visit_time as (\n    select visits_time.*,\n            first_value(datetime) over (partition by visits_time.cmuserid,template_link,localuserid order by datetime) first_time_value_over_localuserid \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_visitkas_visitors_with_visit_time` visits_time\n    join registration_data on visits_time.cmuserid = registration_data.cmuserid \n    where registration_datetime <= visits_time.datetime\n    ),\nvisitkas_visitors_with_visit_time_deduplicated as \n    (select *except(date),\n            date as month_trunc\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid__active_users_monthly`\n    ),\ndefining_countable_groups as (\n    select  *,\n            lead(month_trunc) over (partition by cmuserid order by month_trunc) next_active_month,\n            date_diff(lead(month_trunc) over (partition by cmuserid order by month_trunc),month_trunc,month) diff_between_current_and_next_active_month,\n            case when lead(month_trunc) over (partition by cmuserid order by month_trunc) is null or  date_diff(lead(month_trunc) over (partition by cmuserid order by month_trunc),month_trunc,month) >1 then\n                True else False end as is_countable,\n            first_value(month_trunc) over (partition by cmuserid order by month_trunc) first_active_month\n    from visitkas_visitors_with_visit_time_deduplicated),\n\nvisitkas_visitors_with_visit_time_deduplicated_weekly as \n    (   select *\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid__active_users_weekly`\n    ),\ndefining_countable_groups_weekly as (\n    select  *,\n            lead(week_trunc) over (partition by cmuserid order by week_trunc) next_active_week,\n            date_diff(lead(week_trunc) over (partition by cmuserid order by week_trunc),week_trunc,week) diff_between_current_and_next_active_week,\n            case when lead(week_trunc) over (partition by cmuserid order by week_trunc) is null or  date_diff(lead(week_trunc) over (partition by cmuserid order by week_trunc),week_trunc,week) >1 then\n                True else False end as is_countable_weekly,\n            first_value(week_trunc) over (partition by cmuserid order by week_trunc) first_active_week\n    from visitkas_visitors_with_visit_time_deduplicated_weekly)\nselect \n    distinct \n    groupss.* except(first_active_month,visitkas_users),\n    groupps_weekly.* except(cmuserid,visitkas_users),\n    registration_date,\n    utm_source,\n    utm_campaign,\n    utm_medium,\n    abtest_name,\n    abtest_group,\n    abgroup_count_filter,\n    initrefferer,\n    utm_traffic,\n    devicetypes,\n    template_link,\n    business_spheres_filter,\n    eventgroupname_description,\n    business_spheres_filter_description,\nfrom defining_countable_groups groupss\njoin int_funnel_key_events__counting_users_on_each_stage registration_data on registration_data.cmuserid = groupss.cmuserid\nleft join defining_countable_groups_weekly groupps_weekly on groupss.cmuserid = groupps_weekly.cmuserid", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_left_users_dynamics`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.989459Z", "completed_at": "2025-05-21T12:31:06.039248Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.158890Z", "completed_at": "2025-05-21T12:31:06.158904Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.22852635383605957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_funnel_key_events__finding_all_users_stages", "compiled": true, "compiled_code": "with registration_data as (\n    select * from  `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_all_info_that_used_as_filters` \n),\nint_cmuserid_edited_2_blocks as (\n    select * from  `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_edited_2_blocks`\n),\n\nstg_payments_success_and_recurring as (\n    select cmuserid,\n            datetime,\n            first_payment_datetime\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_success_and_recurring`\n)\n,stg_cmuserid_copied_template_link as ( \n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_cmuserid_copied_template_link`\n),\n\nint_cmuserId__count_visitkas_visitors as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserId__count_visitkas_visitors`\n),\nint_cmuserid__all_visitkas_visitors as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_visitkas_visitors_with_visit_time_all_visits`\n),\nint_payments_promo_tarif_disctinct_cmuserid as (\n    select * from  `dwh-wazzup`.`dbt_nbespalov`.`int_payments_promo_tarif_disctinct_cmuserid`\n ),\n\n\nint_funnel_key_events__finding_all_users_stages as (\n    select distinct\n    registration_data.cmuserid succreg,\n    registration_data.registration_date,\n    registration_data.utm_source,\n    registration_data.utm_campaign,\n    registration_data.utm_medium,\n    registration_data.abtest_name,\n    registration_data.abtest_group,\n    registration_data.abgroup_count_filter,\n    registration_data.initrefferer,\n    utm_traffic,\n    devicetypes,\n    registration_data.template_link,\n    business_spheres_filter,\n    eventgroupname_description,\n    business_spheres_filter_description,\n    os,\n    case when includeinmetrics = 'yes' then registration_data.cmuserid end as templateusage,\n    int_cmuserid_edited_2_blocks.cmuserid as edits,\n    int_cmuserId__count_visitkas_visitors.cmuserid as activation,\n    coalesce(stg_cmuserid_copied_template_link.cmuserid, int_cmuserid__all_visitkas_visitors.cmuserid) as copies,\n    int_payments_promo_tarif_disctinct_cmuserid.cmuserid as posted,\n    case when stg_payments_success_and_recurring.cmuserid is not null  then registration_data.cmuserId end as paid,\n    case when stg_payments_success_and_recurring.cmuserid is not null and stg_payments_success_and_recurring.datetime = stg_payments_success_and_recurring.first_payment_datetime then stg_payments_success_and_recurring.cmuserid end as  first_paid,\n    case when stg_payments_success_and_recurring.cmuserid is not null and stg_payments_success_and_recurring.datetime != stg_payments_success_and_recurring.first_payment_datetime then stg_payments_success_and_recurring.cmuserid end as  repeat_paid\n    from registration_data\n    left join int_cmuserid_edited_2_blocks on registration_data.cmuserid = int_cmuserid_edited_2_blocks.cmuserid\n    left join int_cmuserid__all_visitkas_visitors on registration_data.cmuserid = int_cmuserid__all_visitkas_visitors.cmuserId\n    left join stg_cmuserid_copied_template_link on registration_data.cmuserid = stg_cmuserid_copied_template_link.cmuserid\n    left join int_cmuserId__count_visitkas_visitors on registration_data.cmuserid = int_cmuserId__count_visitkas_visitors.cmuserid\n    left join int_payments_promo_tarif_disctinct_cmuserid on registration_data.cmuserid = int_payments_promo_tarif_disctinct_cmuserid.cmuserid\n    left join stg_payments_success_and_recurring on registration_data.cmuserid = stg_payments_success_and_recurring.cmuserid\n    )\nselect * from int_funnel_key_events__finding_all_users_stages", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_funnel_key_events__finding_all_users_stages`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:05.994257Z", "completed_at": "2025-05-21T12:31:06.080767Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.160888Z", "completed_at": "2025-05-21T12:31:06.160899Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.25871777534484863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_funnel_key_events__finding_all_users_stages_time", "compiled": true, "compiled_code": "with registration_data as (\n    select * from  `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_attribution_devices_phone_payment_template` \n),\n\nint_cmuserid_edits as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_edited_all`\n)\n,\nint_cmuserid_business_spheres as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_business_spheres` \n),\n\nstg_cmuserid_copied_template_link as ( \n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_copy_and_activation_combined_time`\n),\n\nint_cmuserId__count_visitkas_visitors_one_client as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserId__count_visitkas_visitors_one_client`\n),\n\nint_cmuserId__count_visitkas_visitors as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserId__count_visitkas_visitors`\n),\n\nint_cmuserId__count_visitkas_visitors_five_clients as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserId__count_visitkas_visitors_five_clients`\n),\n\nint_cmuserId__count_visitkas_visitors_ten_clients as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserId__count_visitkas_visitors_ten_clients`\n),\nint_payments_promo_tarif_disctinct_cmuserid as (\n    select * from  `dwh-wazzup`.`dbt_nbespalov`.`int_payments_promo_tarif_disctinct_cmuserid`\n ),\n\n\nint_funnel_key_events__finding_all_users_stages as (\nselect distinct\n    registration_data.cmuserid,\n    registration_data.registration_date,\n    registration_data.registration_datetime,\n    registration_data.utm_source,\n    registration_data.utm_campaign,\n    registration_data.utm_medium,\n    os,\n    registration_data.initreferrer as initrefferer,\n    utm_traffic,\n    registration_data.device as devicetypes,\n    registration_data.template_link,\n    business_spheres_filter,\n    eventgroupname_description,\n    business_spheres_filter_description,\n    case when includeinmetrics = 'yes' then int_cmuserid_business_spheres.business_select_datetime end as templateusage,\n    int_cmuserid_edits.edits_datetime_2_blocks as edits,\n    int_cmuserid_edits.edits_datetime_1_block as edits_one_block,\n    int_cmuserid_edits.edits_datetime_3_blocks as edits_three_blocks,\n    int_cmuserId__count_visitkas_visitors.activation_datetime as activation,\n    int_cmuserId__count_visitkas_visitors_one_client.activation_datetime as activation_one_client,\n    int_cmuserId__count_visitkas_visitors_five_clients.activation_datetime as activation_five_clients,\n    int_cmuserId__count_visitkas_visitors_ten_clients.activation_datetime as activation_ten_clients,\n    stg_cmuserid_copied_template_link.copied_datetime as copies,\n    int_payments_promo_tarif_disctinct_cmuserid.posted_datetime as posted,\n    case when stg_cmuserid_copied_template_link.copied_datetime is null then False\n    else True end as has_posted,\n    registration_data.first_payment_datetime as paid\n    from registration_data\n    left join  int_cmuserid_edits on registration_data.cmuserid = int_cmuserid_edits.cmuserid\n    left join int_cmuserid_business_spheres on registration_data.cmuserid = int_cmuserid_business_spheres.cmuserid\n    left join stg_cmuserid_copied_template_link on registration_data.cmuserid = stg_cmuserid_copied_template_link.cmuserid\n    left join int_cmuserId__count_visitkas_visitors on registration_data.cmuserid = int_cmuserId__count_visitkas_visitors.cmuserid\n    left join int_cmuserId__count_visitkas_visitors_one_client on registration_data.cmuserid = int_cmuserId__count_visitkas_visitors_one_client.cmuserid\n    left join int_cmuserId__count_visitkas_visitors_five_clients on registration_data.cmuserid = int_cmuserId__count_visitkas_visitors_five_clients.cmuserid\n    left join int_cmuserId__count_visitkas_visitors_ten_clients on registration_data.cmuserid = int_cmuserId__count_visitkas_visitors_ten_clients.cmuserid\n    left join int_payments_promo_tarif_disctinct_cmuserid on registration_data.cmuserid = int_payments_promo_tarif_disctinct_cmuserid.cmuserid\n    )\nselect *\nfrom int_funnel_key_events__finding_all_users_stages", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_funnel_key_events__finding_all_users_stages_time`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:06.242922Z", "completed_at": "2025-05-21T12:31:06.252492Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.256633Z", "completed_at": "2025-05-21T12:31:06.256642Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.13831281661987305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_full_sum__free_and_paid_subscriptions_first_month", "compiled": true, "compiled_code": "with free_subscriptions as (\n    select account_Id,              -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    created_date as paid_date,      -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    full_tarif_sum_in_rubles        -- \u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n     from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_full_sum__free_subscripions`\n),\n\npaid_subscrtiptions as (\n    select  account_Id,                -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    paid_at_billing_date as paid_date, -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    full_tarif_sum_in_rubles           -- \u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n     from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_full_sum__paid_subscriptions`\n),\n\nsubscriptions_all as (\n\nselect * from free_subscriptions\nunion all\nselect * from paid_subscrtiptions),\n\nsubscritions_sum as (\n\nselect subscriptions_all.account_id,    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nsum(full_tarif_sum_in_rubles) as full_tarif_sum_in_rubles   -- \u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n from subscriptions_all inner join `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts \non accounts.account_id=subscriptions_all.account_id \nwhere subscriptions_all.paid_date<=date_add(accounts.register_date, interval 1 month)\nand accounts.type='standart'\ngroup by 1)\n\nselect * from subscritions_sum  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u0441\u0443\u043c\u043c\u043e\u0439 \u043f\u0435\u0440\u0432\u043e\u0439 \u043e\u043f\u043b\u0430\u0442\u044b, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0431\u044b\u043b\u0430 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0441\u044f\u0446\u0430 \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_full_sum__free_and_paid_subscriptions_first_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:06.247364Z", "completed_at": "2025-05-21T12:31:06.256086Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.259710Z", "completed_at": "2025-05-21T12:31:06.259718Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14072656631469727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_correct_start_and_end_date_joined_datetime_deduplicated", "compiled": true, "compiled_code": "with missing_data_datetime_to_deduplicate as (\n         select *, \n         row_number() \n         over (partition by guid order by end_date desc) rn \n         from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_correct_start_and_end_date_joined_datetime`        \n         ),\n         \nmissing_data_datetime_deduplicated as (\n         select * from missing_data_datetime_to_deduplicate\n         where rn=1\n         )\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0443 \u0430\u043a\u043a\u0430\u043d\u0442\u043e\u0432 \u0441 \u0443\u0442\u043e\u0447\u043d\u0435\u043d\u0438\u0435\u043c \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0435\u0439 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\nselect * from missing_data_datetime_deduplicated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_correct_start_and_end_date_joined_datetime_deduplicated`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:06.249856Z", "completed_at": "2025-05-21T12:31:06.256971Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.299216Z", "completed_at": "2025-05-21T12:31:06.299227Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.1415102481842041, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partner_refparent_account_type_partner_type__current", "compiled": true, "compiled_code": "with partner_type_account_type_refparent_partner as (\n    select account_id,\n    refparent_id,\n    partner_id,\n    account_type,\n    partner_type,\n    start_date from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated`\n),\n\npartner_type_account_type_refparent_partner_with_row_number as (\n    select *,\n    row_number() over (partition by account_id order by start_date asc) as rn\n     from partner_type_account_type_refparent_partner\n),\npartner_type_account_type_refparent_partner_on_registration_date as (\n    select account_id,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    partner_id,         -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    refparent_id,       -- ID \u0440\u0435\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    account_type,       -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    partner_type        -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n     from partner_type_account_type_refparent_partner_with_row_number  \n    where rn=1\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c\u0438 \u0438 \u0438\u0445 \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u044f\u043c\u0438 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u043c\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441 \u0442\u0438\u043f\u0430\u043c\u0438 \u044d\u0442\u0438\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\nselect * from partner_type_account_type_refparent_partner_on_registration_date", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partner_refparent_account_type_partner_type__current`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:06.253436Z", "completed_at": "2025-05-21T12:31:06.260051Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.341828Z", "completed_at": "2025-05-21T12:31:06.341841Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.18015408515930176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partner_refparent_account_type_partner_type__on_registration_date", "compiled": true, "compiled_code": "with partner_type_account_type_refparent_partner as (\n    select account_id,\n    refparent_id,\n    partner_id,\n    account_type,\n    partner_type,\n    start_date from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated`\n),\n\npartner_type_account_type_refparent_partner_with_row_number as (\n    select *,\n    row_number() over (partition by account_id order by start_date asc) as rn\n     from partner_type_account_type_refparent_partner\n),\npartner_type_account_type_refparent_partner_on_registration_date as (\n    select account_id,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    start_date,         -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    partner_id,         -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    refparent_id,       -- ID \u0440\u0435\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    account_type,       -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    partner_type        -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n     from partner_type_account_type_refparent_partner_with_row_number  \n    where rn=1\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c\u0438 \u0438 \u0438\u0445 \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u044f\u043c\u0438 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u043c\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0442\u0438\u043f\u0430\u043c\u0438 \u044d\u0442\u0438\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0438 \u0434\u0430\u0442\u043e\u0439 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u0438\nselect * from partner_type_account_type_refparent_partner_on_registration_date", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partner_refparent_account_type_partner_type__on_registration_date`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:06.258097Z", "completed_at": "2025-05-21T12:31:06.342336Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.422851Z", "completed_at": "2025-05-21T12:31:06.422863Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.21501588821411133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_all_affiliates_groupped", "compiled": true, "compiled_code": "select partner_id,  -- \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\naccount_id,         -- \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0434\u043e\u0447\u043a\u0438\nmin(start_date) as created_date,    -- \u0434\u0430\u0442\u0430 \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u0447\u043a\u0438\nmax(end_date) as max_end_date       -- \u0434\u0430\u0442\u0430 \u043e\u0442\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u0447\u043a\u0438 (\u0440\u0430\u0432\u043d\u0430 \u0441\u0435\u0433\u043e\u0434\u043d\u044f\u0448\u043d\u0435\u043c\u0443 \u0434\u043d\u044e, \u0435\u0441\u043b\u0438 \u0434\u043e\u0447\u043a\u0430 \u0432\u0441\u0435 \u0435\u0449\u0435 \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0430 \u043a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0443)\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated`\nwhere partner_id is not null\ngroup by 1,2\n    -- \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043a\u043e\u0433\u0434\u0430 \u043a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u043c \u0431\u044b\u043b\u0438 \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u044b \u0434\u043e\u0447\u043a\u0438", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_all_affiliates_groupped`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:06.299989Z", "completed_at": "2025-05-21T12:31:06.383148Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.425304Z", "completed_at": "2025-05-21T12:31:06.425313Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.25187206268310547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_with_clients_by_month", "compiled": true, "compiled_code": "with partner_info as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated`\n),\n\nmonths as (\n    select * from `dwh-wazzup`.`analytics_tech`.`months`\n)\n    -- \u041a\u0430\u043a\u0438\u0435 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u044b \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u044b \u043a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0443 \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435. \u0412\u0430\u0436\u043d\u043e: \u0442\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0443 \u043d\u0430\u0441 \u043f\u043e\u044f\u0432\u0438\u043b\u0438\u0441\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u0444\u0435\u0432\u0440\u0430\u043b\u044f 2023\nselect partner_id,  -- \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\naccount_id,         -- \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0434\u043e\u0447\u043a\u0438\nmonths.month,       -- \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\npartner_type,       -- \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430. \u0412\u0430\u0436\u043d\u043e! \u0411\u0435\u0440\u0435\u0442\u0441\u044f \u0442\u0438\u043f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0438\u0440\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\naccount_type        -- \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0434\u043e\u0447\u043a\u0438. \u0412\u0430\u0436\u043d\u043e! \u0411\u0435\u0440\u0435\u0442\u0441\u044f \u0442\u0438\u043f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\nfrom  partner_info\n    inner join  months\non months.month>=date_trunc(partner_info.start_date, month) and months.month<=date_trunc(partner_info.end_date, month)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_with_clients_by_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:06.506915Z", "completed_at": "2025-05-21T12:31:06.521494Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.526939Z", "completed_at": "2025-05-21T12:31:06.526949Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.147064208984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_billing_affiliate_subscription_payments_real_money", "compiled": true, "compiled_code": "WITH real_money_aggregated AS (\n                              SELECT account_id\n                                   , subscription_update_id\n                                   , sum(good_balance_spent) AS good_balance_spent\n                              FROM `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_track_real_money_spending`\n                              GROUP BY 1, 2\n                              ),\n     billing_affiliate AS (\n                              SELECT billingaffiliate.account_id\n                                   , billingaffiliate.subscription_owner\n                                   , subscriptionupdates.paid_at_billing_date AS occured_date\n                                   , paid_at_billing_completed_date           AS occured_date_change_in_product\n                                   , subscriptionupdates.guid                 AS subscription_update_id\n                                   , subscriptionupdates.subscription_id\n                                   , action\n                                   , (CASE WHEN subscriptionupdates.currency = billingaffiliate.currency THEN TRUE ELSE FALSE END)                    AS is_subscription_currency_the_same_as_billing_affilate --\u043d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043b\u0443\u0447\u0430\u0435\u0432, \u043a\u043e\u0433\u0434\u0430 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432\u0430\u043b\u044e\u0442\u0430 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0432\u0430\u043b\u044e\u0442\u044b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430. \u041f\u0440\u0438\u043c\u0435\u0440: \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0435\u0441\u043b\u0438 \u0443 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u041b\u041a \u0432 \u0440\u0443\u0431\u043b\u044f\u0445, \u0432 subscriptionUpdates \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0431\u0443\u0434\u0435\u0442 6000, \u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u0442 \u0432 KZT 6300 \u0440\u0443\u0431\u043b\u0435\u0439 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043a\u0443\u0440\u0441\u0430. \u0410 \u0443 \u043d\u0430\u0441 \u043c\u043d\u043e\u0433\u043e\u0435 \u0437\u0430\u0432\u044f\u0437\u0430\u043d\u043e \u043d\u0430 \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n                                   , (CASE WHEN billingaffiliate.currency = 'RUR' THEN billingaffiliate.sum\n                                           WHEN rur IS NOT NULL                   THEN (billingaffiliate.sum) * rur\n                                           WHEN billingaffiliate.currency = 'EUR' AND rur IS NULL THEN (billingaffiliate.sum) * 85\n                                           WHEN billingaffiliate.currency = 'USD' AND rur IS NULL THEN (billingaffiliate.sum) * 75\n                                           WHEN billingaffiliate.currency = 'KZT' AND rur IS NULL THEN (billingaffiliate.sum) * 0.24\n                                      END\n                                  )                                           AS sum_in_rubles\n                                   , (CASE WHEN billingaffiliate.currency = 'RUR' THEN billingaffiliate.sum - coalesce(abs(balance_to_withdraw), 0)\n                                           WHEN rur IS NOT NULL                   THEN (billingaffiliate.sum - coalesce(abs(balance_to_withdraw), 0)) * rur\n                                           WHEN billingaffiliate.currency = 'EUR' AND rur IS NULL THEN (billingaffiliate.sum - coalesce(balance_to_withdraw, 0)) * 85\n                                           WHEN billingaffiliate.currency = 'USD' AND rur IS NULL THEN (billingaffiliate.sum - coalesce(balance_to_withdraw, 0)) * 75\n                                           WHEN billingaffiliate.currency = 'KZT' AND rur IS NULL THEN (billingaffiliate.sum - coalesce(balance_to_withdraw, 0)) * 0.24\n                                      END\n                                  )                                           AS sum_in_rubles_without_balance\n                                   , CASE WHEN billingaffiliate.currency = 'RUR' THEN coalesce(abs(balance_to_withdraw), 0)\n                                           WHEN rur IS NOT NULL                   THEN coalesce(abs(balance_to_withdraw), 0) * rur\n                                           WHEN billingaffiliate.currency = 'EUR' AND rur IS NULL THEN coalesce(abs(balance_to_withdraw), 0) * 85\n                                           WHEN billingaffiliate.currency = 'USD' AND rur IS NULL THEN coalesce(abs(balance_to_withdraw), 0) * 75\n                                           WHEN billingaffiliate.currency = 'KZT' AND rur IS NULL THEN coalesce(abs(balance_to_withdraw), 0) * 0.24\n                                     END\n                                                                              AS balance_to_withdraw_in_rubles\n                                   , coalesce(balance_to_withdraw, 0)         AS balance_to_withdraw\n                                   , subscriptionupdates.sum_in_rubles        AS sum_in_rubles_full_subscription\n                                   , CASE WHEN payments.sum = 0\n                                                  AND payments.account_id = billingaffiliate.account_id\n                                                  AND abs(billingaffiliate.sum) != subscriptionupdates.sum\n                                                  AND balance_to_withdraw != 0\n                                                                                             THEN 0\n                                          WHEN payments.sum = 0\n                                                  AND payments.account_id != billingaffiliate.account_id\n                                                  AND abs(billingaffiliate.sum) != subscriptionupdates.sum\n                                                  AND balance_to_withdraw != 0\n                                                                                             THEN 1\n                                          WHEN billingaffiliate.account_id != subscription_owner THEN 1\n                                      ELSE 2\n                                      END\n                                                                              AS has_partner_paid\n                                   , CASE WHEN billingaffiliate.currency = 'RUR' THEN real_money_aggregated.good_balance_spent\n                                          WHEN rur IS NOT NULL                   THEN (real_money_aggregated.good_balance_spent) * rur\n                                          WHEN billingaffiliate.currency = 'EUR' AND rur IS NULL THEN (real_money_aggregated.good_balance_spent) * 85\n                                          WHEN billingaffiliate.currency = 'USD' AND rur IS NULL THEN (real_money_aggregated.good_balance_spent) * 75\n                                          WHEN billingaffiliate.currency = 'KZT' AND rur IS NULL THEN (real_money_aggregated.good_balance_spent) * 0.24\n                                      END\n                                                                              AS good_balance_spent\n                                   , real_money_aggregated.account_id         AS real_money_account_id\n                                   , wapi_transactions_in_rubles\n                                   , partner_discount\n                                   , start_date\n                                   , account_type\n                              FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` billingaffiliate\n                                  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted ON exchange_rates_unpivoted._ibk = billingaffiliate.occured_date\n                                                                                                                       AND exchange_rates_unpivoted.currency = billingaffiliate.currency\n                                  INNER JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_and_converted_currency_billing_date` subscriptionupdates ON subscriptionupdates.guid = billingaffiliate.subscription_update_id\n                                  LEFT JOIN  `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_card` payments ON billingaffiliate.payment_guid = payments.guid\n                                  LEFT JOIN real_money_aggregated ON real_money_aggregated.subscription_update_id=subscriptionupdates.guid\n                                                                AND real_money_aggregated.account_id=billingaffiliate.account_id\n                                  INNER JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` account_type_data ON billingaffiliate.account_id=account_type_data.account_id AND billingaffiliate.occured_date>=account_type_data.start_date AND billingaffiliate.occured_date<=account_type_data.end_date\n                              WHERE object = 'subscription'\n                                AND NOT EXISTS (SELECT invoice_id FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` invalid WHERE invalid.invoice_id=billingaffiliate.invoice_id\n                                AND object='refundForInvoice')\n     ),\n     billing_affiliate_to_deduplicate AS (\n                              SELECT *\n                                   , row_number() OVER (PARTITION BY subscription_update_id, has_partner_paid ORDER BY start_date DESC) AS rn\n                              FROM billing_affiliate\n                              ),\n     billing_affiliate_deduplicated AS (\n                              SELECT *\n                                   , CASE WHEN partner_discount IS NOT NULL\n                                      AND ((occured_date >= '2022-11-28' AND account_type = 'partner')\n                                          OR (occured_date >= '2023-02-10' AND account_type = 'tech-partner'))\n                                               THEN 0.1 * wapi_transactions_in_rubles END AS wapi_discount_for_partners\n                              FROM billing_affiliate_to_deduplicate\n                              WHERE rn = 1\n                              ),\n     balance_spending_partner_and_client AS (\n                              SELECT subscription_owner                                                 AS account_id\n                                   , occured_date\n                                   , subscription_id\n                                   , subscription_update_id\n                                   , action\n                                   , max(partner_discount)                                              AS partner_discount\n                                   , sum(good_balance_spent)                                            AS good_balance_spent\n                                   , max(wapi_transactions_in_rubles)                                   AS wapi_transactions_in_rubles\n                                   , max(sum_in_rubles_full_subscription)                               AS sum_in_rubles_full_subscription\n                                   , max(sum_in_rubles_full_subscription - wapi_transactions_in_rubles) AS subscription_sum\n                                   , max(wapi_discount_for_partners)                                    AS wapi_discount_for_partners\n                                   , max(is_subscription_currency_the_same_as_billing_affilate)         AS is_subscription_currency_the_same_as_billing_affilate\n                              FROM billing_affiliate_deduplicated\n                              WHERE (has_partner_paid = 1\n                                      OR (has_partner_paid = 0 AND subscription_owner = real_money_account_id))\n                              GROUP BY 1, 2, 3, 4, 5\n                              ),\n\n--\u044d\u0442\u043e\u0442 \u043f\u043e\u0434\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0443\u0436\u0435\u043d \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c \u0438 \u0445\u043e\u0440\u043e\u0448\u0438\u043c\u0438 \u0431\u043e\u043d\u0443\u0441\u0430\u043c\u0438 (\u043e\u043a\u043e\u043b\u043e 4 \u043e\u043f\u043b\u0430\u0442)\n     balance_spending_standart AS (\n                              SELECT subscription_owner                                                 AS account_id\n                                   , occured_date\n                                   , subscription_id\n                                   , subscription_update_id\n                                   , action\n                                   , max(partner_discount)                                              AS partner_discount\n                                   , max(good_balance_spent)                                            AS good_balance_spent\n                                   , max(wapi_transactions_in_rubles)                                   AS wapi_transactions_in_rubles\n                                   , max(sum_in_rubles_full_subscription)                               AS sum_in_rubles_full_subscription\n                                   , max(sum_in_rubles_full_subscription - wapi_transactions_in_rubles) AS subscription_sum\n                                   , max(wapi_discount_for_partners)                                    AS wapi_discount_for_partners\n                                   , max(is_subscription_currency_the_same_as_billing_affilate)         AS is_subscription_currency_the_same_as_billing_affilate\n                              FROM billing_affiliate_deduplicated\n                              WHERE has_partner_paid = 2\n                              GROUP BY 1, 2, 3, 4, 5\n                              ),\n\n     all_balance_spending AS (\n                              SELECT *\n                              FROM balance_spending_partner_and_client\n                              UNION ALL\n                              SELECT *\n                              FROM balance_spending_standart\n                              ),\n     good_balance_spent_aggregated AS (\n                              SELECT account_id                 -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n                                   , occured_date               -- \u0414\u0430\u0442\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n                                   , subscription_id            -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n                                   , action                     -- \u041a\u0430\u043a\u043e\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043e?\n                                   , subscription_update_id     -- ID \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\n                                   , max(partner_discount)                                       AS partner_discount                    -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n                                   , sum(subscription_sum)                                       AS subscription_sum_only               -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n                                   , sum(wapi_transactions_in_rubles)                            AS wapi_transactions_in_rubles         -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n                                   , sum(sum_in_rubles_full_subscription)                        AS sum_in_rubles_full_subscription     -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0431\u0430\u043b\u0430\u043d\u0441\u043e\u043c WABA\n                                   , sum(good_balance_spent)                                     AS good_balance_spent                  -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432\n                                   , max(wapi_discount_for_partners)                             AS wapi_discount_for_partners          -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0437\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\n                                   , max(is_subscription_currency_the_same_as_billing_affilate)  AS is_subscription_currency_the_same_as_billing_affilate   -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0442\u0430\u043a\u0430\u044f \u0436\u0435, \u043a\u0430\u043a \u0432  billingAffiliate?\n                              FROM all_balance_spending\n                              GROUP BY 1, 2, 3, 4, 5\n                              ),\n     good_balance_aggregated AS (\n                              SELECT *\n                                   , (1 - coalesce(partner_discount, 0)) * subscription_sum_only AS subscription_sum\n                              FROM good_balance_spent_aggregated\n                              )\nSELECT *    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u0441 \u0441\u0443\u043c\u043c\u043e\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u0435\u043d\u0435\u0433\nFROM good_balance_aggregated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:06.512082Z", "completed_at": "2025-05-21T12:31:06.522533Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.528429Z", "completed_at": "2025-05-21T12:31:06.528437Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.18930673599243164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_billing_affiliate_subscription_payments_real_money_billing_date", "compiled": true, "compiled_code": "with real_money_aggregated as (\n    select account_id,\n    subscription_update_id,\n    sum(good_balance_spent) as good_balance_spent \n    from  `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_track_real_money_spending`\n    group by 1,2\n),\nbilling_affiliate as (\n        select\n            billingaffiliate.account_id,\n            billingaffiliate.subscription_owner,\n            paid_at_billing_completed_date as occured_date,\n            subscriptionupdates.guid as subscription_update_id,\n            subscriptionupdates.subscription_id,\n            action,\n            (case when subscriptionupdates.currency=billingaffiliate.currency then True else False end) as is_subscription_currency_the_same_as_billing_affilate, --\u043d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043b\u0443\u0447\u0430\u0435\u0432, \u043a\u043e\u0433\u0434\u0430 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432\u0430\u043b\u044e\u0442\u0430 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0432\u0430\u043b\u044e\u0442\u044b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430. \u041f\u0440\u0438\u043c\u0435\u0440: \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0435\u0441\u043b\u0438 \u0443 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u041b\u041a \u0432 \u0440\u0443\u0431\u043b\u044f\u0445, \u0432 subscriptionUpdates \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0431\u0443\u0434\u0435\u0442 6000, \u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u0442 \u0432 KZT 6300 \u0440\u0443\u0431\u043b\u0435\u0439 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043a\u0443\u0440\u0441\u0430. \u0410 \u0443 \u043d\u0430\u0441 \u043c\u043d\u043e\u0433\u043e\u0435 \u0437\u0430\u0432\u044f\u0437\u0430\u043d\u043e \u043d\u0430 \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n                        (\n                case\n                    when billingaffiliate.currency = 'RUR'\n                    then billingaffiliate.sum\n                    when rur is not null\n                    then (billingaffiliate.sum) * rur\n                    when billingaffiliate.currency = 'EUR' and rur is null\n                    then (billingaffiliate.sum) * 85\n                    when billingaffiliate.currency = 'USD' and rur is null\n                    then (billingaffiliate.sum) * 75\n                    when billingaffiliate.currency = 'KZT' and rur is null\n                    then (billingaffiliate.sum) * 0.24\n                end\n            ) as sum_in_rubles,\n            (\n                case\n                    when billingaffiliate.currency = 'RUR'\n                    then billingaffiliate.sum - coalesce(abs(balance_to_withdraw), 0)\n                    when rur is not null\n                    then\n                        (billingaffiliate.sum - coalesce(abs(balance_to_withdraw), 0))\n                        * rur\n                    when billingaffiliate.currency = 'EUR' and rur is null\n                    then (billingaffiliate.sum - coalesce(balance_to_withdraw, 0)) * 85\n                    when billingaffiliate.currency = 'USD' and rur is null\n                    then (billingaffiliate.sum - coalesce(balance_to_withdraw, 0)) * 75\n                    when billingaffiliate.currency = 'KZT' and rur is null\n                    then\n                        (billingaffiliate.sum - coalesce(balance_to_withdraw, 0)) * 0.24\n                end\n            ) as sum_in_rubles_without_balance,\n\n            (\n                case\n                    when billingaffiliate.currency = 'RUR'\n                    then coalesce(abs(balance_to_withdraw), 0)\n                    when rur is not null\n                    then coalesce(abs(balance_to_withdraw), 0) * rur\n                    when billingaffiliate.currency = 'EUR' and rur is null\n                    then coalesce(abs(balance_to_withdraw), 0) * 85\n                    when billingaffiliate.currency = 'USD' and rur is null\n                    then coalesce(abs(balance_to_withdraw), 0) * 75\n                    when billingaffiliate.currency = 'KZT' and rur is null\n                    then coalesce(abs(balance_to_withdraw), 0) * 0.24\n                end\n            ) as balance_to_withdraw_in_rubles,\n            coalesce(balance_to_withdraw, 0) as balance_to_withdraw,\n            subscriptionupdates.sum_in_rubles as sum_in_rubles_full_subscription,\n            (\n                case\n                    when\n                        payments.sum = 0\n                        and payments.account_id = billingaffiliate.account_id\n                        and abs(billingaffiliate.sum) != subscriptionupdates.sum\n                        and balance_to_withdraw != 0\n                    then 0\n                    when\n                        payments.sum = 0\n                        and payments.account_id != billingaffiliate.account_id\n                        and abs(billingaffiliate.sum) != subscriptionupdates.sum\n                        and balance_to_withdraw != 0\n                    then 1\n                    when billingaffiliate.account_id!=subscription_owner then 1\n                    else 2\n                end\n            ) as has_partner_paid,\n         (\n                case\n                    when billingaffiliate.currency = 'RUR'\n                    then real_money_aggregated.good_balance_spent\n                    when rur is not null\n                    then (real_money_aggregated.good_balance_spent) * rur\n                    when billingaffiliate.currency = 'EUR' and rur is null\n                    then (real_money_aggregated.good_balance_spent) * 85\n                    when billingaffiliate.currency = 'USD' and rur is null\n                    then (real_money_aggregated.good_balance_spent) * 75\n                    when billingaffiliate.currency = 'KZT' and rur is null\n                    then (real_money_aggregated.good_balance_spent) * 0.24\n                end\n            ) as good_balance_spent,\n\n        real_money_aggregated.account_id as real_money_account_id,\n        wapi_transactions_in_rubles,\n        partner_discount,\n        start_date,\n        account_type\n\n        from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate`  billingaffiliate\n        left join\n            `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted\n            on exchange_rates_unpivoted._ibk = billingaffiliate.occured_date\n            and exchange_rates_unpivoted.currency = billingaffiliate.currency\n        inner join\n            `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_and_converted_currency_billing_date`  subscriptionupdates\n            on subscriptionupdates.guid = billingaffiliate.subscription_update_id\n        left join\n           `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_card` payments\n            on billingaffiliate.payment_guid = payments.guid\n        left join real_money_aggregated \n        on real_money_aggregated.subscription_update_id=subscriptionupdates.guid\n        and real_money_aggregated.account_id=billingaffiliate.account_id\n        inner join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` account_type_data \n        on billingaffiliate.account_id=account_type_data.account_id and  billingaffiliate.occured_date>=account_type_data.start_date and billingaffiliate.occured_date<=account_type_data.end_date\n        where object = 'subscription' and not exists (select invoice_id from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` invalid where invalid.invoice_id=billingaffiliate.invoice_id and object='refundForInvoice') ),\n\n\nbilling_affiliate_to_deduplicate as (\n\n    select *, row_number() over (partition by subscription_update_id, has_partner_paid order by start_date desc) rn from billing_affiliate\n  ) ,  \n\nbilling_affiliate_deduplicated as (\nselect *, \n(case when partner_discount is not null and ((occured_date>='2022-11-28'  and account_type='partner') or (occured_date>='2023-02-10' and account_type='tech-partner')) then 0.1*wapi_transactions_in_rubles end) as wapi_discount_for_partners\nfrom billing_affiliate_to_deduplicate where rn=1),\n\n\nbalance_spending_partner_and_client as (\nselect subscription_owner as account_id, \noccured_date, \nsubscription_id,  \nsubscription_update_id,\naction,\nmax(partner_discount) as partner_discount,\nsum(good_balance_spent) as good_balance_spent, \nmax(wapi_transactions_in_rubles) as wapi_transactions_in_rubles,\nmax(sum_in_rubles_full_subscription) as sum_in_rubles_full_subscription,\nmax(sum_in_rubles_full_subscription-wapi_transactions_in_rubles) as subscription_sum,\nmax(wapi_discount_for_partners)  as wapi_discount_for_partners,\nmax(is_subscription_currency_the_same_as_billing_affilate) as is_subscription_currency_the_same_as_billing_affilate\nfrom billing_affiliate_deduplicated        \nwhere (has_partner_paid=1 or (has_partner_paid=0 and subscription_owner=real_money_account_id))\ngroup by 1,2,3,4,5\n),\n\n--\u044d\u0442\u043e\u0442 \u043f\u043e\u0434\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0443\u0436\u0435\u043d \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c \u0438 \u0445\u043e\u0440\u043e\u0448\u0438\u043c\u0438 \u0431\u043e\u043d\u0443\u0441\u0430\u043c\u0438 (\u043e\u043a\u043e\u043b\u043e 4 \u043e\u043f\u043b\u0430\u0442)\nbalance_spending_standart as (\nselect subscription_owner as account_id, \noccured_date, \nsubscription_id,  \nsubscription_update_id,\naction,\nmax(partner_discount) as partner_discount,\nmax(good_balance_spent) as good_balance_spent, \nmax(wapi_transactions_in_rubles) as wapi_transactions_in_rubles,\nmax(sum_in_rubles_full_subscription) as sum_in_rubles_full_subscription,\nmax(sum_in_rubles_full_subscription-wapi_transactions_in_rubles) as subscription_sum  ,\nmax(wapi_discount_for_partners)  as wapi_discount_for_partners,\nmax(is_subscription_currency_the_same_as_billing_affilate) as is_subscription_currency_the_same_as_billing_affilate\nfrom billing_affiliate_deduplicated        \nwhere has_partner_paid=2\ngroup by 1,2,3,4,5),\n\nall_balance_spending as (\n    select * from balance_spending_partner_and_client\n    union all \n    select * from balance_spending_standart\n),\n\n\ngood_balance_spent_aggregated as (\nselect account_id,          -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\noccured_date,               -- \u0414\u0430\u0442\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\nsubscription_id,            -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\naction,                     -- \u041a\u0430\u043a\u043e\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043e?\nsubscription_update_id,     -- ID \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\nmax(partner_discount) as partner_discount,                                  -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\nsum(subscription_sum) as subscription_sum_only,                             -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nsum(wapi_transactions_in_rubles) as wapi_transactions_in_rubles,            -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\nsum(sum_in_rubles_full_subscription) as sum_in_rubles_full_subscription,    -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0431\u0430\u043b\u0430\u043d\u0441\u043e\u043c WABA\nsum(good_balance_spent) as good_balance_spent,                              -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432\nmax(wapi_discount_for_partners)  as wapi_discount_for_partners,             -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0437\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\nmax(is_subscription_currency_the_same_as_billing_affilate) as is_subscription_currency_the_same_as_billing_affilate -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0442\u0430\u043a\u0430\u044f \u0436\u0435, \u043a\u0430\u043a \u0432 billingAffiliate?\n from all_balance_spending\n group by 1,2,3,4,5\n),\n\ngood_balance_aggregated as (\n\nselect *,\n (1-coalesce(partner_discount,0)) * subscription_sum_only as subscription_sum\n from good_balance_spent_aggregated)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u043f\u043e \u0431\u0438\u043b\u043b\u0438\u043d\u0433\u0443 \u0441 \u0441\u0443\u043c\u043c\u043e\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u0435\u043d\u0435\u0433\nselect * from good_balance_aggregated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_billing_date`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:06.517549Z", "completed_at": "2025-05-21T12:31:06.527955Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.574498Z", "completed_at": "2025-05-21T12:31:06.574523Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.18931007385253906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_billing_affiliate_subscription_payments_real_money_with_who_paid", "compiled": true, "compiled_code": "/*\n\u041c\u043e\u0434\u0435\u043b\u044c \u043d\u0443\u0436\u043d\u0430 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432\n\n\n*/\nWITH real_money_aggregated AS ( --\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u0441\u0443\u043c\u043c\u0435 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 account_id/subscription_update_id\n                              SELECT account_id\n                                   , subscription_update_id\n                                   , sum(good_balance_spent) AS good_balance_spent\n                              FROM `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_track_real_money_spending`\n                              GROUP BY 1, 2\n                              ),\n     billing_affiliate AS ( --\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0441 \u0431\u043e\u043d\u0443\u0441\u043d\u043e\u0433\u043e/\u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u043e\u0433\u043e \u0441\u0447\u0435\u0442\u0430\n/*\n\nhas_partner_paid \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c 3 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: 0,1,2\n0 - \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441 \u0431\u043e\u043d\u0443\u0441\u043d\u043e\u0433\u043e \u0441\u0447\u0435\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0423 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u041d\u0415 \u041f\u0410\u0420\u0422\u041d\u0415\u0420\u0410) \u0435\u0441\u0442\u044c \u043f\u0430\u0440\u0442\u043d\u0435\u0440. \u041f\u0430\u0440\u0442\u043d\u0435\u0440 \u043e\u043f\u043b\u0430\u0442\u0438\u043b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0431\u043e\u043d\u0443\u0441\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041f\u0430\u0440\u0442\u043d\u0435\u0440 \u041d\u0415 \u043c\u043e\u0436\u0435\u0442 \u043e\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0446\u0435\u043b\u0438\u043a\u043e\u043c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0431\u043e\u043d\u0443\u0441\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041a\u0430\u043a\u0443\u044e-\u0442\u043e \u0447\u0430\u0441\u0442\u044c \u043e\u043d \u041e\u0411\u042f\u0417\u0410\u041d \u043e\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u0441\u043e \u0441\u0432\u043e\u0435\u0433\u043e \u0441\u0447\u0435\u0442\u0430. \u0417\u0434\u0435\u0441\u044c \u0443\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u043b \u043a\u043b\u0438\u0435\u043d\u0442 \u043d\u0430 \u0434\u0430\u043d\u043d\u0443\u044e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443.\n1 - \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u043e\u0433\u043e \u0441\u0447\u0435\u0442\u0430. \u0423 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0435\u0441\u0442\u044c \u043f\u0430\u0440\u0442\u043d\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u043b \u0437\u0430 \u0434\u043e\u0447\u043a\u0443 (\u0434\u043e\u0447\u043a\u0438, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u043b\u0430\u0442\u0438\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440). \u0417\u0434\u0435\u0441\u044c \u0443\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u043b \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u043d\u0430 \u0434\u0430\u043d\u043d\u0443\u044e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443.\n2 - \u043a\u043b\u0438\u0435\u043d\u0442 \u0438\u043b\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u043b \u0437\u0430 \u0441\u0435\u0431\u044f. \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0411\u041e\u041d\u0423\u0421\u041d\u0410\u042f \u0447\u0430\u0441\u0442\u044c. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u043b \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 3000, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 1900 - \u0431\u043e\u043d\u0443\u0441\u044b, 1100 - \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0435\u043d\u044c\u0433\u0438. \u0421\u044e\u0434\u0430 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 1900. \u0427\u0430\u0441\u0442\u044c \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 (int_payments_billing_affiliate_subscription_payments_real_money_bills_and_payments_with_balance)\n\n*/\n\n                              SELECT billingaffiliate.account_id            -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n                                   , billingaffiliate.subscription_owner    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n                                   , subscriptionupdates.paid_at_billing_date AS occured_date           -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f\n                                   , subscriptionupdates.paid_at_billing      AS occured_at             -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f (04.03.2025)\n                                   , subscriptionupdates.guid                 AS subscription_update_id -- ID \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\n                                   , subscriptionupdates.subscription_id    -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n                                   , action -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\n                                   , (\n                                  CASE\n                                      WHEN billingaffiliate.currency = 'RUR'\n                                          THEN billingaffiliate.sum\n                                      WHEN rur IS NOT NULL\n                                          THEN (billingaffiliate.sum) * rur\n                                          --\u041d\u0438\u0436\u0435 \u043b\u0435\u0433\u0430\u0441\u0438, \u043e\u0442\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043b\u043e \u0440\u0430\u043d\u044c\u0448\u0435, \u043a\u043e\u0433\u0434\u0430 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u043d\u0435 \u0431\u044b\u043b\u043e \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0435\u0440\u0438\u043e\u0434\u044b\n                                          \n                                      WHEN billingaffiliate.currency = 'EUR' AND rur IS NULL\n                                          THEN (billingaffiliate.sum) * 85\n                                      WHEN billingaffiliate.currency = 'USD' AND rur IS NULL\n                                          THEN (billingaffiliate.sum) * 75\n                                      WHEN billingaffiliate.currency = 'KZT' AND rur IS NULL\n                                          THEN (billingaffiliate.sum) * 0.24\n                                      END\n                                  )                                           AS sum_in_rubles                      -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n                                   , subscriptionupdates.sum_in_rubles        AS sum_in_rubles_full_subscription    -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0431\u0435\u0437 \u0441\u043a\u0438\u0434\u043e\u043a\n                                   , subscriptionupdates.sum                  AS subscriptionupdates_original_sum   -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0438\u0437 subscriptionUpdates\n                                   , subscriptionupdates.wapi_original_sum    AS wapi_original_sum                  -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\n                                   , billingaffiliate.sum                     AS billing_affiliate_original_sum     -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0438\u0437 billingAffiliate\n                                   , billingaffiliate.currency                AS billingaffiliate_currency          -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0438\u0437 billingAffiliate\n                                   , subscriptionupdates.currency             AS subscription_updates_currency      -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0438\u0437 subscriptionUpdates\n                                   , (\n                                  CASE\n                                      WHEN\n                                          payments.sum = 0 -- \u0412 \u0442\u0430\u0431\u043b\u0438\u0447\u043a\u0435 payments account_id  = \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \n                                                  AND payments.account_id = billingaffiliate.account_id\n                                                  AND abs(billingaffiliate.sum) != subscriptionupdates.sum --\u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442\n                                                  AND account_type NOT IN ('partner', 'tech-partner')\n                                                  AND payments.partner_account_id IS NOT NULL\n                                                                                             THEN 0\n                                      WHEN\n                                          payments.sum = 0 --\u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442\n                                                  AND payments.account_id != billingaffiliate.account_id\n                                                  AND abs(billingaffiliate.sum) != subscriptionupdates.sum --\u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442\n                                                                                             THEN 1\n                                      WHEN billingaffiliate.account_id != subscription_owner THEN 1\n                                      ELSE 2\n                                      END\n                                  )                                           AS has_partner_paid   -- \u041c\u0435\u0442\u0440\u0438\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043a\u0442\u043e \u0438 \u043a\u0430\u043a \u043f\u043b\u0430\u0442\u0438\u043b. \u041e\u043f\u0438\u0441\u0430\u043d\u0430 \u0432\u044b\u0448\u0435\n                                   , (\n                                  CASE\n                                      WHEN billingaffiliate.currency = 'RUR'\n                                          THEN real_money_aggregated.good_balance_spent\n                                      WHEN rur IS NOT NULL\n                                          THEN (real_money_aggregated.good_balance_spent) * rur\n                                      WHEN billingaffiliate.currency = 'EUR' AND rur IS NULL\n                                          THEN (real_money_aggregated.good_balance_spent) * 85\n                                      WHEN billingaffiliate.currency = 'USD' AND rur IS NULL\n                                          THEN (real_money_aggregated.good_balance_spent) * 75\n                                      WHEN billingaffiliate.currency = 'KZT' AND rur IS NULL\n                                          THEN (real_money_aggregated.good_balance_spent) * 0.24\n                                      END\n                                  )                                           AS good_balance_spent     -- \u0421\u0443\u043c\u043c\u0430 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435\n                                   , real_money_aggregated.account_id         AS real_money_account_id  --TODO \u0434\u0440\u043e\u043f\u043d\u0443\u0442\u044c \u043f\u043e\u043b\u0435, \u043e\u043d\u043e \u0440\u0430\u0432\u043d\u043e billingAffiliate.accountId\n                                   , wapi_transactions_in_rubles    -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n                                   , partner_discount               -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n                                   , start_date                     -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n                                   , account_type                   -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n\n                              FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate`  billingaffiliate\n        LEFT JOIN\n            `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted\n                              ON exchange_rates_unpivoted._ibk = billingaffiliate.occured_date\n                                  AND exchange_rates_unpivoted.currency = billingaffiliate.currency\n                                  INNER JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_and_converted_currency_billing_date` subscriptionupdates\n                                                            ON subscriptionupdates.guid = billingaffiliate.subscription_update_id\n                                  \n                                  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_card` payments ON subscriptionupdates.activation_reason_id = payments.guid\n                                  \n                                  LEFT JOIN real_money_aggregated ON real_money_aggregated.subscription_update_id=subscriptionupdates.guid\n                                                                    AND real_money_aggregated.account_id=billingaffiliate.account_id\n                                  INNER JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` account_type_data\n                                                ON billingaffiliate.account_id=account_type_data.account_id AND billingaffiliate.occured_date>=account_type_data.start_date AND billingaffiliate.occured_date<=account_type_data.end_date\n                              WHERE OBJECT = 'subscription'\n                                AND NOT EXISTS (SELECT invoice_id FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` invalid WHERE invalid.invoice_id=billingaffiliate.invoice_id\n                                AND OBJECT ='refundForInvoice')\n                              ),\n\n\n     billing_affiliate_to_deduplicate AS (\n                              SELECT *\n                                   , row_number() OVER (PARTITION BY subscription_update_id, has_partner_paid ORDER BY start_date DESC) AS rn\n                              FROM billing_affiliate\n                              ),\n\n     billing_affiliate_deduplicated AS (\n                              SELECT *\n                              from  billing_affiliate_to_deduplicate\n                              WHERE rn = 1\n                              )\n                              -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u0442\u043e \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043b\u0430\u0442\u0438\u043b \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u043d\u0435\u0433 \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nSELECT * --TODO \u0443\u0431\u0440\u0430\u0442\u044c rn\nFROM billing_affiliate_deduplicated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_with_who_paid`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:06.522899Z", "completed_at": "2025-05-21T12:31:06.573830Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.616814Z", "completed_at": "2025-05-21T12:31:06.616824Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.19028806686401367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_billing_affiliate_subscription_payments_real_money_with_who_paid_billing_date_subsription_start", "compiled": true, "compiled_code": "with real_money_aggregated as (\n    select account_id,\n    subscription_update_id,\n    sum(good_balance_spent) as good_balance_spent \n    from  `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_track_real_money_spending`\n    group by 1,2\n),\nbilling_affiliate as (\n        select\n            billingaffiliate.account_id,            -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n            billingaffiliate.subscription_owner,    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n            subscriptionupdates.paid_at_billing_completed_date as occured_date, -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f\n            subscriptionupdates.guid as subscription_update_id,                 -- ID \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\n            subscriptionupdates.subscription_id,    -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n            action,                                 -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439       \n                (case\n                    when billingaffiliate.currency = 'RUR'\n                    then billingaffiliate.sum\n                    when rur is not null\n                    then (billingaffiliate.sum) * rur\n                    when billingaffiliate.currency = 'EUR' and rur is null\n                    then (billingaffiliate.sum) * 85\n                    when billingaffiliate.currency = 'USD' and rur is null\n                    then (billingaffiliate.sum) * 75\n                    when billingaffiliate.currency = 'KZT' and rur is null\n                    then (billingaffiliate.sum) * 0.24\n                end\n            ) as sum_in_rubles,                                                     -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n            subscriptionupdates.sum_in_rubles as sum_in_rubles_full_subscription,   -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0431\u0435\u0437 \u0441\u043a\u0438\u0434\u043e\u043a\n            subscriptionupdates.sum as subscriptionupdates_original_sum,            -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0438\u0437 subscriptionUpdates\n            subscriptionupdates.wapi_original_sum as wapi_original_sum,             -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\n            billingaffiliate.sum as billing_affiliate_original_sum,                 -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0438\u0437 billingAffiliate\n            billingaffiliate.currency as billingaffiliate_currency,                 -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0438\u0437 billingAffiliate\n            subscriptionupdates.currency as subscription_updates_currency,          -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0438\u0437 subscriptionUpdates\n            (\n                case\n                    when\n                        payments.sum = 0\n                        and payments.account_id = billingaffiliate.account_id\n                        and abs(billingaffiliate.sum) != subscriptionupdates.sum\n                        and account_type not in ('partner','tech-partner')\n                        and payments.partner_account_id is not null\n                    then 0\n                    when\n                        payments.sum = 0\n                        and payments.account_id != billingaffiliate.account_id\n                        and abs(billingaffiliate.sum) != subscriptionupdates.sum\n                    then 1\n                    when billingaffiliate.account_id!=subscription_owner then 1\n                    else 2\n                end\n            ) as has_partner_paid,  -- \u041c\u0435\u0442\u0440\u0438\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043a\u0442\u043e \u0438 \u043a\u0430\u043a \u043f\u043b\u0430\u0442\u0438\u043b. \u041e\u043f\u0438\u0441\u0430\u043d\u0430 \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 int_payments_billing_affiliate_subscription_payments_real_money_with_who_paid\n         (\n                case\n                    when billingaffiliate.currency = 'RUR'\n                    then real_money_aggregated.good_balance_spent\n                    when rur is not null\n                    then (real_money_aggregated.good_balance_spent) * rur\n                    when billingaffiliate.currency = 'EUR' and rur is null\n                    then (real_money_aggregated.good_balance_spent) * 85\n                    when billingaffiliate.currency = 'USD' and rur is null\n                    then (real_money_aggregated.good_balance_spent) * 75\n                    when billingaffiliate.currency = 'KZT' and rur is null\n                    then (real_money_aggregated.good_balance_spent) * 0.24\n                end\n            ) as good_balance_spent,    -- \u0421\u0443\u043c\u043c\u0430 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435\n\n        real_money_aggregated.account_id as real_money_account_id,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0442\u0440\u0430\u0442\u0438\u043b \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0435\u043d\u044c\u0433\u0438\n        wapi_transactions_in_rubles,-- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n        partner_discount,           -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        start_date,                 -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        account_type                -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n\n        from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate`  billingaffiliate\n        left join\n            `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted\n            on exchange_rates_unpivoted._ibk = billingaffiliate.occured_date\n            and exchange_rates_unpivoted.currency = billingaffiliate.currency\n        inner join\n            `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_and_converted_currency_billing_date`  subscriptionupdates\n            on subscriptionupdates.guid = billingaffiliate.subscription_update_id\n        left join\n           `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_card` payments\n            on subscriptionupdates.activation_reason_id = payments.guid\n        left join real_money_aggregated \n        on real_money_aggregated.subscription_update_id=subscriptionupdates.guid\n        and real_money_aggregated.account_id=billingaffiliate.account_id\n        inner join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` account_type_data \n        on billingaffiliate.account_id=account_type_data.account_id and  billingaffiliate.occured_date>=account_type_data.start_date and billingaffiliate.occured_date<=account_type_data.end_date\n        where object = 'subscription' and not exists (select invoice_id from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` invalid where invalid.invoice_id=billingaffiliate.invoice_id and object='refundForInvoice') ),\n\n\nbilling_affiliate_to_deduplicate as (\n    select *, row_number() over (partition by subscription_update_id, has_partner_paid order by start_date desc) rn from billing_affiliate\n    ) ,  \n\nbilling_affiliate_deduplicated as (\n    select *, \n    from billing_affiliate_to_deduplicate where rn=1    -- \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u0440\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0447\u0430\u043b\u0438\u0441\u044c \u043f\u043e\u0437\u0436\u0435 \u0432\u0441\u0435\u0433\u043e\n    )\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u043f\u043e \u0431\u0438\u043b\u043b\u0438\u043d\u0433\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u0442\u043e \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043b\u0430\u0442\u0438\u043b \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u043d\u0435\u0433 \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nselect * from billing_affiliate_deduplicated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_with_who_paid_billing_date_subsription_start`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:06.528986Z", "completed_at": "2025-05-21T12:31:06.615716Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.657623Z", "completed_at": "2025-05-21T12:31:06.657634Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2207472324371338, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_billing_affiliate_subscription_payments_without_duplicated_payments", "compiled": true, "compiled_code": "with real_money_aggregated as (\n    select account_id,\n    subscription_update_id,\n    sum(good_balance_spent) as good_balance_spent \n    from  `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_track_real_money_spending_without_duplicate_payments`\n    group by 1,2\n),\nbilling_affiliate as (\n        select\n            billingaffiliate.account_id,\n            billingaffiliate.subscription_owner,\n            subscriptionupdates.paid_at_billing_date as occured_date,\n            paid_at_billing_completed_date as occured_date_change_in_product,\n            subscriptionupdates.guid as subscription_update_id,\n            subscriptionupdates.subscription_id,\n            action,\n            (case when subscriptionupdates.currency=billingaffiliate.currency then True else False end) as is_subscription_currency_the_same_as_billing_affilate, --\u043d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043b\u0443\u0447\u0430\u0435\u0432, \u043a\u043e\u0433\u0434\u0430 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432\u0430\u043b\u044e\u0442\u0430 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0432\u0430\u043b\u044e\u0442\u044b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430. \u041f\u0440\u0438\u043c\u0435\u0440: \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0435\u0441\u043b\u0438 \u0443 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u041b\u041a \u0432 \u0440\u0443\u0431\u043b\u044f\u0445, \u0432 subscriptionUpdates \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0431\u0443\u0434\u0435\u0442 6000, \u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u0442 \u0432 KZT 6300 \u0440\u0443\u0431\u043b\u0435\u0439 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043a\u0443\u0440\u0441\u0430. \u0410 \u0443 \u043d\u0430\u0441 \u043c\u043d\u043e\u0433\u043e\u0435 \u0437\u0430\u0432\u044f\u0437\u0430\u043d\u043e \u043d\u0430 \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n                        (\n                case\n                    when billingaffiliate.currency = 'RUR'\n                    then billingaffiliate.sum\n                    when rur is not null\n                    then (billingaffiliate.sum) * rur\n                    when billingaffiliate.currency = 'EUR' and rur is null\n                    then (billingaffiliate.sum) * 85\n                    when billingaffiliate.currency = 'USD' and rur is null\n                    then (billingaffiliate.sum) * 75\n                    when billingaffiliate.currency = 'KZT' and rur is null\n                    then (billingaffiliate.sum) * 0.24\n                end\n            ) as sum_in_rubles,\n            (\n                case\n                    when billingaffiliate.currency = 'RUR'\n                    then billingaffiliate.sum - coalesce(abs(balance_to_withdraw), 0)\n                    when rur is not null\n                    then\n                        (billingaffiliate.sum - coalesce(abs(balance_to_withdraw), 0))\n                        * rur\n                    when billingaffiliate.currency = 'EUR' and rur is null\n                    then (billingaffiliate.sum - coalesce(balance_to_withdraw, 0)) * 85\n                    when billingaffiliate.currency = 'USD' and rur is null\n                    then (billingaffiliate.sum - coalesce(balance_to_withdraw, 0)) * 75\n                    when billingaffiliate.currency = 'KZT' and rur is null\n                    then\n                        (billingaffiliate.sum - coalesce(balance_to_withdraw, 0)) * 0.24\n                end\n            ) as sum_in_rubles_without_balance,\n\n            (\n                case\n                    when billingaffiliate.currency = 'RUR'\n                    then coalesce(abs(balance_to_withdraw), 0)\n                    when rur is not null\n                    then coalesce(abs(balance_to_withdraw), 0) * rur\n                    when billingaffiliate.currency = 'EUR' and rur is null\n                    then coalesce(abs(balance_to_withdraw), 0) * 85\n                    when billingaffiliate.currency = 'USD' and rur is null\n                    then coalesce(abs(balance_to_withdraw), 0) * 75\n                    when billingaffiliate.currency = 'KZT' and rur is null\n                    then coalesce(abs(balance_to_withdraw), 0) * 0.24\n                end\n            ) as balance_to_withdraw_in_rubles,\n            coalesce(balance_to_withdraw, 0) as balance_to_withdraw,\n            subscriptionupdates.sum_in_rubles as sum_in_rubles_full_subscription,\n            (\n                case\n                    when\n                        payments.sum = 0\n                        and payments.account_id = billingaffiliate.account_id\n                        and abs(billingaffiliate.sum) != subscriptionupdates.sum\n                        and balance_to_withdraw != 0\n                    then 0\n                    when\n                        payments.sum = 0\n                        and payments.account_id != billingaffiliate.account_id\n                        and abs(billingaffiliate.sum) != subscriptionupdates.sum\n                        and balance_to_withdraw != 0\n                    then 1\n                    when billingaffiliate.account_id!=subscription_owner then 1\n                    else 2\n                end\n            ) as has_partner_paid,\n         (\n                case\n                    when billingaffiliate.currency = 'RUR'\n                    then real_money_aggregated.good_balance_spent\n                    when rur is not null\n                    then (real_money_aggregated.good_balance_spent) * rur\n                    when billingaffiliate.currency = 'EUR' and rur is null\n                    then (real_money_aggregated.good_balance_spent) * 85\n                    when billingaffiliate.currency = 'USD' and rur is null\n                    then (real_money_aggregated.good_balance_spent) * 75\n                    when billingaffiliate.currency = 'KZT' and rur is null\n                    then (real_money_aggregated.good_balance_spent) * 0.24\n                end\n            ) as good_balance_spent,\n\n        real_money_aggregated.account_id as real_money_account_id,\n        wapi_transactions_in_rubles,\n        partner_discount,\n        start_date,\n        account_type\n\n        from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate`  billingaffiliate\n        left join\n            `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted\n            on exchange_rates_unpivoted._ibk = billingaffiliate.occured_date\n            and exchange_rates_unpivoted.currency = billingaffiliate.currency\n        inner join\n            `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_and_converted_currency_billing_date`  subscriptionupdates\n            on subscriptionupdates.guid = billingaffiliate.subscription_update_id\n        left join\n           `dwh-wazzup`.`dbt_nbespalov`.`stg_payments_card` payments\n            on billingaffiliate.payment_guid = payments.guid\n        left join real_money_aggregated \n        on real_money_aggregated.subscription_update_id=subscriptionupdates.guid\n        and real_money_aggregated.account_id=billingaffiliate.account_id\n        inner join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` account_type_data \n        on billingaffiliate.account_id=account_type_data.account_id and  billingaffiliate.occured_date>=account_type_data.start_date and billingaffiliate.occured_date<=account_type_data.end_date\n        where object = 'subscription' and not exists (select invoice_id from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` invalid where invalid.invoice_id=billingaffiliate.invoice_id and object='refundForInvoice') ),\n\n\nbilling_affiliate_to_deduplicate as (\n\n    select *, row_number() over (partition by subscription_update_id, has_partner_paid order by start_date desc) rn from billing_affiliate\n  ) ,  \n\nbilling_affiliate_deduplicated as (\nselect *, \n(case when partner_discount is not null and ((occured_date>='2022-11-28'  and account_type='partner') or (occured_date>='2023-02-10' and account_type='tech-partner')) then 0.1*wapi_transactions_in_rubles end) as wapi_discount_for_partners\nfrom billing_affiliate_to_deduplicate where rn=1),\n\n\nbalance_spending_partner_and_client as (\nselect subscription_owner as account_id, \noccured_date, \nsubscription_id,  \nsubscription_update_id,\naction,\nmax(partner_discount) as partner_discount,\nsum(good_balance_spent) as good_balance_spent, \nmax(wapi_transactions_in_rubles) as wapi_transactions_in_rubles,\nmax(sum_in_rubles_full_subscription) as sum_in_rubles_full_subscription,\nmax(sum_in_rubles_full_subscription-wapi_transactions_in_rubles) as subscription_sum,\nmax(wapi_discount_for_partners)  as wapi_discount_for_partners,\nmax(is_subscription_currency_the_same_as_billing_affilate) as is_subscription_currency_the_same_as_billing_affilate\nfrom billing_affiliate_deduplicated        \nwhere (has_partner_paid=1 or (has_partner_paid=0 and subscription_owner=real_money_account_id))\ngroup by 1,2,3,4,5\n),\n\n--\u044d\u0442\u043e\u0442 \u043f\u043e\u0434\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0443\u0436\u0435\u043d \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c \u0438 \u0445\u043e\u0440\u043e\u0448\u0438\u043c\u0438 \u0431\u043e\u043d\u0443\u0441\u0430\u043c\u0438 (\u043e\u043a\u043e\u043b\u043e 4 \u043e\u043f\u043b\u0430\u0442)\nbalance_spending_standart as (\nselect subscription_owner as account_id, \noccured_date, \nsubscription_id,  \nsubscription_update_id,\naction,\nmax(partner_discount) as partner_discount,\nmax(good_balance_spent) as good_balance_spent, \nmax(wapi_transactions_in_rubles) as wapi_transactions_in_rubles,\nmax(sum_in_rubles_full_subscription) as sum_in_rubles_full_subscription,\nmax(sum_in_rubles_full_subscription-wapi_transactions_in_rubles) as subscription_sum  ,\nmax(wapi_discount_for_partners)  as wapi_discount_for_partners,\nmax(is_subscription_currency_the_same_as_billing_affilate) as is_subscription_currency_the_same_as_billing_affilate\nfrom billing_affiliate_deduplicated        \nwhere has_partner_paid=2\ngroup by 1,2,3,4,5),\n\nall_balance_spending as (\n    select * from balance_spending_partner_and_client\n    union all \n    select * from balance_spending_standart\n),\n\n\ngood_balance_spent_aggregated as (\nselect account_id,      -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\noccured_date,           -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f\nsubscription_id,        -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\naction,                 -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\nsubscription_update_id, -- ID \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\nmax(partner_discount) as partner_discount,                                  -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\nsum(subscription_sum) as subscription_sum_only,                             -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\nsum(wapi_transactions_in_rubles) as wapi_transactions_in_rubles,            -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\nsum(sum_in_rubles_full_subscription) as sum_in_rubles_full_subscription,    -- \u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430, \u0437\u0430\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u0437\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435\nsum(good_balance_spent) as good_balance_spent,                              -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432\nmax(wapi_discount_for_partners)  as wapi_discount_for_partners,             -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0437\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\nmax(is_subscription_currency_the_same_as_billing_affilate) as is_subscription_currency_the_same_as_billing_affilate -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0442\u0430\u043a\u0430\u044f \u0436\u0435, \u043a\u0430\u043a \u0432\u0430\u043b\u044e\u0442\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0432 billingAffiliate?\n from all_balance_spending\n group by 1,2,3,4,5\n),\n\ngood_balance_aggregated as (\n\nselect *,\n (1-coalesce(partner_discount,0)) * subscription_sum_only as subscription_sum   -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\n from good_balance_spent_aggregated)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043b\u0430\u0442\u0438\u043b\u0438 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u043d\u0435\u0433 \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439\nselect * from good_balance_aggregated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_without_duplicated_payments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:06.571343Z", "completed_at": "2025-05-21T12:31:06.656294Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.698096Z", "completed_at": "2025-05-21T12:31:06.698105Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2561912536621094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_bills_only_valid", "compiled": true, "compiled_code": "with bills_and_account_type as (\n    select \n        bills.account_id,    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        bills.paid_date,                -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n        coalesce(bills.completed_at, cast(bills.paid_date as timestamp)) as paid_at,     -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u0441\u0447\u0435\u0442\u0430. \u0423 \u043d\u0435\u0433\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432 \u043d\u0435 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f completed_at, \u043d\u043e \u043e\u043f\u043b\u0430\u0442\u0430 \u043f\u0440\u043e\u0448\u043b\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e (05.03.2024)\n        bills.currency,                 -- \u0412\u0430\u043b\u044e\u0442\u0430\n        bills.sum_in_rubles,            -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n        wapi_transactions_in_rubles,    -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n        wapi_original_sum,              -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\n        bills.original_sum,             -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n        bills.guid,                     -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0447\u0435\u0442\u0430. \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f Postgress \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 string\n        bills.subscription_id,          -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        bills.updated_at,               -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0447\u0435\u0442\u0430\n        billing_date_subscription_start as completed_date,      -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0441\u0447\u0435\u0442\u0430\n        subscription_updates.guid as subscriptionupdates_guid,  -- ID \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\n        subscription_updates.action,    -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\n        subscription_updates.sum_in_rubles as sum_in_rubles_full_subscription,  -- \u0421\u0443\u043c\u043c\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445, \u0437\u0430\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u0437\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435\n        subscription_updates.original_sum as subscription_updates_original_sum, -- \u0421\u0443\u043c\u043c\u0430 \u0438\u0437 subscriptionUpdates\n        account_type_data.account_type, -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        partner_discount,   -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        start_date,         -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        (case when partner_discount is not null and ((bills.paid_date>='2022-11-28'  and account_type='partner') or (bills.paid_date>='2023-02-10' and account_type='tech-partner')) then 0.1*wapi_transactions_in_rubles end) as wapi_discount_for_partners, --\u0441\u043a\u0438\u0434\u043a\u0443 \u0434\u043b\u044f \u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432 \u0432\u0432\u0435\u043b\u0438 2022-11-28, \u0434\u043b\u044f \u0442\u0435\u0445. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432 2023-02-10\n        subscription_updates.sum_in_rubles-coalesce(subscription_updates.wapi_transactions_in_rubles,0) as subscription_sum_in_rubles,    -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n        subscription_updates.original_sum-coalesce(subscription_updates.wapi_original_sum,0) as subscription_sum_original                 -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_bills` bills\n    left join `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_and_converted_currency_billing_date` subscription_updates\n    on bills.guid=subscription_updates.activation_reason_id\n    inner join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` account_type_data \n    on account_type_data.account_id=bills.account_id and  bills.paid_date>=account_type_data.start_date and bills.paid_date<=account_type_data.end_date\n    where status='paid'\n    and id!=101910),\n\nbills_and_account_type_to_deduplicate as (\nselect *, row_number() over (partition by subscriptionupdates_guid order by paid_date, start_date desc) rn from  bills_and_account_type  )\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0432\u0430\u043b\u0438\u0434\u043d\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432\nselect * from bills_and_account_type_to_deduplicate\nwhere rn=1  -- \u0411\u0435\u0440\u0443\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0430\u043c\u044b\u0435 \u043f\u043e\u0437\u0434\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043e subscriptionUpdates.guid", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_bills_only_valid`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:06.778873Z", "completed_at": "2025-05-21T12:31:06.787835Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.794663Z", "completed_at": "2025-05-21T12:31:06.794675Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.18286442756652832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_card_with_account_type_subscription_only", "compiled": true, "compiled_code": "with card_pay as (select  stg_billingPackages.account_id,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n            paid_date,                      -- \u0414\u0430\u0442\u0430 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0430 \u0432 state = completed\n            payments.paid_at,               -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0430 \u0432 state = completed (05.03.2025)\n            payments.sum_in_rubles,         -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n            payments.subscription_id,       -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n            subscription_updates.action,    -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\n            payments.original_sum,          -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n            'card' as data_source,          -- \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043e\u043f\u043b\u0430\u0442\u044b\n            subscription_updates.guid as subscription_update_id,                    -- ID \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\n            subscription_updates.sum as sum_in_rubles_full_subscription,            -- \u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0437\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n            subscription_updates.original_sum as subscription_updates_original_sum, -- \u0421\u0443\u043c\u043c\u0430 \u0438\u0437 subscriptionUpdates\n            wapi_transactions_in_rubles,    -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n            wapi_original_sum,              -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\n            partner_discount,               -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n            account_type,                   -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n            payments.currency,              -- \u0412\u0430\u043b\u044e\u0442\u0430\n            (case when partner_discount is not null and ((payments.paid_date>='2022-11-28'  and account_type='partner') or (payments.paid_date>='2023-02-10' and account_type='tech-partner')) then 0.1*wapi_transactions_in_rubles end) as wapi_discount_for_partners, --\u0441\u043a\u0438\u0434\u043a\u0443 \u0434\u043b\u044f \u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432 \u0432\u0432\u0435\u043b\u0438 2022-11-28, \u0434\u043b\u044f \u0442\u0435\u0445. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432 2023-02-10\n            subscription_updates.sum_in_rubles-coalesce(subscription_updates.wapi_transactions_in_rubles,0) as subscription_sum_in_rubles,  -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n            subscription_updates.original_sum-coalesce(subscription_updates.wapi_original_sum,0) as subscription_sum_original,  -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n            row_number() over (partition by  subscription_updates.guid  order by paid_date,start_date desc) as rn   -- \u0411\u0435\u0440\u0443\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0430\u043c\u044b\u0435 \u043f\u043e\u0437\u0434\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043e subscriptionUpdates.guid\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_card` payments\n    inner join `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_and_converted_currency_billing_date` subscription_updates\n    on payments.guid=subscription_updates.activation_reason_id\n    left join `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` stg_billingPackages \n    on stg_billingPackages.guid=subscription_updates.subscription_id\n     inner join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` account_type_data \n    on account_type_data.account_id=payments.account_id and  payments.paid_date>=account_type_data.start_date and payments.paid_date<=account_type_data.end_date\n    where payments.subscription_id is not null and payments.sum_in_rubles!=0),\n\ncard_pay_deduplicated as (\n    select * from card_pay\n    where rn=1\n)\n    -- \u041f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u043e\u043f\u043b\u0430\u0442 \u0431\u0435\u0437 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439\nselect * from card_pay_deduplicated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_card_with_account_type_subscription_only`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:06.783527Z", "completed_at": "2025-05-21T12:31:06.794028Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.801184Z", "completed_at": "2025-05-21T12:31:06.801195Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.1851181983947754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_current_waba_balance_by_month", "compiled": true, "compiled_code": "with amount_balance_by_month as (\nselect date_trunc(waba_transactions.transaction_date, month) as paid_month, sum(amount*coalesce(RUR,1)) as sum_in_rubles\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_transactions` waba_transactions\nleft join  `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_sessions` waba_sessions\non waba_sessions.transaction_id = waba_transactions.id\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billing_packages on billing_packages.guid=waba_transactions.subscription_id\nleft join   `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates \non exchange_rates.currency=waba_transactions.currency and exchange_rates.data=waba_transactions.transaction_date\nwhere waba_sessions.state is distinct from 'canceled'\nand amount!=0 \nand subscription_id is distinct from '57bf9315-afcb-4421-a18f-b053097dec27'\nand not exists \n(select account_id \nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` partner_type_and_account_type \nwhere billing_packages.account_id=partner_type_and_account_type.account_id and account_type='employee') \ngroup by 1\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043e\u0431\u0449\u0438\u043c \u0431\u0430\u043b\u0430\u043d\u0441\u043e\u043c WABA \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c\nselect *, sum(sum_in_rubles) over (order by paid_month asc) balance from amount_balance_by_month", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_current_waba_balance_by_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:06.789283Z", "completed_at": "2025-05-21T12:31:06.800811Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.843173Z", "completed_at": "2025-05-21T12:31:06.843183Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1408703327178955, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_subscription_history_payments_only", "compiled": true, "compiled_code": "with payments_posts as  (select  distinct\n                              datetime as event_time,\n                              case when event like '%year%' then 'payment_annually'\n                                   when event like '%payment%' then 'payment_monthly'\n                              end event_name,\n                    cmuserid,\n                    cast(datetime as date) event_date\n                   from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_conversions_to_post`\n                   where cast(datetime as date) >= registration_date\n                   and event like '%payment%'\n                   order by cmuserid\n\n) ,events as (select \n                    distinct\n                    date_trunc(cast(datetime as date),month) dmonth,\n                    all_data.cmuserid,\n                    all_data.event,\n                    all_data.datetime\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test` all_data\nwhere event like '%payment.success%')\n    ,unclear_payments as ( --\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0442\u043e\u0432\u0430\u0440\u0438\u0449\u0435\u0439 \u0441\u043e \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u043f\u043b\u0430\u0442 \u0432 \u043c\u0435\u0441\u044f\u0446, \u0447\u0442\u043e\u0431\u044b \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u0445 \u0438\u0445 \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c (\u043f\u043e\u043a\u0430 \u043d\u0435 \u0432\u044b\u044f\u0441\u043d\u0435\u043d\u043e, \u0447\u0442\u043e \u044d\u0442\u043e \u0437\u0430 \u043e\u043f\u043b\u0430\u0442\u044b)\nselect dmonth,\n      cmuserid,\n      count(*)\nfrom events\ngroup by dmonth,cmuserid\nhaving count(*)>2\n)\n, payments_info as (\nselect subscription_all.cmuserid,\n      event_name,\n      event_time,\n      event_date,\n      lead(event_name) over (partition by subscription_all.cmuserid order by event_time) as next_event,\n      lead(event_date) over (partition by subscription_all.cmuserid order by event_time) as next_event_date,\n      event_date as subscription_start,\n      case when event_name = 'payment_monthly' then date_add(event_date,interval 1 month)\n           when event_name = 'payment_annually' then date_add(event_date,interval 1 year)\n      end as subscription_end,\nfrom payments_posts subscription_all     \nleft join unclear_payments on subscription_all.cmuserid = unclear_payments.cmuserid\nwhere unclear_payments.cmuserid is null\n), defining_previous_due as (\n  select *,   lag(\n              case \n                    when event_name = 'payment_monthly' then date_add(event_date,interval 1 month)\n                    when event_name = 'payment_annually' then date_add(event_date,interval 1 year)\n                   \n          end) over (partition by cmuserid order by event_time) previous_due_date\n  from payments_info\n)\n,types_of_payments as (\n          select cmuserid,\n                subscription_end,\n                row_number() over (partition by cmuserid,subscription_end) rn,\n                event_name,\n                previous_due_date,\n                case   when subscription_start < previous_due_date then 'bought_while_active'\n                end status,\n                event_date,\n                next_event,\n                next_event_date\n          from defining_previous_due\n),subscriptions_info as (\n  select *,\n  case \n       when status = 'bought_while_active' then previous_due_date\n       else event_date\n       end as subscription_start\nfrom types_of_payments)\n, subscription_all as (\n    select cmuserid,\n            subscription_start as start_date,\n            case when event_name = 'payment_monthly' then date_add(subscription_start,interval 1 month)\n                   when event_name = 'payment_annually' then date_add(subscription_start,interval 1 year)\n                 end as end_date,\n            event_date,\n            status,\n            event_name,\n            next_event,\n            next_event_date\n    from subscriptions_info si\n    join `dwh-wazzup`.`analytics_tech`.`days_with_month_intervals`  month_intervals on event_date = month_intervals.date and month_intervals.rn =2 \n)\nselect *\nfrom subscription_all", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_subscription_history_payments_only`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:06.795405Z", "completed_at": "2025-05-21T12:31:06.842585Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.884176Z", "completed_at": "2025-05-21T12:31:06.884186Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.22514963150024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_subscription_history", "compiled": true, "compiled_code": "with payments_posts as  (select  distinct\n                              datetime as event_time,\n                              case when event like '%year%' then 'payment_annually'\n                                   when event like '%payment%' then 'payment_monthly'\n                                   else 'promo_tariff'\n                              end event_name,\n                    cmuserid,\n                    cast(datetime as date) event_date\n                   from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_conversions_to_post`\n                   where cast(datetime as date) >= registration_date\n                   order by cmuserid\n\n) ,events as (select \n                    distinct\n                    date_trunc(cast(datetime as date),month) dmonth,\n                    all_data.cmuserid,\n                    all_data.event,\n                    all_data.datetime\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test` all_data\nwhere event like '%payment.success%')\n    ,unclear_payments as ( --\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0442\u043e\u0432\u0430\u0440\u0438\u0449\u0435\u0439 \u0441\u043e \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u043f\u043b\u0430\u0442 \u0432 \u043c\u0435\u0441\u044f\u0446, \u0447\u0442\u043e\u0431\u044b \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u0445 \u0438\u0445 \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c (\u043f\u043e\u043a\u0430 \u043d\u0435 \u0432\u044b\u044f\u0441\u043d\u0435\u043d\u043e, \u0447\u0442\u043e \u044d\u0442\u043e \u0437\u0430 \u043e\u043f\u043b\u0430\u0442\u044b)\nselect dmonth,\n      cmuserid,\n      count(*)\nfrom events\ngroup by dmonth,cmuserid\nhaving count(*)>2\n)\n, payments_info as (\nselect subscription_all.cmuserid,\n      event_name,\n      event_time,\n      event_date,\n      lead(event_name) over (partition by subscription_all.cmuserid order by event_time) as next_event,\n      lead(event_date) over (partition by subscription_all.cmuserid order by event_time) as next_event_date,\n      event_date as subscription_start,\n      case when event_name = 'promo_tariff' and lead(event_name) over (partition by subscription_all.cmuserid order by event_time) like '%payment%' then lead(event_date) over (partition by subscription_all.cmuserid order by event_time)\n           when event_name = 'payment_monthly' then date_add(event_date,interval 1 month)\n           when event_name = 'payment_annually' then date_add(event_date,interval 1 year)\n           when event_name = 'promo_tariff' then date_add(event_date,interval 1 year)\n      end as subscription_end,\nfrom payments_posts subscription_all     \nleft join unclear_payments on subscription_all.cmuserid = unclear_payments.cmuserid\nwhere unclear_payments.cmuserid is null\n), defining_previous_due as (\n  select *,   lag(\n              case when event_name = 'promo_tariff' and next_event like '%payment%' then event_date\n                    when event_name = 'payment_monthly' then date_add(event_date,interval 1 month)\n                    when event_name = 'payment_annually' then date_add(event_date,interval 1 year)\n                    when event_name = 'promo_tariff' then date_add(event_date,interval 1 year)\n          end) over (partition by cmuserid order by event_time) previous_due_date\n  from payments_info\n)\n,types_of_payments as (\n          select cmuserid,\n                subscription_end,\n                row_number() over (partition by cmuserid,subscription_end) rn,\n                event_name,\n                previous_due_date,\n                case  when event_name = 'promo_tariff' and next_event like '%payment%' then 'paid_having_promo'\n                      when subscription_start < previous_due_date then 'bought_while_active'\n                end status,\n                event_date,\n                next_event,\n                next_event_date\n          from defining_previous_due\n),subscriptions_info as (\n  select *,\n  case \n       when status = 'bought_while_active' then previous_due_date\n       else event_date\n       end as subscription_start\nfrom types_of_payments)\n, subscription_all as (\n    select cmuserid,\n            subscription_start as start_date,\n            case  when event_name = 'promo_tariff' and next_event like '%payment%' then next_event_date\n                   when event_name = 'payment_monthly' then date_add(subscription_start,interval 1 month)\n                   when event_name = 'payment_annually' then date_add(subscription_start,interval 1 year)  \n                 when event_name = 'promo_tariff'   then date_add(subscription_start, interval 1 year)\n                 end as end_date,\n            event_date,\n            status,\n            event_name,\n            next_event,\n            next_event_date\n    from subscriptions_info si\n    join `dwh-wazzup`.`analytics_tech`.`days_with_month_intervals`  month_intervals on event_date = month_intervals.date and month_intervals.rn =2 \n)\nselect *\nfrom subscription_all", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_subscription_history`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:06.798397Z", "completed_at": "2025-05-21T12:31:06.843731Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.924041Z", "completed_at": "2025-05-21T12:31:06.924056Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.21802663803100586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_subscription_history_posts_only", "compiled": true, "compiled_code": "with payments_posts as  (select  distinct\n                              datetime as event_time,\n                              event as  event_name,\n                    cmuserid,\n                    cast(datetime as date) event_date\n                   from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_conversions_to_post`\n                   where cast(datetime as date) >= registration_date\n                   and event like '%promo_tariff%'\n                   order by cmuserid\n\n) ,events as (select \n                    distinct\n                    date_trunc(cast(datetime as date),month) dmonth,\n                    all_data.cmuserid,\n                    all_data.event,\n                    all_data.datetime\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_all_data_filtered_from_test` all_data\nwhere event like '%payment.success%')\n    ,unclear_payments as ( --\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0442\u043e\u0432\u0430\u0440\u0438\u0449\u0435\u0439 \u0441\u043e \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u043f\u043b\u0430\u0442 \u0432 \u043c\u0435\u0441\u044f\u0446, \u0447\u0442\u043e\u0431\u044b \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u0445 \u0438\u0445 \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c (\u043f\u043e\u043a\u0430 \u043d\u0435 \u0432\u044b\u044f\u0441\u043d\u0435\u043d\u043e, \u0447\u0442\u043e \u044d\u0442\u043e \u0437\u0430 \u043e\u043f\u043b\u0430\u0442\u044b)\nselect dmonth,\n      cmuserid,\n      count(*)\nfrom events\ngroup by dmonth,cmuserid\nhaving count(*)>2\n)\n, payments_info as (\nselect subscription_all.cmuserid,\n      event_name,\n      event_time,\n      event_date,\n      lead(event_name) over (partition by subscription_all.cmuserid order by event_time) as next_event,\n      lead(event_date) over (partition by subscription_all.cmuserid order by event_time) as next_event_date,\n      event_date as subscription_start,\n      case when event_name = 'promo_tariff' then date_add(event_date,interval 1 year)\n      end as subscription_end,\nfrom payments_posts subscription_all     \nleft join unclear_payments on subscription_all.cmuserid = unclear_payments.cmuserid\nwhere unclear_payments.cmuserid is null\n), defining_previous_due as (\n  select *,   lag(\n              case  when event_name = 'promo_tariff' then date_add(event_date,interval 1 year)\n          end) over (partition by cmuserid order by event_time) previous_due_date\n  from payments_info\n)\n,types_of_payments as (\n          select cmuserid,\n                subscription_end,\n                row_number() over (partition by cmuserid,subscription_end) rn,\n                event_name,\n                previous_due_date,\n                case  when event_name = 'promo_tariff' and next_event like '%payment%' then 'paid_having_promo'\n                      when subscription_start < previous_due_date then 'bought_while_active'\n                end status,\n                event_date,\n                next_event,\n                next_event_date\n          from defining_previous_due\n),subscriptions_info as (\n  select *,\n  case \n       when status = 'bought_while_active' then previous_due_date\n       else event_date\n       end as subscription_start\nfrom types_of_payments)\n, subscription_all as (\n    select cmuserid,\n            subscription_start as start_date,\n            case when event_name = 'promo_tariff'   then date_add(subscription_start, interval 1 year)\n                 end as end_date,\n            event_date,\n            status,\n            event_name,\n            next_event,\n            next_event_date\n    from subscriptions_info si\n    join `dwh-wazzup`.`analytics_tech`.`days_with_month_intervals`  month_intervals on event_date = month_intervals.date and month_intervals.rn =2 \n)\nselect *\nfrom subscription_all", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_subscription_history_posts_only`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:06.840622Z", "completed_at": "2025-05-21T12:31:06.884731Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:06.964867Z", "completed_at": "2025-05-21T12:31:06.964881Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.25227952003479004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_cmuserid__conversion_to_tariffs_increase", "compiled": true, "compiled_code": "with posts_payments  as (\n           select  registration_date,\n                    first_value(datetime) over (partition by cmuserid order by datetime) as event_time,\n                    event event_name,\n                    cmuserid\n            from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_conversions_to_post`\n),\nregistration_data as (\n            select *\n            from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_all_info_that_used_as_filters` \n)\nselect distinct\n                filtrs.*,\n                event_time\nfrom registration_data filtrs\nleft join posts_payments on filtrs.cmuserid = posts_payments.cmuserid", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_cmuserid__conversion_to_tariffs_increase`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.047770Z", "completed_at": "2025-05-21T12:31:07.054950Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.060405Z", "completed_at": "2025-05-21T12:31:07.060416Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.17927837371826172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_cmuserid_conversions_to_post", "compiled": true, "compiled_code": "select *\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_conversions_to_post`\nunpivot (\n            users for event_name in (paid,posted)\n            )", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_cmuserid_conversions_to_post`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.051530Z", "completed_at": "2025-05-21T12:31:07.057705Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.063052Z", "completed_at": "2025-05-21T12:31:07.063065Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14047670364379883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_cmuserid_payments_in_funnel", "compiled": true, "compiled_code": "with int_cmuserid_conversions_to_post as (\nselect *except(posted),\n        case when datetime = first_payment_datetime and event like '%payment.success-max_1_month%' then concat(dense_rank() over (partition by cmuserid order by datetime),cmuserid) end as first_max_one_month_cmuserid,\n        case when datetime != first_payment_datetime and event like '%payment.success-max_1_month%' then concat(dense_rank() over (partition by cmuserid order by datetime),cmuserid) end as repeat_max_one_month_cmuserid,\n        case when  event like '%payment.success.recurring-max_1_month%' then concat(dense_rank() over (partition by cmuserid order by datetime),cmuserid) end as recurring_max_one_month_cmuserid,\n        case when datetime = first_payment_datetime and event like '%payment.success-max_1_year%' then concat(dense_rank() over (partition by cmuserid order by datetime),cmuserid) end as first_max_twelve_month_cmuserid,\n        case when datetime != first_payment_datetime and event like '%payment.success-max_1_year%' then concat(dense_rank() over (partition by cmuserid order by datetime),cmuserid) end as repeat_max_twelve_month_cmuserid,\n        case when  event like '%payment.success.recurring-max_1_year%' then concat(dense_rank() over (partition by cmuserid order by datetime),cmuserid) end as recurring_max_twelve_month_cmuserid,\n\n\n        case when datetime = first_payment_datetime and event like '%payment.success-pro_1_month%' then concat(dense_rank() over (partition by cmuserid order by datetime),cmuserid) end as first_pro_one_month_cmuserid,\n        case when datetime != first_payment_datetime and event like '%payment.success-pro_1_month%' then concat(dense_rank() over (partition by cmuserid order by datetime),cmuserid) end as repeat_pro_one_month_cmuserid,\n        case when  event like '%payment.success.recurring-pro_1_month%' then concat(dense_rank() over (partition by cmuserid order by datetime),cmuserid) end as recurring_pro_one_month_cmuserid,\n        \n         case when datetime = first_payment_datetime and event like '%payment.success-pro_1_year%' then concat(dense_rank() over (partition by cmuserid order by datetime),cmuserid) end as first_pro_twelve_month_cmuserid,\n        case when datetime != first_payment_datetime and event like '%payment.success-pro_1_year%' then concat(dense_rank() over (partition by cmuserid order by datetime),cmuserid) end as repeat_pro_twelve_month_cmuserid,\n        case when  event like '%payment.success.recurring-pro_1_year%' then concat(dense_rank() over (partition by cmuserid order by datetime),cmuserid) end as recurring_pro_twelve_month_cmuserid,\n        case when  datetime = first_payment_datetime and event in('payment.success.recurring','payment.success') then concat(dense_rank() over (partition by cmuserid order by datetime),cmuserid) end as old_payments_new,\n        case when  datetime != first_payment_datetime and event in('payment.success.recurring','payment.success') then concat(dense_rank() over (partition by cmuserid order by datetime),cmuserid) end as old_payments_repeat\n\n        from  `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_conversions_to_post`\n        where paid is not null\n        and (event like '%payment.success%')\n)\nselect distinct *--except(payment_sum),case when  row_number () over (partition by cmuserid,datetime order by datetime) = 1  then cast(payment_sum as int) else null end as payment_sum\nfrom int_cmuserid_conversions_to_post\nunpivot (\n            users for event_name in (first_max_one_month_cmuserid,\n                                    repeat_max_one_month_cmuserid,\n                                    recurring_max_one_month_cmuserid,\n\n                                    first_max_twelve_month_cmuserid,\n                                    repeat_max_twelve_month_cmuserid,\n                                    recurring_max_twelve_month_cmuserid,\n                                    \n                                    first_pro_one_month_cmuserid,\n                                    repeat_pro_one_month_cmuserid,\n                                    recurring_pro_one_month_cmuserid,\n\n                                    first_pro_twelve_month_cmuserid,\n                                    repeat_pro_twelve_month_cmuserid,\n                                    recurring_pro_twelve_month_cmuserid,\n\n                                    old_payments_new,\n                                    old_payments_repeat\n                                    )\n            )", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_cmuserid_payments_in_funnel`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.055437Z", "completed_at": "2025-05-21T12:31:07.063576Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.146041Z", "completed_at": "2025-05-21T12:31:07.146056Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.18149113655090332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_funnel_key_events__counting_users_on_each_stage", "compiled": true, "compiled_code": "with int_funnel_key_events__finding_all_users_stages as  (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_funnel_key_events__finding_all_users_stages`   \n    ),\n\nint_funnel_key_events__counting_users_on_each_stage as (\n    select\n    registration_date,\n    utm_source,\n    utm_campaign,\n    utm_medium,\n    initrefferer,\n    utm_traffic,\n    abtest_name,\n    abtest_group,\n    abgroup_count_filter,\n    case\n        when devicetypes = 'tablet' or os = 'Android'\n        then 'mobile'\n        when devicetypes is not null\n        then devicetypes\n        when os is null or os = 'Other'\n        then 'other'\n        when\n            os = 'Linux'\n            or os = 'Windows'\n            or os = 'Ubuntu'\n            or os = 'Mac OS'\n            or os = 'Mac OS X'\n        then 'desktop'\n    end as devicetypes,\n    template_link,\n    business_spheres_filter,\n    eventgroupname_description,\n    business_spheres_filter_description,\n    first_paid as first_paid,\n    repeat_paid as repeat_paid,\n    succreg as SuccReg,\n    templateusage as TemplateUsage,\n    edits as Edits,\n    activation as Activation,\n    copies as Copies,\n    posted as Posted,\n    paid as Paid\n    from int_funnel_key_events__finding_all_users_stages\n    )\n\nselect * from  int_funnel_key_events__counting_users_on_each_stage", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_funnel_key_events__counting_users_on_each_stage`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.058054Z", "completed_at": "2025-05-21T12:31:07.065871Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.146835Z", "completed_at": "2025-05-21T12:31:07.146847Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.17876768112182617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_cmuserid__business_sphere_choose_other", "compiled": true, "compiled_code": "select *\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_funnel_key_events__finding_all_users_stages`\nwhere eventgroupname_description in  ('\u041c\u0443\u043b\u044c\u0442\u0438\u0441\u0441\u044b\u043b\u043a\u0430','\u041c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0439 \u0441\u0430\u0439\u0442','\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0448\u0430\u0431\u043b\u043e\u043d')\norder by eventgroupname_description", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_cmuserid__business_sphere_choose_other`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.061181Z", "completed_at": "2025-05-21T12:31:07.145449Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.148875Z", "completed_at": "2025-05-21T12:31:07.148885Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.21743416786193848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_crutch_funnel_TEST", "compiled": true, "compiled_code": "with int_funnel_key_events__finding_all_users_stages as  (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_funnel_key_events__finding_all_users_stages`\n    ),\n\nint_funnel_key_events__counting_users_on_each_stage as (\n    select\n    registration_date,\n    utm_source,\n    utm_campaign,\n    utm_medium,\n    initrefferer,\n    utm_traffic,\n    abtest_name,\n    abtest_group,\n    abgroup_count_filter,\n    case\n        when devicetypes = 'tablet' or os = 'Android'\n        then 'mobile'\n        when devicetypes is not null\n        then devicetypes\n        when os is null or os = 'Other'\n        then 'other'\n        when\n            os = 'Linux'\n            or os = 'Windows'\n            or os = 'Ubuntu'\n            or os = 'Mac OS'\n            or os = 'Mac OS X'\n        then 'desktop'\n    end as devicetypes,\n    template_link,\n    business_spheres_filter,\n    eventgroupname_description,\n    business_spheres_filter_description,\n    count(distinct first_paid) as first_paid,\n    count(distinct repeat_paid) as repeat_paid,\n    count(distinct succreg) as SuccReg,\n    count(distinct templateusage) as TemplateUsage,\n    count(distinct edits) as Edits,\n    count(distinct activation) as Activation,\n    count(distinct copies) as Copies,\n    count(distinct posted) as Posted,\n    count(distinct paid) as Paid,\n    \n    from int_funnel_key_events__finding_all_users_stages\n    group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,12,13,14\n    )\n,int_funnel_key_event__unpivot_events as (\n    select * from int_funnel_key_events__counting_users_on_each_stage \n    unpivot (\n            users for event in (SuccReg,TemplateUsage,Edits,Activation,Copies,Posted,paid,repeat_paid,first_paid)\n            )\n    )\n\nSELECT `profeat_site_funnel`.`Business_spheres_filter` AS `Business_spheres_filter`,\n  `profeat_site_funnel`.`Business_spheres_filter_description` AS `Business_spheres_filter_description`,\n  `profeat_site_funnel`.`EventGroupName_Description` AS `EventGroupName_Description`,\n  `profeat_site_funnel`.`deviceTypes` AS `deviceTypes`,\n  `profeat_site_funnel`.`event` AS `event`,\n  `profeat_site_funnel`.`initRefferer` AS `initRefferer`,\n  `profeat_site_funnel`.`registration_date` AS `regdate`,\n  `profeat_site_funnel`.`template_link` AS `template`,\n  `profeat_site_funnel`.`users` AS `users`,\n  `profeat_site_funnel`.`utm_campaign` AS `utm_campaign`,\n  `profeat_site_funnel`.`utm_medium` AS `utm_medium`,\n  `profeat_site_funnel`.`utm_source` AS `utm_source`,\n  `profeat_site_funnel`.`utm_traffic` AS `utm_traffic`\nFROM int_funnel_key_event__unpivot_events `profeat_site_funnel`\n\nUnion all \nSELECT `profeat_site_funnel`.`Business_spheres_filter` AS `Business_spheres_filter`,\n  `profeat_site_funnel`.`Business_spheres_filter_description` AS `Business_spheres_filter_description`,\n  `profeat_site_funnel`.`EventGroupName_Description` AS `EventGroupName_Description`,\n  `profeat_site_funnel`.`deviceTypes` AS `deviceTypes`,\n  \n  case when `profeat_site_funnel`.`event` = 'Posted' then 'posted_fix' \n        when `profeat_site_funnel`.`event` = 'TemplateUsage' then 'template_fix' \n        when `profeat_site_funnel`.`event` = 'paid' then 'paid_fix' \n        when `profeat_site_funnel`.`event` = 'Activation' then 'activation_fix' \n        when `profeat_site_funnel`.`event` = 'Edits' then 'edits_fix' \n       when `profeat_site_funnel`.`event` = 'SuccReg' then 'succreg_fix' \n      when `profeat_site_funnel`.`event` = 'Copies' then 'copies_fix' \n  end AS `event`,\n  `profeat_site_funnel`.`initRefferer` AS `initRefferer`,\n  `profeat_site_funnel`.`registration_date` AS `regdate`,\n  `profeat_site_funnel`.`template_link` AS `template`,\n  `profeat_site_funnel`.`users` AS `users`,\n  `profeat_site_funnel`.`utm_campaign` AS `utm_campaign`,\n  `profeat_site_funnel`.`utm_medium` AS `utm_medium`,\n  `profeat_site_funnel`.`utm_source` AS `utm_source`,\n  `profeat_site_funnel`.`utm_traffic` AS `utm_traffic`\nFROM int_funnel_key_event__unpivot_events `profeat_site_funnel`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_crutch_funnel_TEST`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.064403Z", "completed_at": "2025-05-21T12:31:07.147370Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.229557Z", "completed_at": "2025-05-21T12:31:07.229571Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.25646257400512695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_funnel_key_events_time", "compiled": true, "compiled_code": "with int_funnel_key_events__finding_all_users_stages_time as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_funnel_key_events__finding_all_users_stages_time`\n),\noverall_time_calculation as (\n    select *,\n    date_diff(greatest(coalesce(templateusage,registration_datetime),\n                 coalesce(edits,registration_datetime),\n                 coalesce(copies,registration_datetime),\n                 coalesce(activation,registration_datetime),\n                 coalesce(posted,registration_datetime),\n                 coalesce(paid,registration_datetime),\n                 coalesce(edits_one_block,registration_datetime),\n                 coalesce(edits_three_blocks,registration_datetime),\n                 coalesce(activation_one_client,registration_datetime),\n                 coalesce(activation_five_clients,registration_datetime),\n                 coalesce(activation_ten_clients,registration_datetime)\n                 ),\n                 registration_datetime,\n                 minute\n                 ) as overall_time\n        from int_funnel_key_events__finding_all_users_stages_time\n)\nselect * \nfrom overall_time_calculation", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_funnel_key_events_time`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.315210Z", "completed_at": "2025-05-21T12:31:07.324003Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.335652Z", "completed_at": "2025-05-21T12:31:07.335663Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.15257501602172852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_old_and_new_data_union", "compiled": true, "compiled_code": "\n\nwith old_data as (\n    select \n    account_id,                                 -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    cast(start_at as datetime) as start_at,     -- \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    cast(end_date as datetime) as end_at,       -- \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u0438\n    CAST(start_at AS DATE) AS start_date,       -- \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    end_date,                                   -- \u0434\u0430\u0442\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    cast(NULL as STRING) AS action,             -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439: addQuantity, setPromisedPayment, pay, subtractQuantity, templateMessages, loweringTariff, raiseTariff, renewal, balanceTopup \u0438\u043b\u0438 null\n    guid AS subscription_id,                    -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    partner_account_id,                         -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430. \u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u043f\u043b\u0430\u0442\u0438\u043b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n    cast(null as string) as guid,               -- guid \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f - \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\n    null as sum,                                -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0432\u0430\u043b\u044e\u0442\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    cast(null as string) as currency,           -- \u0432\u0430\u043b\u044e\u0442\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    cast(null as string) as subscription_type,  -- \u0442\u0438\u043f (\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442) \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    null as wapi_transactions                   -- \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0432\u0430\u0431\u044b\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_old_billing_fixed_expiration_date`\n),\n\n\nmissing_subscription_data_paidat as (\n    select \n    account_id,                                                         -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    start_at,                                                           -- \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    CAST(NULL AS DATETIME) AS end_at,                                   -- \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u0438\n    start_date,                                                         -- \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    end_date,                                                           -- \u0434\u0430\u0442\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    coalesce(subscriptionUpdates.action, paid_at.action)  as action,    -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439: addQuantity, setPromisedPayment, pay, subtractQuantity, templateMessages, loweringTariff, raiseTariff, renewal, balanceTopup \u0438\u043b\u0438 null\n    paid_at.subscription_id,                                            -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    partner_account_id,                                                 -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430. \u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u043f\u043b\u0430\u0442\u0438\u043b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n    paid_at.guid,                                                       -- guid \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f - \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\n    paid_at.sum,                                                        -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0432\u0430\u043b\u044e\u0442\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    paid_at.currency,                                                   -- \u0432\u0430\u043b\u044e\u0442\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    subscription_type,                                                  -- \u0442\u0438\u043f (\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442) \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    paid_at.wapi_transactions                                           -- \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0432\u0430\u0431\u044b\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptons_with_sum_and_correct_dates_joined_paidat` paid_at\n    left join  `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates`  subscriptionUpdates \n    on subscriptionUpdates.guid=paid_at.guid\n    WHERE \n    (end_date IS NOT NULL)  and (paid_at.action is distinct from 'addQuantity')\n    and (paid_at.action is distinct from 'raiseTariff')\n    \n),\n\nmissing_subscription_data_datetime as (\n    select  account_id,                 -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    start_at,                           -- \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    CAST(NULL AS DATETIME) AS end_at,   -- \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u0438\n    start_date,                         -- \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    end_date,                           -- \u0434\u0430\u0442\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    action,                             -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439: addQuantity, setPromisedPayment, pay, subtractQuantity, templateMessages, loweringTariff, raiseTariff, renewal, balanceTopup \u0438\u043b\u0438 null\n    subscription_id,                    -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    partner_account_id,                 -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430. \u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u043f\u043b\u0430\u0442\u0438\u043b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n    guid ,                              -- guid \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f - \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\n    sum,                                -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0432\u0430\u043b\u044e\u0442\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    currency,                           -- \u0432\u0430\u043b\u044e\u0442\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    subscription_type,                  -- \u0442\u0438\u043f (\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442) \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    wapi_transactions                   -- \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0432\u0430\u0431\u044b\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_correct_start_and_end_date_joined_datetime_deduplicated`\n    where action is distinct from 'addQuantity' and guid is distinct from '5fd23f66-b12a-42a5-9061-b078fbffe8c5' \n    and action is distinct from 'raiseTariff'\n),\n\npromised_payments as (\n    select \n    account_id,                             -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    start_at,                               -- \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    end_at,                                 -- \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u0438\n    CAST(start_at AS DATE) AS start_date,   -- \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    CAST(end_at AS DATE) AS end_date,       -- \u0434\u0430\u0442\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    action,                                 -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439: addQuantity, setPromisedPayment, pay, subtractQuantity, templateMessages, loweringTariff, raiseTariff, renewal, balanceTopup \u0438\u043b\u0438 null\n    subscription_id,                        -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    partner_account_id,                     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430. \u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u043f\u043b\u0430\u0442\u0438\u043b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n    guid,                                   -- guid \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f - \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\n    sum,                                    -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0432\u0430\u043b\u044e\u0442\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    currency,                               -- \u0432\u0430\u043b\u044e\u0442\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    subscription_type,                      -- \u0442\u0438\u043f (\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442) \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    wapi_transactions                       -- \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0432\u0430\u0431\u044b\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_subscripton_with_sum`\n    where action='setPromisedPayment'\n    \n),\n\n\nsubscription_updates_with_non_pay_actions as (\n    select \n    account_id,                             -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    start_at,                               -- \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    CAST(NULL AS DATETIME) AS end_at,       -- \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u0438\n    cast(start_at as date) as start_date,   -- \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    CAST(NULL AS date) AS end_at,           -- \u0434\u0430\u0442\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    action,                                 -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439: addQuantity, setPromisedPayment, pay, subtractQuantity, templateMessages, loweringTariff, raiseTariff, renewal, balanceTopup \u0438\u043b\u0438 null\n    subscription_id,                        -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    partner_account_id,                     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430. \u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u043f\u043b\u0430\u0442\u0438\u043b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n    guid,                                   -- guid \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f - \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\n    sum,                                    -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0432\u0430\u043b\u044e\u0442\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    currency,                               -- \u0432\u0430\u043b\u044e\u0442\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n    subscription_type,                      -- \u0442\u0438\u043f (\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442) \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    wapi_transactions                       -- \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0432\u0430\u0431\u044b\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_subscripton_with_sum`\n    where action not in ('pay','renewal','setPromisedPayment','subtractQuantity')\n),\n\n\nbilling_data_union_all as (\n -- \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a - \u0442\u0430\u0431\u043b\u0438\u0447\u043a\u0430 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043a\u0430\u043a union \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432\n    select *, False as is_promised_payment, 'old_data' as source from old_data\n    UNION ALL\n    select *, False as is_promised_payment,  'missing_subscription_data_paidat' as source from missing_subscription_data_paidat\n    UNION ALL \n    select *, False as is_promised_payment, 'missing_subscription_data_datetime' as source from missing_subscription_data_datetime\n    UNION ALL\n    select *, False as is_promised_payment, 'subscription_updates_with_non_pay_actions' as source from subscription_updates_with_non_pay_actions\n    UNION ALL\n    select *, True as is_promised_payment,'promised_payments' as source from promised_payments\n),remove_duplicates as (\nselect *,                   -- \u0442\u0430\u0431\u043b\u0438\u0447\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438 \u0434\u0430\u0442\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nrow_number() over (partition by guid) rn\nfrom billing_data_union_all)\nselect *\nfrom remove_duplicates\nwhere rn = 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_old_and_new_data_union`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.319299Z", "completed_at": "2025-05-21T12:31:07.324712Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.340715Z", "completed_at": "2025-05-21T12:31:07.340725Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.19199180603027344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_who_paid__old_and_new_billing__merged", "compiled": true, "compiled_code": "with last_payment_guid_not_promised_payment as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_who_paid__last_payment_guid_not_promised_payment`\n),\n\npayments as (\n    select \n    guid,\n    cast(partner_account_id as integer) as partner_account_id\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_card`\n),\n\nold_payments_last_guid as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_who_paid__old_payments_last_guid`\n),\n\ncurrent_account_type_and_parents as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partner_refparent_account_type_partner_type__current`\n    where account_type='standart'\n),\n\nlast_sub_with_payments as (select \n         last_payment.account_id,                           -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n         last_payment.activation_reason_id,                 -- \u0442\u0443\u0442 \u0434\u043e\u043a \u0430\u043a\u0442 \u0440\u0438\u0437\u043e\u043d \u0430\u0439\u0434\u0438\n         coalesce(payments.partner_account_id,old_payments_last_guid.partner_account_id) as payer_partner_account_id,   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u0435\u0441\u043b\u0438 \u043e\u043d \u043f\u043b\u0430\u0442\u0435\u043b\u044c\u0449\u0438\u043a\n         current_account_type_and_parents.partner_Id,       -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n         current_account_type_and_parents.refparent_id,     -- ID \u0440\u0435\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n         current_account_type_and_parents.partner_type      -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n         from last_payment_guid_not_promised_payment last_payment\n         left join payments on last_payment.activation_reason_id=payments.guid\n         left join old_payments_last_guid on last_payment.account_id=old_payments_last_guid.account_id \n         left join current_account_type_and_parents on last_payment.account_id=current_account_type_and_parents.account_id\n         )\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c\u0438 \u0438 \u043f\u043b\u0430\u0442\u0435\u043b\u044c\u0449\u0438\u043a\u0430\u043c\u0438, \u0441\u0442\u0430\u0440\u044b \u0438 \u043d\u043e\u0432\u044b\u0439 \u0431\u0438\u043b\u043b\u0438\u043d\u0433 \u0441\u043e\u0432\u043c\u0435\u0449\u0435\u043d\nselect * from last_sub_with_payments", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_who_paid__old_and_new_billing__merged`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.329100Z", "completed_at": "2025-05-21T12:31:07.381612Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.423884Z", "completed_at": "2025-05-21T12:31:07.423893Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.15126752853393555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_billing_affiliate_subscription_payments_real_money_partner_with_client_bonus", "compiled": true, "compiled_code": "with billing_affiliate_with_real_money as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_with_who_paid`\n),\nbalance_spending_partner AS (\n                                 SELECT account_id                                                    AS partner_id\n                                      , billing_affiliate_original_sum                                AS billing_affiliate_original_sum_paid_by_partner\n                                      , subscriptionupdates_original_sum\n                                      , wapi_original_sum\n                                      , subscription_owner                                            AS account_id\n                                      , billingaffiliate_currency                                     AS billingaffiliate_currency_partner\n                                      , subscription_updates_currency                                 AS subscription_updates_currency_partner\n                                      , occured_at                                                    AS paid_at -- (04.03.2025) \n                                      , occured_date                                                  AS paid_date\n                                      , subscription_id\n                                      , subscription_update_id\n                                      , action\n                                      , partner_discount                                              AS partner_discount\n                                      , good_balance_spent                                            AS good_balance_spent\n                                      , wapi_transactions_in_rubles                                   AS wapi_transactions_in_rubles\n                                      , sum_in_rubles_full_subscription                               AS sum_in_rubles_full_subscription\n                                      , sum_in_rubles_full_subscription - wapi_transactions_in_rubles AS subscription_sum\n                                      , subscriptionupdates_original_sum - wapi_original_sum          AS subscription_sum_original_sum\n                                      , sum_in_rubles\n                                      , account_type\n                                 FROM billing_affiliate_with_real_money\n                                 WHERE has_partner_paid = 1\n),\nbalance_spending_client AS (\n                                SELECT account_id                                                         AS partner_id\n                                     , subscription_owner                                                 AS account_id\n                                     , occured_at                                                         AS paid_at -- (04.03.2025) \n                                     , occured_date                                                       AS paid_date\n                                     , subscription_id\n                                     , subscription_update_id\n                                     , action\n                                     , billing_affiliate_original_sum                                     AS billing_affiliate_original_sum_paid_by_client\n                                     , partner_discount                                                   AS partner_discount\n                                     , good_balance_spent                                                 AS good_balance_spent\n                                     , coalesce(billingaffiliate_currency, subscription_updates_currency) AS billingaffiliate_currency_client\n                                     , subscription_updates_currency                                      AS subscription_updates_currency_client\n                                     , wapi_transactions_in_rubles                                        AS wapi_transactions_in_rubles\n                                     , sum_in_rubles_full_subscription                                    AS sum_in_rubles_full_subscription\n                                     , sum_in_rubles_full_subscription - wapi_transactions_in_rubles      AS subscription_sum\n                                     , sum_in_rubles\n                                FROM billing_affiliate_with_real_money\n                                WHERE has_partner_paid = 0\n                                ),\nparnter_and_client_balance_with_wapi_discount as (\n    select balance_spending_partner.subscription_update_id,         -- ID \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\n    balance_spending_partner.partner_id,        -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    coalesce(balance_spending_client.account_id, balance_spending_partner.account_id)  as client_id,    -- ID \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    balance_spending_partner.partner_discount as partner_discount,  -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    balance_spending_partner.paid_at,           -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b (04.03.2025) \n    balance_spending_partner.paid_date,         -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    balance_spending_partner.subscription_id,   -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    balance_spending_partner.action,            -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\n    coalesce(balance_spending_partner.good_balance_spent,0) as good_balance_spent_by_partner,   -- \u041a\u043e\u043b-\u0432\u043e \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c\n    coalesce(balance_spending_client.good_balance_spent,0) as good_balance_spent_by_client,     -- \u041a\u043e\u043b-\u0432\u043e \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c\n    balance_spending_partner.sum_in_rubles as balance_spent_by_partner, -- \u041a\u043e\u043b-\u0432\u043e \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c\n    balance_spending_client.sum_in_rubles as balance_spent_by_client,   -- \u041a\u043e\u043b-\u0432\u043e \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c\n    balance_spending_partner.wapi_transactions_in_rubles,       -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b WABA \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    balance_spending_partner.sum_in_rubles_full_subscription,   -- \u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    balance_spending_partner.subscription_sum,                  -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    billing_affiliate_original_sum_paid_by_client,              -- \u0421\u0443\u043c\u043c\u0430, \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0438\u0437 billingAffiliate\n    billing_affiliate_original_sum_paid_by_partner,             -- \u0421\u0443\u043c\u043c\u0430, \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u0438\u0437 billingAffiliate\n    billingaffiliate_currency_client,       -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438\u0437 billingAffiliate\n    billingaffiliate_currency_partner,      -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0438\u0437 billingAffiliate\n    coalesce(subscription_updates_currency_client,subscription_updates_currency_partner) as subscription_updates_currency_client,   -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438\u0437 subscriptionUpdates\n    subscription_updates_currency_partner,  -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0438\u0437 subscriptionUpdates\n    subscriptionupdates_original_sum,       -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438\u0437 subscriptionUpdates\n    wapi_original_sum,                      -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\n    account_type,                           -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    subscription_sum_original_sum,          -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    (\n        case when subscription_sum_original_sum=0 then 0\n             when balance_spending_partner.subscription_sum_original_sum>=coalesce(balance_spending_client.billing_affiliate_original_sum_paid_by_client) then balance_spending_partner.subscription_sum_original_sum-coalesce(balance_spending_client.billing_affiliate_original_sum_paid_by_client,0)\n             when balance_spending_partner.subscription_sum_original_sum <coalesce(balance_spending_client.billing_affiliate_original_sum_paid_by_client) then 0  --\u0432\u0441\u044f \u0441\u0443\u043c\u043c\u0430 \u0443\u0448\u043b\u0430 \u043d\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0432\u0430\u0431\u044b\n        else balance_spending_partner.subscription_sum_original_sum\n        end\n        ) as subscription_sum_without_balance_spent_by_client_original, --\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0437\u0430 \u0432\u044b\u0447\u0435\u0442\u043e\u043c \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0432 \u0432\u0430\u043b\u044e\u0442\u0435\n    (\n        case \n        when balance_spending_partner.subscription_sum=0 then 0\n        when balance_spending_partner.subscription_sum>=coalesce(balance_spending_client.sum_in_rubles,0) then balance_spending_partner.subscription_sum-coalesce(balance_spending_client.sum_in_rubles,0)\n        when balance_spending_client.sum_in_rubles>balance_spending_partner.subscription_sum then 0\n        end\n        ) as subscription_sum_withtout_balance_spent_by_client, --\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0437\u0430 \u0432\u044b\u0447\u0435\u0442\u043e\u043c \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    (\n        case \n        when balance_spending_partner.subscription_sum=0 then 0\n        when balance_spending_client.billing_affiliate_original_sum_paid_by_client is null then 0\n        when balance_spending_partner.subscription_sum>=balance_spending_client.sum_in_rubles then balance_spending_client.sum_in_rubles\n        else balance_spending_partner.subscription_sum\n        end\n        ) as balance_spent_by_client_on_subscription, --\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u0431\u044b\u043b\u043e \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0422\u041e\u041b\u042c\u041a\u041e \u043d\u0430 \u043f\u043e\u043a\u0443\u043f\u043a\u0443 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 (\u0432 \u0440\u0443\u0431\u043b\u044f\u0445)\n    (\n        case \n        when balance_spending_partner.subscription_sum_original_sum=0 then 0\n        when balance_spending_client.billing_affiliate_original_sum_paid_by_client is null then 0\n        when balance_spending_partner.subscription_sum_original_sum>=balance_spending_client.billing_affiliate_original_sum_paid_by_client then balance_spending_client.billing_affiliate_original_sum_paid_by_client\n        else balance_spending_partner.subscription_sum_original_sum \n        end\n    ) as balance_spent_by_client_on_subscription_original, --\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u0431\u044b\u043b\u043e \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0422\u041e\u041b\u042c\u041a\u041e \u043d\u0430 \u043f\u043e\u043a\u0443\u043f\u043a\u0443 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 (\u0432 \u0432\u0430\u043b\u044e\u0442\u0435)\n\n    billing_affiliate_original_sum_paid_by_client-(\n        case \n        when balance_spending_partner.subscription_sum_original_sum=0 then 0\n        when balance_spending_client.billing_affiliate_original_sum_paid_by_client is null then 0\n        when balance_spending_partner.subscription_sum_original_sum>=balance_spending_client.billing_affiliate_original_sum_paid_by_client then balance_spending_client.billing_affiliate_original_sum_paid_by_client\n        else balance_spending_partner.subscription_sum_original_sum\n        end\n        ) as balance_spent_by_client_on_wapi_balance_original, --\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u0431\u044b\u043b\u043e \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0422\u041e\u041b\u042c\u041a\u041e \u043d\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0412\u0410\u0411\u042b (\u0432 \u0432\u0430\u043b\u044e\u0442\u0435)\n\n    wapi_original_sum-coalesce(\n        billing_affiliate_original_sum_paid_by_client-(case \n        when balance_spending_partner.subscription_sum_original_sum=0 then 0\n        when balance_spending_client.billing_affiliate_original_sum_paid_by_client is null then 0\n        when balance_spending_partner.subscription_sum_original_sum>=balance_spending_client.billing_affiliate_original_sum_paid_by_client then balance_spending_client.billing_affiliate_original_sum_paid_by_client\n        else balance_spending_partner.subscription_sum_original_sum\n        end\n        ),0 ) as wapi_subscription_to_pay_without_client_balance_original --\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u044b\u043b\u043e \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043e \u043d\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0412\u0410\u0411\u042b \u0431\u0435\u0437 \u0443\u0447\u0435\u0442\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 (\u0432 \u0432\u0430\u043b\u044e\u0442\u0435)\n\n    from balance_spending_partner left join balance_spending_client \n    on balance_spending_partner.subscription_update_id=balance_spending_client.subscription_update_id \n    ),\n    balance_and_payments as (\n        select *,  \n        (\n            case when partner_discount is not null and ((paid_date>='2022-11-29'  and account_type='partner') or (paid_date>='2023-02-10' and account_type='tech-partner') or (partner_id=55875354)) \n            then 0.1*coalesce(wapi_subscription_to_pay_without_client_balance_original,0)\n            else 0 end) as wapi_discount_for_partners_original, -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0437\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\n            ceil(subscription_sum_without_balance_spent_by_client_original*(1- coalesce(partner_discount,0))) as subscripion_sum_with_discount_original  -- \u0426\u0435\u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441\u043e \u0441\u043a\u0438\u0434\u043a\u043e\u0439\n            from parnter_and_client_balance_with_wapi_discount\n        ),\n        balance_and_payments_with_wapi_balance as (\n            select *,\n            ceil(wapi_subscription_to_pay_without_client_balance_original-coalesce(wapi_discount_for_partners_original,0)) as wapi_balance_partner_to_pay_original, -- \u0421\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u0437\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\n            ceil(subscripion_sum_with_discount_original+wapi_subscription_to_pay_without_client_balance_original-coalesce(wapi_discount_for_partners_original,0)) as subscription_and_balance_partner_to_pay_original   -- \u0421\u0443\u043c\u043c\u0430 \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 + \u0431\u0430\u043b\u0430\u043d\u0441 WABA, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n            from balance_and_payments\n),\n/*\n\n\u0412 \u0421\u0422\u0415 subscription_and_pay_with_converted_currency \u043c\u044b \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0441\u0443\u043c\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0434\u0443\u0442 \u043d\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0432\u0430\u0431\u044b + \u043d\u0430 \u043e\u043f\u043b\u0430\u0442\u0443 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a. \n\u0415\u0441\u043b\u0438 \u0432\u0430\u043b\u044e\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430  = \u0432\u0430\u043b\u044e\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0418 \u0432\u0430\u043b\u044e\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 != \u0440\u0443\u0431\u043b\u0438, \u043c\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432 \u0440\u0443\u0431\u043b\u0438 , \u0443\u043c\u043d\u043e\u0436\u0430\u044f \u043d\u0430 \u043a\u0443\u0440\u0441. \n\u0415\u0441\u043b\u0438 \u0432\u0430\u043b\u044e\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 != \u0432\u0430\u043b\u044e\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0418 \u0432\u0430\u043b\u044e\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 != \u0440\u0443\u0431\u043b\u0438, \u0442\u043e \u043c\u044b \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043d\u0430 \u043a\u0443\u0440\u0441 + \u043d\u0430 \u043a\u043e\u043c\u0438\u0441\u0441\u0438\u044e (3%) \u0437\u0430 \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044e.\n\u0415\u0441\u043b\u0438 \u0432\u0430\u043b\u044e\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 != \u0432\u0430\u043b\u044e\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0418 \u0432\u0430\u043b\u044e\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 = \u0440\u0443\u0431\u043b\u0438, \u0442\u043e \u043c\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043d\u0430 \u043a\u043e\u043c\u0438\u0441\u0441\u0438\u044e (3%) \u0437\u0430 \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044e.\n\u0415\u0441\u043b\u0438 \u0432\u0430\u043b\u044e\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 = \u0432\u0430\u043b\u044e\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430  \u0418 \u0432\u0430\u043b\u044e\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0440\u0443\u0431\u043b\u0438, \u0442\u043e \u043c\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0431\u0435\u0440\u0435\u043c as is.\nbillingaffiliate_currency_client is null \u0432 \u0441\u043b\u0443\u0447\u0430\u044f\u0445, \u043a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u0441\u0432\u043e\u0438 \u0431\u043e\u043d\u0443\u0441\u044b, \u043f\u043b\u0430\u0442\u0438\u043b \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n\n*/\n    subscription_and_pay_with_converted_currency as (\n        select balance_and_payments_with_wapi_balance.*,\n            (\n                case  \n                when subscripion_sum_with_discount_original=0 then balance_spent_by_partner -- \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n                when billingaffiliate_currency_client is null and billingaffiliate_currency_partner='RUR' and billingaffiliate_currency_partner=subscription_updates_currency_client  then  balance_and_payments_with_wapi_balance.wapi_balance_partner_to_pay_original\n                when billingaffiliate_currency_client is null and billingaffiliate_currency_partner=subscription_updates_currency_client   then exchange_rates_unpivoted_for_partner.rur*balance_and_payments_with_wapi_balance.wapi_balance_partner_to_pay_original\n                when billingaffiliate_currency_client is null and billingaffiliate_currency_partner!=subscription_updates_currency_client and subscription_updates_currency_client='RUR'  then  balance_and_payments_with_wapi_balance.wapi_balance_partner_to_pay_original*1.03\n                when billingaffiliate_currency_client is null and billingaffiliate_currency_partner!=subscription_updates_currency_client then  balance_and_payments_with_wapi_balance.wapi_balance_partner_to_pay_original*exchange_rates_unpivoted_client.rur*1.03\n                when balance_and_payments_with_wapi_balance.subscription_updates_currency_client = 'RUR' and billingaffiliate_currency_client!=billingaffiliate_currency_partner then balance_and_payments_with_wapi_balance.wapi_balance_partner_to_pay_original*1.03\n                when balance_and_payments_with_wapi_balance.subscription_updates_currency_client = 'RUR' then balance_and_payments_with_wapi_balance.wapi_balance_partner_to_pay_original\n                when exchange_rates_unpivoted_client.rur is not null and billingaffiliate_currency_client!=billingaffiliate_currency_partner then (balance_and_payments_with_wapi_balance.wapi_balance_partner_to_pay_original) * (exchange_rates_unpivoted_client.rur*1.03)\n                when exchange_rates_unpivoted_client.rur is not null and billingaffiliate_currency_client=billingaffiliate_currency_partner then (balance_and_payments_with_wapi_balance.wapi_balance_partner_to_pay_original) * (exchange_rates_unpivoted_client.rur)\n                end\n            ) as wapi_balance_partner_to_pay_sum_in_rubles, -- \u0421\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u0437\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n            (\n                case\n                when billingaffiliate_currency_partner='RUR' and  billingaffiliate_currency_client is null and   wapi_original_sum=0 then billing_affiliate_original_sum_paid_by_partner\n                when wapi_original_sum=0 and billingaffiliate_currency_client is null  then balance_spent_by_partner\n                when billingaffiliate_currency_client is null and  billingaffiliate_currency_partner='RUR' and billingaffiliate_currency_partner=subscription_updates_currency_client  then  balance_and_payments_with_wapi_balance.subscription_and_balance_partner_to_pay_original\n                when billingaffiliate_currency_client is null \n                and billingaffiliate_currency_partner=subscription_updates_currency_client then \n                exchange_rates_unpivoted_for_partner.rur*balance_and_payments_with_wapi_balance.subscription_and_balance_partner_to_pay_original\n                when billingaffiliate_currency_client is null  and billingaffiliate_currency_partner!=subscription_updates_currency_client and subscription_updates_currency_client='RUR'  then \n                balance_and_payments_with_wapi_balance.subscription_and_balance_partner_to_pay_original*1.03\n                when billingaffiliate_currency_client is null  and billingaffiliate_currency_partner!=subscription_updates_currency_client   then \n                balance_and_payments_with_wapi_balance.subscription_and_balance_partner_to_pay_original*exchange_rates_unpivoted_client.rur*1.03\n                when balance_and_payments_with_wapi_balance.subscription_updates_currency_client = 'RUR' and billingaffiliate_currency_client!=billingaffiliate_currency_partner\n                then balance_and_payments_with_wapi_balance.subscription_and_balance_partner_to_pay_original*1.03\n                when balance_and_payments_with_wapi_balance.subscription_updates_currency_client = 'RUR'\n                then balance_and_payments_with_wapi_balance.subscription_and_balance_partner_to_pay_original\n                when exchange_rates_unpivoted_client.rur is not null and billingaffiliate_currency_client!=billingaffiliate_currency_partner\n                then (balance_and_payments_with_wapi_balance.subscription_and_balance_partner_to_pay_original) * (exchange_rates_unpivoted_client.rur*1.03)\n                when exchange_rates_unpivoted_client.rur is not null and billingaffiliate_currency_client=billingaffiliate_currency_partner\n                then (balance_and_payments_with_wapi_balance.subscription_and_balance_partner_to_pay_original) * (exchange_rates_unpivoted_client.rur)\n                end\n            ) as subscription_and_balance_partner_to_pay_sum_in_rubles, -- \u0421\u0443\u043c\u043c\u0430 \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 + \u0431\u0430\u043b\u0430\u043d\u0441 WABA, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n        exchange_rates_unpivoted_client.rur as client_currency,         -- \u041a\u0443\u0440\u0441 \u043e\u0431\u043c\u0435\u043d\u0430 \u0432\u0430\u043b\u044e\u0442\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n        exchange_rates_unpivoted_for_partner.rur as partner_currency,   -- \u041a\u0443\u0440\u0441 \u043e\u0431\u043c\u0435\u043d\u0430 \u0432\u0430\u043b\u044e\u0442\u044b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n            (\n                case\n                when wapi_original_sum=0 then balance_spent_by_partner\n                when billingaffiliate_currency_partner='RUR' and wapi_original_sum=0  and  billingaffiliate_currency_client is null  then billing_affiliate_original_sum_paid_by_partner\n                when billingaffiliate_currency_client is null and  billingaffiliate_currency_partner='RUR' and billingaffiliate_currency_partner=subscription_updates_currency_client  then  balance_and_payments_with_wapi_balance.subscripion_sum_with_discount_original\n                when billingaffiliate_currency_client is null and billingaffiliate_currency_partner=subscription_updates_currency_client then exchange_rates_unpivoted_for_partner.rur*balance_and_payments_with_wapi_balance.subscripion_sum_with_discount_original\n                when billingaffiliate_currency_client is null  and billingaffiliate_currency_partner!=subscription_updates_currency_client and subscription_updates_currency_client='RUR'  then balance_and_payments_with_wapi_balance.subscripion_sum_with_discount_original*1.03\n                when billingaffiliate_currency_client is null  and billingaffiliate_currency_partner!=subscription_updates_currency_client and subscription_updates_currency_partner!='RUR' then balance_and_payments_with_wapi_balance.subscripion_sum_with_discount_original*exchange_rates_unpivoted_client.rur*1.03\n                when balance_and_payments_with_wapi_balance.subscription_updates_currency_client = 'RUR' and billingaffiliate_currency_client!=billingaffiliate_currency_partner then balance_and_payments_with_wapi_balance.subscripion_sum_with_discount_original*1.03\n                when balance_and_payments_with_wapi_balance.subscription_updates_currency_client = 'RUR' then balance_and_payments_with_wapi_balance.subscripion_sum_with_discount_original\n                when exchange_rates_unpivoted_client.rur is not null and billingaffiliate_currency_client!=billingaffiliate_currency_partner then (balance_and_payments_with_wapi_balance.subscripion_sum_with_discount_original) * (exchange_rates_unpivoted_client.rur*1.03)\n                when exchange_rates_unpivoted_client.rur is not null and billingaffiliate_currency_client=billingaffiliate_currency_partner then (balance_and_payments_with_wapi_balance.subscripion_sum_with_discount_original) * (exchange_rates_unpivoted_client.rur)\n                end\n            ) as subscripion_sum_with_discount_converted_to_rubles,     -- \u0426\u0435\u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441\u043e \u0441\u043a\u0438\u0434\u043a\u043e\u0439 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n            (\n                case \n                when balance_spent_by_client_on_wapi_balance_original =0 then 0 \n                when billingaffiliate_currency_client='RUR' then balance_spent_by_client_on_wapi_balance_original\n                else coalesce(balance_spent_by_client_on_wapi_balance_original*exchange_rates_unpivoted_client.rur,0)               \n                end\n            ) as balance_spent_by_client_on_wapi_balance_sum_in_rubles, -- \u0421\u0443\u043c\u043c\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n            (case when subscription_updates_currency_client='RUR' then wapi_discount_for_partners_original\n            else wapi_discount_for_partners_original*exchange_rates_unpivoted_client.rur\n            end\n            ) as wapi_discount_for_partners_sum_in_rubles               -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0437\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n\n        from balance_and_payments_with_wapi_balance\n        left join\n            `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted_client\n            on exchange_rates_unpivoted_client._ibk = balance_and_payments_with_wapi_balance.paid_date\n            and exchange_rates_unpivoted_client.currency = balance_and_payments_with_wapi_balance.subscription_updates_currency_client\n        left join\n            `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted_for_partner\n            on exchange_rates_unpivoted_for_partner._ibk = balance_and_payments_with_wapi_balance.paid_date\n            and exchange_rates_unpivoted_for_partner.currency = balance_and_payments_with_wapi_balance.billingaffiliate_currency_partner),\n\nsubscription_and_pay_with_converted_currency_and_good_balance as (\n    select *, \n    (\n        case when good_balance_spent_by_client=0 then 0 \n        when good_balance_spent_by_client>=balance_spent_by_client_on_subscription then balance_spent_by_client_on_subscription\n        else good_balance_spent_by_client\n        end\n    ) as good_balance_spent_by_client_on_subscription,          -- \u0421\u0443\u043c\u043c\u0430 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\n    good_balance_spent_by_client-(\n        case when good_balance_spent_by_client=0 then 0 \n        when good_balance_spent_by_client>=balance_spent_by_client_on_subscription then balance_spent_by_client_on_subscription\n        else good_balance_spent_by_client\n        end\n    ) as good_balance_spent_by_client_on_waba_balance,          -- \u0421\u0443\u043c\u043c\u0430 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\n    (\n        case \n        when wapi_original_sum=0 and good_balance_spent_by_partner>=subscripion_sum_with_discount_converted_to_rubles then good_balance_spent_by_partner\n        when good_balance_spent_by_partner>=subscripion_sum_with_discount_converted_to_rubles then subscripion_sum_with_discount_converted_to_rubles\n        else good_balance_spent_by_partner\n        end) as good_balance_spent_by_partner_on_subscription,  -- \u0421\u0443\u043c\u043c\u0430 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\n    good_balance_spent_by_partner-\n    (\n        case \n        when wapi_original_sum=0 and good_balance_spent_by_partner>=subscripion_sum_with_discount_converted_to_rubles then good_balance_spent_by_partner\n        when good_balance_spent_by_partner>=subscripion_sum_with_discount_converted_to_rubles then subscripion_sum_with_discount_converted_to_rubles\n        else good_balance_spent_by_partner\n        end) as good_balance_spent_by_partner_on_waba_balance   -- \u0421\u0443\u043c\u043c\u0430 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\n    from subscription_and_pay_with_converted_currency),\nsubscription_and_pay_with_converted_currency_and_good_and_bad_balance as (\n    select *, round(balance_spent_by_client_on_subscription,2)-round(good_balance_spent_by_client_on_subscription,2) as bad_balance_spent_by_client_on_subscription_sum_in_rubles,              -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043b\u043e\u0445\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n              round(balance_spent_by_client_on_wapi_balance_sum_in_rubles,2)-round(good_balance_spent_by_client_on_waba_balance,2) as bad_balance_spent_by_client_on_waba_balance_sum_in_rubles,-- \u0421\u0443\u043c\u043c\u0430 \u043f\u043b\u043e\u0445\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n              round(subscripion_sum_with_discount_converted_to_rubles,2)-round(good_balance_spent_by_partner_on_subscription,2) as bad_balance_spent_by_partner_on_subscrpition_sum_in_rubles,  -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043b\u043e\u0445\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n              round(wapi_balance_partner_to_pay_sum_in_rubles,2)-round(good_balance_spent_by_partner_on_waba_balance,2) as bad_balance_spent_by_partner_on_waba_balance_sum_in_rubles           -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043b\u043e\u0445\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    from subscription_and_pay_with_converted_currency_and_good_balance),\n\nsubscription_and_pay_with_converted_currency_and_good_and_bad_balance_partner_and_client as (    \nselect *, good_balance_spent_by_client_on_waba_balance+good_balance_spent_by_partner_on_waba_balance as sum_in_rubles_spent_on_waba_balance,                -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n          good_balance_spent_by_client_on_subscription+good_balance_spent_by_partner_on_subscription as sum_in_rubles_spent_on_subscription,                          -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n          bad_balance_spent_by_client_on_waba_balance_sum_in_rubles+bad_balance_spent_by_partner_on_waba_balance_sum_in_rubles as bad_balance_spent_on_waba_balance,   -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043b\u043e\u0445\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\n          bad_balance_spent_by_partner_on_subscrpition_sum_in_rubles as bad_balance_spent_on_subscription\n from subscription_and_pay_with_converted_currency_and_good_and_bad_balance)\n        -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u0435\u043d\u0435\u0433 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u043f\u0440\u0438 \u043e\u043f\u043b\u0430\u0442\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n\n select * from subscription_and_pay_with_converted_currency_and_good_and_bad_balance_partner_and_client \n /*\n \u0420\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0435\u043d\u044c\u0433\u0438 - \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0435\u043d\u044c\u0433\u0438\n\u0411\u043e\u043d\u0443\u0441\u044b:\n- \u0425\u043e\u0440\u043e\u0448\u0438\u0435:\n1) \u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0441\u0447\u0435\u0442\n2) \u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0441 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n3) \u041f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u043e\u0433\u043e \u0441\u0447\u0435\u0442\u0430 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438\n- \u041f\u043b\u043e\u0445\u0438\u0435:\n\u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435\n\n\u0425\u043e\u0440\u043e\u0448\u0438\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 = \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0435\u043d\u044c\u0433\u0438 + \u0445\u043e\u0440\u043e\u0448\u0438\u0435 \u0431\u043e\u043d\u0443\u0441\u044b\n\u041f\u043b\u043e\u0445\u043e\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 = \n*/", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_partner_with_client_bonus`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.325295Z", "completed_at": "2025-05-21T12:31:07.382110Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.425254Z", "completed_at": "2025-05-21T12:31:07.425262Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1925046443939209, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_attribution_data", "compiled": true, "compiled_code": "with accounts as (select \n    * from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`\n    ),\n\n\nfirst_type_partner_and_refparent as (\n    select account_id,\n    start_date,\n     partner_id,\n     account_type,\n     partner_type,\n     refparent_id from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partner_refparent_account_type_partner_type__on_registration_date`\n    ),\n\naffiliates as (\n    select reflink_code,\n    child_id,\n    partner_id from `dwh-wazzup`.`dbt_nbespalov`.`stg_affiliates`\n\n),\n\nattribution_data as (\n    select accounts.account_id, -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    accounts.country,           -- \u0421\u0442\u0440\u0430\u043d\u0430\n    accounts.utm_source,        -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM source \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\n    accounts.utm_medium,        -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM medium \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\n    accounts.utm_campaign,      -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM campaign \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\n    accounts.utm_term,          -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM term \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\n    accounts.utm_content,       -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM content \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\n    accounts.yandex_id,         -- \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u042f\u043d\u0434\u0435\u043a\u0441\u0430, \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u0430\u044f \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n    accounts.ref,               -- \u0420\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u044b\u043b \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 https://wazzup24.com/?utm_p=NqhTp0FR \u0418\u043b\u0438 \u0442\u043e\u043b\u044c\u043a\u043e UTM-\u043c\u0435\u0442\u043a\u0430 7i7OIAR2\n    accounts.type as account_type_current,          -- \u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    first_type_partner_and_refparent.partner_id,    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    first_type_partner_and_refparent.refparent_id,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0440\u0435\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    first_type_partner_and_refparent.account_type,  -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    first_type_partner_and_refparent.partner_type,  -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    start_date as registration_date,                -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n    (case \n    when account_type='partner' then 'partner'\n    when account_type='tech-partner' then 'tech-partner'\n    when account_type='child-postpay' then 'child-postpay'\n    when account_type='tech-partner-postpay' then 'tech-partner-postpay'\n    when affiliates.reflink_code='manual_registration' and first_type_partner_and_refparent.partner_type='partner' then 'manual_registration'\n    when affiliates.reflink_code='manual_registration' and first_type_partner_and_refparent.partner_type='standart' then 'manual_registration'\n    when partner_type='partner' and  affiliates.reflink_code is distinct from 'manual_registration' then 'partner_code'\n    when partner_type='standart' and refparent_id is not null and affiliates.partner_id is not null then 'partner_code'\n    when partner_type='tech-partner' then 'tech_partner_code' \n    when (reflink_code is not null) and refparent_id is not null and first_type_partner_and_refparent.partner_type is null then 'referal_code'\n    when accounts.utm_source='yandex' then 'yandex_ads'\n    when accounts.utm_medium in ('cpc','cpm','supplies') and accounts.utm_source in ('yandex','direct') then 'yandex_ads'\n    when accounts.utm_source='in' then 'google_ads'\n    when accounts.utm_source='Facebook.ads' then 'facebook_ads'\n    when accounts.utm_source='facebook' and accounts.utm_medium LIKE '%India%' then 'facebook_ads' \n    when accounts.utm_medium='cpc' and accounts.utm_source is null then 'ads'\n    when accounts.utm_medium in ('cpc','cpm') then  concat(accounts.utm_source, '_ads')\n    when (accounts.referrer LIKE '%zoho%') or (accounts.utm_source='zoho') and accounts.referrer not like '%wazzup%' then 'crm_zoho'\n    when accounts.utm_source='bitrix'  then 'crm_bitrix'\n    when accounts.utm_source='bitrix_int' then 'crm_bitrix'\n    when accounts.utm_source='amocrm_ru' then 'crm_amo'\n    when accounts.utm_source='amocrm_com' then 'crm_amo'\n    when accounts.utm_source='amocrm' then 'crm_amo'\n    when accounts.utm_source='kommo' then 'crm_amo'\n    when accounts.utm_source like '%kommo%' then 'crm_amo'\n    when accounts.utm_source like '%hubspot%' then 'crm_hubspot'\n    when accounts.utm_source like '%pipedrive%' then 'crm_pipedrive'\n    when accounts.utm_medium LIKE '%youtube%' then 'youtube'\n    when accounts.utm_source LIKE '%youtube%' then 'youtube_ads'\n    when accounts.utm_medium LIKE '%email' then 'other'\n    when ((accounts.referrer LIKE '%amo%') or (accounts.utm_source LIKE '%amo%')) and accounts.referrer not like '%wazzup%'  then 'crm_amo'\n    when (accounts.referrer LIKE '%megaplan%') or (accounts.utm_source='megaplan') and accounts.referrer not like '%wazzup%' then 'crm_megaplan'\n    when (accounts.referrer LIKE '%hubspot%') or (accounts.utm_source='hubspot') and accounts.referrer not like '%wazzup%' then 'crm_hubspot'\n    when accounts.referrer LIKE '%sbis%' then 'crm_sbis'\n    when accounts.referrer LIKE '%cleverbox-crm%' then 'crm_cleverbox'\n    when accounts.referrer LIKE '%clientbase%' then 'crm_clientbase'\n    when accounts.referrer LIKE '%alfacrm%' then 'crm_alfacrm'\n    when (accounts.referrer LIKE '%planfix%'  and accounts.referrer not like '%wazzup%') or (accounts.utm_source='planfix') then 'crm_planfix'\n    when accounts.referrer LIKE '%stocrm%' then 'crm_stocrm'\n    when accounts.referrer LIKE '%omnidesk%' and accounts.referrer not like '%wazzup%' then 'crm_omnidesk'\n    when accounts.referrer LIKE '%klientiks%' and accounts.referrer not like '%wazzup%' then 'crm_klientiks'\n    when accounts.referrer LIKE '%fitbase%'  and accounts.referrer not like '%wazzup%'then 'crm_fitbase'\n    when ((accounts.referrer LIKE '%bitrix%')  or (accounts.utm_source LIKE '%bitrix%') or (accounts.referrer LIKE '%b24%') or (accounts.referrer LIKE '%btx24%')) and ((accounts.referrer not LIKE '%com%') or (accounts.referrer is null) or (accounts.referrer LIKE '%google%')  ) then 'crm_bitrix'\n    when ((accounts.referrer LIKE '%bitrix%')  or (accounts.utm_source LIKE '%bitrix%') or (accounts.referrer LIKE '%b24%') or (accounts.referrer LIKE '%btx24%')) and ((accounts.referrer LIKE '%com%' and accounts.referrer not like '%google%') or (accounts.referrer LIKE '%pl%')   ) then 'crm_bitrix'\n    when accounts.referrer LIKE '%vk%' then 'other'\n    when accounts.referrer LIKE '%android-app%' then 'other'\n    when accounts.referrer LIKE '%google%' and accounts.utm_source is null then 'poisk_google'\n    when accounts.referrer LIKE '%google%' and accounts.utm_source is null then 'poisk_google'\n    when accounts.referrer LIKE '%webpkgcache%' and accounts.utm_source is null then 'poisk_google'\n    when accounts.referrer LIKE '%ampproject%' and accounts.utm_source is null then 'poisk_google'\n    when accounts.referrer LIKE '%turbopages%' and accounts.utm_source is null then 'poisk_yandex'\n    when accounts.referrer LIKE '%yandex%' then 'poisk_yandex'\n    when accounts.referrer='null' then 'unknown'\n    when REGEXP_CONTAINS(accounts.referrer, r'^https://(wazzup24|wazzup-24).(com|ru|us|in|kz|es)(\\/)?$') and accounts.utm_source is null and accounts.utm_medium is null and accounts.utm_campaign is null then 'unknown'\n    when accounts.utm_source is not null then 'other'\n    when accounts.referrer like '%bing%'   and accounts.ref is null then 'other_poisk'\n    when accounts.referrer like '%signup%' and accounts.ref is null  then 'unknown'\n    when accounts.referrer like '%yahoo%'   and accounts.ref is null then 'other_poisk'\n    when accounts.referrer like '%ysclid%' then 'poisk_yandex'\n    when accounts.referrer like '%app.wazzup24.com%'  and accounts.ref is null then 'unknown'\n   \n    when (accounts.referrer is not null) and accounts.referrer!='' then 'other'\n    else 'unknown'\n    end\n    ) as registration_source,   -- \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 (\u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430)\n\n     (case \n    when accounts.type='partner' then 'partner'\n    when accounts.type='tech-partner' then 'tech-partner'\n    when accounts.type='child-postpay' then 'child-postpay'\n    when accounts.type='tech-partner-postpay' then 'tech-partner-postpay'\n    when affiliates.reflink_code='manual_registration' and partner_accounts_type.type='partner' then 'manual_registration'\n    when affiliates.reflink_code='manual_registration' and partner_accounts_type.type='standart' then 'manual_registration'\n    when partner_accounts_type.type='partner' and  affiliates.reflink_code is distinct from 'manual_registration' then 'partner_code'\n    when  partner_accounts_type.type='standart' and refparent_id is not null and affiliates.partner_id is not null then 'partner_code'\n    when partner_accounts_type.type='tech-partner' then 'tech_partner_code' \n    when (reflink_code is not null) and refparent_id is not null and affiliates.partner_id is null then 'referal_code'\n    when accounts.utm_source='yandex' then 'yandex_ads'\n    when accounts.utm_medium in ('cpc','cpm','supplies') and accounts.utm_source in ('yandex','direct') then 'yandex_ads'\n    when accounts.utm_source='in' then 'google_ads'\n    when accounts.utm_source='Facebook.ads' then 'facebook_ads'\n    when accounts.utm_source='facebook' and accounts.utm_medium LIKE '%India%' then 'facebook_ads' \n    when accounts.utm_medium='cpc' and accounts.utm_source is null then 'ads'\n    when accounts.utm_medium in ('cpc','cpm') then  concat(accounts.utm_source, '_ads')\n    when (accounts.referrer LIKE '%zoho%') or (accounts.utm_source='zoho') then 'crm_zoho'\n    when accounts.utm_source='bitrix' then 'crm_bitrix'\n    when accounts.utm_source='bitrix_int' then 'crm_bitrix'\n    when accounts.utm_source='amocrm_ru' then 'crm_amo'\n    when accounts.utm_source='amocrm_com' then 'crm_amo'\n    when accounts.utm_source='amocrm' then 'crm_amo'\n    when accounts.utm_source='kommo' then 'crm_amo'\n    when accounts.utm_source like '%kommo%' then 'crm_amo'\n    when accounts.utm_source like '%hubspot%' then 'crm_hubspot'\n    when accounts.utm_source like '%pipedrive%' then 'crm_pipedrive'\n    when accounts.utm_medium LIKE '%youtube%' then 'youtube'\n    when accounts.utm_source LIKE '%youtube%' then 'youtube_ads'\n    when accounts.utm_medium LIKE '%email' then 'other'\n    when ((accounts.referrer LIKE '%amo%') or (accounts.utm_source LIKE '%amo%'))  then 'crm_amo'\n    when (accounts.referrer LIKE '%megaplan%') or (accounts.utm_source='megaplan') then 'crm_megaplan'\n    when (accounts.referrer LIKE '%hubspot%') or (accounts.utm_source='hubspot') then 'crm_hubspot'\n    when accounts.referrer LIKE '%sbis%' then 'crm_sbis'\n    when accounts.referrer LIKE '%cleverbox-crm%' then 'crm_cleverbox'\n    when accounts.referrer LIKE '%clientbase%' then 'crm_clientbase'\n    when accounts.referrer LIKE '%alfacrm%' then 'crm_alfacrm'\n    when (accounts.referrer LIKE '%planfix%'  and accounts.referrer not like '%wazzup%') or (accounts.utm_source='planfix') then 'crm_planfix'\n    when accounts.referrer LIKE '%stocrm%' then 'crm_stocrm'\n    when accounts.referrer LIKE '%omnidesk%' then 'crm_omnidesk'\n    when accounts.referrer LIKE '%klientiks%' then 'crm_klientiks'\n    when accounts.referrer LIKE '%fitbase%' then 'crm_fitbase'\n    when ((accounts.referrer LIKE '%bitrix%')  or (accounts.utm_source LIKE '%bitrix%') or (accounts.referrer LIKE '%b24%') or (accounts.referrer LIKE '%btx24%')) and ((accounts.referrer not LIKE '%com%') or (accounts.referrer is null) or (accounts.referrer LIKE '%google%')  ) then 'crm_bitrix'\n    when ((accounts.referrer LIKE '%bitrix%')  or (accounts.utm_source LIKE '%bitrix%') or (accounts.referrer LIKE '%b24%') or (accounts.referrer LIKE '%btx24%')) and ((accounts.referrer LIKE '%com%' and accounts.referrer not like '%google%') or (accounts.referrer LIKE '%pl%')   ) then 'crm_bitrix'\n    when accounts.referrer LIKE '%vk%' then 'other'\n    when accounts.referrer LIKE '%android-app%' then 'other'\n    when accounts.referrer LIKE '%google%' and accounts.utm_source is null then 'poisk_google'\n    when accounts.referrer LIKE '%webpkgcache%' and accounts.utm_source is null then 'poisk_google'\n    when accounts.referrer LIKE '%ampproject%' and accounts.utm_source is null then 'poisk_google'\n    when accounts.referrer LIKE '%yandex%' then 'poisk_yandex'\n    when accounts.referrer LIKE '%turbopages%' and accounts.utm_source is null then 'poisk_yandex'\n    when accounts.referrer='null' then 'unknown'\n    when REGEXP_CONTAINS(accounts.referrer, r'^https://(wazzup24|wazzup-24).(com|ru|us|in|kz|es)(\\/)?$') and accounts.utm_source is null and accounts.utm_medium is null and accounts.utm_campaign is null then 'unknown'\n    when accounts.utm_source is not null then 'other'\n    when accounts.referrer like '%bing%' then 'other_poisk'\n    when accounts.referrer like '%ysclid%' then 'poisk_yandex'\n    when accounts.referrer like '%signup%' and accounts.ref is null  then 'unknown'\n    when accounts.referrer like '%yahoo%' then 'other_poisk'\n    when accounts.referrer like '%app.wazzup24.com%'  and accounts.ref is null then 'unknown'\n    when (accounts.referrer is not null) and accounts.referrer!='' then 'other'\n\n    \n    else 'unknown'\n    end\n    )  as registration_source_current,  -- \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 (\u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430)\n    accounts.referrer                   -- \u0421\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u0441\u0430\u0439\u0442, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u043f\u0430\u043b \u043d\u0430 \u043d\u0430\u0448 \u0441\u0430\u0439\u0442. \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c null\n    from accounts left join first_type_partner_and_refparent on accounts.account_id=first_type_partner_and_refparent.account_id\n    left join affiliates on accounts.account_id=affiliates.child_id\n    left join accounts partner_accounts_type on affiliates.partner_id=partner_accounts_type.account_id\n),\n\nregistration_source_aggregated as (\n    select *, \n    (case \n    when account_type_current='partner' then 'partner'\n    when account_type_current='tech-partner' then 'tech-partner'\n    when account_type_current='child-postpay' then 'child-postpay'\n    when account_type_current='tech-partner-postpay' then 'tech-partner-postpay'\n    when registration_source_current='crm_bitrix' then 'crm_bitrix'\n    when registration_source_current='crm_amo' then 'crm_amo'\n    when (registration_source_current like '%zoho%') or (registration_source_current like '%planfix%') or (registration_source_current like '%hubspot%') or (registration_source like '%pipedrive%') then 'crm_our'\n    when registration_source_current='poisk_google' then 'poisk_google'\n    when registration_source_current='poisk_yandex' then 'poisk_yandex'\n    when registration_source_current like '%ads%' then 'ads'\n    when registration_source_current='referal_code' then 'referal_code'\n    when registration_source_current='manual_registration' then 'manual_registration'\n    when registration_source_current='partner_code' then 'partner_code'\n    when registration_source_current='tech_partner_code' then 'tech_partner_code'\n    when registration_source_current='unknown' then 'direct'\n    else 'other'\n    end)\n    as registration_source_agg_current, -- \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 (\u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430)\n    \n     (case \n    when account_type='partner' then 'partner'\n    when account_type='tech-partner' then 'tech-partner'\n    when account_type='child-postpay' then 'child-postpay'\n    when account_type='tech-partner-postpay' then 'tech-partner-postpay'\n    when registration_source='crm_bitrix' then 'crm_bitrix'\n    when registration_source='crm_amo' then 'crm_amo'\n    when (registration_source like '%zoho%') or (registration_source like '%planfix%') or (registration_source like '%hubspot%') or (registration_source like '%pipedrive%') then 'crm_our'\n    when registration_source='poisk_google' then 'poisk_google'\n    when registration_source='poisk_yandex' then 'poisk_yandex'\n    when registration_source like '%ads%' then 'ads'\n    when registration_source='referal_code' then 'referal_code'\n    when registration_source='manual_registration' then 'manual_registration'\n    when registration_source='partner_code' then 'partner_code'\n    when registration_source='tech_partner_code' then 'tech_partner_code'\n    when registration_source='unknown' then 'direct'\n    else 'other'\n    end)\n    as registration_source_agg  -- \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 (\u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430)\n    \n    \n     from  attribution_data),\n\nregistration_source_with_account_type as (\n    select *, \n    (case when registration_source_agg in ('partner','tech-partner','referal_code','child_postpay','manual_registration','tech_partner_code','tech-partner-postpay','partner_code')\n    then registration_source_agg\n    else 'standart'\n    end\n    ) as account_registration_type,         -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n    (case when registration_source_agg_current in ('partner','tech-partner','referal_code','child_postpay','manual_registration','tech_partner_code','tech-partner-postpay','partner_code')\n    then registration_source_agg_current\n    else 'standart'\n    end\n    ) as account_registration_type_current  -- \u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n\n     from registration_source_aggregated\n)    \n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e\u0431 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nselect * from registration_source_with_account_type", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_attribution_data`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.336179Z", "completed_at": "2025-05-21T12:31:07.424492Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.466183Z", "completed_at": "2025-05-21T12:31:07.466193Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.26264309883117676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_billing_affiliate_subscription_payments_real_money_partner_with_client_bonus_billing_date_subscription_start", "compiled": true, "compiled_code": "with billing_affiliate_with_real_money as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_with_who_paid_billing_date_subsription_start`\n),\n\nbalance_spending_partner as (\n    select \n    account_id as partner_id,\n    billing_affiliate_original_sum as billing_affiliate_original_sum_paid_by_partner,\n    subscriptionupdates_original_sum,\n    wapi_original_sum,\n    subscription_owner as account_id, \n    billingaffiliate_currency as billingaffiliate_currency_partner,\n    subscription_updates_currency as subscription_updates_currency_partner,\n    occured_date as paid_date, \n    subscription_id,  \n    subscription_update_id,\n    action,\n    partner_discount as partner_discount,\n    good_balance_spent as good_balance_spent, \n    wapi_transactions_in_rubles as wapi_transactions_in_rubles,\n    sum_in_rubles_full_subscription as sum_in_rubles_full_subscription,\n    sum_in_rubles_full_subscription-wapi_transactions_in_rubles as subscription_sum,\n    subscriptionupdates_original_sum-wapi_original_sum as subscription_sum_original_sum,\n    sum_in_rubles,\n    account_type\n    from billing_affiliate_with_real_money        \n    where has_partner_paid=1\n),\n\n\nbalance_spending_client as (\n    select \n    account_id as partner_id,\n    subscription_owner as account_id, \n    occured_date as paid_date, \n    subscription_id,  \n    subscription_update_id,\n    action,\n    billing_affiliate_original_sum as billing_affiliate_original_sum_paid_by_client,\n    partner_discount as partner_discount,\n    good_balance_spent as good_balance_spent, \n    coalesce(billingaffiliate_currency, subscription_updates_currency) as billingaffiliate_currency_client,\n    subscription_updates_currency as subscription_updates_currency_client,\n    wapi_transactions_in_rubles as wapi_transactions_in_rubles,\n    sum_in_rubles_full_subscription as sum_in_rubles_full_subscription,\n    sum_in_rubles_full_subscription-wapi_transactions_in_rubles as subscription_sum,\n    sum_in_rubles\n    from billing_affiliate_with_real_money        \n    where has_partner_paid=0\n),\n\nparnter_and_client_balance_with_wapi_discount as (\n    select balance_spending_partner.subscription_update_id,         -- ID \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\n    balance_spending_partner.partner_id,        -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    coalesce(balance_spending_client.account_id, balance_spending_partner.account_id)  as client_id,    -- ID \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    balance_spending_partner.partner_discount as partner_discount,  -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    balance_spending_partner.paid_date,         -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    balance_spending_partner.subscription_id,   -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    balance_spending_partner.action,            -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\n    coalesce(balance_spending_partner.good_balance_spent,0) as good_balance_spent_by_partner,   -- \u041a\u043e\u043b-\u0432\u043e \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c\n    coalesce(balance_spending_client.good_balance_spent,0) as good_balance_spent_by_client,     -- \u041a\u043e\u043b-\u0432\u043e \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c\n    balance_spending_partner.sum_in_rubles as balance_spent_by_partner, -- \u041a\u043e\u043b-\u0432\u043e \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c\n    balance_spending_client.sum_in_rubles as balance_spent_by_client,   -- \u041a\u043e\u043b-\u0432\u043e \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c\n    balance_spending_partner.wapi_transactions_in_rubles,       -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b WABA \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    balance_spending_partner.sum_in_rubles_full_subscription,   -- \u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    balance_spending_partner.subscription_sum,      -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    billing_affiliate_original_sum_paid_by_client,  -- \u0421\u0443\u043c\u043c\u0430, \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0438\u0437 billingAffiliate\n    billing_affiliate_original_sum_paid_by_partner, -- \u0421\u0443\u043c\u043c\u0430, \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u0438\u0437 billingAffiliate\n    billingaffiliate_currency_client,       -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438\u0437 billingAffiliate\n    billingaffiliate_currency_partner,      -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0438\u0437 billingAffiliate\n    coalesce(subscription_updates_currency_client,subscription_updates_currency_partner) as subscription_updates_currency_client,   -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438\u0437 subscriptionUpdates\n    subscription_updates_currency_partner,  -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0438\u0437 subscriptionUpdates\n    subscriptionupdates_original_sum,       -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438\u0437 subscriptionUpdates\n    wapi_original_sum,                      -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\n    account_type,                           -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    subscription_sum_original_sum,          -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    (\n        case when subscription_sum_original_sum=0 then 0\n        when balance_spending_partner.subscription_sum_original_sum>=coalesce(balance_spending_client.billing_affiliate_original_sum_paid_by_client) then balance_spending_partner.subscription_sum_original_sum-coalesce(balance_spending_client.billing_affiliate_original_sum_paid_by_client,0)\n        when balance_spending_partner.subscription_sum_original_sum<coalesce(balance_spending_client.billing_affiliate_original_sum_paid_by_client) \n        then 0 \n        else balance_spending_partner.subscription_sum_original_sum\n        end\n        ) as subscription_sum_without_balance_spent_by_client_original,     -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0431\u0435\u0437 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    (   \n        case \n        when balance_spending_partner.subscription_sum=0 then 0\n        when balance_spending_partner.subscription_sum>=coalesce(balance_spending_client.sum_in_rubles,0) then balance_spending_partner.subscription_sum-coalesce(balance_spending_client.sum_in_rubles,0)\n        when balance_spending_client.sum_in_rubles>balance_spending_partner.subscription_sum then 0\n        end\n        ) as subscription_sum_withtout_balance_spent_by_client,             -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0431\u0435\u0437 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    (\n        case \n        when balance_spending_partner.subscription_sum=0 then 0\n        when balance_spending_client.billing_affiliate_original_sum_paid_by_client is null then 0\n        when balance_spending_partner.subscription_sum>=balance_spending_client.sum_in_rubles then balance_spending_client.sum_in_rubles\n        else balance_spending_partner.subscription_sum\n        end\n        ) as balance_spent_by_client_on_subscription,                       -- \u0421\u0443\u043c\u043c\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    (\n        case \n        when balance_spending_partner.subscription_sum_original_sum=0 then 0\n        when balance_spending_client.billing_affiliate_original_sum_paid_by_client is null then 0\n        when balance_spending_partner.subscription_sum_original_sum>=balance_spending_client.billing_affiliate_original_sum_paid_by_client then balance_spending_client.billing_affiliate_original_sum_paid_by_client\n        else balance_spending_partner.subscription_sum_original_sum\n        end\n    ) as balance_spent_by_client_on_subscription_original,                  -- \u0421\u0443\u043c\u043c\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\n    billing_affiliate_original_sum_paid_by_client-(\n        case \n        when balance_spending_partner.subscription_sum_original_sum=0 then 0\n        when balance_spending_client.billing_affiliate_original_sum_paid_by_client is null then 0\n        when balance_spending_partner.subscription_sum_original_sum>=balance_spending_client.billing_affiliate_original_sum_paid_by_client then balance_spending_client.billing_affiliate_original_sum_paid_by_client\n        else balance_spending_partner.subscription_sum_original_sum\n        end\n        ) as balance_spent_by_client_on_wapi_balance_original,              -- \u0421\u0443\u043c\u043c\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\n    wapi_original_sum-coalesce(\n        billing_affiliate_original_sum_paid_by_client-(case \n        when balance_spending_partner.subscription_sum_original_sum=0 then 0\n        when balance_spending_client.billing_affiliate_original_sum_paid_by_client is null then 0\n        when balance_spending_partner.subscription_sum_original_sum>=balance_spending_client.billing_affiliate_original_sum_paid_by_client then balance_spending_client.billing_affiliate_original_sum_paid_by_client\n        else balance_spending_partner.subscription_sum_original_sum\n        end\n        ),0 ) as wapi_subscription_to_pay_without_client_balance_original   -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0431\u0435\u0437 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    from balance_spending_partner left join balance_spending_client \n    on balance_spending_partner.subscription_update_id=balance_spending_client.subscription_update_id \n    ),\n    balance_and_payments as (\n        select *,  \n        (\n            case when partner_discount is not null and ((paid_date>='2022-11-29'  and account_type='partner') or (paid_date>='2023-02-10' and account_type='tech-partner') or (partner_id=55875354)) \n            then 0.1*coalesce(wapi_subscription_to_pay_without_client_balance_original,0)\n            else 0 end) as wapi_discount_for_partners_original, -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0437\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\n            ceil(subscription_sum_without_balance_spent_by_client_original*(1- coalesce(partner_discount,0))) as subscripion_sum_with_discount_original -- \u0426\u0435\u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441\u043e \u0441\u043a\u0438\u0434\u043a\u043e\u0439\n            from parnter_and_client_balance_with_wapi_discount\n        ),\n        balance_and_payments_with_wapi_balance as (\n            select *,\n            ceil(wapi_subscription_to_pay_without_client_balance_original-coalesce(wapi_discount_for_partners_original,0)) as wapi_balance_partner_to_pay_original, -- \u0421\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u0437\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\n            ceil(subscripion_sum_with_discount_original+wapi_subscription_to_pay_without_client_balance_original-coalesce(wapi_discount_for_partners_original,0)) as subscription_and_balance_partner_to_pay_original   -- \u0421\u0443\u043c\u043c\u0430 \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 + \u0431\u0430\u043b\u0430\u043d\u0441 WABA, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n            from balance_and_payments\n),\n    subscription_and_pay_with_converted_currency as (\n        select balance_and_payments_with_wapi_balance.*,\n            (\n                case  \n                when subscripion_sum_with_discount_original=0 then balance_spent_by_partner\n                when billingaffiliate_currency_client is null and  billingaffiliate_currency_partner='RUR' and billingaffiliate_currency_partner=subscription_updates_currency_client  then  balance_and_payments_with_wapi_balance.wapi_balance_partner_to_pay_original\n                when billingaffiliate_currency_client is null \n                and billingaffiliate_currency_partner=subscription_updates_currency_client then \n                exchange_rates_unpivoted_for_partner.rur*balance_and_payments_with_wapi_balance.wapi_balance_partner_to_pay_original\n                when billingaffiliate_currency_client is null  and billingaffiliate_currency_partner!=subscription_updates_currency_client and subscription_updates_currency_client='RUR'  then \n                balance_and_payments_with_wapi_balance.wapi_balance_partner_to_pay_original*1.03\n                when billingaffiliate_currency_client is null  and billingaffiliate_currency_partner!=subscription_updates_currency_client   then \n                balance_and_payments_with_wapi_balance.wapi_balance_partner_to_pay_original*exchange_rates_unpivoted_client.rur*1.03\n                when balance_and_payments_with_wapi_balance.subscription_updates_currency_client = 'RUR' and billingaffiliate_currency_client!=billingaffiliate_currency_partner\n                then balance_and_payments_with_wapi_balance.wapi_balance_partner_to_pay_original*1.03\n                when balance_and_payments_with_wapi_balance.subscription_updates_currency_client = 'RUR'\n                then balance_and_payments_with_wapi_balance.wapi_balance_partner_to_pay_original\n                when exchange_rates_unpivoted_client.rur is not null and billingaffiliate_currency_client!=billingaffiliate_currency_partner\n                then (balance_and_payments_with_wapi_balance.wapi_balance_partner_to_pay_original) * (exchange_rates_unpivoted_client.rur*1.03)\n                when exchange_rates_unpivoted_client.rur is not null and billingaffiliate_currency_client=billingaffiliate_currency_partner\n                then (balance_and_payments_with_wapi_balance.wapi_balance_partner_to_pay_original) * (exchange_rates_unpivoted_client.rur)\n                end\n            ) as wapi_balance_partner_to_pay_sum_in_rubles, -- \u0421\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u0437\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n            (\n                case\n                when billingaffiliate_currency_partner='RUR' and  billingaffiliate_currency_client is null and   wapi_original_sum=0 then billing_affiliate_original_sum_paid_by_partner\n                when wapi_original_sum=0 and billingaffiliate_currency_client is null  then balance_spent_by_partner\n                when billingaffiliate_currency_client is null and  billingaffiliate_currency_partner='RUR' and billingaffiliate_currency_partner=subscription_updates_currency_client  then  balance_and_payments_with_wapi_balance.subscription_and_balance_partner_to_pay_original\n                when billingaffiliate_currency_client is null \n                and billingaffiliate_currency_partner=subscription_updates_currency_client then \n                exchange_rates_unpivoted_for_partner.rur*balance_and_payments_with_wapi_balance.subscription_and_balance_partner_to_pay_original\n                when billingaffiliate_currency_client is null  and billingaffiliate_currency_partner!=subscription_updates_currency_client and subscription_updates_currency_client='RUR'  then \n                balance_and_payments_with_wapi_balance.subscription_and_balance_partner_to_pay_original*1.03\n                when billingaffiliate_currency_client is null  and billingaffiliate_currency_partner!=subscription_updates_currency_client   then \n                balance_and_payments_with_wapi_balance.subscription_and_balance_partner_to_pay_original*exchange_rates_unpivoted_client.rur*1.03\n                when balance_and_payments_with_wapi_balance.subscription_updates_currency_client = 'RUR' and billingaffiliate_currency_client!=billingaffiliate_currency_partner\n                then balance_and_payments_with_wapi_balance.subscription_and_balance_partner_to_pay_original*1.03\n                when balance_and_payments_with_wapi_balance.subscription_updates_currency_client = 'RUR'\n                then balance_and_payments_with_wapi_balance.subscription_and_balance_partner_to_pay_original\n                when exchange_rates_unpivoted_client.rur is not null and billingaffiliate_currency_client!=billingaffiliate_currency_partner\n                then (balance_and_payments_with_wapi_balance.subscription_and_balance_partner_to_pay_original) * (exchange_rates_unpivoted_client.rur*1.03)\n                when exchange_rates_unpivoted_client.rur is not null and billingaffiliate_currency_client=billingaffiliate_currency_partner\n                then (balance_and_payments_with_wapi_balance.subscription_and_balance_partner_to_pay_original) * (exchange_rates_unpivoted_client.rur)\n                end\n            ) as subscription_and_balance_partner_to_pay_sum_in_rubles, -- \u0421\u0443\u043c\u043c\u0430 \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 + \u0431\u0430\u043b\u0430\u043d\u0441 WABA, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n        exchange_rates_unpivoted_client.rur as client_currency,         -- \u041a\u0443\u0440\u0441 \u043e\u0431\u043c\u0435\u043d\u0430 \u0432\u0430\u043b\u044e\u0442\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n        exchange_rates_unpivoted_for_partner.rur as partner_currency,   -- \u041a\u0443\u0440\u0441 \u043e\u0431\u043c\u0435\u043d\u0430 \u0432\u0430\u043b\u044e\u0442\u044b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n            (\n                case\n                when wapi_original_sum=0 then balance_spent_by_partner\n                when billingaffiliate_currency_partner='RUR' and wapi_original_sum=0  and  billingaffiliate_currency_client is null  then billing_affiliate_original_sum_paid_by_partner\n                when billingaffiliate_currency_client is null and  billingaffiliate_currency_partner='RUR' and billingaffiliate_currency_partner=subscription_updates_currency_client  then  balance_and_payments_with_wapi_balance.subscripion_sum_with_discount_original\n                when billingaffiliate_currency_client is null \n                and billingaffiliate_currency_partner=subscription_updates_currency_client then \n                exchange_rates_unpivoted_for_partner.rur*balance_and_payments_with_wapi_balance.subscripion_sum_with_discount_original\n                when billingaffiliate_currency_client is null  and billingaffiliate_currency_partner!=subscription_updates_currency_client \n                and subscription_updates_currency_client='RUR' \n                then balance_and_payments_with_wapi_balance.subscripion_sum_with_discount_original*1.03\n                when billingaffiliate_currency_client is null  and billingaffiliate_currency_partner!=subscription_updates_currency_client \n                and subscription_updates_currency_partner!='RUR'\n                then balance_and_payments_with_wapi_balance.subscripion_sum_with_discount_original*exchange_rates_unpivoted_client.rur*1.03\n                when balance_and_payments_with_wapi_balance.subscription_updates_currency_client = 'RUR' and billingaffiliate_currency_client!=billingaffiliate_currency_partner\n                then balance_and_payments_with_wapi_balance.subscripion_sum_with_discount_original*1.03\n                when balance_and_payments_with_wapi_balance.subscription_updates_currency_client = 'RUR'\n                then balance_and_payments_with_wapi_balance.subscripion_sum_with_discount_original\n                when exchange_rates_unpivoted_client.rur is not null and billingaffiliate_currency_client!=billingaffiliate_currency_partner\n                then (balance_and_payments_with_wapi_balance.subscripion_sum_with_discount_original) * (exchange_rates_unpivoted_client.rur*1.03)\n                when exchange_rates_unpivoted_client.rur is not null and billingaffiliate_currency_client=billingaffiliate_currency_partner\n                then (balance_and_payments_with_wapi_balance.subscripion_sum_with_discount_original) * (exchange_rates_unpivoted_client.rur)\n                end\n            ) as subscripion_sum_with_discount_converted_to_rubles,     -- \u0426\u0435\u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441\u043e \u0441\u043a\u0438\u0434\u043a\u043e\u0439 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n            (\n                case \n                when balance_spent_by_client_on_wapi_balance_original =0 then 0 \n                when billingaffiliate_currency_client='RUR' then balance_spent_by_client_on_wapi_balance_original\n                else coalesce(balance_spent_by_client_on_wapi_balance_original*exchange_rates_unpivoted_client.rur,0)               \n                end\n            ) as balance_spent_by_client_on_wapi_balance_sum_in_rubles, -- \u0421\u0443\u043c\u043c\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n            (case when subscription_updates_currency_client='RUR' then wapi_discount_for_partners_original\n            else wapi_discount_for_partners_original*exchange_rates_unpivoted_client.rur\n            end\n            ) as wapi_discount_for_partners_sum_in_rubles               -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0437\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n\n        from balance_and_payments_with_wapi_balance\n        left join\n            `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted_client\n            on exchange_rates_unpivoted_client._ibk = balance_and_payments_with_wapi_balance.paid_date\n            and exchange_rates_unpivoted_client.currency = balance_and_payments_with_wapi_balance.subscription_updates_currency_client\n        left join\n            `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted_for_partner\n            on exchange_rates_unpivoted_for_partner._ibk = balance_and_payments_with_wapi_balance.paid_date\n            and exchange_rates_unpivoted_for_partner.currency = balance_and_payments_with_wapi_balance.billingaffiliate_currency_partner),\n\nsubscription_and_pay_with_converted_currency_and_good_balance as (\n    select *, \n    (\n        case when good_balance_spent_by_client=0 then 0 \n        when good_balance_spent_by_client>=balance_spent_by_client_on_subscription then balance_spent_by_client_on_subscription\n        else good_balance_spent_by_client\n        end\n    ) as good_balance_spent_by_client_on_subscription,          -- \u0421\u0443\u043c\u043c\u0430 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\n    good_balance_spent_by_client-(\n        case when good_balance_spent_by_client=0 then 0 \n        when good_balance_spent_by_client>=balance_spent_by_client_on_subscription then balance_spent_by_client_on_subscription\n        else good_balance_spent_by_client\n        end\n    ) as good_balance_spent_by_client_on_waba_balance,          -- \u0421\u0443\u043c\u043c\u0430 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\n    (\n        case \n        when wapi_original_sum=0 and good_balance_spent_by_partner>=subscripion_sum_with_discount_converted_to_rubles then good_balance_spent_by_partner\n        when good_balance_spent_by_partner>=subscripion_sum_with_discount_converted_to_rubles then subscripion_sum_with_discount_converted_to_rubles\n        else good_balance_spent_by_partner\n        end) as good_balance_spent_by_partner_on_subscription,  -- \u0421\u0443\u043c\u043c\u0430 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\n    good_balance_spent_by_partner-\n    (\n        case \n        when wapi_original_sum=0 and good_balance_spent_by_partner>=subscripion_sum_with_discount_converted_to_rubles then good_balance_spent_by_partner\n        when good_balance_spent_by_partner>=subscripion_sum_with_discount_converted_to_rubles then subscripion_sum_with_discount_converted_to_rubles\n        else good_balance_spent_by_partner\n        end) as good_balance_spent_by_partner_on_waba_balance   -- \u0421\u0443\u043c\u043c\u0430 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\n    from subscription_and_pay_with_converted_currency),\nsubscription_and_pay_with_converted_currency_and_good_and_bad_balance as (\n    select *, round(balance_spent_by_client_on_subscription,2)-round(good_balance_spent_by_client_on_subscription,2) as bad_balance_spent_by_client_on_subscription_sum_in_rubles,      -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043b\u043e\u0445\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    round(balance_spent_by_client_on_wapi_balance_sum_in_rubles,2)-round(good_balance_spent_by_client_on_waba_balance,2) as bad_balance_spent_by_client_on_waba_balance_sum_in_rubles,  -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043b\u043e\u0445\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    round(subscripion_sum_with_discount_converted_to_rubles,2)-round(good_balance_spent_by_partner_on_subscription,2) as bad_balance_spent_by_partner_on_subscrpition_sum_in_rubles,    -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043b\u043e\u0445\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    round(wapi_balance_partner_to_pay_sum_in_rubles,2)-round(good_balance_spent_by_partner_on_waba_balance,2) as bad_balance_spent_by_partner_on_waba_balance_sum_in_rubles             -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043b\u043e\u0445\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    from subscription_and_pay_with_converted_currency_and_good_balance),\n\nsubscription_and_pay_with_converted_currency_and_good_and_bad_balance_partner_and_client as (    \nselect *, good_balance_spent_by_client_on_waba_balance+good_balance_spent_by_partner_on_waba_balance as sum_in_rubles_spent_on_waba_balance,                -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\ngood_balance_spent_by_client_on_subscription+good_balance_spent_by_partner_on_subscription as sum_in_rubles_spent_on_subscription,                          -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\nbad_balance_spent_by_client_on_waba_balance_sum_in_rubles+bad_balance_spent_by_partner_on_waba_balance_sum_in_rubles as bad_balance_spent_on_waba_balance   -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043b\u043e\u0445\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\n from subscription_and_pay_with_converted_currency_and_good_and_bad_balance)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u043f\u043e \u0431\u0438\u043b\u043b\u0438\u043d\u0433\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u0435\u043d\u0435\u0433 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u043f\u0440\u0438 \u043e\u043f\u043b\u0430\u0442\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n select * from subscription_and_pay_with_converted_currency_and_good_and_bad_balance_partner_and_client", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_partner_with_client_bonus_billing_date_subscription_start`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.341366Z", "completed_at": "2025-05-21T12:31:07.424857Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.466924Z", "completed_at": "2025-05-21T12:31:07.466934Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.26227736473083496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_only_subscription_payments_and_wapi_sessions_bills_and_cards", "compiled": true, "compiled_code": "with bills_pay as (\n    select  \n        stg_billingPackages.account_id,\n        bills.paid_at,                           -- (05.03.2025)\n        paid_date, \n        round(cast(sum_in_rubles as decimal),4) as sum_in_rubles,\n        original_sum,\n        subscription_id,\n        action,\n        completed_date,\n        'bills' as data_source,\n        subscriptionupdates_guid as subscription_update_id ,\n        subscription_updates_original_sum,\n        wapi_discount_for_partners,\n        wapi_original_sum,\n        partner_discount,\n        account_type,\n        round(cast(wapi_transactions_in_rubles as decimal) ,4) as wapi_transactions_in_rubles,\n        subscription_sum_in_rubles,\n        subscription_sum_original,\n        round(cast(sum_in_rubles_full_subscription as decimal),4) as sum_in_rubles_full_subscription,\n        currency\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_bills_only_valid` bills\n    inner join `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` stg_billingPackages \n    on stg_billingPackages.guid=bills.subscription_id\n),\ncard_pay as (\n    select  \n        account_id,                         -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        paid_at,                            -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0430 \u0432 state = completed (05.03.2025)\n        paid_date,                          -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n        sum_in_rubles,                      -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n        original_sum,                       -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n        subscription_id,                    -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        action,                             -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\n        paid_date as completed_date,        -- \u0414\u0430\u0442\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043e\u043f\u043b\u0430\u0442\u044b\n        data_source,                        -- \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043e\u043f\u043b\u0430\u0442\u044b\n        subscription_update_id ,            -- ID \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\n        subscription_updates_original_sum,  -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0438\u0437 subscriptionUpdates\n        wapi_discount_for_partners,         -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0437\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\n        wapi_original_sum,                  -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\n        partner_discount,                   -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        account_type,                       -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        wapi_transactions_in_rubles,        -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n        subscription_sum_in_rubles,         -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n        subscription_sum_original,          -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        sum_in_rubles_full_subscription,    -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n        currency                            -- \u0412\u0430\u043b\u044e\u0442\u0430\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_card_with_account_type_subscription_only`\n),\n   \nrevenue_union as (\n    select * from bills_pay\n    UNION ALL\n    select * from card_pay\n    )\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 \u0441\u0447\u0451\u0442 \u0438\u043b\u0438 \u043a\u0430\u0440\u0442\u0443 \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\nselect * from revenue_union", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_and_wapi_sessions_bills_and_cards`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.589677Z", "completed_at": "2025-05-21T12:31:07.595959Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.601236Z", "completed_at": "2025-05-21T12:31:07.601246Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.13932371139526367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_subscription_history_combined_intervals_payments_only", "compiled": true, "compiled_code": "with subscription_all as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_subscription_history_payments_only`\n)\n,check_times AS (\n    SELECT cmuserid, start_date as TIME FROM subscription_all\n           UNION DISTINCT\n    SELECT cmuserid, end_date as TIME FROM subscription_all\n    )\n , distinct_intervals AS (\n        SELECT cmuserid, \n        TIME AS start_date,  LEAD(TIME) OVER (PARTITION BY cmuserid ORDER BY TIME) end_date\n        FROM check_times)\n,deduped_intervals AS (\n          SELECT a.cmuserid, a.start_date, a.end_date\n          FROM distinct_intervals a\n          JOIN subscription_all b\n          ON a.cmuserid = b.cmuserid\n          AND a.start_date BETWEEN b.start_date AND b.end_date \n          AND a.end_date BETWEEN b.start_date AND b.end_date\n          GROUP BY 1,2,3)\n,deduped_intervals_with_flag as (\n    SELECT *,\n    start_date != IFNULL(LAG(end_date) OVER (PARTITION BY cmuserid ORDER BY start_date), start_date) as flag\n    FROM deduped_intervals),\n\ndeduped_intervals_with_group as (\n    SELECT *, \n    count(CASE WHEN flag THEN 1 END) OVER (PARTITION BY cmuserid ORDER BY start_date) grp\n    from deduped_intervals_with_flag\n),\n\ncombined_intervals AS (\n  SELECT cmuserid,  MIN(start_date) subscription_start, MAX(end_date) subscription_end\n  FROM deduped_intervals_with_group\n  GROUP BY cmuserid, grp\n)\nselect *\nfrom combined_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_subscription_history_combined_intervals_payments_only`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.592247Z", "completed_at": "2025-05-21T12:31:07.597969Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.601822Z", "completed_at": "2025-05-21T12:31:07.601831Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.17772722244262695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_subscription_history_combined_intervals", "compiled": true, "compiled_code": "with subscription_all as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_subscription_history`\n)\n,check_times AS (\n    SELECT cmuserid, start_date as TIME FROM subscription_all\n           UNION DISTINCT\n    SELECT cmuserid, end_date as TIME FROM subscription_all\n    )\n , distinct_intervals AS (\n        SELECT cmuserid, \n        TIME AS start_date,  LEAD(TIME) OVER (PARTITION BY cmuserid ORDER BY TIME) end_date\n        FROM check_times)\n,deduped_intervals AS (\n          SELECT a.cmuserid, a.start_date, a.end_date\n          FROM distinct_intervals a\n          JOIN subscription_all b\n          ON a.cmuserid = b.cmuserid\n          AND a.start_date BETWEEN b.start_date AND b.end_date \n          AND a.end_date BETWEEN b.start_date AND b.end_date\n          GROUP BY 1,2,3)\n,deduped_intervals_with_flag as (\n    SELECT *,\n    start_date != IFNULL(LAG(end_date) OVER (PARTITION BY cmuserid ORDER BY start_date), start_date) as flag\n    FROM deduped_intervals),\n\ndeduped_intervals_with_group as (\n    SELECT *, \n    count(CASE WHEN flag THEN 1 END) OVER (PARTITION BY cmuserid ORDER BY start_date) grp\n    from deduped_intervals_with_flag\n),\n\ncombined_intervals AS (\n  SELECT cmuserid,  MIN(start_date) subscription_start, MAX(end_date) subscription_end\n  FROM deduped_intervals_with_group\n  GROUP BY cmuserid, grp\n)\nselect *\nfrom combined_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_subscription_history_combined_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.596536Z", "completed_at": "2025-05-21T12:31:07.602302Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.685342Z", "completed_at": "2025-05-21T12:31:07.685353Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.14080166816711426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid_subscription_history_combined_intervals_posts_only", "compiled": true, "compiled_code": "with subscription_all as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_subscription_history_posts_only`\n)\n,check_times AS (\n    SELECT cmuserid, start_date as TIME FROM subscription_all\n           UNION DISTINCT\n    SELECT cmuserid, end_date as TIME FROM subscription_all\n    )\n , distinct_intervals AS (\n        SELECT cmuserid, \n        TIME AS start_date,  LEAD(TIME) OVER (PARTITION BY cmuserid ORDER BY TIME) end_date\n        FROM check_times)\n,deduped_intervals AS (\n          SELECT a.cmuserid, a.start_date, a.end_date\n          FROM distinct_intervals a\n          JOIN subscription_all b\n          ON a.cmuserid = b.cmuserid\n          AND a.start_date BETWEEN b.start_date AND b.end_date \n          AND a.end_date BETWEEN b.start_date AND b.end_date\n          GROUP BY 1,2,3)\n,deduped_intervals_with_flag as (\n    SELECT *,\n    start_date != IFNULL(LAG(end_date) OVER (PARTITION BY cmuserid ORDER BY start_date), start_date) as flag\n    FROM deduped_intervals),\n\ndeduped_intervals_with_group as (\n    SELECT *, \n    count(CASE WHEN flag THEN 1 END) OVER (PARTITION BY cmuserid ORDER BY start_date) grp\n    from deduped_intervals_with_flag\n),\n\ncombined_intervals AS (\n  SELECT cmuserid,  MIN(start_date) subscription_start, MAX(end_date) subscription_end\n  FROM deduped_intervals_with_group\n  GROUP BY cmuserid, grp\n)\nselect *\nfrom combined_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_subscription_history_combined_intervals_posts_only`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.599614Z", "completed_at": "2025-05-21T12:31:07.684010Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.688086Z", "completed_at": "2025-05-21T12:31:07.688095Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1780414581298828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_funnel_key_event__unpivot_events", "compiled": true, "compiled_code": "with int_funnel_key_events__counting_users_on_each_stage as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_funnel_key_events__counting_users_on_each_stage`\n),\n\nint_funnel_key_event__unpivot_events as (\n    select * from int_funnel_key_events__counting_users_on_each_stage \n    unpivot (\n            users for event in (SuccReg,TemplateUsage,Edits,Activation,Copies,Posted,paid,repeat_paid,first_paid)\n            )\n    )\n\nselect * from int_funnel_key_event__unpivot_events", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_funnel_key_event__unpivot_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.604427Z", "completed_at": "2025-05-21T12:31:07.686891Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.730216Z", "completed_at": "2025-05-21T12:31:07.730227Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2158346176147461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_old_and_new_end_date_filledna", "compiled": true, "compiled_code": "\n\n\n\nwith end_date_r_close as (\n    select *, \n    sum(case when end_date is not null then 1 else 0 end) over (partition by subscription_id\n    order by start_at) as r_close\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_old_and_new_data_union`\n),\n\nend_date_r_close_filled as (\n\n    select\n    *, \n    first_value(end_date) over (partition by subscription_id,\n    r_close order by start_at rows between unbounded preceding and unbounded following) as end_date_filled\n    from end_date_r_close\n   ),\n\nunsubscribe_info as (\n    select *, \n    cast(deleted_at as date) as deleted_date\n     from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deleted_from_eventLogs`\n),\n\nsubscription_data as (\n    select * from  end_date_r_close_filled\n    where end_date_filled is not null\n),\n\nsubscription_with_deleted as (   \n        select account_id,                                      -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        start_date,                                             -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        subscription_data.subscription_id,                      -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        start_at,                                               -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        (case when deleted_date is null then end_date_filled    \n        when end_date_filled<deleted_date then end_date_filled\n        else deleted_date\n        end) as end_date,                                       -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\u0438\n        action,                                                 -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439: addQuantity, setPromisedPayment, pay, subtractQuantity, templateMessages, loweringTariff, raiseTariff, renewal, balanceTopup \u0438\u043b\u0438 null\n        partner_account_id,                                     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        currency,                                               -- \u0412\u0430\u043b\u044e\u0442\u0430\n        guid                                                    -- guid \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f - \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\n        from subscription_data\n        left join unsubscribe_info\n        on subscription_data.subscription_id=unsubscribe_info.subscription_id),\n\nsubscription_with_deleted_date as (\n\nselect account_id,                                              -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        start_date,                                             -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        start_at,                                               -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        subscription_id,                                        -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        end_date,                                               -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\u0438\n        action,                                                 -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439: addQuantity, setPromisedPayment, pay, subtractQuantity, templateMessages, loweringTariff, raiseTariff, renewal, balanceTopup \u0438\u043b\u0438 null\n        partner_account_id,                                     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        currency,                                               -- \u0412\u0430\u043b\u044e\u0442\u0430\n        guid                                                    -- guid \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f - \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\n        from subscription_with_deleted)\n\n\n\n select * from subscription_with_deleted_date   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e\u0431 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_old_and_new_end_date_filledna`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.602823Z", "completed_at": "2025-05-21T12:31:07.687375Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.730754Z", "completed_at": "2025-05-21T12:31:07.730763Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.25731325149536133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_who_paid__paying_segments", "compiled": true, "compiled_code": "with old_and_new_billing__merged as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_who_paid__old_and_new_billing__merged`\n),\n\npaying_segments as (\n        select *,  \n\t\t(case when partner_id is null and refparent_id is null then 'standart' /*\u0435\u0441\u043b\u0438 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0435\u0442 \u043d\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u043d\u0438 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u0430, \u0442\u043e \u043e\u043d 100% \u0441\u0430\u043c \u043f\u043b\u0430\u0442\u0438\u0442 \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 */\n\t\t when partner_type='tech-partner' then 'tech-partner_child_account'\n\t\t when payer_partner_account_id is null then 'standart' /* 100% \u044d\u0442\u043e \u043e\u043f\u043b\u0430\u0442\u044b \u0441\u0430\u043c\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 */\n\t\t else 'partner_child_account' /*\u0431\u044b\u043b\u0430 \u043e\u043f\u043b\u0430\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c */ \n\t\t end\n\t\t ) as segment_type\n\t\t from old_and_new_billing__merged\n\t\t ),\nfinal_paying_segments as (\n        select *except(segment_type),\n         case when payer_partner_account_id is null and segment_type = 'tech-partner_child_account' then 'tech-partner_child_account_independent'\n              when payer_partner_account_id is not null and segment_type = 'tech-partner_child_account' then 'tech-partner_child_account_dependent'\n              else segment_type\n         end as segment_type    -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\nfrom paying_segments)\nselect *    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c\u0438 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043f\u043b\u0430\u0442\u0435\u043b\u044c\u0449\u0438\u043a\u0435 \u0441 \u0435\u0433\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u043c\nfrom final_paying_segments", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_who_paid__paying_segments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.855217Z", "completed_at": "2025-05-21T12:31:07.866259Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.870005Z", "completed_at": "2025-05-21T12:31:07.870017Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1846933364868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_with_sum_and_converted_currency", "compiled": true, "compiled_code": "with    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u0441 \u0441\u0443\u043c\u043c\u043e\u0439 != 0\n    payments as (\n        select *\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_old_and_new_data_union`\n        where sum != 0\n    ),\n\n    payments_with_currency as (\n\n        select      -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u0441 \u0432\u0430\u043b\u044e\u0442\u0430\u043c\u0438 \u0438 \u0434\u0430\u0442\u043e\u0439\n            sum,                            -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\n            payments.currency,              -- \u0412\u0430\u043b\u044e\u0442\u0430\n            start_date,                     -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430\n            (\n                case\n                    when payments.currency = 'RUR'\n                    then sum\n                    when rur is not null\n                    then sum * rur\n                    when payments.currency = 'EUR' and rur is null\n                    then sum * 85\n                    when payments.currency = 'USD' and rur is null\n                    then sum * 75\n                    when payments.currency = 'KZT' and rur is null\n                    then sum * 0.24\n                end\n            ) as sum_in_rubles, -- \u0421\u0443\u043c\u043c\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445 \u0441 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043a\u0443\u0440\u0441\u043e\u043c\n            coalesce(\n                (\n                    case\n                        when payments.currency = 'RUR'\n                        then wapi_transactions\n                        when rur is not null\n                        then wapi_transactions * rur\n                        when payments.currency = 'EUR' and rur is null\n                        then wapi_transactions * 85\n                        when payments.currency = 'USD' and rur is null\n                        then wapi_transactions * 75\n                        when payments.currency = 'KZT' and rur is null\n                        then wapi_transactions * 0.24\n                    end\n                ),\n                0\n            ) as wapi_transactions_in_rubles,   -- \u0421\u0443\u043c\u043c\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445 \u0441 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043a\u0443\u0440\u0441\u043e\u043c\n            sum as original_sum,                -- \u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n            coalesce(wapi_transactions, 0) as wapi_original_sum,    -- \u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 WABA\n            (\n                case\n                    when payments.currency = 'USD'\n                    then sum\n                    when usd is not null\n                    then sum / usd\n                    when payments.currency = 'EUR' and usd is null\n                    then sum / 1.12\n                    when payments.currency = 'USD' and usd is null\n                    then sum * 75\n                    when payments.currency = 'KZT' and usd is null\n                    then sum * 0.24\n                end\n            ) as sum_in_usd,        -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445 \u0441 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043a\u0443\u0440\u0441\u043e\u043c\n            (\n                case\n                    when payments.currency = 'USD'\n                    then wapi_transactions\n                    when usd is not null\n                    then wapi_transactions / usd\n                    when payments.currency = 'EUR' and usd is null\n                    then wapi_transactions / 1.12\n                    when payments.currency = 'USD' and usd is null\n                    then wapi_transactions * 75\n                    when payments.currency = 'KZT' and usd is null\n                    then wapi_transactions * 0.24\n                end\n            ) as wapi_sum_in_usd,   -- \u0421\u0443\u043c\u043c\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 WABA \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445 \u0441 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043a\u0443\u0440\u0441\u043e\u043c\n\n            guid,                   -- guid \u0438\u0437 subscriptionUpdates\n            partner_account_id,     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n            subscription_type,      -- \u0422\u0438\u043f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438: viber, telegram, whatsapp, waba, avito, vk, tgapi, instagram\n            account_id              -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        from payments\n        left join\n            `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted\n            on exchange_rates_unpivoted._ibk = payments.start_date\n            and exchange_rates_unpivoted.currency = payments.currency\n    )\n\nselect payments_with_currency.*\nfrom payments_with_currency\nleft join\n    `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts\n    on accounts.account_id = payments_with_currency.account_id\nwhere accounts.type not in ('employee', 'partner-demo')\n-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u0441 \u0441\u0443\u043c\u043c\u043e\u0439 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435, \u0440\u0443\u0431\u043b\u044f\u0445 \u0438 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445 \u0441 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043a\u0443\u0440\u0441\u043e\u043c", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_and_converted_currency`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.859876Z", "completed_at": "2025-05-21T12:31:07.870572Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.915421Z", "completed_at": "2025-05-21T12:31:07.915432Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.18834543228149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.Profeat_site.unique_int_subscriptions_old_and_new_data_union_guid.a81a3305c7", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select guid as unique_field\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_old_and_new_data_union`\n  where guid is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.867774Z", "completed_at": "2025-05-21T12:31:07.914951Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.919830Z", "completed_at": "2025-05-21T12:31:07.919839Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.14612817764282227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_discount_by_month_and_account", "compiled": true, "compiled_code": "with discount as (\n select partner_id, \n paid_date,\n subscription_updates_currency_client,\n coalesce(rur,1)*subscription_sum_without_balance_spent_by_client_original-coalesce(rur,1)*subscripion_sum_with_discount_original as discount_sum_in_rubles, \nsubscription_sum_without_balance_spent_by_client_original-subscripion_sum_with_discount_original  \nas discount_sum_original   \nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_partner_with_client_bonus` partner_balance\n left join `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates\n on exchange_rates.data=partner_balance.paid_date\n and exchange_rates.currency=partner_balance.subscription_updates_currency_client\n where action not in ('balanceTopup','templateMessages'))\n    -- \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u044b \u0437\u0430\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u043d\u0430 \u0431\u043e\u043d\u0443\u0441\u0430\u0445 \u043f\u0440\u0438 \u043e\u043f\u043b\u0430\u0442\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438. \u0423\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u0447\u043d\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043c\u0438\u043d\u0443\u0441 \u0431\u043e\u043d\u0443\u0441\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n select partner_id as partner_id,                           -- \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n subscription_updates_currency_client as currency,          -- \u0432\u0430\u043b\u044e\u0442\u0430\n date_trunc(paid_date,month) as paid_month,                 -- \u043c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n sum(discount_sum_in_rubles) as discount_sum_in_rubles,     -- \u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0432 \u0440\u0443\u0431\u043b\u0438\n sum(discount_sum_original) as discount_sum_original        -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0432\u0430\u043b\u044e\u0442\u0435 \u041b\u041a \u0434\u043e\u0447\u043a\u0438, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0431\u044b\u043b\u0430 \u043e\u043f\u043b\u0430\u0442\u0430\n from discount\n group by 1,2,3", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_discount_by_month_and_account`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.871616Z", "completed_at": "2025-05-21T12:31:07.918202Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.959653Z", "completed_at": "2025-05-21T12:31:07.959664Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.18009710311889648, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_discounts_by_day_and_account", "compiled": true, "compiled_code": "WITH discount AS (\n    SELECT \n        partner_id, \n        paid_date,\n        subscription_updates_currency_client,\n        coalesce(rur,1)*subscription_sum_without_balance_spent_by_client_original-coalesce(rur,1)*subscripion_sum_with_discount_original AS discount_sum_in_rubles, \n        subscription_sum_without_balance_spent_by_client_original-subscripion_sum_with_discount_original AS discount_sum_original   \n    FROM `dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_partner_with_client_bonus` partner_balance\n    LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates ON exchange_rates.data=partner_balance.paid_date AND exchange_rates.currency=partner_balance.subscription_updates_currency_client\n    WHERE action NOT IN ('balanceTopup','templateMessages')\n)\n\nSELECT \n    partner_id                           AS partner_id,             -- \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    subscription_updates_currency_client AS currency,               -- \u0432\u0430\u043b\u044e\u0442\u0430\n    paid_date,                                                      -- \u0434\u0435\u043d\u044c \u043e\u043f\u043b\u0430\u0442\u044b\n    sum(discount_sum_in_rubles)          AS discount_sum_in_rubles, -- \u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0432 \u0440\u0443\u0431\u043b\u0438\n    sum(discount_sum_original)           AS discount_sum_original   -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0432\u0430\u043b\u044e\u0442\u0435 \u041b\u041a \u0434\u043e\u0447\u043a\u0438, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0431\u044b\u043b\u0430 \u043e\u043f\u043b\u0430\u0442\u0430\nFROM discount\nGROUP BY 1,2,3", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_discounts_by_day_and_account`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.873683Z", "completed_at": "2025-05-21T12:31:07.919220Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:07.961387Z", "completed_at": "2025-05-21T12:31:07.961396Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.21504616737365723, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_metrics_for_partners_earned_money", "compiled": true, "compiled_code": "\n\nwith discount as (\n select partner_id, \n        paid_date,\n        wapi_discount_for_partners_sum_in_rubles,\n        subscription_updates_currency_client,\n        coalesce(rur,1)*subscription_sum_without_balance_spent_by_client_original-coalesce(rur,1)*subscripion_sum_with_discount_original as discount_sum_in_rubles, \n        subscription_sum_without_balance_spent_by_client_original-subscripion_sum_with_discount_original  as discount_sum_original,\n        bp.type  as subscription_type \nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_partner_with_client_bonus` partner_balance\njoin `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` bp on partner_balance.subscription_id = bp.guid\n left join `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates\n            on exchange_rates.data=partner_balance.paid_date\n            and exchange_rates.currency=partner_balance.subscription_updates_currency_client\n    \n ),union_data as (\n select partner_id as partner_id,                   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n         date_trunc(paid_date,month) as paid_month, -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n        sum(discount_sum_in_rubles+wapi_discount_for_partners_sum_in_rubles) as discount_sum_in_rubles, -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        sum(case when subscription_type in ('waba','wapi') then discount_sum_in_rubles+wapi_discount_for_partners_sum_in_rubles end) as paid_channels_waba_sum,     -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 WABA\n        sum(case when subscription_type='tgapi' then discount_sum_in_rubles+wapi_discount_for_partners_sum_in_rubles  end) as paid_channels_tgapi_sum,              -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 TGAPI\n        sum(case when subscription_type='whatsapp' then discount_sum_in_rubles+wapi_discount_for_partners_sum_in_rubles  end) as paid_channels_wa_sum,              -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 WHATSAPP\n        sum(case when subscription_type='telegram' then discount_sum_in_rubles+wapi_discount_for_partners_sum_in_rubles  end) as paid_channels_telegram_sum,        -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 TELEGRAM\n        sum(case when subscription_type='instagram' then discount_sum_in_rubles+wapi_discount_for_partners_sum_in_rubles  end) as paid_channels_instagram_sum,      -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 INSTAGRAM\n        sum(case when subscription_type='avito' then discount_sum_in_rubles+wapi_discount_for_partners_sum_in_rubles  end) as paid_channels_avito_sum,              -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 AVITO\n        sum(case when subscription_type = 'vk' then discount_sum_in_rubles+wapi_discount_for_partners_sum_in_rubles   end) paid_channels_vk_sum,                    -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 VK\n        'monthly' as type   -- \u0422\u0438\u043f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\n from discount\n group by 1,2\n\nunion all\n\n select partner_id as partner_id,                   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        current_date() as paid_date,                -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n        sum(discount_sum_in_rubles+wapi_discount_for_partners_sum_in_rubles) as discount_sum_in_rubles, -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        sum(case when subscription_type in ('waba','wapi') then discount_sum_in_rubles+wapi_discount_for_partners_sum_in_rubles end) as paid_channels_waba_sum,     -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 WABA\n        sum(case when subscription_type='tgapi' then discount_sum_in_rubles+wapi_discount_for_partners_sum_in_rubles  end) as paid_channels_tgapi_sum,              -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 TGAPI\n        sum(case when subscription_type='whatsapp' then discount_sum_in_rubles+wapi_discount_for_partners_sum_in_rubles  end) as paid_channels_wa_sum,              -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 WHATSAPP\n        sum(case when subscription_type='telegram' then discount_sum_in_rubles+wapi_discount_for_partners_sum_in_rubles  end) as paid_channels_telegram_sum,        -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 TELEGRAM\n        sum(case when subscription_type='instagram' then discount_sum_in_rubles+wapi_discount_for_partners_sum_in_rubles  end) as paid_channels_instagram_sum,      -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 INSTAGRAM\n        sum(case when subscription_type='avito' then discount_sum_in_rubles+wapi_discount_for_partners_sum_in_rubles  end) as paid_channels_avito_sum,              -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 AVITO\n                sum(case when subscription_type = 'vk' then discount_sum_in_rubles+wapi_discount_for_partners_sum_in_rubles   end) paid_channels_vk_sum,            -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 VK\n  'all'\n from discount\n group by 1)\n select *   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0435\u043d\u0435\u0433 \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u044b\n from union_data", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_earned_money`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:07.916104Z", "completed_at": "2025-05-21T12:31:07.960009Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.039843Z", "completed_at": "2025-05-21T12:31:08.039856Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.25420117378234863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_subscription_paid_for_client", "compiled": true, "compiled_code": "SELECT partner_id,  -- \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\nclient_id,          -- \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0434\u043e\u0447\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430\nsum(balance_spent_by_partner) as balance_spent_by_partner , -- \u0431\u0430\u043b\u0430\u043d\u0441, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c\nsum(good_balance_spent_by_partner_on_subscription+good_balance_spent_by_partner_on_waba_balance) as good_balance_spent_by_partner,   -- '\u0445\u043e\u0440\u043e\u0448\u0438\u0439' \u0431\u0430\u043b\u0430\u043d\u0441, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c\nsum(good_balance_spent_by_partner_on_subscription) as good_balance_spent_by_partner_on_subscription,\nsum(good_balance_spent_by_partner_on_waba_balance) as good_balance_spent_by_partner_on_waba_balance\nFROM  `dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_partner_with_client_bonus`\ngroup by 1,2\n    -- \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u044b\u043b\u043e \u0441\u043f\u0438\u0441\u0430\u043d\u043e \u0441 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0438 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0432\u0430\u0431\u044b \u0434\u043e\u0447\u0435\u043a. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u0445\u043e\u0440\u043e\u0448\u0435\u043c \u0431\u0430\u043b\u0430\u043d\u0441\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0432 notion \u0432 \u0433\u043b\u043e\u0441\u0441\u0430\u0440\u0438\u0438", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_subscription_paid_for_client`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.121733Z", "completed_at": "2025-05-21T12:31:08.132070Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.134495Z", "completed_at": "2025-05-21T12:31:08.134519Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.21779990196228027, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_billing_affiliate_subscription_payments_real_money_bills_and_payments_with_balance", "compiled": true, "compiled_code": "with balance_spending as (\n    select \n        account_id as partner_id,\n        occured_date as paid_date,\n        occured_at as paid_at,          -- (04.03.2025) \n        billing_affiliate_original_sum as billing_affiliate_original_sum_paid_by_partner,\n        subscriptionupdates_original_sum,\n        wapi_original_sum,\n        subscription_owner as account_id, \n        billingaffiliate_currency as billingaffiliate_currency_partner,\n        subscription_updates_currency as subscription_updates_currency_partner,\n        occured_date, \n        subscription_id,  \n        subscription_update_id,\n        action,\n        partner_discount as partner_discount,\n        good_balance_spent as good_balance_spent, \n        wapi_transactions_in_rubles as wapi_transactions_in_rubles,\n        sum_in_rubles_full_subscription as sum_in_rubles_full_subscription,\n        sum_in_rubles_full_subscription-wapi_transactions_in_rubles as subscription_sum_in_rubles,\n        subscriptionupdates_original_sum-wapi_original_sum as subscription_sum_original,\n        sum_in_rubles,\n        account_type\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_with_who_paid`        \n        where has_partner_paid=2\n        ),\n\nrevenue_union as ( \n    select * from  `dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_and_wapi_sessions_bills_and_cards`\n    ),\n\nrevenue_joined_with_balance as (\n    select revenue_union.data_source,                                                               -- \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043e\u043f\u043b\u0430\u0442\u044b\n    coalesce(revenue_union.account_id, balance_spending.account_id) as account_id,                  -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n    coalesce(cast(revenue_union.paid_at as datetime), balance_spending.paid_at) as paid_at,                   -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b (05.04.2025)\n    coalesce(revenue_union.paid_date, balance_spending.paid_date) as paid_date,                     -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    coalesce(revenue_union.sum_in_rubles,0) as card_or_bills_sum_in_rubles,                         -- \u0421\u0443\u043c\u043c\u0430, \u0437\u0430\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    coalesce(round(revenue_union.original_sum,0)) as card_or_bills_original_sum,                    -- \u0421\u0443\u043c\u043c\u0430, \u0437\u0430\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438\n    coalesce(revenue_union.subscription_id, balance_spending.subscription_id) as subscription_id,   -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    coalesce(revenue_union.action, balance_spending.action) as action,                              -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\n    coalesce(revenue_union.subscription_update_id, balance_spending.subscription_update_id) as subscription_update_id,                                  -- ID \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\n    coalesce(revenue_union.wapi_transactions_in_rubles, balance_spending.wapi_transactions_in_rubles) as wapi_transactions_in_rubles,                   -- \u0421\u0443\u043c\u043c\u0430 \u0434\u0435\u043d\u0435\u0433, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    coalesce(revenue_union.wapi_original_sum, balance_spending.wapi_original_sum) as wapi_original_sum,                                                 -- \u0421\u0443\u043c\u043c\u0430 \u0434\u0435\u043d\u0435\u0433, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\n    coalesce(revenue_union.subscription_sum_in_rubles, balance_spending.subscription_sum_in_rubles) as subscription_sum_in_rubles,                      -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    coalesce(revenue_union.sum_in_rubles_full_subscription, balance_spending.sum_in_rubles_full_subscription) as sum_in_rubles_full_subscription,       -- \u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    coalesce(revenue_union.subscription_sum_original, balance_spending.subscription_sum_original) as subscription_sum_original,                         -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    coalesce(balance_spending.billing_affiliate_original_sum_paid_by_partner,0) as balance_sum_original,                                                -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432\n    coalesce(balance_spending.sum_in_rubles,0) as balance_sum_in_rubles,                            -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    coalesce(revenue_union.subscription_updates_original_sum, balance_spending.subscriptionupdates_original_sum) as subscription_updates_original_sum,  -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438\u0437 subscriptionUpdates\n    coalesce(revenue_union.partner_discount, balance_spending.partner_discount) as partner_discount,-- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    coalesce(balance_spending.good_balance_spent ,0) as good_balance_spent,                         -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432\n    coalesce(revenue_union.account_type,balance_spending.account_type) as account_type,             -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    coalesce(revenue_union.currency,balance_spending.billingaffiliate_currency_partner) as currency -- \u0412\u0430\u043b\u044e\u0442\u0430\n    from revenue_union full outer join balance_spending \n    on revenue_union.subscription_update_id=balance_spending.subscription_update_id),\n\nbalance_and_payments as (\n    select *,  \n    (\n        case when partner_discount is not null and ((paid_date>='2022-11-29'  and account_type='partner') or (paid_date>='2023-02-10' and account_type='tech-partner')) \n        then 0.1*wapi_original_sum\n        else 0 end) as wapi_discount_for_partners_original, -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0437\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\n        ceil(subscription_sum_original*(1- coalesce(partner_discount,0))) as subscripion_sum_with_discount_original -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0431\u0435\u0437 \u0441\u043a\u0438\u0434\u043a\u0438\n        from revenue_joined_with_balance\n    ),\n\nbalance_and_payments_with_balance_spent as (\n    select *, \n    coalesce((case \n    when subscripion_sum_with_discount_original=0 then 0\n    when balance_sum_original=0 then 0\n    when subscripion_sum_with_discount_original>=balance_sum_original then balance_sum_original\n    else subscripion_sum_with_discount_original\n    end\n    ),0) as balance_spent_on_subscription_original,                     -- \u0421\u0443\u043c\u043c\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\n    (case \n    when subscripion_sum_with_discount_original=0 then 0\n    when subscripion_sum_with_discount_original>=coalesce(balance_sum_original,0) then subscripion_sum_with_discount_original-coalesce(balance_sum_original,0)\n    when balance_sum_original>subscripion_sum_with_discount_original then 0\n    end\n    ) as subscription_sum_without_balance_spent_by_client_original,     -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0431\u0435\u0437 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    balance_sum_original-coalesce((case \n    when subscripion_sum_with_discount_original=0 then 0\n    when balance_sum_original=0 then 0\n    when subscripion_sum_with_discount_original>=balance_sum_original then balance_sum_original\n    else subscripion_sum_with_discount_original\n    end\n    ),0) as balance_spent_on_waba_original,                             -- \u0421\u0443\u043c\u043c\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\n    ceil((wapi_original_sum-wapi_discount_for_partners_original)+subscripion_sum_with_discount_original) as original_sum_to_pay -- \u0421\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u0434\u043b\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    from balance_and_payments\n    ),\nbalance_and_payments_with_converted_sums as (\n    select balance_and_payments_with_balance_spent.*,\n    (\n        case when balance_and_payments_with_balance_spent.currency='RUR' then subscripion_sum_with_discount_original\n        else subscripion_sum_with_discount_original*rur\n        end\n    ) as subscripion_sum_with_discount_sum_in_rubles,                   -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0431\u0435\u0437 \u0441\u043a\u0438\u0434\u043a\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    (\n        case when balance_and_payments_with_balance_spent.currency='RUR' then wapi_discount_for_partners_original\n        else wapi_discount_for_partners_original*rur\n        end\n    ) as wapi_discount_for_partners_sum_in_rubles,                      -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0437\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    (\n        case when balance_and_payments_with_balance_spent.currency='RUR' then ceil(wapi_original_sum-wapi_discount_for_partners_original)\n        else ceil(wapi_original_sum-wapi_discount_for_partners_original)*rur\n        end\n    ) as wapi_without_discount_sum_in_rubles,                           -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0431\u0435\u0437 \u0441\u043a\u0438\u0434\u043a\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    (case when balance_and_payments_with_balance_spent.currency='RUR' then balance_spent_on_subscription_original\n    else balance_spent_on_subscription_original*rur\n    end) as balance_spent_on_subscription_sum_in_rubles,                -- \u0421\u0443\u043c\u043c\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    (case when balance_and_payments_with_balance_spent.currency='RUR' then balance_spent_on_waba_original\n    else balance_spent_on_waba_original*rur\n    end) as balance_spent_on_waba_sum_in_rubles,                        -- \u0421\u0443\u043c\u043c\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    round((case when balance_and_payments_with_balance_spent.currency='RUR' then original_sum_to_pay\n    else original_sum_to_pay*rur\n    end),2) as sum_in_rubles_to_pay,                                    -- \u0421\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u0434\u043b\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    (case when balance_and_payments_with_balance_spent.currency='RUR' then subscription_sum_without_balance_spent_by_client_original\n    else subscription_sum_without_balance_spent_by_client_original*rur\n    end) as subscription_sum_without_balance_spent_by_client_in_rubles  -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0431\u0435\u0437 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n from balance_and_payments_with_balance_spent \n left join\n           `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted\n            on exchange_rates_unpivoted._ibk = balance_and_payments_with_balance_spent.paid_date\n            and exchange_rates_unpivoted.currency = balance_and_payments_with_balance_spent.currency),\n\nbalance_and_payments_with_good_balance_spent as (\n    select *, \n    (\n        case when good_balance_spent>=balance_spent_on_subscription_sum_in_rubles then  balance_spent_on_subscription_sum_in_rubles\n        else good_balance_spent\n    end\n    ) as good_balance_spent_on_subscription,                -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    good_balance_spent-(case when wapi_original_sum=0 then good_balance_spent\n    when good_balance_spent>=balance_spent_on_subscription_sum_in_rubles then  balance_spent_on_subscription_sum_in_rubles\n    else good_balance_spent\n    end\n    ) as good_balance_spent_on_waba_in_rubles,              -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043d\u0430 WABA \u0431\u0430\u043b\u0430\u043d\u0441 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    (\n        case when subscription_sum_without_balance_spent_by_client_in_rubles>=card_or_bills_sum_in_rubles then card_or_bills_sum_in_rubles\n        else subscription_sum_without_balance_spent_by_client_in_rubles\n        end\n        ) as card_or_bills_spent_on_subscription_in_rubles, -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u043d\u0435\u0433 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    card_or_bills_sum_in_rubles-(\n        case when wapi_original_sum=0 then card_or_bills_sum_in_rubles\n        when subscription_sum_without_balance_spent_by_client_in_rubles>=card_or_bills_sum_in_rubles then card_or_bills_sum_in_rubles\n        else subscription_sum_without_balance_spent_by_client_in_rubles\n        end\n    ) as card_or_bills_spent_on_waba_balance_in_rubles      -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u043d\u0435\u0433 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n  from balance_and_payments_with_converted_sums ),\n\nbalance_and_payments_with_good_and_bad_balance_spent as (\n    select *,\n    round(balance_spent_on_subscription_sum_in_rubles,2)-round(good_balance_spent_on_subscription,2) as bad_balance_spent_on_subscription_sum_in_rubles,    -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u043b\u043e\u0445\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    round(balance_spent_on_waba_sum_in_rubles,2) - round(good_balance_spent_on_waba_in_rubles,2) as bad_balance_spent_on_waba_balance_sum_in_rubles         -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u043b\u043e\u0445\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043d\u0430 WABA \u0431\u0430\u043b\u0430\u043d\u0441 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    from balance_and_payments_with_good_balance_spent\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u0435\u043d\u0435\u0433, \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u0438 \u043f\u043b\u043e\u0445\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 Wazzup\nselect *,\ngood_balance_spent_on_subscription+card_or_bills_spent_on_subscription_in_rubles as sum_in_rubles_spent_on_subscription,    -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\ngood_balance_spent_on_waba_in_rubles+card_or_bills_spent_on_waba_balance_in_rubles as sum_in_rubles_spent_on_waba_balance   -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b WABA \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\nfrom balance_and_payments_with_good_and_bad_balance_spent", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_bills_and_payments_with_balance`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.128465Z", "completed_at": "2025-05-21T12:31:08.137619Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.181784Z", "completed_at": "2025-05-21T12:31:08.181796Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14504265785217285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_billing_affiliate_subscription_payments_real_money_bills_and_payments_with_balance_billing_date_subscription_start", "compiled": true, "compiled_code": "with balance_spending as (\n    select \n        account_id as partner_id,\n        occured_date as paid_date,\n        billing_affiliate_original_sum as billing_affiliate_original_sum_paid_by_partner,\n        subscriptionupdates_original_sum,\n        wapi_original_sum,\n        subscription_owner as account_id, \n        billingaffiliate_currency as billingaffiliate_currency_partner,\n        subscription_updates_currency as subscription_updates_currency_partner,\n        occured_date, \n        subscription_id,  \n        subscription_update_id,\n        action,\n        partner_discount as partner_discount,\n        good_balance_spent as good_balance_spent, \n        wapi_transactions_in_rubles as wapi_transactions_in_rubles,\n        sum_in_rubles_full_subscription as sum_in_rubles_full_subscription,\n        sum_in_rubles_full_subscription-wapi_transactions_in_rubles as subscription_sum_in_rubles,\n        subscriptionupdates_original_sum-wapi_original_sum as subscription_sum_original,\n        sum_in_rubles,\n        account_type\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_with_who_paid_billing_date_subsription_start`        \n        where has_partner_paid=2\n        ),\n\nrevenue_union as ( \n    select * from  `dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_and_wapi_sessions_bills_and_cards`\n    ),\n\nrevenue_joined_with_balance as (\n    select revenue_union.data_source,                                                               -- \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043e\u043f\u043b\u0430\u0442\u044b\n    coalesce(revenue_union.account_id, balance_spending.account_id) as account_id,                  -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n    coalesce(revenue_union.completed_date, balance_spending.paid_date) as paid_date,                -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    coalesce(revenue_union.sum_in_rubles,0) as card_or_bills_sum_in_rubles,                         -- \u0421\u0443\u043c\u043c\u0430, \u0437\u0430\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    coalesce(round(revenue_union.original_sum,0)) as card_or_bills_original_sum,                    -- \u0421\u0443\u043c\u043c\u0430, \u0437\u0430\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438\n    coalesce(revenue_union.subscription_id, balance_spending.subscription_id) as subscription_id,   -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    coalesce(revenue_union.action, balance_spending.action) as action,                              -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\n    coalesce(revenue_union.subscription_update_id, balance_spending.subscription_update_id) as subscription_update_id,                              -- ID \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\n    coalesce(revenue_union.wapi_transactions_in_rubles, balance_spending.wapi_transactions_in_rubles) as wapi_transactions_in_rubles,               -- \u0421\u0443\u043c\u043c\u0430 \u0434\u0435\u043d\u0435\u0433, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    coalesce(revenue_union.wapi_original_sum, balance_spending.wapi_original_sum) as wapi_original_sum,                                             -- \u0421\u0443\u043c\u043c\u0430 \u0434\u0435\u043d\u0435\u0433, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\n    coalesce(revenue_union.subscription_sum_in_rubles, balance_spending.subscription_sum_in_rubles) as subscription_sum_in_rubles,                  -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    coalesce(revenue_union.sum_in_rubles_full_subscription, balance_spending.sum_in_rubles_full_subscription) as sum_in_rubles_full_subscription,   -- \u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    coalesce(revenue_union.subscription_sum_original, balance_spending.subscription_sum_original) as subscription_sum_original,                     -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    coalesce(balance_spending.billing_affiliate_original_sum_paid_by_partner,0) as balance_sum_original,-- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432\n    coalesce(balance_spending.sum_in_rubles,0) as balance_sum_in_rubles,                                -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    coalesce(revenue_union.subscription_updates_original_sum, balance_spending.subscriptionupdates_original_sum) as subscription_updates_original_sum,  -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438\u0437 subscriptionUpdates\n    coalesce(revenue_union.partner_discount, balance_spending.partner_discount) as partner_discount,    -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    coalesce(balance_spending.good_balance_spent ,0) as good_balance_spent,                             -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432\n    coalesce(revenue_union.account_type,balance_spending.account_type) as account_type,                 -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    coalesce(revenue_union.currency,balance_spending.billingaffiliate_currency_partner) as currency     -- \u0412\u0430\u043b\u044e\u0442\u0430\n    from revenue_union full outer join balance_spending \n    on revenue_union.subscription_update_id=balance_spending.subscription_update_id),\n\nbalance_and_payments as (\n    select *,  \n    (\n        case when partner_discount is not null and ((paid_date>='2022-11-29'  and account_type='partner') or (paid_date>='2023-02-10' and account_type='tech-partner')) \n        then 0.1*wapi_original_sum\n        else 0 end) as wapi_discount_for_partners_original,             -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0437\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\n        ceil(subscription_sum_original*(1- coalesce(partner_discount,0))) as subscripion_sum_with_discount_original -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0431\u0435\u0437 \u0441\u043a\u0438\u0434\u043a\u0438\n        from revenue_joined_with_balance\n    ),\n\nbalance_and_payments_with_balance_spent as (\n    select *, \n    coalesce((case \n    when subscripion_sum_with_discount_original=0 then 0\n    when balance_sum_original=0 then 0\n    when subscripion_sum_with_discount_original>=balance_sum_original then balance_sum_original\n    else subscripion_sum_with_discount_original\n    end\n    ),0) as balance_spent_on_subscription_original,                     -- \u0421\u0443\u043c\u043c\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\n    (case \n    when subscripion_sum_with_discount_original=0 then 0\n    when subscripion_sum_with_discount_original>=coalesce(balance_sum_original,0) then subscripion_sum_with_discount_original-coalesce(balance_sum_original,0)\n    when balance_sum_original>subscripion_sum_with_discount_original then 0\n    end\n    ) as subscription_sum_without_balance_spent_by_client_original,     -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0431\u0435\u0437 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    balance_sum_original-coalesce((case \n    when subscripion_sum_with_discount_original=0 then 0\n    when balance_sum_original=0 then 0\n    when subscripion_sum_with_discount_original>=balance_sum_original then balance_sum_original\n    else subscripion_sum_with_discount_original\n    end\n    ),0) as balance_spent_on_waba_original,                             -- \u0421\u0443\u043c\u043c\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\n    ceil((wapi_original_sum-wapi_discount_for_partners_original)+subscripion_sum_with_discount_original) as original_sum_to_pay -- \u0421\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u0434\u043b\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    from balance_and_payments\n    ),\nbalance_and_payments_with_converted_sums as (\n    select balance_and_payments_with_balance_spent.*,\n    (\n        case when balance_and_payments_with_balance_spent.currency='RUR' then subscripion_sum_with_discount_original\n        else subscripion_sum_with_discount_original*rur\n        end\n    ) as subscripion_sum_with_discount_sum_in_rubles,                   -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0431\u0435\u0437 \u0441\u043a\u0438\u0434\u043a\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    (\n        case when balance_and_payments_with_balance_spent.currency='RUR' then wapi_discount_for_partners_original\n        else wapi_discount_for_partners_original*rur\n        end\n    ) as wapi_discount_for_partners_sum_in_rubles,                      -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0437\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    (\n        case when balance_and_payments_with_balance_spent.currency='RUR' then ceil(wapi_original_sum-wapi_discount_for_partners_original)\n        else ceil(wapi_original_sum-wapi_discount_for_partners_original)*rur\n        end\n    ) as wapi_without_discount_sum_in_rubles,                           -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0431\u0435\u0437 \u0441\u043a\u0438\u0434\u043a\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    (case when balance_and_payments_with_balance_spent.currency='RUR' then balance_spent_on_subscription_original\n    else balance_spent_on_subscription_original*rur\n    end) as balance_spent_on_subscription_sum_in_rubles,                -- \u0421\u0443\u043c\u043c\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    (case when balance_and_payments_with_balance_spent.currency='RUR' then balance_spent_on_waba_original\n    else balance_spent_on_waba_original*rur\n    end) as balance_spent_on_waba_sum_in_rubles,                        -- \u0421\u0443\u043c\u043c\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    round((case when balance_and_payments_with_balance_spent.currency='RUR' then original_sum_to_pay\n    else original_sum_to_pay*rur\n    end),2) as sum_in_rubles_to_pay,                                    -- \u0421\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u0434\u043b\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    (case when balance_and_payments_with_balance_spent.currency='RUR' then subscription_sum_without_balance_spent_by_client_original\n    else subscription_sum_without_balance_spent_by_client_original*rur\n    end) as subscription_sum_without_balance_spent_by_client_in_rubles  -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0431\u0435\u0437 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n from balance_and_payments_with_balance_spent \n left join\n           `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted\n            on exchange_rates_unpivoted._ibk = balance_and_payments_with_balance_spent.paid_date\n            and exchange_rates_unpivoted.currency = balance_and_payments_with_balance_spent.currency),\n\nbalance_and_payments_with_good_balance_spent as (\n    select *, \n    (\n        case when good_balance_spent>=balance_spent_on_subscription_sum_in_rubles then  balance_spent_on_subscription_sum_in_rubles\n        else good_balance_spent\n    end\n    ) as good_balance_spent_on_subscription,                -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    good_balance_spent-(case when wapi_original_sum=0 then good_balance_spent\n    when good_balance_spent>=balance_spent_on_subscription_sum_in_rubles then  balance_spent_on_subscription_sum_in_rubles\n    else good_balance_spent\n    end\n    ) as good_balance_spent_on_waba_in_rubles,              -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043d\u0430 WABA \u0431\u0430\u043b\u0430\u043d\u0441 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    (\n        case when subscription_sum_without_balance_spent_by_client_in_rubles>=card_or_bills_sum_in_rubles then card_or_bills_sum_in_rubles\n        else subscription_sum_without_balance_spent_by_client_in_rubles\n        end\n        ) as card_or_bills_spent_on_subscription_in_rubles, -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u043d\u0435\u0433 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    card_or_bills_sum_in_rubles-(\n        case when wapi_original_sum=0 then card_or_bills_sum_in_rubles\n        when subscription_sum_without_balance_spent_by_client_in_rubles>=card_or_bills_sum_in_rubles then card_or_bills_sum_in_rubles\n        else subscription_sum_without_balance_spent_by_client_in_rubles\n        end\n    ) as card_or_bills_spent_on_waba_balance_in_rubles      -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u043d\u0435\u0433 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n  from balance_and_payments_with_converted_sums ),\n\nbalance_and_payments_with_good_and_bad_balance_spent as (\n    select *,\n    round(balance_spent_on_subscription_sum_in_rubles,2)-round(good_balance_spent_on_subscription,2) as bad_balance_spent_on_subscription_sum_in_rubles,    -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u043b\u043e\u0445\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    round(balance_spent_on_waba_sum_in_rubles,2) - round(good_balance_spent_on_waba_in_rubles,2) as bad_balance_spent_on_waba_balance_sum_in_rubles         -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u043b\u043e\u0445\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043d\u0430 WABA \u0431\u0430\u043b\u0430\u043d\u0441 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    from balance_and_payments_with_good_balance_spent\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u043f\u043e \u0431\u0438\u043b\u043b\u0438\u043d\u0433\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u0435\u043d\u0435\u0433, \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u0438 \u043f\u043b\u043e\u0445\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 Wazzup\nselect *,\ngood_balance_spent_on_subscription+card_or_bills_spent_on_subscription_in_rubles as sum_in_rubles_spent_on_subscription,    -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\ngood_balance_spent_on_waba_in_rubles+card_or_bills_spent_on_waba_balance_in_rubles as sum_in_rubles_spent_on_waba_balance   -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b WABA \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\nfrom balance_and_payments_with_good_and_bad_balance_spent", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_bills_and_payments_with_balance_billing_date_subscription_start`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.135493Z", "completed_at": "2025-05-21T12:31:08.182161Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.225457Z", "completed_at": "2025-05-21T12:31:08.225469Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.14035868644714355, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_cmuserid__count_distinct_visitkas_visitors_for_the_last_30_days", "compiled": true, "compiled_code": "WITH min_max AS (\n  SELECT * FROM `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid__count_distinct_visitkas_visitors_min_max_date` ),\nvisits_30_day_window AS (\n  SELECT\n    cmuserid,\n    Date AS base_date,\n    visitkas_users,\n    GENERATE_DATE_ARRAY(Date, DATE_ADD(Date, INTERVAL 30 DAY), INTERVAL 1 DAY) AS rollingwindow\n  FROM\n    `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid__count_distinct_visitkas_visitors`),\nvisitors_for_the_last_30_days as (\nSELECT\n  Date,\n  cmuserid,\n  COUNT(DISTINCT visitkas_users) AS DistinctVisits\nFROM\n  visits_30_day_window, UNNEST(rollingwindow) AS Date\nWHERE\n  Date BETWEEN (SELECT DATE_ADD(min_date, INTERVAL 30 DAY) FROM min_max)\n  AND (SELECT max_date FROM min_max)\nGROUP BY Date,cmuserid)\nselect last_days.*,\n      case when combined_intervals.cmuserid is not null\n            then 'paid'\n            else 'free'\n      end as client_type,\n      case when combined_intervals_paid.cmuserid is not null\n            then 'paid'\n            else 'free'\n      end as client_type_paid,\n      case when combined_intervals_posts.cmuserid is not null\n            then 'paid'\n            else 'free'\n      end as client_type_post\nfrom visitors_for_the_last_30_days last_days\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_subscription_history_combined_intervals` combined_intervals on last_days.cmuserid = combined_intervals.cmuserid \n                                                                                         and last_days.date >= combined_intervals.subscription_start and last_days.date <= combined_intervals.subscription_end\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_subscription_history_combined_intervals_payments_only` combined_intervals_paid on last_days.cmuserid = combined_intervals_paid.cmuserid \n                                                                                         and last_days.date >= combined_intervals_paid.subscription_start and last_days.date <= combined_intervals_paid.subscription_end  \n\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid_subscription_history_combined_intervals_posts_only` combined_intervals_posts on last_days.cmuserid = combined_intervals_posts.cmuserid \n                                                                                         and last_days.date >= combined_intervals_posts.subscription_start and last_days.date <= combined_intervals_posts.subscription_end                                                                                                                                                                                  \nORDER BY cmuserid,Date", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid__count_distinct_visitkas_visitors_for_the_last_30_days`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.138153Z", "completed_at": "2025-05-21T12:31:08.185085Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.226812Z", "completed_at": "2025-05-21T12:31:08.226822Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.17898249626159668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_funnel__key_events", "compiled": true, "compiled_code": "with\n    profeat_site_funnel_first_stage as (\n        select * from `dwh-wazzup`.`dbt_nbespalov`.`int_funnel_key_events__finding_all_users_stages`\n\n    ),\n    profeat_site_funnel_second_stage as (\n        select * from `dwh-wazzup`.`dbt_nbespalov`.`int_funnel_key_events__counting_users_on_each_stage`\n    ),\n    profeat_site_funnel_third_stage as (\n        select * from `dwh-wazzup`.`dbt_nbespalov`.`int_funnel_key_event__unpivot_events`\n    )\nselect t1.*\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_funnel_key_event__unpivot_events` t1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_funnel__key_events`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.179210Z", "completed_at": "2025-05-21T12:31:08.226112Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.267802Z", "completed_at": "2025-05-21T12:31:08.267814Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.21483922004699707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_old_and_new_end_date_filledna_with_tariff_and_transport", "compiled": true, "compiled_code": "-- \u041c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043f\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\u043c \u0441 \u0442\u0430\u0440\u0438\u0444\u043e\u043c \u0438 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043e\u043c\nSELECT DISTINCT \n    subscriptions_old_and_new_end_date_filledna.*, \n    IFNULL(subscriptionUpdates.tariff, FIRST_VALUE(subscriptionUpdates.tariff IGNORE NULLS) OVER (PARTITION BY subscriptionUpdates.subscription_id ORDER BY created_date ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)) AS tariff,  -- \u0417\u0434\u0435\u0441\u044c \u043f\u043e\u0434\u0442\u044f\u0433\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0439 \u0442\u0430\u0440\u0438\u0444, \u0435\u0441\u043b\u0438 \u0432 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 \u043e\u043d null. \u041d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u0441\u0442\u0430\u0440\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 2021 \u0433\u043e\u0434\u0430\n    billingPackages.type AS transport          -- \u0422\u0438\u043f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 (\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442)\nFROM `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_old_and_new_end_date_filledna` subscriptions_old_and_new_end_date_filledna\nJOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates` subscriptionUpdates ON subscriptions_old_and_new_end_date_filledna.guid = subscriptionUpdates.guid\nJOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billingPackages ON billingPackages.guid = subscriptions_old_and_new_end_date_filledna.subscription_id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_old_and_new_end_date_filledna_with_tariff_and_transport`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.183044Z", "completed_at": "2025-05-21T12:31:08.227134Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.306937Z", "completed_at": "2025-05-21T12:31:08.306950Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.25255322456359863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_with_deleted_date", "compiled": true, "compiled_code": "with unsubscribe_info as (\n    select *, \n    cast(deleted_at as date) as deleted_date\n     from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deleted_from_eventLogs`\n),  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e\u0431 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430\u0445\n\nsubscription_data as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_old_and_new_end_date_filledna`\n    where end_date is not null\n),  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u0438\u0441\u044c\n\nsubscription_with_deleted as (   \n        select account_id,                              -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        start_date,                                     -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        subscription_data.subscription_id,              -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        start_at,                                       -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        (case when deleted_date is null then end_date   \n        when end_date<deleted_date then end_date\n        else deleted_date\n        end) as end_date,                               -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\u0438\n        action,                                         -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439: addQuantity, setPromisedPayment, pay, subtractQuantity, templateMessages, loweringTariff, raiseTariff, renewal, balanceTopup \u0438\u043b\u0438 null\n        partner_account_id,                             -- ID \u0430\u043a\u043a\u0430\u043d\u0443\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        from subscription_data\n        left join unsubscribe_info\n        on subscription_data.subscription_id=unsubscribe_info.subscription_id),\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0435\nsubscription_with_deleted_to_deduplicate as (\n    select *,\n    row_number() over (partition by account_id, subscription_id, start_date order by end_date desc) rn  -- \u0420\u0430\u043d\u0433 \u043f\u043e \u043f\u0430\u0440\u0442\u0438\u0430\u0446\u0438\u0438\n    from subscription_with_deleted\n),\n\nsubscription_with_deleted_deduplicated as (\n    select * from subscription_with_deleted_to_deduplicate\n    where rn=1\n),\n\nsubscription_with_deleted_date as (\n \nselect account_id,                                      -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        start_date,                                     -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        start_at,                                       -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        subscription_id,                                -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        end_date,                                       -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\u0438\n        action,                                         -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439: addQuantity, setPromisedPayment, pay, subtractQuantity, templateMessages, loweringTariff, raiseTariff, renewal, balanceTopup \u0438\u043b\u0438 null\n        partner_account_id,                             -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        from subscription_with_deleted_deduplicated)\nselect * from subscription_with_deleted_date -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0441 \u043d\u0438\u043c\u0438, \u0435\u0441\u043b\u0438 \u0443 \u043d\u0438\u0445 \u0435\u0441\u0442\u044c \u0434\u0430\u0442\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_deleted_date`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.387284Z", "completed_at": "2025-05-21T12:31:08.396124Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.400773Z", "completed_at": "2025-05-21T12:31:08.400782Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.21595525741577148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_who_paid__payer_account", "compiled": true, "compiled_code": "with payer_segments as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_who_paid__paying_segments`\n),\n\npayer_segment_with_payer_accounts as ( \n \n    select payer_segments.*,\n    (case when segment_type='standart' then account_id --\u0435\u0441\u043b\u0438 \u043f\u043b\u0430\u0442\u0438\u043b \u0441\u0430\u043c \u043a\u043b\u0438\u0435\u043d\u0442, \u043f\u0438\u0448\u0435\u043c \u0435\u0433\u043e accountId \n    when activation_reason_id = '0c03af36-b95f-46d3-83a3-4163cc311530' then 15769389 --\u043d\u0435\u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0439 \u0430\u043a\u043a, \u043a\u0430\u043a\u0430\u044f-\u0442\u043e \u0431\u0430\u0433\u0430 \u0432 \u0431\u0430\u0437\u0435\n    when payer_partner_account_id is not null then payer_partner_account_id\n    else account_id --\u0435\u0441\u043b\u0438 \u043f\u043b\u0430\u0442\u0438\u043b \u043f\u0430\u0440\u0442\u043d\u0435\u0440, \u043f\u0438\u0448\u0435\u043c \u0435\u0433\u043e accountId \n    end\n    ) as payer_account  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u043b\u0430\u0442\u0435\u043b\u044c\u0449\u0438\u043a\u0430\n    from  payer_segments)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c\u0438 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043f\u043b\u0430\u0442\u0435\u043b\u044c\u0449\u0438\u043a\u0435 \u0441 \u0442\u0438\u043f\u0430\u043c\u0438 \u0438 ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\nselect * from payer_segment_with_payer_accounts", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_who_paid__payer_account`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.392058Z", "completed_at": "2025-05-21T12:31:08.400395Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.404709Z", "completed_at": "2025-05-21T12:31:08.404719Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.18065905570983887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_only_subscription_payments_and_wapi_sessions_real_money_with_data_source_and_subscription_update_id", "compiled": true, "compiled_code": "\n\n\nwith good_and_bad_balance_bills_cards_wapi_discount as (\n    select client_id as account_id, \n    partner_id,\n    paid_at,                                    --  (04.03.2025) \n    paid_date, \n    'partner_payment' as data_source,\n    action, \n    subscription_id, \n    subscription_update_id, \n    sum_in_rubles_spent_on_waba_balance,\n    sum_in_rubles_spent_on_subscription,\n    bad_balance_spent_on_waba_balance,\n    bad_balance_spent_on_subscription,\n    subscription_sum as full_subscription_sum_in_rubles_without_waba,\n    good_balance_spent_by_partner_on_subscription,\n    good_balance_spent_by_partner_on_waba_balance,\n    coalesce(wapi_discount_for_partners_sum_in_rubles,0) as wapi_discount_for_partners_sum_in_rubles,\n    coalesce(wapi_transactions_in_rubles,0) as wapi_transactions_in_rubles,\n    coalesce(billingaffiliate_currency_partner,subscription_updates_currency_client) as currency\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_partner_with_client_bonus`\n    \n    union all \n\n    select account_id,                      -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    null as partner_id,                     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u0435\u0441\u043b\u0438 \u043e\u043d \u043f\u043b\u0430\u0442\u0438\u043b\n    paid_at,                                -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b (05.03.2025)\n    paid_date,                              -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    data_source,                            -- \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043e\u043f\u043b\u0430\u0442\u044b\n    action,                                 -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\n    subscription_id,                        -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    subscription_update_id,                 -- ID \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\n    sum_in_rubles_spent_on_waba_balance,    -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438\n    sum_in_rubles_spent_on_subscription,    -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438\n    bad_balance_spent_on_waba_balance_sum_in_rubles as bad_balance_spent_on_waba_balance,               -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043b\u043e\u0445\u043e\u0433\u043e \u0431\u0430\u043b\u0430\u043d\u0441\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\n    bad_balance_spent_on_subscription_sum_in_rubles as bad_balance_spent_on_subscription,\n    subscription_sum_in_rubles as full_subscription_sum_in_rubles_without_waba, -- \u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0431\u0435\u0437 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\n    null as good_balance_spent_by_partner_on_subscription,                      -- \u0421\u0443\u043c\u043c\u0430 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\n    null as good_balance_spent_by_partner_on_waba_balance,                      -- \u0421\u0443\u043c\u043c\u0430 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u0431\u043e\u043d\u0443\u0441\u043e\u0432, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\n    coalesce(wapi_discount_for_partners_sum_in_rubles,0) as wapi_discount_for_partners_sum_in_rubles,   -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0437\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    coalesce(wapi_transactions_in_rubles,0) as wapi_transactions_in_rubles,      -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    currency                                                                     -- \u0412\u0430\u043b\u044e\u0442\u0430\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_bills_and_payments_with_balance`)\n\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438 \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0441 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u043c \u043e\u043f\u043b\u0430\u0442\u044b \u0438 subscription_update_id\nselect * from good_and_bad_balance_bills_cards_wapi_discount", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_and_wapi_sessions_real_money_with_data_source_and_subscription_update_id`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.401899Z", "completed_at": "2025-05-21T12:31:08.448583Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.491230Z", "completed_at": "2025-05-21T12:31:08.491239Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.17977499961853027, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_only_subscription_payments_and_wapi_sessions_real_money_with_subscription_updates_billing_date_subscription_start", "compiled": true, "compiled_code": "\n\n\n\nwith good_and_bad_balance_bills_cards_wapi_discount as (\n    select client_id as account_id, \n    paid_date, \n    action, \n    subscription_id, \n    subscription_update_id, \n    sum_in_rubles_spent_on_waba_balance,\n    sum_in_rubles_spent_on_subscription,\n    bad_balance_spent_on_waba_balance,\n    coalesce(wapi_discount_for_partners_sum_in_rubles,0) as wapi_discount_for_partners_sum_in_rubles,\n    coalesce(wapi_transactions_in_rubles,0) as wapi_transactions_in_rubles\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_partner_with_client_bonus_billing_date_subscription_start`\n    \n    union all \n\n    select account_id, \n    paid_date, \n    action, \n    subscription_id, \n    subscription_update_id, \n    sum_in_rubles_spent_on_waba_balance,\n    sum_in_rubles_spent_on_subscription,\n    bad_balance_spent_on_waba_balance_sum_in_rubles as bad_balance_spent_on_waba_balance,\n    coalesce(wapi_discount_for_partners_sum_in_rubles,0) as wapi_discount_for_partners_sum_in_rubles,\n    coalesce(wapi_transactions_in_rubles,0) as wapi_transactions_in_rubles    \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_bills_and_payments_with_balance_billing_date_subscription_start`),\n\ngood_and_bad_balance_bills_cards_wapi_discount_aggregated as (\n select account_id,     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\npaid_date,              -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\naction,                 -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\nsubscription_id,        -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nsubscription_update_id, -- ID \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\nround(sum(sum_in_rubles_spent_on_subscription),2) as sum_in_rubles_spent_on_subscription    -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n from good_and_bad_balance_bills_cards_wapi_discount\ngroup by 1,2,3,4,5)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438 \u043f\u043e \u0431\u0438\u043b\u043b\u0438\u043d\u0433\u0443 \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441 subscription_update_id\nselect * \nfrom good_and_bad_balance_bills_cards_wapi_discount_aggregated\nwhere action not in ('balanceTopup','templateMessages')", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_and_wapi_sessions_real_money_with_subscription_updates_billing_date_subscription_start`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.398088Z", "completed_at": "2025-05-21T12:31:08.405238Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.489670Z", "completed_at": "2025-05-21T12:31:08.489684Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.18190622329711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_only_subscription_payments_and_wapi_sessions_real_money_with_subscription_updates", "compiled": true, "compiled_code": "\n\n\n\nwith good_and_bad_balance_bills_cards_wapi_discount as (\n    select client_id as account_id, \n    paid_date, \n    action, \n    subscription_id, \n    subscription_update_id, \n    sum_in_rubles_spent_on_waba_balance,\n    sum_in_rubles_spent_on_subscription,\n    bad_balance_spent_on_waba_balance,\n    coalesce(wapi_discount_for_partners_sum_in_rubles,0) as wapi_discount_for_partners_sum_in_rubles,\n    coalesce(wapi_transactions_in_rubles,0) as wapi_transactions_in_rubles\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_partner_with_client_bonus`\n    \n    union all \n\n    select account_id, \n    paid_date, \n    action, \n    subscription_id, \n    subscription_update_id, \n    sum_in_rubles_spent_on_waba_balance,\n    sum_in_rubles_spent_on_subscription,\n    bad_balance_spent_on_waba_balance_sum_in_rubles as bad_balance_spent_on_waba_balance,\n    coalesce(wapi_discount_for_partners_sum_in_rubles,0) as wapi_discount_for_partners_sum_in_rubles,\n    coalesce(wapi_transactions_in_rubles,0) as wapi_transactions_in_rubles    \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_bills_and_payments_with_balance`),\n\ngood_and_bad_balance_bills_cards_wapi_discount_aggregated as (\n select account_id,     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\npaid_date,              -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\naction,                 -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\nsubscription_id,        -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nsubscription_update_id, -- ID \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\nround(sum(sum_in_rubles_spent_on_subscription),2) as sum_in_rubles_spent_on_subscription    -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n from good_and_bad_balance_bills_cards_wapi_discount\ngroup by 1,2,3,4,5)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438 \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0441 subscription_update_id\nselect * \nfrom good_and_bad_balance_bills_cards_wapi_discount_aggregated\nwhere action not in ('balanceTopup','templateMessages')", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_and_wapi_sessions_real_money_with_subscription_updates`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.444329Z", "completed_at": "2025-05-21T12:31:08.491829Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.572301Z", "completed_at": "2025-05-21T12:31:08.572310Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.21650266647338867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_cmuserid__active_users", "compiled": true, "compiled_code": "with active_users  as (\nSelect *\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_cmuserid__count_distinct_visitkas_visitors_for_the_last_30_days`\nwhere DistinctVisits >= 3\n)\nselect *\nfrom active_users\nunpivot (\n  type for type_name in (client_type,client_type_paid,client_type_post)\n)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_cmuserid__active_users`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.446713Z", "completed_at": "2025-05-21T12:31:08.492194Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.572799Z", "completed_at": "2025-05-21T12:31:08.572809Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.25556349754333496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_with_deleted_date_with_tariff_and_transport", "compiled": true, "compiled_code": "with unsubscribe_info as (\n    select *, \n    cast(deleted_at as date) as deleted_date\n     from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deleted_from_eventLogs`\n),  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e\u0431 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430\u0445\n\nsubscription_data as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_old_and_new_end_date_filledna_with_tariff_and_transport`\n    where end_date is not null\n),  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u0438\u0441\u044c\n\nsubscription_with_deleted as (   \n        select account_id,                              -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        start_date,                                     -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        subscription_data.subscription_id,              -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        start_at,                                       -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        (case when deleted_date is null then end_date   \n        when end_date<deleted_date then end_date\n        else deleted_date\n        end) as end_date,                               -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\u0438\n        action,                                         -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439: addQuantity, setPromisedPayment, pay, subtractQuantity, templateMessages, loweringTariff, raiseTariff, renewal, balanceTopup \u0438\u043b\u0438 null\n        partner_account_id,                             -- ID \u0430\u043a\u043a\u0430\u043d\u0443\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        tariff,                                         -- \u0422\u0430\u0440\u0438\u0444\n        transport                                       -- \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\n        from subscription_data\n        left join unsubscribe_info\n        on subscription_data.subscription_id=unsubscribe_info.subscription_id),\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0435\nsubscription_with_deleted_to_deduplicate as (\n    select *,\n    row_number() over (partition by account_id, subscription_id, start_date order by end_date desc) rn  -- \u0420\u0430\u043d\u0433 \u043f\u043e \u043f\u0430\u0440\u0442\u0438\u0430\u0446\u0438\u0438\n    from subscription_with_deleted\n),\n\nsubscription_with_deleted_deduplicated as (\n    select * from subscription_with_deleted_to_deduplicate\n    where rn=1\n),\n\nsubscription_with_deleted_date as (\n \nselect account_id,                                      -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        start_date,                                     -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        start_at,                                       -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        subscription_id,                                -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        end_date,                                       -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\u0438\n        action,                                         -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439: addQuantity, setPromisedPayment, pay, subtractQuantity, templateMessages, loweringTariff, raiseTariff, renewal, balanceTopup \u0438\u043b\u0438 null\n        partner_account_id,                             -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        tariff,                                         -- \u0422\u0430\u0440\u0438\u0444\n        transport                                       -- \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\n        from subscription_with_deleted_deduplicated)\nselect * from subscription_with_deleted_date -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0441 \u043d\u0438\u043c\u0438, \u0435\u0441\u043b\u0438 \u0443 \u043d\u0438\u0445 \u0435\u0441\u0442\u044c \u0434\u0430\u0442\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_deleted_date_with_tariff_and_transport`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.654900Z", "completed_at": "2025-05-21T12:31:08.662574Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.666671Z", "completed_at": "2025-05-21T12:31:08.666682Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.17733383178710938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscription_with_deleted_date_only_paid_periods", "compiled": true, "compiled_code": "with subscription_only_paid as (\nselect int_subscriptions_with_deleted_date.* from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_restore_missing_data__paidat_and_expiresat_deduplicated` restore_missing_data\ninner join `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_deleted_date` int_subscriptions_with_deleted_date\non restore_missing_data.subscription_id=int_subscriptions_with_deleted_date.subscription_id \nand restore_missing_data.start_date=int_subscriptions_with_deleted_date.start_date\nwhere action is distinct from 'setPromisedPayment'\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0434\u0430\u0442\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0438 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434\nselect * from subscription_only_paid", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscription_with_deleted_date_only_paid_periods`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.659318Z", "completed_at": "2025-05-21T12:31:08.667399Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.710463Z", "completed_at": "2025-05-21T12:31:08.710476Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.18094873428344727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_check_times_by_type_all_subscriptions_free_trial_paid", "compiled": true, "compiled_code": "with subscription_all as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_deleted_date`\n),\ntrials as(\n        select  account_id,\n                min_date as start_date,\n                --case when max_date >\n                trial_end_date as end_date\n                --then trial_end_date \n                --else max_date \n                --end as end_date\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_agg_with_trials`\n        where min_date <= trial_end_date\n),\nfree_subscriptions as(\n        select  account_id,\n                min_date as start_date,\n                max_date as end_date\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_agg_with_trials` int_channels_agg_with_trials\n        where transport in ('vk','telegram')\n                and is_free = true\n),\nfree_subscriptions_partners AS (\n        SELECT DISTINCT int_channels_agg_with_trials.account_id,\n                         min_date as start_date,\n                         max_date as end_date\n        FROM `dwh-wazzup`.`dbt_nbespalov`.`int_channels_agg_with_trials`  int_channels_agg_with_trials\n        JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_days` days on int_channels_agg_with_trials.max_date>= days.date and int_channels_agg_with_trials.min_date<=days.date\n        JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts__type_change_history`  tch ON tch.account_id = int_channels_agg_with_trials.account_id \n                                                                                    AND days.date >= tch.start_date and days.date <= tch.end_date\n        WHERE tch.type IN ('partner') \n             and is_free = true)\n\n, subscription_all_and_trials_with_free_vk_tg as (\n    select account_id,\n           start_date as TIME,\n           'paid' AS type\n    from subscription_all\n    union distinct\n    select account_id,\n           end_date as TIME,\n           'paid' AS type\n    from subscription_all\n    union distinct\n         \n    select account_id,\n            start_date as TIME,\n            'trial' AS type\n    from trials\n    union distinct \n    select account_id,\n            end_date as TIME,\n            'trial' AS type\n    from trials\n\n\n    union distinct     \n    select account_id,\n            start_date as TIME,\n            'free_subscriptions' AS type\n    from free_subscriptions\n\n    union distinct     \n    select account_id,\n            end_date as TIME,\n            'free_subscriptions' AS type\n    from free_subscriptions\n\n    \n    union distinct     \n    select account_id,\n            start_date as TIME,\n            'free_subscriptions_partners' AS type\n    from free_subscriptions_partners\n\n    union distinct     \n    select account_id,\n            end_date as TIME,\n            'free_subscriptions_partners' AS type\n    from free_subscriptions_partners\n)\n\nSELECT *\nFROM subscription_all_and_trials_with_free_vk_tg", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_check_times_by_type_all_subscriptions_free_trial_paid`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.664765Z", "completed_at": "2025-05-21T12:31:08.710869Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.754892Z", "completed_at": "2025-05-21T12:31:08.754906Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1403965950012207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicate_check_times", "compiled": true, "compiled_code": "with subscription_all as (\n   select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_deleted_date`\n),\n    free_subscriptions as(\n        select  account_id,\n                min_date as start_date,\n                max_date as end_date\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_agg_with_trials`\n        where transport in ('vk','telegram')\n                and is_free = true\n    ),\ncheck_times AS (\n    SELECT account_id, start_date as TIME FROM subscription_all\n           UNION DISTINCT\n    SELECT account_id, end_date as TIME FROM subscription_all\n           UNION DISTINCT\n    SELECT account_id, start_date as TIME from free_subscriptions\n           UNION DISTINCT\n    SELECT account_id, end_date as TIME from free_subscriptions\n    )\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u044f\u0445\nselect * from check_times", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicate_check_times`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.667933Z", "completed_at": "2025-05-21T12:31:08.715076Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.756661Z", "completed_at": "2025-05-21T12:31:08.756674Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.1827554702758789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicate_check_times_with_trials", "compiled": true, "compiled_code": "with subscription_all as (\n   select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_deleted_date`\n),\n    trials as(\n        select  account_id,\n                min_date as start_date,\n                --case when max_date >\n                trial_end_date as end_date\n                --then trial_end_date \n                --else max_date \n                --end as end_date\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_agg_with_trials`\n        where min_date <= trial_end_date\n    ),\n    free_subscriptions as(\n        select  account_id,\n                min_date as start_date,\n                max_date as end_date\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_agg_with_trials`\n        where transport in ('vk','telegram')\n                and is_free = true\n    ),\n     free_subscriptions_partners as(\n        select  channels_agg_with_trials.account_id,\n                min_date as start_date,\n                max_date as end_date\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_agg_with_trials` channels_agg_with_trials\n        join `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts on channels_agg_with_trials.account_Id = accounts.account_Id\n        where  is_free = true and  accounts.type = 'partner'\n    ),\ncheck_times AS (\n    SELECT account_id, start_date as TIME FROM subscription_all\n           UNION DISTINCT\n    SELECT account_id, end_date as TIME FROM subscription_all\n           UNION DISTINCT\n    SELECT account_id, start_date as TIME from trials\n           UNION DISTINCT\n    SELECT account_id, end_date as TIME from trials\n           UNION DISTINCT\n    SELECT account_id, start_date as TIME from free_subscriptions\n           UNION DISTINCT\n    SELECT account_id, end_date as TIME from free_subscriptions\n            UNION DISTINCT\n    SELECT account_id, start_date as TIME from free_subscriptions_partners\n           UNION DISTINCT\n    SELECT account_id, end_date as TIME from free_subscriptions_partners\n    )\n        -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0442\u0440\u0438\u0430\u043b\u043e\u0432 \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nselect * from check_times", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicate_check_times_with_trials`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.711667Z", "completed_at": "2025-05-21T12:31:08.756270Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.798160Z", "completed_at": "2025-05-21T12:31:08.798170Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.21923565864562988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicated_by_id_check_times", "compiled": true, "compiled_code": "with subscription_all as (\n   select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_deleted_date`\n),\n\ncheck_times AS (\n    SELECT account_id, start_date as TIME, subscription_id  FROM subscription_all\n           UNION DISTINCT\n    SELECT account_id, end_date  as TIME, subscription_id FROM subscription_all\n    )\n -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441 \u0434\u0430\u0442\u0430\u043c\u0438 \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 (\u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u044f\u0445)\nselect * from check_times", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_by_id_check_times`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.713383Z", "completed_at": "2025-05-21T12:31:08.757446Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.841059Z", "completed_at": "2025-05-21T12:31:08.841068Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2589685916900635, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicated_with_payments_and_promised_payments_check_times", "compiled": true, "compiled_code": "with subscription_all as (\n   select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_deleted_date`\n   where (action in ('pay','renewal','subtractQuantity','setPromisedPayment') or action is null)   \n),\n\ncheck_times AS (\n    SELECT account_id, start_date as TIME FROM subscription_all\n           UNION DISTINCT\n    SELECT account_id, end_date as TIME FROM subscription_all)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 (\u0441 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\u043c\u0438)\nselect * from check_times", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_with_payments_and_promised_payments_check_times`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.924049Z", "completed_at": "2025-05-21T12:31:08.932885Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.938089Z", "completed_at": "2025-05-21T12:31:08.938101Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.22561049461364746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicated_without_promised_payments_check_times", "compiled": true, "compiled_code": "with subscription_all as (\n   select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_deleted_date`\n   where (action in ('pay','renewal','subtractQuantity') or action is null)   \n),\n\ncheck_times AS (\n    SELECT account_id, start_date as TIME FROM subscription_all\n           UNION DISTINCT\n    SELECT account_id, end_date as TIME FROM subscription_all)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u044f\u0445 (\u0431\u0435\u0437 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439)\nselect * from check_times", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_without_promised_payments_check_times`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.929994Z", "completed_at": "2025-05-21T12:31:08.937434Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.944193Z", "completed_at": "2025-05-21T12:31:08.944204Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.18572402000427246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscrptions_who_paid_old_and_new_data_union_with_who_paid", "compiled": true, "compiled_code": "with old_and_new_data_union as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_deleted_date`\n    where action in ('pay','renewal','subtractQuantity','setPromisedPayment','addQuantity','raiseTariff') or action is null\n),\n\nold_and_new_data_with_segments as (\n    select old_and_new_data_union.*, (case when action in ('setPromisedPayment','subtractQuantity') then null\n    when partner_account_id is null then 'self'\n    else 'partner' \n    end) as who_paid\n    from old_and_new_data_union \n    ),\n\nsubscription_updates_to_fill as (\n    select *, sum(case when who_paid is not null then 1 end) over (partition by account_id order by start_at)\n    as r_close from old_and_new_data_with_segments),\n\nsubscription_filled as (\n    select *,\n    first_value(who_paid) over (partition by account_id,\n    r_close order by start_at asc) as who_paid_filled from \n    subscription_updates_to_fill\n    ),\n\n subscription_filled_who_paid as (   \nselect account_id,                                  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nstart_at,                                           -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nstart_date,                                         -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nend_date,                                           -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nsubscription_id,                                    -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\npartner_account_id,                                 -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u0435\u0441\u043b\u0438 \u043f\u043b\u0430\u0442\u0438\u043b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\naction,                                             -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439: setPromisedPayment, subtractQuantity, pay, addQuantity, raiseTariff, renewal\ncoalesce(who_paid, who_paid_filled) as who_paid     -- \u041a\u0442\u043e \u043f\u043b\u0430\u0442\u0438\u043b \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443: self, partner, null\nfrom subscription_filled\nwhere account_id is not null)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430\u043c, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u0442\u043e \u043f\u043b\u0430\u0442\u0438\u043b \u0437\u0430 \u0435\u0433\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nselect * from subscription_filled_who_paid", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscrptions_who_paid_old_and_new_data_union_with_who_paid`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.934693Z", "completed_at": "2025-05-21T12:31:08.943643Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:08.986812Z", "completed_at": "2025-05-21T12:31:08.986822Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1423501968383789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_account_who_paid__segments_with_payer_currency", "compiled": true, "compiled_code": "with payer_segment_with_payer_account as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_who_paid__payer_account`\n),\n\naccounts as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`\n),\n\ncurrency_with_payments as (\n    select payer_segment_with_payer_account.account_id, -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    partner_type,                                       -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    segment_type,                                       -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    payer_account,                                      -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u043b\u0430\u0442\u0435\u043b\u044c\u0449\u0438\u043a\u0430\n    accounts.currency as payer_account_currency         -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043f\u043b\u0430\u0442\u0435\u043b\u044c\u0449\u0438\u043a\u0430\n    from payer_segment_with_payer_account \n    left join accounts on payer_segment_with_payer_account.payer_account=accounts.account_id)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c\u0438, \u0438\u0445 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u0438 \u043f\u043b\u0430\u0442\u0435\u043b\u044c\u0449\u0438\u043a\u043e\u043c\nselect * from currency_with_payments", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_account_who_paid__segments_with_payer_currency`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.938860Z", "completed_at": "2025-05-21T12:31:08.986146Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:09.030181Z", "completed_at": "2025-05-21T12:31:09.030193Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.1827712059020996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_only_subscription_payments_and_wapi_sessions_real_money", "compiled": true, "compiled_code": "with good_and_bad_balance_bills_cards_wapi_discount AS (\n   select * \n   from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_and_wapi_sessions_real_money_with_data_source_and_subscription_update_id`\n   ),\n\ngood_and_bad_balance_bills_cards_wapi_discount_aggregated AS (\n select account_id, -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        paid_date,          -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n        action,             -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\n        subscription_id,    -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        currency,           -- \u0412\u0430\u043b\u044e\u0442\u0430\n        round(sum(sum_in_rubles_spent_on_waba_balance),2)                                                               AS sum_in_rubles_spent_on_waba_balance,      -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438\n        round(sum(sum_in_rubles_spent_on_subscription),2)                                                               AS sum_in_rubles_spent_on_subscription,      -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n        round(sum((case when bad_balance_spent_on_waba_balance<0 then 0 else bad_balance_spent_on_waba_balance end)),2) AS bad_balance_spent_on_waba_balance,        -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043b\u043e\u0445\u043e\u0433\u043e \u0431\u0430\u043b\u0430\u043d\u0441\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\n        round(sum(wapi_discount_for_partners_sum_in_rubles),2)                                                          AS wapi_discount_for_partners_sum_in_rubles, -- \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0437\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n        round(sum(wapi_transactions_in_rubles),2)                                                                       AS wapi_transactions_in_rubles               -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n from good_and_bad_balance_bills_cards_wapi_discount\n group by 1, 2, 3, 4, 5)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438 \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\nselect * \nfrom good_and_bad_balance_bills_cards_wapi_discount_aggregated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_and_wapi_sessions_real_money`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.941480Z", "completed_at": "2025-05-21T12:31:09.029002Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:09.071832Z", "completed_at": "2025-05-21T12:31:09.071843Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.21993279457092285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_revenue_clients_without_bad_balance", "compiled": true, "compiled_code": "SELECT\n  sui.account_id,\n  ptd.partner_id,\n  SUM(sum_in_rubles_spent_on_subscription)                             AS subscription_sum,\n  SUM(wapi_transactions_in_rubles - bad_balance_spent_on_waba_balance) AS waba_sum_without_bonus,\n  SUM(bad_balance_spent_on_subscription)                               AS bad_balance_spent_on_subscription,\n  SUM(bad_balance_spent_on_waba_balance)                               AS bad_balance_spent_on_waba_balance\nFROM `dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_and_wapi_sessions_real_money_with_data_source_and_subscription_update_id` sui\nJOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` ptd ON sui.account_id = ptd.account_id AND sui.paid_date BETWEEN ptd.start_date AND ptd.end_date\nWHERE data_source IS DISTINCT FROM 'partner_payment'\nGROUP BY 1, 2", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_revenue_clients_without_bad_balance`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:08.984445Z", "completed_at": "2025-05-21T12:31:09.069974Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:09.112374Z", "completed_at": "2025-05-21T12:31:09.112386Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2591824531555176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicated_without_promised_payments_check_times_with_tariff_and_transport", "compiled": true, "compiled_code": "with subscription_all as (\n   select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_deleted_date_with_tariff_and_transport`\n   where (action in ('pay','renewal','subtractQuantity') or action is null)   \n),\n\ncheck_times AS (\n    SELECT account_id, tariff, transport, start_date as TIME FROM subscription_all\n           UNION DISTINCT\n    SELECT account_id, tariff, transport, end_date as TIME FROM subscription_all)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u044f\u0445 (\u0431\u0435\u0437 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439)\nselect * from check_times", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_without_promised_payments_check_times_with_tariff_and_transport`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:09.194548Z", "completed_at": "2025-05-21T12:31:09.201966Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:09.208278Z", "completed_at": "2025-05-21T12:31:09.208289Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1811990737915039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicated_by_id_check_times_only_paid", "compiled": true, "compiled_code": "with subscription_all as (\n   select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_with_deleted_date_only_paid_periods`\n    where action is distinct from 'setPromisedPayment'\n),\n\ncheck_times AS (\n    SELECT account_id, start_date as TIME, subscription_id  FROM subscription_all\n           UNION DISTINCT\n    SELECT account_id, end_date  as TIME, subscription_id FROM subscription_all\n    )\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441 \u0434\u0430\u0442\u0430\u043c\u0438 \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 (\u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u044f\u0445 \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0435)\nselect * from check_times", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_by_id_check_times_only_paid`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:09.199231Z", "completed_at": "2025-05-21T12:31:09.207909Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:09.212922Z", "completed_at": "2025-05-21T12:31:09.212934Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.18076109886169434, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_distinct_by_type_all_subscriptions_free_trial_paid", "compiled": true, "compiled_code": "with check_times as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_check_times_by_type_all_subscriptions_free_trial_paid`\n),\n\ndistinct_intervals AS (\n        SELECT account_id, \n               type,\n        TIME AS start_date,  LEAD(TIME) OVER (PARTITION BY account_id, type ORDER BY TIME) end_date\n        FROM check_times)\n-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0442\u0440\u0438\u0430\u043b\u043e\u0432 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0435\u0439\nselect * from distinct_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_distinct_by_type_all_subscriptions_free_trial_paid`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:09.202674Z", "completed_at": "2025-05-21T12:31:09.212264Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:09.255007Z", "completed_at": "2025-05-21T12:31:09.255016Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.181884765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicate_distinct_intervals", "compiled": true, "compiled_code": "with check_times as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicate_check_times`\n),\n\ndistinct_intervals AS (\n        SELECT account_id, \n        TIME AS start_date,  LEAD(TIME) OVER (PARTITION BY account_id ORDER BY TIME) end_date\n        FROM check_times)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0441 \u043d\u0435\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438\nselect * from distinct_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicate_distinct_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:09.206321Z", "completed_at": "2025-05-21T12:31:09.213570Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:09.294752Z", "completed_at": "2025-05-21T12:31:09.294764Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.1785266399383545, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicate_distinct_intervals_with_trials", "compiled": true, "compiled_code": "with check_times as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicate_check_times_with_trials`\n),\n\ndistinct_intervals AS (\n        SELECT account_id, \n        TIME AS start_date,  LEAD(TIME) OVER (PARTITION BY account_id ORDER BY TIME) end_date\n        FROM check_times)\n-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0442\u0440\u0438\u0430\u043b\u043e\u0432 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0435\u0439\nselect * from distinct_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicate_distinct_intervals_with_trials`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:09.209879Z", "completed_at": "2025-05-21T12:31:09.255344Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:09.334810Z", "completed_at": "2025-05-21T12:31:09.334821Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.21414923667907715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicated_by_id_distinct_intervals", "compiled": true, "compiled_code": "with check_times as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_by_id_check_times`\n),\n\ndistinct_intervals AS (\n        SELECT account_id, \n        subscription_id,\n        TIME AS start_date,  LEAD(TIME) OVER (PARTITION BY account_id,subscription_id ORDER BY TIME) end_date\n        FROM check_times)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0435\u0451 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0441 \u043d\u0435\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438\nselect * from distinct_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_by_id_distinct_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:09.252937Z", "completed_at": "2025-05-21T12:31:09.335281Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:09.416071Z", "completed_at": "2025-05-21T12:31:09.416084Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2522854804992676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicated_with_payments_and_promised_payments_distinct_intervals", "compiled": true, "compiled_code": "with check_times as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_with_payments_and_promised_payments_check_times`\n),\n\ndistinct_intervals AS (\n        SELECT account_id, \n        TIME AS start_date,  LEAD(TIME) OVER (PARTITION BY account_id ORDER BY TIME) end_date\n        FROM check_times)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0435\u0439 (\u0441 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\u043c\u0438)\nselect * from distinct_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_with_payments_and_promised_payments_distinct_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:09.460205Z", "completed_at": "2025-05-21T12:31:09.468176Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:09.474702Z", "completed_at": "2025-05-21T12:31:09.474713Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.13967299461364746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicated_without_promised_payments_distinct_intervals", "compiled": true, "compiled_code": "with check_times as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_without_promised_payments_check_times`\n),\n\ndistinct_intervals AS (\n        SELECT account_id,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        TIME AS start_date,  LEAD(TIME) OVER (PARTITION BY account_id ORDER BY TIME) end_date\n        FROM check_times)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0441 \u043d\u0435\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438 (\u0431\u0435\u0437 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439)\nselect * from distinct_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_without_promised_payments_distinct_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:09.463765Z", "completed_at": "2025-05-21T12:31:09.474122Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:09.477372Z", "completed_at": "2025-05-21T12:31:09.477381Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14151263236999512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscription_who_paid_segments_with_partner_type_and_account_type", "compiled": true, "compiled_code": "\nwith old_and_new_data_with_segments as (\n    select account_id,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    who_paid,           -- \u041a\u0442\u043e \u043f\u043b\u0430\u0442\u0438\u043b \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443? \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f self, partner, null\n    start_date,         -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    start_at,           -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    end_date,           -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    subscription_id,    -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    action,             -- \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439: renewal, pay, setPromisedPayment, subtractQuantity, raiseTariff, addQuantity, null\n    (case when end_date>=current_date then current_date\n    else end_date       \n    end) as end_date_corrected from  `dwh-wazzup`.`dbt_nbespalov`.`int_subscrptions_who_paid_old_and_new_data_union_with_who_paid` -- \u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    where end_date!=start_date\n),\n\npartner_and_type_change as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated`\n),\naccounts as (select account_Id,             -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n                        type                -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n            from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`\n),\n\nfirst_partner_type_with_rn as ( \n\nselect *, row_number() over (partition by account_id order by start_date asc) rn    -- \u041f\u0430\u0440\u0442\u0438\u0430\u0446\u0438\u044f \u043f\u043e ID \u0430\u043a\u043a\u0430\u043d\u0443\u0442\u0430 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\nfrom partner_and_type_change),\n\nfirst_partner_type as (\n    select * from first_partner_type_with_rn\n    where rn =1                         -- \u0412\u044b\u0432\u043e\u0434 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0432\u044b\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439\n),\n\nlast_partner_date_with_rn as ( \n\nselect *, row_number() over (partition by account_id order by start_date desc) rn \nfrom partner_and_type_change),\n\nlast_partner_dates as (\n    select account_id, start_date as last_partner_change_date from last_partner_date_with_rn\n    where rn =1\n),\n\nfirst_payment_with_rn as (\n    select *, row_number() over (partition by account_id order by start_at asc) rn from old_and_new_data_with_segments\n),\n\nfirst_payment as (\n    select * from first_payment_with_rn\n    where rn=1\n),\n\nlast_payment_with_rn as (\n    select *, row_number() over (partition by account_id order by start_date desc) rn from old_and_new_data_with_segments\n),\n\nlast_payments as (\n    select account_id, start_date  as last_payment_date from last_payment_with_rn\n    where rn=1\n),\n\nfirst_partner_type_up_to_payments as (\n\nselect \nfirst_partner_type.start_date,                                  -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\ncast(first_partner_type.start_date as datetime) as start_at,    -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\ncast(null as bool) as has_active_subscription,                  -- \u041f\u0443\u0441\u0442\u043e\u0435 \u043f\u043e\u043b\u0435 \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\ncast(null as datetime) as partner_and_type_change_start_at,     -- \u041f\u0443\u0441\u0442\u043e\u0435 \u043f\u043e\u043b\u0435 \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\ncast(null as datetime) as end_at,                               -- \u041f\u0443\u0441\u0442\u043e\u0435 \u043f\u043e\u043b\u0435 \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\nfirst_payment.start_date as end_date,                           -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\ncast(null as date) as paying_start_date,                        -- \u041f\u0443\u0441\u0442\u043e\u0435 \u043f\u043e\u043b\u0435 \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\ncast(null as date) as paying_end_date,                          -- \u041f\u0443\u0441\u0442\u043e\u0435 \u043f\u043e\u043b\u0435 \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\nfirst_partner_type.account_id,                                  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\ncast(null as string) as action,                                 -- \u041f\u0443\u0441\u0442\u043e\u0435 \u043f\u043e\u043b\u0435 \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\ncast(null as string) as who_paid,                               -- \u041f\u0443\u0441\u0442\u043e\u0435 \u043f\u043e\u043b\u0435 \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\ncast(null as string) as subscription_id,                        -- \u041f\u0443\u0441\u0442\u043e\u0435 \u043f\u043e\u043b\u0435 \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\nfirst_partner_type.partner_type,                                -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\nfirst_partner_type.account_type,                                -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nfirst_partner_type.refparent_id,                                -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0440\u0435\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\nfirst_partner_type.partner_id                                   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n from first_partner_type \nleft join \nfirst_payment on first_partner_type.account_id=first_payment.account_id\n where first_partner_type.start_date<first_payment.start_date),\n\n\nsegment_account_type_and_partner_type as (\n    select (case when old_and_new_data_with_segments.start_date>=partner_and_type_change.start_date \n    then old_and_new_data_with_segments.start_date \n    else partner_and_type_change.start_date\n    end\n    ) as start_date,\n\n    (case when old_and_new_data_with_segments.start_at>=partner_and_type_change.start_occured_at\n    then old_and_new_data_with_segments.start_at\n    else partner_and_type_change.start_occured_at\n    end\n    ) as start_at, \n    (case when old_and_new_data_with_segments.start_date is not null or  old_and_new_data_with_segments.end_date is not null then True else False end) as has_active_subscription,\n    partner_and_type_change.start_occured_at as partner_and_type_change_start_at,\n    cast(old_and_new_data_with_segments.end_date as datetime) as end_at,\n    coalesce(old_and_new_data_with_segments.end_date, partner_and_type_change.end_date \n    ) as end_date,\n    (case when  old_and_new_data_with_segments.start_date is not null  then old_and_new_data_with_segments.start_date\n    end) as paying_start_date,\n\n    (case when  old_and_new_data_with_segments.end_date>=current_date then current_date\n    else old_and_new_data_with_segments.end_date\n    end) as paying_end_date,\n\n\n\n    partner_and_type_change.account_id,\n    action,\n    who_paid,\n    subscription_id,\n    partner_and_type_change.partner_type,\n    partner_and_type_change.account_type,\n    partner_and_type_change.refparent_id,\n    partner_and_type_change.partner_id\n    from partner_and_type_change \n    left join old_and_new_data_with_segments\n    on old_and_new_data_with_segments.account_id=partner_and_type_change.account_id\n    and old_and_new_data_with_segments.start_date>=partner_and_type_change.start_date\n    and old_and_new_data_with_segments.start_date<=partner_and_type_change.end_date),\n\nfirst_partner_type_and_segment_union as (\n    select *, 'data_before_payment' as  data_type  from first_partner_type_up_to_payments\n    UNION ALL \n    select *, 'payment_data' as data_type from segment_account_type_and_partner_type\n),\n\nfirst_partner_type_and_segment_union_to_deduplicate as (\n    select *, \n    rank() over (partition by account_id, start_at order by partner_and_type_change_start_at desc) rn \n    from first_partner_type_and_segment_union\n),\n\nfirst_partner_type_and_segment_union_deduplicated as (\n    select * from first_partner_type_and_segment_union_to_deduplicate\n    where rn=1\n),\n\nfirst_partner_type_and_segment_union_deduplicate_subscriptions as (\n    select *,  row_number() over (partition by account_id, start_date order by end_date desc,start_at desc) as rn_1 from first_partner_type_and_segment_union_deduplicated\n),\n\n\nfirst_partner_type_and_segment_union_deduplicated_subscriptions as (\n    select * from first_partner_type_and_segment_union_deduplicate_subscriptions\n    where rn_1=1\n),\n\nfirst_partner_type_and_segment_union_deduplicated_subscriptions_to_fllnas as (\n    select *,\n    sum(case when who_paid is not null then 1 end) over (partition by account_id order by start_date) as r_close\n    from first_partner_type_and_segment_union_deduplicated_subscriptions\n\n),\n\nfirst_partner_type_and_segment_union_deduplicated_subscriptions_to_fllnas_with_fill_null as \n\n(select *, \n        first_value(who_paid) over (partition by account_id,r_close order by start_date asc) as who_paid_filled\n        from  first_partner_type_and_segment_union_deduplicated_subscriptions_to_fllnas),\n\n\n\nsegment_defined as \n\n(select segment_account_type_and_partner_type.*, (case \nwhen account_type='partner' then 'partner'\nwhen account_type='child-postpay' then 'child-postpay'\nwhen account_type='tech-partner' then 'tech-partner'\nwhen account_type='tech-partner-postpay' then 'tech-partner-postpay'\nwhen account_type='employee' then 'employee'\nwhen account_type='partner-demo' then 'partner-demo'\nwhen account_type = 'employee' then 'employee'\nwhen who_paid_filled = 'self' and partner_type = 'standart' and account_type = 'standart'  then 'standart_without_partner'\nwhen who_paid_filled='self' and partner_type='partner' then 'of_partner_child_child_paid'\nwhen (who_paid_filled is null or who_paid_filled = 'self') and partner_type is null and account_type='standart' then 'standart_without_partner'\nwhen who_paid_filled='self' and partner_type is null then 'standart_without_partner'\n--when who_paid='self' and partner_type is distinct from 'tech-partner' and type='standart' then 'other_types_of_final_clients'\nwhen who_paid_filled='partner' and partner_type is null and type='standart' then 'of_partner_child__of_partner_paid'\nwhen who_paid_filled is null and partner_type='partner' then 'of_partner_child__of_partner_paid'\nwhen who_paid_filled is null and partner_type='tech-partner' then 'tech_partner_child__tech_partner_paid'\n\nwhen who_paid_filled is null and partner_type='standart' then 'standart_without_partner'\n\nwhen who_paid_filled='partner' and partner_type='partner' then 'of_partner_child__of_partner_paid'\nwhen who_paid_filled='self' and partner_type='tech-partner' then 'tech_partner_child__child_paid'\nwhen who_paid_filled='partner' and partner_type='tech-partner' then 'tech_partner_child__tech_partner_paid'\nwhen who_paid_filled is null and account_type='standart' and partner_type='tech-partner-postpay' then 'tech_partner_child'\nwhen type='partner' then 'partner'\nwhen type='child-postpay' then 'child-postpay'\nwhen type='tech-partner' then 'tech-partner'\nwhen type='tech-partner-postpay' then 'tech-partner-postpay'\nwhen type='employee' then 'employee'\nwhen type='partner-demo' then 'partner-demo'\nwhen type = 'employee' then 'employee'\nelse 'unknown'\nend) as segment \nfrom first_partner_type_and_segment_union_deduplicated_subscriptions_to_fllnas_with_fill_null segment_account_type_and_partner_type\nleft join accounts on segment_account_type_and_partner_type.account_Id = accounts.account_Id\nwhere account_type is not null),\n\nsegment_type_with_previous_end_date as (\n\nselect *, \nlag(paying_end_date) over (partition by account_id order by start_date) as paying_end_date_previous \nfrom segment_defined\n),\n\nsegment_defined_with_has_active_subscription_fixed as (\n\nselect *,  \n(case when paying_end_date_previous>=end_date then True else has_active_subscription end) \nas has_active_subscription_fixed\nfrom segment_type_with_previous_end_date\n)\n        -- \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043f\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u043c \u0432 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0435\u0441 \u0434\u0430\u0442\u043e\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0434\u0430\u0442\u043e\u0439 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043f\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u043c\nselect * from segment_defined_with_has_active_subscription_fixed", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscription_who_paid_segments_with_partner_type_and_account_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:09.469049Z", "completed_at": "2025-05-21T12:31:09.476245Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:09.519713Z", "completed_at": "2025-05-21T12:31:09.519722Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.14110803604125977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_only_subscription_payments_real_money", "compiled": true, "compiled_code": "with subscriptions as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_and_wapi_sessions_real_money`\n    where action not in ('balanceTopup','templateMessages')\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438 \u0437\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0435 'balanceTopup','templateMessages'\n   select *, sum_in_rubles_spent_on_subscription as sum_in_rubles from subscriptions", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_real_money`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:09.470878Z", "completed_at": "2025-05-21T12:31:09.476890Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:09.520229Z", "completed_at": "2025-05-21T12:31:09.520240Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.17931842803955078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_waba_sessions_real_money", "compiled": true, "compiled_code": "WITH subscriptions AS (\n                      SELECT *\n                      FROM `dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_and_wapi_sessions_real_money`\n                      )\n-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u043c\u0438 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439 WABA \u0438 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u044b\u043b\u043e \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043e \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u043d\u0435\u0433\nSELECT subscriptions.*\nFROM subscriptions\n    LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billing_packages\nON billing_packages.guid=subscriptions.subscription_id\nWHERE billing_packages.type='waba'", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_waba_sessions_real_money`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:09.472690Z", "completed_at": "2025-05-21T12:31:09.477870Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:09.559439Z", "completed_at": "2025-05-21T12:31:09.559451Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.21763992309570312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicated_without_promised_payments_distinct_intervals_with_tariff_and_transport", "compiled": true, "compiled_code": "with check_times as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_without_promised_payments_check_times_with_tariff_and_transport`\n),\n\ndistinct_intervals AS (\n        SELECT \n            account_id,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n            tariff,\n            transport,\n            TIME                                                    AS start_date,  \n            LEAD(TIME) OVER (PARTITION BY account_id, tariff, transport ORDER BY TIME) AS end_date\n        FROM check_times)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0441 \u043d\u0435\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438 (\u0431\u0435\u0437 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439)\nselect * from distinct_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_without_promised_payments_distinct_intervals_with_tariff_and_transport`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:09.516963Z", "completed_at": "2025-05-21T12:31:09.639813Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:09.682851Z", "completed_at": "2025-05-21T12:31:09.682862Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.25609827041625977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicated_by_id_distinct_intervals_only_paid", "compiled": true, "compiled_code": "with check_times as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_by_id_check_times_only_paid`\n),\n\ndistinct_intervals AS (\n        SELECT account_id, \n        subscription_id,\n        TIME AS start_date,  LEAD(TIME) OVER (PARTITION BY account_id,subscription_id ORDER BY TIME) end_date\n        FROM check_times)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0435\u0451 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0441 \u043d\u0435\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438 (\u0442\u043e\u043b\u044c\u043a\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0435)\nselect * from distinct_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_by_id_distinct_intervals_only_paid`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:09.726719Z", "completed_at": "2025-05-21T12:31:09.738551Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:09.742452Z", "completed_at": "2025-05-21T12:31:09.742466Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1045680046081543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicated_by_type_all_subscriptions_free_trial_paid", "compiled": true, "compiled_code": "with distinct_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_distinct_by_type_all_subscriptions_free_trial_paid`\n),\nsubscription_all as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_deleted_date`\n),\ntrials as(\n        select  account_id,\n                min_date as start_date,\n                trial_end_date as end_date,\n                --case when max_date >trial_end_date then trial_end_date \n                --else max_date \n                --end as end_date\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_agg_with_trials`\n        where min_date <= trial_end_date\n),\nfree_subscriptions as(\n        select  account_id,\n                min_date as start_date,\n                max_date as end_date\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_agg_with_trials` int_channels_agg_with_trials\n        where transport in ('vk','telegram')\n                and is_free = true\n),\nfree_subscriptions_partners AS (\n        SELECT DISTINCT int_channels_agg_with_trials.account_id,\n                         min_date as start_date,\n                         max_date as end_date\n        FROM `dwh-wazzup`.`dbt_nbespalov`.`int_channels_agg_with_trials` int_channels_agg_with_trials\n        JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_days` days on int_channels_agg_with_trials.max_date>= days.date and int_channels_agg_with_trials.min_date<=days.date\n        JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts__type_change_history` tch ON tch.account_id = int_channels_agg_with_trials.account_id \n                                                                                    AND days.date >= tch.start_date and days.date <= tch.end_date\n        WHERE tch.type IN ('partner') \n             and is_free = true\n),\nsubscription_all_and_trials_with_free_vk_tg as (\n    select account_id,\n           start_date,\n           end_date, \n           'paid' AS type\n    from subscription_all\n    union distinct \n    select account_id,\n            start_date,\n            end_date,\n            'trial' AS type\n    from trials\n    union distinct \n    select account_id,\n            start_date,\n            end_date,\n            'free_subscriptions' AS type\n    from free_subscriptions\n    union distinct\n    select account_id,\n            start_date,\n            end_date,\n            'free_subscriptions_partners' AS type\n    from free_subscriptions_partners\n    \n),\ndeduped_intervals AS (\n          SELECT a.account_id, a.start_date, a.end_date, a.type\n          FROM distinct_intervals a\n          JOIN subscription_all_and_trials_with_free_vk_tg b\n          ON a.account_id = b.account_id \n          AND a.start_date BETWEEN b.start_date AND b.end_date \n          AND a.end_date BETWEEN b.start_date AND b.end_date\n          and a.type=b.type\n          GROUP BY 1,2,3,4)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0435\u0451 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0441 \u043d\u0435\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 (\u0442\u043e\u043b\u044c\u043a\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0435)\nselect * from deduped_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_by_type_all_subscriptions_free_trial_paid`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:09.731724Z", "completed_at": "2025-05-21T12:31:09.741778Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:09.744624Z", "completed_at": "2025-05-21T12:31:09.744633Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14426612854003906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicate_deduped_intervals", "compiled": true, "compiled_code": "with distinct_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicate_distinct_intervals`\n),\nsubscription_all as (\n    select account_id,\n           start_date,\n           end_date \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_deleted_date`\n),\ndeduped_intervals AS (\n          SELECT a.account_id, a.start_date, a.end_date\n          FROM distinct_intervals a\n          JOIN subscription_all b\n          ON a.account_id = b.account_id \n          AND a.start_date BETWEEN b.start_date AND b.end_date \n          AND a.end_date BETWEEN b.start_date AND b.end_date\n          GROUP BY 1,2,3)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0441 \u043d\u0435\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\nselect * from deduped_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicate_deduped_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:09.736927Z", "completed_at": "2025-05-21T12:31:09.743092Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:09.785720Z", "completed_at": "2025-05-21T12:31:09.785734Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.18221569061279297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscription_deduplicated_by_id_deduped_intervals", "compiled": true, "compiled_code": "with distinct_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_by_id_distinct_intervals`\n),\nsubscription_all as (\n    select account_id,\n            subscription_id,\n           start_date,\n           end_date \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_deleted_date`\n),\ndeduped_intervals AS (\n          SELECT a.account_id, a.start_date, a.end_date, a.subscription_id\n          FROM distinct_intervals a\n          JOIN subscription_all b\n          ON a.account_id = b.account_id \n          AND a.start_date BETWEEN b.start_date AND b.end_date \n          AND a.end_date BETWEEN b.start_date AND b.end_date\n          and a.subscription_id=b.subscription_id\n          GROUP BY 1,2,3,4)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0435\u0451 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0441 \u043d\u0435\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\nselect * from deduped_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_deduped_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:09.734296Z", "completed_at": "2025-05-21T12:31:09.743563Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:09.786359Z", "completed_at": "2025-05-21T12:31:09.786369Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.22271418571472168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicate_deduped_intervals_with_trials", "compiled": true, "compiled_code": "with distinct_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicate_distinct_intervals_with_trials`\n),\n trials as(\n        select  account_id,\n                min_date as start_date,\n                --case when max_date >\n                trial_end_date as end_date\n                -- then trial_end_date \n                -- else max_date \n                -- end as end_date\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_agg_with_trials`\n        where min_date <= trial_end_date\n ),\n    free_subscriptions as(\n        select  account_id,\n                min_date as start_date,\n                max_date as end_date\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_agg_with_trials`\n        where transport in ('vk','telegram')\n                and is_free = true\n    ),\n    free_subscriptions_of_partners as(\n        select  int_channels_agg_with_trials.account_id,\n                min_date as start_date,\n                max_date as end_date\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_agg_with_trials` int_channels_agg_with_trials\n        join `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts on int_channels_agg_with_trials.account_Id = accounts.account_Id\n        where  is_free = true and accounts.type = 'partner'\n    ),\n\nsubscription_all_and_trials_with_free_vk_tg as (\n    select account_id,\n           start_date,\n           end_date \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_deleted_date`\n    union distinct \n    select account_id,\n            start_date,\n            end_date\n    from trials\n    union distinct \n    select account_id,\n            start_date,\n            end_date\n    from free_subscriptions\n    union distinct \n    select account_id,\n            start_date,\n            end_date\n    from free_subscriptions_of_partners\n),\ndeduped_intervals AS (\n          SELECT a.account_id, a.start_date, a.end_date         -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0442\u0440\u0438\u0430\u043b\u0430, -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0442\u0440\u0438\u0430\u043b\u0430\n          FROM distinct_intervals a\n          JOIN subscription_all_and_trials_with_free_vk_tg b\n          ON a.account_id = b.account_id \n          AND a.start_date BETWEEN b.start_date AND b.end_date \n          AND a.end_date BETWEEN b.start_date AND b.end_date\n          GROUP BY 1,2,3)\n        -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0442\u0440\u0438\u0430\u043b\u043e\u0432 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0435\u0439 \u043f\u043e\u0441\u043b\u0435 \u0430\u0433\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u0438\nselect * from deduped_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicate_deduped_intervals_with_trials`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:09.739781Z", "completed_at": "2025-05-21T12:31:09.784117Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:09.828238Z", "completed_at": "2025-05-21T12:31:09.828250Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2219400405883789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicated_with_payments_and_promised_payments_deduped_intervals", "compiled": true, "compiled_code": "with distinct_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_with_payments_and_promised_payments_distinct_intervals`\n),\n\nsubscription_all as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_deleted_date`\n     where (action in ('pay','renewal','subtractQuantity','setPromisedPayment') or action is null)   \n),\n\ndeduped_intervals AS (\n          SELECT a.account_id, a.start_date, a.end_date\n          FROM distinct_intervals a\n          JOIN subscription_all b\n          ON a.account_id = b.account_id \n          AND a.start_date BETWEEN b.start_date AND b.end_date \n          AND a.end_date BETWEEN b.start_date AND b.end_date\n          GROUP BY 1,2,3)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0435\u0439 \u043f\u043e\u0441\u043b\u0435 \u0430\u0433\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u0438 (\u0441 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\u043c\u0438)\nselect * from deduped_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_with_payments_and_promised_payments_deduped_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:09.787021Z", "completed_at": "2025-05-21T12:31:09.909437Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:09.951472Z", "completed_at": "2025-05-21T12:31:09.951483Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.25371313095092773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicated_without_promised_payments_deduped_intervals", "compiled": true, "compiled_code": "with distinct_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_without_promised_payments_distinct_intervals`\n),\n\nsubscription_all as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_deleted_date`\n     where (action in ('pay','renewal','subtractQuantity') or action is null)   \n),\n\ndeduped_intervals AS (\n          SELECT a.account_id, a.start_date, a.end_date\n          FROM distinct_intervals a\n          JOIN subscription_all b\n          ON a.account_id = b.account_id \n          AND a.start_date BETWEEN b.start_date AND b.end_date \n          AND a.end_date BETWEEN b.start_date AND b.end_date\n          GROUP BY 1,2,3)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0441 \u043d\u0435\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 (\u0431\u0435\u0437 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439)\nselect * from deduped_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_without_promised_payments_deduped_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:09.994463Z", "completed_at": "2025-05-21T12:31:10.004306Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.008691Z", "completed_at": "2025-05-21T12:31:10.008701Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1035153865814209, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_who_paid_in_dynamics_check_times", "compiled": true, "compiled_code": "with subscription_all as (\n   select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_who_paid_segments_with_partner_type_and_account_type`\n   where has_active_subscription_fixed=True\n),\n\ncheck_times AS (\n    SELECT account_id, start_date as TIME, segment FROM subscription_all\n           UNION DISTINCT\n    SELECT account_id, end_date as TIME, segment FROM subscription_all)\n-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0441 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441 \u0434\u0430\u0442\u0430\u043c\u0438 \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 (\u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u044f\u0445)\nselect * from check_times", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_in_dynamics_check_times`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:09.997403Z", "completed_at": "2025-05-21T12:31:10.007375Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.010479Z", "completed_at": "2025-05-21T12:31:10.010489Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14664626121520996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_who_paid_in_dynamics_check_times_all_segments", "compiled": true, "compiled_code": "with subscription_all as (\n   select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_who_paid_segments_with_partner_type_and_account_type`\n),\n\ncheck_times AS (\n    SELECT account_id, start_date as TIME, segment FROM subscription_all\n           UNION DISTINCT\n    SELECT account_id, end_date as TIME, segment FROM subscription_all)\n-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441 \u0434\u0430\u0442\u0430\u043c\u0438 \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nselect * from check_times", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_in_dynamics_check_times_all_segments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.000783Z", "completed_at": "2025-05-21T12:31:10.008160Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.010906Z", "completed_at": "2025-05-21T12:31:10.010914Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.18463706970214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_only_subscription_payments_first_month", "compiled": true, "compiled_code": "with subscripton_paid_with_real_money as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_real_money`\n),\n\nrevenue_first_month as (\n    select subscripton_paid_with_real_money.account_id, -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    sum(sum_in_rubles) as sum_in_rubles                 -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    from subscripton_paid_with_real_money inner join `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts \n    on accounts.account_id=subscripton_paid_with_real_money.account_id \n    where subscripton_paid_with_real_money.paid_date<=date_add(accounts.register_date, interval 1 month)\n    and accounts.type='standart' and sum_in_rubles!=0\n    group by 1\n    )\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\nselect * from revenue_first_month", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_first_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.002701Z", "completed_at": "2025-05-21T12:31:10.009230Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.053246Z", "completed_at": "2025-05-21T12:31:10.053261Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.22600340843200684, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_real_money_paid_old_and_new_revenue_type", "compiled": true, "compiled_code": "with all_revenue_with_register_month as (\nselect all_revenue.*, \ndate_trunc(start_date,month) as first_subscription_month,   -- \u041c\u0435\u0441\u044f\u0446 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\ndate_trunc(paid_date, month) as paid_month                  -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_real_money` all_revenue\n left join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_first_subscription_date_and_type` profile_info \non profile_info.account_id=all_revenue.account_id ),\n\nall_revenue_with_revenue_type as (\n\nselect *, (case when first_subscription_month=paid_month  then 'new_users_revenue'\nwhen action='pay' then 'old_users_new_subscription'\nwhen action in ('raiseTariff','addQuantity') then 'upsell_revenue'\nend) as revenue_type from  all_revenue_with_register_month)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u043d\u0435\u0433 \u0438 \u043f\u043e \u043a\u0430\u043a\u043e\u0439 \u043f\u0440\u0438\u0447\u0438\u043d\u0435 \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u043b\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u044b\nselect * from all_revenue_with_revenue_type", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_real_money_paid_old_and_new_revenue_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.005688Z", "completed_at": "2025-05-21T12:31:10.011398Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.138564Z", "completed_at": "2025-05-21T12:31:10.138580Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2289588451385498, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicated_without_promised_payments_deduped_intervals_with_tariff_and_transport", "compiled": true, "compiled_code": "with distinct_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_without_promised_payments_distinct_intervals_with_tariff_and_transport`\n),\n\nsubscription_all as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_deleted_date_with_tariff_and_transport`\n     where (action in ('pay','renewal','subtractQuantity') or action is null)   \n),\n\ndeduped_intervals AS (\n          SELECT a.account_id, a.tariff, a.transport, a.start_date, a.end_date\n          FROM distinct_intervals a\n          JOIN subscription_all b\n          ON a.account_id = b.account_id AND a.tariff = b.tariff AND a.transport = b.transport\n          AND a.start_date BETWEEN b.start_date AND b.end_date \n          AND a.end_date BETWEEN b.start_date AND b.end_date\n          GROUP BY 1,2,3, 4, 5)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0441 \u043d\u0435\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 (\u0431\u0435\u0437 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439)\nselect * from deduped_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_without_promised_payments_deduped_intervals_with_tariff_and_transport`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.054080Z", "completed_at": "2025-05-21T12:31:10.182809Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.226418Z", "completed_at": "2025-05-21T12:31:10.226429Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.26227355003356934, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscription_deduplicated_by_id_deduped_intervals_only_paid", "compiled": true, "compiled_code": "with distinct_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_by_id_distinct_intervals_only_paid`\n),\nsubscription_all as (\n    select account_id,\n            subscription_id,\n           start_date,\n           end_date \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_with_deleted_date_only_paid_periods`\n),\ndeduped_intervals AS (\n          SELECT a.account_id, a.start_date, a.end_date, a.subscription_id\n          FROM distinct_intervals a\n          JOIN subscription_all b\n          ON a.account_id = b.account_id \n          AND a.start_date BETWEEN b.start_date AND b.end_date \n          AND a.end_date BETWEEN b.start_date AND b.end_date\n          and a.subscription_id=b.subscription_id\n          GROUP BY 1,2,3,4)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0435\u0451 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0441 \u043d\u0435\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 (\u0442\u043e\u043b\u044c\u043a\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0435)\nselect * from deduped_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_deduped_intervals_only_paid`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.268741Z", "completed_at": "2025-05-21T12:31:10.278464Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.282371Z", "completed_at": "2025-05-21T12:31:10.282381Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1001272201538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicated_combined_intervals", "compiled": true, "compiled_code": "\n\nwith deduped_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicate_deduped_intervals`\n),\n\ndeduped_intervals_with_flag as (\n    SELECT *,\n    start_date != IFNULL(LAG(end_date) OVER (PARTITION BY account_id ORDER BY start_date), start_date) as flag\n    FROM deduped_intervals),\n\ndeduped_intervals_with_group as (\n    SELECT *, \n    count(CASE WHEN flag THEN 1 END) OVER (PARTITION BY account_id ORDER BY start_date) grp\n    from deduped_intervals_with_flag\n),\n\ncombined_intervals AS (\n  SELECT account_id,  MIN(start_date) subscription_start, MAX(end_date) subscription_end\n  FROM deduped_intervals_with_group\n  GROUP BY account_id, grp\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0441 \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438\nselect * from combined_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_combined_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.271619Z", "completed_at": "2025-05-21T12:31:10.279255Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.282921Z", "completed_at": "2025-05-21T12:31:10.282932Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.13795733451843262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscription_deduplicated_by_id_combined_intervals", "compiled": true, "compiled_code": "\n\nwith deduped_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_deduped_intervals`\n),\n\ndeduped_intervals_with_flag as (\n    SELECT *,\n    start_date != IFNULL(LAG(end_date) OVER (PARTITION BY account_id,subscription_id ORDER BY start_date), start_date) as flag\n    FROM deduped_intervals),\n\ndeduped_intervals_with_group as (\n    SELECT *, \n    count(CASE WHEN flag THEN 1 END) OVER (PARTITION BY account_id,subscription_id ORDER BY start_date) grp\n    from deduped_intervals_with_flag\n),\n\ncombined_intervals AS (\n  SELECT account_id, subscription_id,  MIN(start_date) subscription_start, MAX(end_date) subscription_end\n  FROM deduped_intervals_with_group\n  GROUP BY account_id, grp, subscription_id\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0435\u0451 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0441 \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438\nselect * from combined_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_combined_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.273492Z", "completed_at": "2025-05-21T12:31:10.279621Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.283909Z", "completed_at": "2025-05-21T12:31:10.283918Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.17845416069030762, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_subscriptions_with_trials", "compiled": true, "compiled_code": "with deduped_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicate_deduped_intervals_with_trials`\n),\n\ndeduped_intervals_with_flag as (\n    SELECT *,\n    start_date != IFNULL(LAG(end_date) OVER (PARTITION BY account_id ORDER BY start_date), start_date) as flag\n    FROM deduped_intervals),\n\ndeduped_intervals_with_group as (\n    SELECT *, \n    count(CASE WHEN flag THEN 1 END) OVER (PARTITION BY account_id ORDER BY start_date) grp\n    from deduped_intervals_with_flag\n),\n\ncombined_intervals AS (\n  SELECT account_id,                    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n  MIN(start_date) subscription_start,   -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n  MAX(end_date) subscription_end        -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n  FROM deduped_intervals_with_group\n  GROUP BY account_id, grp\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u0441\u0442\u043e\u0440\u0438\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0442\u0440\u0438\u0430\u043b\u043e\u0432\nselect combined_intervals.* \nfrom combined_intervals combined_intervals\njoin `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts on combined_intervals.account_Id = accounts.account_Id\nwhere accounts.type not in ('child-postpay','partner-demo')", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_subscriptions_with_trials`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.276872Z", "completed_at": "2025-05-21T12:31:10.283408Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.363623Z", "completed_at": "2025-05-21T12:31:10.363636Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.21974897384643555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicated_with_payments_and_promised_payments_combined_intervals", "compiled": true, "compiled_code": "with deduped_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_with_payments_and_promised_payments_deduped_intervals`\n),\n\ndeduped_intervals_with_flag as (\n    SELECT *,\n    start_date != IFNULL(LAG(end_date) OVER (PARTITION BY account_id ORDER BY start_date), start_date) as flag\n    FROM deduped_intervals),\n\ndeduped_intervals_with_group as (\n    SELECT *, \n    count(CASE WHEN flag THEN 1 END) OVER (PARTITION BY account_id ORDER BY start_date) grp\n    from deduped_intervals_with_flag\n),\n\ncombined_intervals AS (\n  SELECT account_id,  MIN(start_date) subscription_start, MAX(end_date) subscription_end\n  FROM deduped_intervals_with_group\n  GROUP BY account_id, grp\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 \u0441 \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438 (\u0441 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430\u043c\u0438)\nselect * from combined_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_with_payments_and_promised_payments_combined_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.280769Z", "completed_at": "2025-05-21T12:31:10.324463Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.407633Z", "completed_at": "2025-05-21T12:31:10.407645Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.21965289115905762, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicated_without_promised_date_combined_intervals", "compiled": true, "compiled_code": "with deduped_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_without_promised_payments_deduped_intervals`\n),\n\ndeduped_intervals_with_flag as (\n    SELECT *,\n    start_date != IFNULL(LAG(end_date) OVER (PARTITION BY account_id ORDER BY start_date), start_date) as flag\n    FROM deduped_intervals),\n\ndeduped_intervals_with_group as (\n    SELECT *, \n    count(CASE WHEN flag THEN 1 END) OVER (PARTITION BY account_id ORDER BY start_date) grp\n    from deduped_intervals_with_flag\n),\n\ncombined_intervals AS (\n  SELECT account_id,  MIN(start_date) subscription_start, MAX(end_date) subscription_end\n  FROM deduped_intervals_with_group\n  GROUP BY account_id, grp\n)\n-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0441 \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438 (\u0431\u0435\u0437 \u043e\u0431\u0435\u0449\u0435\u043d\u043d\u0430\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439)\nselect * from combined_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_without_promised_date_combined_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.404775Z", "completed_at": "2025-05-21T12:31:10.489194Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.492441Z", "completed_at": "2025-05-21T12:31:10.492450Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2560746669769287, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_who_paid_in_dynamics_distinct_intervals", "compiled": true, "compiled_code": "with check_times as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_in_dynamics_check_times`\n),\n\ndistinct_intervals AS (\n        SELECT account_id, \n        TIME AS start_date,\n        segment,\n        LEAD(TIME) OVER (PARTITION BY account_id, segment ORDER BY TIME) end_date\n        FROM check_times)\n-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0440\u0430\u0441\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0435\u0433\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430\u0445 \u0441 \u043d\u0435\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438\nselect * from distinct_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_in_dynamics_distinct_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.493875Z", "completed_at": "2025-05-21T12:31:10.539680Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.546630Z", "completed_at": "2025-05-21T12:31:10.546639Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.13762164115905762, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_revenue_vs_subscriptions_first_month", "compiled": true, "compiled_code": "with\n    subscriptions as (\n        select account_id,                                          -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        sum(full_tarif_sum_in_rubles) as full_tarif_sum_in_rubles   -- \u041f\u043e\u043b\u043d\u0430\u044f \u0446\u0435\u043d\u0430 \u0442\u0430\u0440\u0438\u0444\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n        from\n            `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_full_sum__free_and_paid_subscriptions_first_month`\n        group by 1\n    )\n            -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u0442 \u043f\u0440\u0438\u0431\u044b\u043b\u044c \u043e\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441 \u0437\u0430\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u0441\u0443\u043c\u043c\u043e\u0439 \nselect\n    coalesce(subscriptions.account_id, revenue.account_id) as account_id,   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    coalesce(full_tarif_sum_in_rubles,0) as full_tarif_sum_in_rubles,       -- \u041f\u043e\u043b\u043d\u0430\u044f \u0446\u0435\u043d\u0430 \u0442\u0430\u0440\u0438\u0444\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    coalesce(sum_in_rubles,0) as sum_in_rubles                              -- \u041e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\nfrom\n      `dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_first_month` revenue\nfull outer join subscriptions on revenue.account_id = subscriptions.account_id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_revenue_vs_subscriptions_first_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.496647Z", "completed_at": "2025-05-21T12:31:10.542728Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.547681Z", "completed_at": "2025-05-21T12:31:10.547689Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.1376492977142334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_who_paid_in_dynamics_distinct_intervals_all_segments", "compiled": true, "compiled_code": "with check_times as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_in_dynamics_check_times_all_segments`\n),\n\ndistinct_intervals AS (\n        SELECT account_id,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        TIME AS start_date, -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        segment,            -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n        LEAD(TIME) OVER (PARTITION BY account_id, segment ORDER BY TIME) end_date   -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        FROM check_times)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0440\u0430\u0441\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0435\u0433\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430\u0445 \u0441 \u043d\u0435\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438\nselect  * from distinct_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_in_dynamics_distinct_intervals_all_segments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.537436Z", "completed_at": "2025-05-21T12:31:10.546107Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.548823Z", "completed_at": "2025-05-21T12:31:10.548833Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.17606329917907715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicated_without_promised_date_combined_intervals_with_tariff_and_transport", "compiled": true, "compiled_code": "with deduped_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_without_promised_payments_deduped_intervals_with_tariff_and_transport`\n),\n\ndeduped_intervals_with_flag as (\n    SELECT *,\n    start_date != IFNULL(LAG(end_date) OVER (PARTITION BY account_id, tariff, transport ORDER BY start_date), start_date) as flag\n    FROM deduped_intervals),\n\ndeduped_intervals_with_group as (\n    SELECT *, \n    count(CASE WHEN flag THEN 1 END) OVER (PARTITION BY account_id, tariff, transport ORDER BY start_date) grp\n    from deduped_intervals_with_flag\n),\n\ncombined_intervals AS (\n  SELECT \n        account_id,\n        tariff,\n        transport,\n        MIN(start_date) AS subscription_start, \n        MAX(end_date)   AS subscription_end\n  FROM deduped_intervals_with_group\n  GROUP BY account_id, grp, tariff, transport\n)\n-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0441 \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438 (\u0431\u0435\u0437 \u043e\u0431\u0435\u0449\u0435\u043d\u043d\u0430\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439)\nselect * from combined_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_without_promised_date_combined_intervals_with_tariff_and_transport`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.540936Z", "completed_at": "2025-05-21T12:31:10.548278Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.627195Z", "completed_at": "2025-05-21T12:31:10.627205Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.216597318649292, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscription_deduplicated_by_id_combined_intervals_only_paid", "compiled": true, "compiled_code": "\n\nwith deduped_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_deduped_intervals_only_paid`\n),\n\ndeduped_intervals_with_flag as (\n    SELECT *,\n    start_date != IFNULL(LAG(end_date) OVER (PARTITION BY account_id,subscription_id ORDER BY start_date), start_date) as flag\n    FROM deduped_intervals),\n\ndeduped_intervals_with_group as (\n    SELECT *, \n    count(CASE WHEN flag THEN 1 END) OVER (PARTITION BY account_id,subscription_id ORDER BY start_date) grp\n    from deduped_intervals_with_flag\n),\n\ncombined_intervals AS (\n  SELECT account_id, subscription_id,  MIN(start_date) subscription_start, MAX(end_date) subscription_end\n  FROM deduped_intervals_with_group\n  GROUP BY account_id, grp, subscription_id\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0435\u0451 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0441 \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438 (\u0442\u043e\u043b\u044c\u043a\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0435)\nselect * from combined_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_combined_intervals_only_paid`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.543475Z", "completed_at": "2025-05-21T12:31:10.627580Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.710305Z", "completed_at": "2025-05-21T12:31:10.710314Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.257413387298584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscription_deduplicated_by_id_deduped_intervals_only_paid_fixed_end", "compiled": true, "compiled_code": "with old_and_new_data_union_with_min_subscription_start as (\nselect \nold_and_new_data_union.account_id, --id \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nold_and_new_data_union.subscription_id, --id \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438  \nold_and_new_data_union.start_date, --\u0434\u0430\u0442\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\nold_and_new_data_union.action, --\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0431\u044b\u043b\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u043e \u043a \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435 \nperiod_new,\nquantity_new,\ncoalesce(old_and_new_data_union.currency, accounts.currency) as currency ,\n  lag(end_date) over (partition by old_and_new_data_union.subscription_id order by start_at asc) as previous_action_end_date,\n(case when old_and_new_data_union.action in ('pay','renewal','addQuantity','raiseTariff') then 1 else 0 end) as has_subscription_payment, --\u0431\u044b\u043b \u043b\u0438 \u043f\u043b\u0430\u0442\u0435\u0436 \u0432 \u044d\u0442\u043e\u0442 \u043c\u0435\u0441\u044f\u0446 (\u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u043d\u0438\u0436\u0435\u043d\u0438\u0435 \u0442\u0430\u0440\u0438\u0444\u0430 \u043b\u0438\u0431\u043e \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u0430 \u043a\u0430\u043d\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u0442 \u0434\u0430\u0442\u0443 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u043d\u043e \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u0442\u044c)\nstg_billingPackages.type as transport, --\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\n(case when old_and_new_data_union.action in ('pay','renewal') then 1 else 0 end) as has_pay_or_renewal,\nmin(date_trunc(start_date,month)) over (partition by old_and_new_data_union.subscription_id order by  start_date) as min_subscription_start_month, --\u043c\u0435\u0441\u044f\u0446 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \nmin(date_trunc(start_date,month)) over (partition by old_and_new_data_union.account_id, stg_billingPackages.type order by  start_date) as min_subscription_start_month_by_transport, --\u043c\u0435\u0441\u044f\u0446 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043d\u0430 \u044d\u0442\u043e\u043c \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0435 \u0434\u043b\u044f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 (!!)\nend_date,\nstart_at\n FROM `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_old_and_new_end_date_filledna` old_and_new_data_union\n inner join `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` stg_billingPackages on stg_billingPackages.guid=old_and_new_data_union.subscription_id\n left join `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_updates__corect_date_and_filledna_tarif_period_quantity` subsciption_updates \n                        on subsciption_updates.guid=old_and_new_data_union.guid\n left join `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts on accounts.account_id=old_and_new_data_union.account_id\n where ((old_and_new_data_union.action  not in ('setPromisedPayment','balanceTopup','templateMessages'))\n or (old_and_new_data_union.action is null))\n   -- \u0443\u0434\u0430\u043b\u0435\u043d\u044b \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0439 \u043f\u043b\u0430\u0442\u0435\u0436, \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0432\u0430\u0431\u044b\n and start_date!=end_date --\u0443\u0431\u0440\u0430\u043d\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0435 \u0432 \u0434\u0435\u043d\u044c \u043f\u043e\u043a\u0443\u043f\u043a\u0438\n ),old_and_new_date_union_with_last_subsription_end_fixed as (\n  select account_id,\n        subscription_id,\n        start_date, \n        end_date ,\n(case when (start_date>=previous_action_end_date or previous_action_end_date is null)\nand start_date=last_day(start_date,month) \nand period_new=1 \nand date_add(start_date,interval 1 month)<=end_date   \nthen date_add(start_date,interval 1 month) \nelse end_date \nend) as end_date_fixed_end_of_month --\u0435\u0441\u043b\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u0431\u044b\u043b\u0430 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u0430 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0434\u0435\u043d\u044c \u043c\u0435\u0441\u044f\u0446\u0430 \u0441 31 \u0434\u043d\u044f\u043c\u0438, \u0442\u043e \u043e\u043d\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u0441\u044f \u043d\u0435 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0434\u0435\u043d\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430, \u0430 \u0432 1 \u0438\u043b\u0438 2 \u0447\u0438\u0441\u043b\u043e \u043c\u0435\u0441\u044f\u0446\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0437\u0430 \u044d\u0442\u0438\u043c\nfrom old_and_new_data_union_with_min_subscription_start\nwhere action in ('pay','renewal') \n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0435\u0451 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0441 \u043d\u0435\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438  \u0438 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0434\u0430\u0442\u043e\u0439 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 (\u0442\u043e\u043b\u044c\u043a\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0435)\nselect sub_history.*except(end_date),\n        coalesce(end_date_fixed_end_of_month,sub_history.end_date) as end_date\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_deduped_intervals_only_paid` sub_history\nleft join old_and_new_date_union_with_last_subsription_end_fixed on  sub_history.subscription_id = old_and_new_date_union_with_last_subsription_end_fixed.subscription_id\n                                                                                                  and old_and_new_date_union_with_last_subsription_end_fixed.start_date = sub_history.start_date\n                                                                                                  and old_and_new_date_union_with_last_subsription_end_fixed.end_date != end_date_fixed_end_of_month", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_deduped_intervals_only_paid_fixed_end`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.667863Z", "completed_at": "2025-05-21T12:31:10.712943Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.756646Z", "completed_at": "2025-05-21T12:31:10.756655Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2550389766693115, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_integrations_with_type_by_account_id_only_paid_and_promised_payment", "compiled": true, "compiled_code": "with paid_subscription_with_promised_payments as (\n    select account_id,          -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    subscription_start,         -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    (case when subscription_end>=current_date\n    then current_date\n    else subscription_end\n    end) as subscription_end    -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n     from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_combined_intervals`\n),\n\ndays as (\n  select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_days`\n),\n\nsubscriptions_with_days as (\n  select paid_subscription_with_promised_payments.*,\n  date from paid_subscription_with_promised_payments    -- \u0414\u0430\u0442\u0430 \u043c\u0435\u0436\u0434\u0443 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u0435\u0451 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0435\u043c\n  inner join days\n  on subscription_start<=days.date\n  and days.date<= subscription_end\n),\n\nintegration_with_type_days as (\n    select * from \n    `dwh-wazzup`.`dbt_nbespalov`.`int_integrations_with_type_with_pipedrive`  int_integrations_with_type_with_pipedrive\n    inner join days\n  on int_integrations_with_type_with_pipedrive.integration_start_date<=days.date\n  and days.date<= int_integrations_with_type_with_pipedrive.integration_end_date\n),\n\nintegration_with_type_subscription_days as (\n  select subscriptions_with_days.*,\n  integration_type_with_api,    -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n  integration_type,             -- \u0422\u0438\u043f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f\n  integration_start_date,       -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n  integration_end_date          -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n   from subscriptions_with_days\n  left join integration_with_type_days\n  on integration_with_type_days.date=subscriptions_with_days.date\n  and integration_with_type_days.account_id=subscriptions_with_days.account_id\n)\n\n\nselect *,   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0442\u0438\u043f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 api \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 (\u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439 \u0438\u043b\u0438 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u043c \u043f\u043b\u0430\u0442\u0435\u0436\u043e\u043c)\nrow_number() over (partition by account_id, date order by integration_start_date desc) as rn,       -- \u0411\u0435\u0440\u0443\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\nDATE_TRUNC(cast(subscription_start as DATE), MONTH) as integration_paid_period_start_date_month,    -- \u041c\u0435\u0441\u044f\u0446 \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n DATE_TRUNC(cast(subscription_end as DATE), MONTH) as integration_paid_period_end_date_month        -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043e\u043f\u043b\u0430\u0442\u044b\n from integration_with_type_subscription_days", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_integrations_with_type_by_account_id_only_paid_and_promised_payment`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.758250Z", "completed_at": "2025-05-21T12:31:10.807670Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.810232Z", "completed_at": "2025-05-21T12:31:10.810241Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.14187121391296387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_last_end_date_without_trials", "compiled": true, "compiled_code": "select paid_intervals.*,       -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 (\u0431\u0435\u0437 \u0442\u0440\u0438\u0430\u043b\u043e\u0432)\n        currency,       -- \u0412\u0430\u043b\u044e\u0442\u0430\n       lag(subscription_end, 1) over ( partition by paid_intervals.account_id order by subscription_end asc) as last_subscription_end   -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nfrom  `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_combined_intervals` paid_intervals\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts on paid_intervals.account_Id = accounts.account_Id \nwhere accounts.type != 'employee'", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_without_trials`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.760270Z", "completed_at": "2025-05-21T12:31:10.808679Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.812170Z", "completed_at": "2025-05-21T12:31:10.812179Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.18298935890197754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicated_by_id_tariff", "compiled": true, "compiled_code": "with combined_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_combined_intervals`\n),\n\nsubscription_with_months  as (  \n    select distinct\n    month,              -- \u041c\u0435\u0441\u044f\u0446\n    subscription_id,    -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    account_id          -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    from combined_intervals inner join `dwh-wazzup`.`dbt_nbespalov`.`stg_months` months\n    on months.month>=date_trunc(combined_intervals.subscription_start,month) and months.month<=date_trunc(combined_intervals.subscription_end,month)\n),\n\nlast_value_tarif as (          \n    select subscription_id,                                             -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    date_trunc(stg_subscriptionUpdates.paid_date, month) as paid_month, -- \u041c\u0435\u0441\u044f\u0446 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    last_value(tariff_new) over (partition by subscription_id, date_trunc(stg_subscriptionUpdates.paid_date, month) order by created_at asc rows between unbounded preceding and unbounded following) as tariff_new\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_updates__corect_date_and_filledna_tarif_period_quantity` stg_subscriptionUpdates \n    where tariff_new is not null\n),\n\nlast_value_tarif_by_subscription_id as (\n    select * from last_value_tarif\n    where tariff_new is not null \n    group by 1,2,3\n),\n\nlast_value_tarif_next_month as ( \n    select *, coalesce(lag(paid_month) over (partition by subscription_id order by paid_month desc), date_add(current_date, interval 1 month)) as next_month\n    from last_value_tarif_by_subscription_id\n),\n\ntarif_info as (\n    select subscription_with_months.*, \n    tariff_new from subscription_with_months\n    left join last_value_tarif_next_month\n    on last_value_tarif_next_month.subscription_id=subscription_with_months.subscription_id\n    and subscription_with_months.month>=last_value_tarif_next_month.paid_month and \n    subscription_with_months.month<last_value_tarif_next_month.next_month)\n        -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442 \u0435\u0441\u0442\u044c \u043b\u0438 \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435 \u0442\u0430\u0440\u0438\u0444 PRO \u0438\u043b\u0438 MAX\n select account_id, -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n month,             -- \u041c\u0435\u0441\u044f\u0446\n max(case when tariff_new='max' then True else False end) as has_max,       -- \u0415\u0441\u0442\u044c \u043b\u0438 MAX?\n  max(case when tariff_new='pro' then True else False end) as has_pro       -- \u0415\u0441\u0442\u044c \u043b\u0438 PRO?\n  from tarif_info\n  group by 1,2", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_by_id_tariff`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.803472Z", "completed_at": "2025-05-21T12:31:10.810578Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.853887Z", "completed_at": "2025-05-21T12:31:10.853898Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.18060731887817383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_last_end_date", "compiled": true, "compiled_code": "with clients_information as (\n select distinct paid_intervals.*,\n        currency,   -- \u0412\u0430\u043b\u044e\u0442\u0430\n        case when packages.account_Id is not null then TRUE else FALSE end as has_paid  -- \u041a\u043b\u0438\u0435\u043d\u0442 \u043d\u0430\u043c \u043f\u043b\u0430\u0442\u0438\u043b?\nfrom  `dwh-wazzup`.`dbt_nbespalov`.`mart_subscriptions_with_trials` paid_intervals\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts on paid_intervals.account_Id = accounts.account_Id \nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` packages on paid_intervals.account_Id = packages.account_Id and paid_At is not null\nwhere accounts.type != 'employee'\n )\nselect *,   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    lag(subscription_end, 1) over ( partition by account_id order by subscription_end asc) as last_subscription_end -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nfrom clients_information", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.805982Z", "completed_at": "2025-05-21T12:31:10.811487Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.855104Z", "completed_at": "2025-05-21T12:31:10.855115Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.22005295753479004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_with_active_subscriptions_paid_promised_free", "compiled": true, "compiled_code": "with subscriptions_without_trials_and_with_promised_payments_and_payments as (\n    select distinct account_id\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_with_payments_and_promised_payments_combined_intervals`\n    where subscription_end >= current_date()\n )  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u043b\u044e\u0431\u0430\u044f \u0430\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 (\u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u0438 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f)\n select distinct account_Id     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billingPackages \n    where (state = 'active' and paid_At is not null and is_free is distinct from True)\n      or (is_free and type in ('vk','telegram') and state = 'active')\n      or exists (select subscriptions_without_trials_and_with_promised_payments_and_payments.account_Id \n                 from   subscriptions_without_trials_and_with_promised_payments_and_payments\n                 where subscriptions_without_trials_and_with_promised_payments_and_payments.account_id =  billingPackages.account_id\n                    )", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_with_active_subscriptions_paid_promised_free`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.812804Z", "completed_at": "2025-05-21T12:31:10.895746Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:10.978128Z", "completed_at": "2025-05-21T12:31:10.978139Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.21856307983398438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_last_end_date_with_payments_and_promised_payment", "compiled": true, "compiled_code": "select paid_intervals.*,   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 (\u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u0438)\n        currency,       -- \u0412\u0430\u043b\u044e\u0442\u0430\n       lag(subscription_end, 1) over ( partition by paid_intervals.account_id order by subscription_end asc) as last_subscription_end\nfrom  `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_with_payments_and_promised_payments_combined_intervals` paid_intervals\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts on paid_intervals.account_Id = accounts.account_Id \nwhere accounts.type != 'employee'", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_with_payments_and_promised_payment`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:10.936050Z", "completed_at": "2025-05-21T12:31:10.980241Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.023180Z", "completed_at": "2025-05-21T12:31:11.023193Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2564120292663574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_features_iframe_usage_by_month", "compiled": true, "compiled_code": "with iframe as (SELECT date_trunc(date, month) as month,  -- \u041c\u0435\u0441\u044f\u0446\ncast(accountId as STRING) as account_id,            -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\ncount(distinct clientID) as iframe_open_employees   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u043b\u0438 iFrame (iFrame - \u044d\u0442\u043e \u043d\u0430\u0448\u0435 \u043e\u043a\u043d\u043e \u0447\u0430\u0442\u043e\u0432 Wazzup)\n FROM \n`dwh-wazzup`.`yandex_metrika`.`wazzup_hits_iframe` \nwhere accountId is not null and accountId!='nan'\ngroup by 1,2),\n\nsubscriptions as (\n    select cast(account_id as string) as account_id, \n    subscription_start,\n    subscription_end\n     from \n    `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_without_promised_date_combined_intervals`\n)\n-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c\u0438 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0444\u0438\u0447\u0443 iFrame\nselect iframe.* from iframe \ninner join subscriptions\non iframe.account_id=subscriptions.account_id\nand iframe.month>=date_trunc(subscriptions.subscription_start,month)\nand iframe.month<=date_trunc(subscriptions.subscription_end,month)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_features_iframe_usage_by_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.023749Z", "completed_at": "2025-05-21T12:31:11.070756Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.076990Z", "completed_at": "2025-05-21T12:31:11.076998Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.14335846900939941, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_active_accounts_by_month", "compiled": true, "compiled_code": "with subscription_intervals as (\n    select \n    date_trunc(subscription_start, month) as subscription_start_month,\n    date_trunc(subscription_end, month) as subscription_end_month,\n    account_id\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_without_promised_date_combined_intervals`\n),\n\naffiliates as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_affiliates` \n),\n\nmonths as (\n    select * from `dwh-wazzup`.`analytics_tech`.`months`\n)\n\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u044b \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c\nselect distinct months.month, account_id        -- \u041c\u0435\u0441\u044f\u0446.  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n  from  subscription_intervals\ninner join  months\non months.month>=subscription_start_month and months.month<=subscription_end_month\ninner join affiliates on affiliates.child_id=subscription_intervals.account_id\nwhere affiliates.name!='\u0410\u043a\u043a\u0430\u0443\u043d\u0442 \u0434\u043b\u044f \u0434\u0435\u043c\u043e'", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_active_accounts_by_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.068339Z", "completed_at": "2025-05-21T12:31:11.076633Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.080686Z", "completed_at": "2025-05-21T12:31:11.080696Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.1796886920928955, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_last_end_date_without_trials_and_promised_payments", "compiled": true, "compiled_code": "select paid_intervals.*,   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 (\u0431\u0435\u0437 \u0442\u0440\u0438\u0430\u043b\u043e\u0432 \u0438 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439)\n        currency, -- \u0412\u0430\u043b\u044e\u0442\u0430\n       lag(subscription_end, 1) over ( partition by paid_intervals.account_id order by subscription_end asc) as last_subscription_end   -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nfrom  `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_without_promised_date_combined_intervals` paid_intervals\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts on paid_intervals.account_Id = accounts.account_Id \nwhere accounts.type != 'employee'", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_without_trials_and_promised_payments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.071401Z", "completed_at": "2025-05-21T12:31:11.078222Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.121676Z", "completed_at": "2025-05-21T12:31:11.121686Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.18105792999267578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_who_paid_in_dynamics_deduped_intervals", "compiled": true, "compiled_code": "with distinct_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_in_dynamics_distinct_intervals`\n),\n\nsubscription_all as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_who_paid_segments_with_partner_type_and_account_type`\n    where has_active_subscription_fixed=True\n),\n\ndeduped_intervals AS (\n          SELECT a.account_id, a.start_date, a.end_date, a.segment\n          FROM distinct_intervals a\n          JOIN subscription_all b\n          ON a.account_id = b.account_id\n          AND a.start_date BETWEEN b.start_date AND b.end_date \n          AND a.end_date BETWEEN b.start_date AND b.end_date\n          GROUP BY 1,2,3,4)\n-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0441 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0440\u0430\u0441\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0435\u0433\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430\u0445 \u0441 \u043d\u0435\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\nselect * from deduped_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_in_dynamics_deduped_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.073392Z", "completed_at": "2025-05-21T12:31:11.080294Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.122457Z", "completed_at": "2025-05-21T12:31:11.122467Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.21892762184143066, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_who_paid_in_dynamics_deduped_intervals_all_segments", "compiled": true, "compiled_code": "with distinct_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_in_dynamics_distinct_intervals_all_segments`\n),\n\nsubscription_all as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_who_paid_segments_with_partner_type_and_account_type`\n),\n\ndeduped_intervals AS (\n          SELECT a.account_id, a.start_date, a.end_date, a.segment\n          FROM distinct_intervals a\n          JOIN subscription_all b\n          ON a.account_id = b.account_id\n          AND a.start_date BETWEEN b.start_date AND b.end_date \n          AND a.end_date BETWEEN b.start_date AND b.end_date\n          GROUP BY 1,2,3,4),\n\nall_payments as (\n    select * from  `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_who_paid_segments_with_partner_type_and_account_type`\n)        \n\nselect deduped_intervals.*,     -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0440\u0430\u0441\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0435\u0433\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430\u0445 \u0441 \u043d\u0435\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\nall_payments.start_date as all_payments_start_date,\nall_payments.segment as all_payments_segment\n\n from deduped_intervals\nleft join all_payments on deduped_intervals.account_id=all_payments.account_id \nand deduped_intervals.start_date=all_payments.start_date", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_in_dynamics_deduped_intervals_all_segments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.078759Z", "completed_at": "2025-05-21T12:31:11.161918Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.243591Z", "completed_at": "2025-05-21T12:31:11.243600Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.21533632278442383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_first_subscription_date_with_more_than_1_day_duration", "compiled": true, "compiled_code": "with combined_intervals as (\n    select int_subscription_deduplicated.* \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_combined_intervals_only_paid` int_subscription_deduplicated\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u0442\u043e\u0439 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0431\u043e\u043b\u0435\u0435 1 \u0434\u043d\u044f\nselect account_id,                          -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nmin(subscription_start) as min_paid_date    -- \u041f\u0435\u0440\u0432\u0430\u044f \u0434\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443\nfrom combined_intervals\ngroup by 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_first_subscription_date_with_more_than_1_day_duration`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.162589Z", "completed_at": "2025-05-21T12:31:11.244762Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.286857Z", "completed_at": "2025-05-21T12:31:11.286868Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2550196647644043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_first_subscription_date_with_more_than_1_day_duration_without_waba", "compiled": true, "compiled_code": "with combined_intervals as (\n    select int_subscription_deduplicated.* \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_combined_intervals_only_paid` int_subscription_deduplicated\n        inner join `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billingpackages \n    on billingpackages.guid=int_subscription_deduplicated.subscription_id\n    where tariff!='waba'\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u0442\u043e\u0439 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0431\u043e\u043b\u0435\u0435 1 \u0434\u043d\u044f \u0431\u0435\u0437 WABA\nselect account_id,                       -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430   \nmin(subscription_start) as min_paid_date -- \u041f\u0435\u0440\u0432\u0430\u044f \u0434\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443\nfrom combined_intervals\ngroup by 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_first_subscription_date_with_more_than_1_day_duration_without_waba`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.288776Z", "completed_at": "2025-05-21T12:31:11.340367Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.345837Z", "completed_at": "2025-05-21T12:31:11.345846Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1462111473083496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_metrics_for_partners_active_users", "compiled": true, "compiled_code": "\n\nwith payments as (\n        select  distinct\n                real_money.account_id,\n                coalesce(real_money.data_source,'undefined') data_source,\n                real_money.subscription_id,\n                subs.created_at as paid_at,\n                paid_date,\n                row_number() over (partition by subscription_update_id order by case when partner_id is not null then 0 else  1 end) rn,\n                row_number() over (partition by account_id,real_money.subscription_id,paid_date order by subs.created_at desc) rn_,\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_and_wapi_sessions_real_money_with_data_source_and_subscription_update_id` real_money\n        join `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates` subs on real_money.subscription_update_id = subs.guid\n        where real_money.action in ('pay','renewal')\n),defining_segments as (\nselect payments.account_id,\n        partner_types.partner_id,\n        paid_date,\n        subscription_id,\n        date_trunc(paid_date,month) paid_month,\n        lead(paid_at,1,date_add(current_date(), interval 1 day)) over (partition by payments.account_id,subscription_id order by paid_at) next_payment_at,\n        lead(date_trunc(paid_at,month),1,date_add(date_trunc(current_date,month),interval 1 month)) over (partition by payments.account_id,subscription_id order by date_trunc(paid_at,month)) next_payment_month_at,\n        data_source,\n        start_date as became_daughter_date,\n        end_date changed_father_date,\n        case when first_value(data_source ) over (partition by payments.account_id, date_trunc(paid_date,month) order by paid_at desc)\n                            = 'partner_payment' then 'partner_paid'\n                            else 'not_partner_paid'\n                            end as segment_monthly,\n\n        case when first_value(data_source ) over (partition by payments.account_id, date_trunc(paid_date,week(monday)) order by paid_at desc)\n                            = 'partner_payment' then 'partner_paid'\n                            else 'not_partner_paid'\n                            end as segment_weekly,\n        case when first_value(data_source ) over (partition by payments.account_id order by paid_at desc)\n                            = 'partner_payment' then 'partner_paid'\n                            else 'not_partner_paid'\n                            end as segment_all,\nfrom payments payments\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` partner_types on payments.account_id = partner_types.account_id\n                                                                                    and payments.paid_date >= partner_types.start_date\n                                                                                    and payments.paid_date < partner_types.end_date\n                                                                                    and partner_types.partner_id is not null and partner_types.partner_id != 0\n                                                                                \nwhere rn = 1\nand rn_ = 1\n),max_partner as (\n    select *,\n            max(end_occured_at) over () max_occured_at\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated`\n    --where account_id = 52102833\n),  active_day_intervals as (\nselect int_subscription_deduplicated_by_id_combined_intervals_only_paid.*,\n                days.date,\n                partner_id,\n                partner_type\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_combined_intervals_only_paid`\n        inner join `dwh-wazzup`.`dbt_nbespalov`.`stg_days` days\n            on days.date >= subscription_start\n            and days.date <= subscription_end\n       join max_partner partner_types \n                                                                                    on int_subscription_deduplicated_by_id_combined_intervals_only_paid.account_id = partner_types.account_id\n                                                                                    and days.date >= partner_types.start_date\n                                                                                    and \n                                                                                            days.date < case when end_occured_at = max_occured_at\n                                                                                                                    then  date_add(subscription_end,interval 1 day)\n                                                                                                                    else end_date end\n),active_day_intervals_based_on_segments as (\n        select distinct defining_segments.account_id,   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n                        defining_segments.partner_id,   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n                        date,           -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u0430\u044f \u0434\u0430\u0442\u0430\n                        partner_type,   -- \u0422\u0438\u043f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        from defining_segments\n        left join active_day_intervals\n                                                                on defining_segments.account_id = active_day_intervals.account_id\n                                                                        and active_day_intervals.date>= paid_date and active_day_intervals.date<cast(next_payment_at as date)\n                                                                       -- and pre_data.subscription_id = sub_dates.subscription_id\n                                                                        and defining_segments.partner_id = active_day_intervals.partner_id\n\n--where data_source = 'partner_payment'             \n\n), active_month_intervals_with_segments as (\n    select distinct account_id,\n                                  partner_id,\n                                  paid_month,\n                                  lead(paid_month,1,date_add(current_date(), interval 1 day)) over (partition by account_id,partner_id order by paid_month) next_payment_month,\n                                  segment_monthly\n    from defining_segments  \n   -- where data_source = 'partner_payment'             \n         \n)\n,active_day_intervals_with_segments as (\nselect active_day_intervals_based_on_segments.*,\n        segment_monthly\nfrom active_day_intervals_based_on_segments\nleft join active_month_intervals_with_segments on active_day_intervals_based_on_segments.account_id = active_month_intervals_with_segments.account_id\n                                        and active_day_intervals_based_on_segments.partner_id = active_month_intervals_with_segments.partner_id\n                                        and paid_month <= date_trunc(date,month)\n                                        and next_payment_month > date_trunc(date,month)\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432\nselect *except(segment_monthly),\n        first_value(segment_monthly) over (partition by account_id,date_trunc(date,month) order by date desc) segment_monthly,          -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u043c\u0435\u0441\u044f\u0447\u043d\u043e\n        first_value(partner_id) over (partition by account_id,date_trunc(date,month) order by date desc) last_partner_in_month,         -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446\u0435\n        first_value(partner_type) over (partition by account_id,date_trunc(date,month) order by date desc) last_partner_type_in_month   -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u0438\u043f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446\u0435\nfrom active_day_intervals_with_segments\n\n--order by account_id,date\n/*where segment_monthly = 'partner_paid'\nand partner_id = 12972675\n--and date_trunc(date,month) = '2024-03-01'\n--and date >= current_date()\n\n\n\n52102833\n43647717\n73853650\n66520856\n*/", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_active_users`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.334326Z", "completed_at": "2025-05-21T12:31:11.345436Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.349320Z", "completed_at": "2025-05-21T12:31:11.349328Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.18435978889465332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_metrics_for_partners_active_users_for_whom_partner_paid", "compiled": true, "compiled_code": "\n\nwith payments as (\n        select  distinct\n                real_money.account_id,\n                coalesce(real_money.data_source,'undefined') data_source,\n                real_money.subscription_id,\n                subs.created_at as paid_at,\n                paid_date,\n                row_number() over (partition by subscription_update_id order by case when partner_id is not null then 0 else  1 end) rn,\n                row_number() over (partition by account_id,real_money.subscription_id,paid_date order by subs.created_at desc) rn_,\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_and_wapi_sessions_real_money_with_data_source_and_subscription_update_id` real_money\n        join `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates` subs on real_money.subscription_update_id = subs.guid\n        where real_money.action in ('pay','renewal')\n),defining_segments as (\nselect payments.account_id,\n        partner_types.partner_id,\n        paid_date,\n        subscription_id,\n        date_trunc(paid_date,month) paid_month,\n        lead(paid_at,1,date_add(current_date(), interval 1 day)) over (partition by payments.account_id,subscription_id order by paid_at) next_payment_at,\n        lead(date_trunc(paid_at,month),1,date_add(date_trunc(current_date,month),interval 1 month)) over (partition by payments.account_id,subscription_id order by date_trunc(paid_at,month)) next_payment_month_at,\n        data_source,\n        start_date as became_daughter_date,\n        end_date changed_father_date,\n        case when first_value(data_source ) over (partition by payments.account_id, date_trunc(paid_date,month) order by paid_at desc)\n                            = 'partner_payment' then 'partner_paid'\n                            else 'not_partner_paid'\n                            end as segment_monthly,\n\n        case when first_value(data_source ) over (partition by payments.account_id, date_trunc(paid_date,week(monday)) order by paid_at desc)\n                            = 'partner_payment' then 'partner_paid'\n                            else 'not_partner_paid'\n                            end as segment_weekly,\n        case when first_value(data_source ) over (partition by payments.account_id order by paid_at desc)\n                            = 'partner_payment' then 'partner_paid'\n                            else 'not_partner_paid'\n                            end as segment_all,\nfrom payments payments\njoin `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` partner_types on payments.account_id = partner_types.account_id\n                                                                                    and payments.paid_date >= partner_types.start_date\n                                                                                    and payments.paid_date < partner_types.end_date\n                                                                                    and partner_types.partner_id is not null and partner_types.partner_id != 0\n                                                                                \nwhere rn = 1\nand rn_ = 1\n),max_partner as (\n    select *,\n            max(end_occured_at) over () max_occured_at\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated`\n),  active_day_intervals as (\nselect int_subscription_deduplicated_by_id_combined_intervals_only_paid.*,\n                days.date,\n                partner_id\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_combined_intervals_only_paid`\n        inner join `dwh-wazzup`.`dbt_nbespalov`.`stg_days` days\n            on days.date >= subscription_start\n            and days.date <= subscription_end\n       join max_partner partner_types \n                                                                                    on int_subscription_deduplicated_by_id_combined_intervals_only_paid.account_id = partner_types.account_id\n                                                                                    and days.date >= partner_types.start_date\n                                                                                    and \n                                                                                            days.date < case when end_occured_at = max_occured_at\n                                                                                                                    then  subscription_end\n                                                                                                                    else end_date end\n),active_day_intervals_based_on_segments as (\n        select distinct defining_segments.account_id,\n                        defining_segments.partner_id,\n                        date,   -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u0430\u044f \u0434\u0430\u0442\u0430\n        from defining_segments\n        join active_day_intervals\n                                                                on defining_segments.account_id = active_day_intervals.account_id\n                                                                        and active_day_intervals.date>= paid_date and active_day_intervals.date<cast(next_payment_at as date)\n                                                                       -- and pre_data.subscription_id = sub_dates.subscription_id\n                                                                        and defining_segments.partner_id = active_day_intervals.partner_id\n\nwhere data_source = 'partner_payment'             \n\n), active_month_intervals_with_segments as (\n    select distinct account_id,                     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n                                  partner_id,       -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n                                  paid_month,\n                                  lead(paid_month,1,date_add(current_date(), interval 1 day)) over (partition by account_id,partner_id order by paid_month) next_payment_month,\n                                  segment_monthly   -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u043c\u0435\u0441\u044f\u0447\u043d\u043e\n    from defining_segments  \n    where data_source = 'partner_payment'             \n         \n)\n,active_day_intervals_with_segments as (\nselect active_day_intervals_based_on_segments.*,\n        segment_monthly\nfrom active_day_intervals_based_on_segments\njoin active_month_intervals_with_segments on active_day_intervals_based_on_segments.account_id = active_month_intervals_with_segments.account_id\n                                        and active_day_intervals_based_on_segments.partner_id = active_month_intervals_with_segments.partner_id\n                                        and paid_month <= date_trunc(date,month)\n                                        and next_payment_month > date_trunc(date,month)\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432\nselect *\nfrom active_day_intervals_with_segments\n\n/*where segment_monthly = 'partner_paid'\nand partner_id = 12972675\n--and date_trunc(date,month) = '2024-03-01'\n--and date >= current_date()\n*/", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_active_users_for_whom_partner_paid`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.338125Z", "completed_at": "2025-05-21T12:31:11.346174Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.389750Z", "completed_at": "2025-05-21T12:31:11.389760Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.18344473838806152, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_by_subscription_id_tarif_period_quantity", "compiled": true, "compiled_code": "with combined_intervals as (\n    select int_subscription_deduplicated.*,\n    billingpackages.type\n     from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_combined_intervals_only_paid` int_subscription_deduplicated\n        inner join `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billingpackages \n    on billingpackages.guid=int_subscription_deduplicated.subscription_id\n    where billingpackages.paid_at is not null \n),\n\nlast_value_tarif as (\n    select stg_subscriptionUpdates.subscription_id,                         -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    data_source,                                                            -- \u0421\u043f\u043e\u0441\u043e\u0431 \u043e\u043f\u043b\u0430\u0442\u044b: card (\u043e\u043f\u043b\u0430\u0442\u0430 \u043f\u043e \u043a\u0430\u0440\u0442\u0435), bills (\u043e\u043f\u043b\u0430\u0442\u0430 \u043f\u043e \u0441\u0447\u0451\u0442\u0443), partner_payment (\u043e\u043f\u043b\u0430\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c) \u0438\u043b\u0438 null\n    partner_id,                                                             -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u0435\u0441\u043b\u0438 \u043e\u043f\u043b\u0430\u0442\u0430 \u0431\u044b\u043b\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c\n    date_trunc(stg_subscriptionUpdates.paid_date, month) as paid_month,     -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n    stg_subscriptionUpdates.paid_date,                                      -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    billingpackages.type as subscription_type,                              -- \u0422\u0438\u043f (\u0442\u0440\u0430\u0441\u043d\u043f\u043e\u0440\u0442) \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    coalesce(last_value(tariff_new) over (partition by stg_subscriptionUpdates.subscription_id, stg_subscriptionUpdates.paid_date order by stg_subscriptionUpdates.paid_date desc), tariff) as tariff_new,          -- \u041d\u043e\u0432\u044b\u0439 \u0442\u0430\u0440\u0438\u0444 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    coalesce(last_value(period_new) over (partition by stg_subscriptionUpdates.subscription_id, stg_subscriptionUpdates.paid_date  order by stg_subscriptionUpdates.paid_date desc), period) as period_new,         -- \u041d\u043e\u0432\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    coalesce(last_value(quantity_new) over (partition by stg_subscriptionUpdates.subscription_id, stg_subscriptionUpdates.paid_date  order by stg_subscriptionUpdates.paid_date desc), quantity) as quantity_new    -- \u041d\u043e\u0432\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0432 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_updates__corect_date_and_filledna_tarif_period_quantity` stg_subscriptionUpdates\n    join  `dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_and_wapi_sessions_real_money_with_data_source_and_subscription_update_id` who_paid_data \n                                                                                                    on stg_subscriptionUpdates.guid = who_paid_data.subscription_update_id\n    left join `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages`  billingpackages on billingpackages.guid=stg_subscriptionUpdates.subscription_id\n    where tariff_new is not null\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0441\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c \u0438\u0445 \u043e\u043f\u043b\u0430\u0442\u044b \u0438 \u043d\u043e\u0432\u044b\u043c \u0442\u0430\u0440\u0438\u0444\u043e\u043c\nselect *\nfrom last_value_tarif", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_by_subscription_id_tarif_period_quantity`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.341586Z", "completed_at": "2025-05-21T12:31:11.349669Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.429361Z", "completed_at": "2025-05-21T12:31:11.429369Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.22340989112854004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_by_subscription_id_tarif_period_quantity_by_dates", "compiled": true, "compiled_code": "with combined_intervals as (\n    select int_subscription_deduplicated.*,\n    billingpackages.type                            -- \u0422\u0438\u043f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n     from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_combined_intervals_only_paid` int_subscription_deduplicated\n        inner join `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billingpackages \n    on billingpackages.guid=int_subscription_deduplicated.subscription_id\n    where billingpackages.paid_at is not null \n),\n\nsubscription_with_dates  as (\n    select distinct\n    date,                                           -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    subscription_id,                                -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    account_id,                                     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    LAST_DAY(date, MONTH)  as last_day_of_month,    -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0434\u0435\u043d\u044c \u043c\u0435\u0441\u044f\u0446\u0430\n    last_value(date) over (partition by date_trunc(date,month),subscription_id order by date asc rows between unbounded preceding and unbounded following ) as last_value_date_by_month -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0434\u0435\u043d\u044c \u043c\u0435\u0441\u044f\u0446\u0430 \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0435 '\u043c\u0435\u0441\u044f\u0446 + ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438'\n    from combined_intervals inner join `dwh-wazzup`.`dbt_nbespalov`.`stg_days` days\n    on days.date>=combined_intervals.subscription_start and days.date<=combined_intervals.subscription_end\n    ),\n\nlast_value_tarif as (\n    select subscription_id,                         -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    paid_date,                                      -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    billingpackages.type as subscription_type,      -- \u0422\u0438\u043f (\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442) \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    coalesce(last_value(tariff_new) over (partition by subscription_id, paid_date order by paid_date desc), tariff) as tariff_new,      -- \u041d\u043e\u0432\u044b\u0439 \u0442\u0430\u0440\u0438\u0444 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    coalesce(last_value(period_new) over (partition by subscription_id, paid_date order by paid_date desc), period) as period_new,      -- \u041d\u043e\u0432\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    coalesce(last_value(quantity_new) over (partition by subscription_id, paid_date order by paid_date desc), quantity) as quantity_new -- \u041d\u043e\u0432\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0432 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_updates__corect_date_and_filledna_tarif_period_quantity` stg_subscriptionUpdates\n    left join `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages`  billingpackages \n    on billingpackages.guid=stg_subscriptionUpdates.subscription_id\n),\n\nlast_value_tarif_by_subscription_id as (\n    select subscription_id,                         -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    subscription_type,                              -- \u0422\u0438\u043f (\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442) \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    paid_date,                                      -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    tariff_new,                                     -- \u041d\u043e\u0432\u044b\u0439 \u0442\u0430\u0440\u0438\u0444 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    period_new,                                     -- \u041d\u043e\u0432\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    quantity_new                                    -- \u041d\u043e\u0432\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0432 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n    from last_value_tarif  \n    group by 1,2,3,4,5,6\n),\n\n\nlast_value_tarif_by_subscription_id_next_paid_date as (\n    select *,\n    coalesce(date_sub(lag(paid_date) over (partition by subscription_id order by paid_date desc),interval 1 day),\n    current_date) as next_paid_date\n     from last_value_tarif_by_subscription_id\n),\n\nsubscription_with_date_filter as (\n    select * from subscription_with_dates\n    where date<=current_date()\n),\n\ntarif_info as (\n    select subscription_with_date_filter.*, \n    coalesce(tariff_new,tariff) as tariff_new,                               -- \u041d\u043e\u0432\u044b\u0439 \u0442\u0430\u0440\u0438\u0444 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    coalesce(period_new,period) as period_new,                               -- \u041d\u043e\u0432\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    coalesce(quantity_new, quantity) as quantity_new,                        -- \u041d\u043e\u0432\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0432 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n    coalesce(subscription_type,billingpackages.type) as subscription_type    -- \u0422\u0438\u043f (\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442) \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n     from subscription_with_date_filter\n    left join last_value_tarif_by_subscription_id_next_paid_date\n    on subscription_with_date_filter.subscription_id=last_value_tarif_by_subscription_id_next_paid_date.subscription_id\n    and subscription_with_date_filter.date>=last_value_tarif_by_subscription_id_next_paid_date.paid_date and \n    subscription_with_date_filter.date<=last_value_tarif_by_subscription_id_next_paid_date.next_paid_date\n    left join `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages`  billingpackages \n    on billingpackages.guid=subscription_with_date_filter.subscription_id\n    )\n        -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430\u043c\u0438 \u0438 \u0438\u0445 \u0434\u0430\u0442\u0430\u043c\u0438 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043d\u043e\u0432\u043e\u043c \u0442\u0430\u0440\u0438\u0444\u0435\nselect * \nfrom tarif_info", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_by_subscription_id_tarif_period_quantity_by_dates`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.347594Z", "completed_at": "2025-05-21T12:31:11.428975Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.472600Z", "completed_at": "2025-05-21T12:31:11.472611Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2149355411529541, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_deduplicated_by_id_with_previous_and_next_subscription", "compiled": true, "compiled_code": "with\n    subscription_by_id as (\n        select\n            *,\n            coalesce(\n                lag(subscription_start) over (\n                    partition by subscription_id order by subscription_start desc\n                ),\n                current_date\n            ) as next_subscription_start,   -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438. \u0415\u0441\u043b\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043d\u0435\u0442 - \u0441\u0442\u0430\u0432\u0438\u0442\u0441\u044f \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0434\u0430\u0442\u0430\n            lag(subscription_end) over (partition by subscription_id order by subscription_start asc) as previous_subscription_end  -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0448\u043b\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        from\n            `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_combined_intervals_only_paid`\n    ),\n    difference_last_month as (\n        select\n            *,\n            date_diff(\n                next_subscription_start, subscription_end, day\n            ) as difference_between_days,   -- \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n            date_diff(subscription_start,previous_subscription_end, day ) as difference_subscription_start_and_previous_subscription_end    -- \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u0448\u043b\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        from subscription_by_id\n    )   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0448\u043b\u044b\u0445, \u0442\u0435\u043a\u0443\u0449\u0438\u0445 \u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0441 \u0440\u0430\u0437\u043d\u0438\u0446\u0430\u043c\u0438 \u0434\u0430\u0442 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438\n select * from difference_last_month", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_by_id_with_previous_and_next_subscription`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.470391Z", "completed_at": "2025-05-21T12:31:11.553197Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.556703Z", "completed_at": "2025-05-21T12:31:11.556714Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2521069049835205, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscription_deduplicated_by_id_combined_intervals_only_paid_fixed_end", "compiled": true, "compiled_code": "\n\nwith deduped_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_deduped_intervals_only_paid_fixed_end`\n),\n\ndeduped_intervals_with_flag as (\n    SELECT *,\n    start_date != IFNULL(LAG(end_date) OVER (PARTITION BY account_id,subscription_id ORDER BY start_date), start_date) as flag\n    FROM deduped_intervals),\n\ndeduped_intervals_with_group as (\n    SELECT *, \n    count(CASE WHEN flag THEN 1 END) OVER (PARTITION BY account_id,subscription_id ORDER BY start_date) grp\n    from deduped_intervals_with_flag\n),\n\ncombined_intervals AS (\n  SELECT account_id, subscription_id,  MIN(start_date) subscription_start, MAX(end_date) subscription_end\n  FROM deduped_intervals_with_group\n  GROUP BY account_id, grp, subscription_id\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0435\u0451 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0441 \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438 \u0438 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0434\u0430\u0442\u043e\u0439 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f (\u0442\u043e\u043b\u044c\u043a\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0435)\nselect * from combined_intervals", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_combined_intervals_only_paid_fixed_end`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.558117Z", "completed_at": "2025-05-21T12:31:11.606396Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.613318Z", "completed_at": "2025-05-21T12:31:11.613329Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.14208555221557617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_defining_clients_types_without_trials", "compiled": true, "compiled_code": "select\n            *,\n            date_add(subscription_end, interval 1 day) as data_otvala,  -- \u0414\u0430\u0442\u0430 \u043e\u0442\u0432\u0430\u043b\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n            lead(subscription_start) over (partition by account_id order by subscription_start) nextsubscriptiondate,   -- \u0414\u0430\u0442\u0430 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n            date_diff(lead(subscription_start) over (partition by account_id order by subscription_start),\n                subscription_end,\n                day\n            ) datesbetween, -- \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043e\u0442\u0432\u0430\u043b\u043e\u043c \u0438 \u0434\u0430\u0442\u043e\u0439 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n            case\n                when date(current_timestamp) <= subscription_end\n                then 'still_active'\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    <= 20\n                then 'bought_new_subscription_within_leaving_period'\n\n                when\n                    lead(subscription_start) over (\n                        partition by account_id order by subscription_start\n                    )\n                    is null\n                    and date_diff(date(current_timestamp), subscription_end, day) <= 20\n                then 'may_become_active'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    > 20\n                then 'came_back_after_leaving_period'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    is null\n                    and date(current_timestamp) > subscription_end\n                then 'did_not_come_back'\n            end as clients_type\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_without_trials`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_defining_clients_types_without_trials`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.600148Z", "completed_at": "2025-05-21T12:31:11.612925Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.615731Z", "completed_at": "2025-05-21T12:31:11.615741Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14122366905212402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_defining_clients_types", "compiled": true, "compiled_code": "select distinct     -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0442\u0438\u043f \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0435\u0433\u043e \u043e\u043f\u043b\u0430\u0442\n            int_subscriptions_last_end_date.*,\n            date_add(subscription_end, interval 1 day) as data_otvala,  -- \u0414\u0430\u0442\u0430 \u043e\u0442\u0432\u0430\u043b\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n            lead(subscription_start) over (partition by int_subscriptions_last_end_date.account_id order by subscription_start) nextsubscriptiondate,   -- \u0414\u0430\u0442\u0430 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n            date_diff(lead(subscription_start) over (partition by int_subscriptions_last_end_date.account_id order by subscription_start),\n                subscription_end,\n                day\n            ) datesbetween, -- \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043e\u0442\u0432\u0430\u043b\u043e\u043c \u0438 \u0434\u0430\u0442\u043e\u0439 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\"\n            case\n                when (current_date <= subscription_end)\n                then 'still_active'\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    <= 20\n                then 'bought_new_subscription_within_leaving_period'\n\n                when\n                    lead(subscription_start) over (\n                        partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                    )\n                    is null\n                    and date_diff(current_date, subscription_end, day) <= 20\n                then 'may_become_active'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    > 20\n                then 'came_back_after_leaving_period'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    is null\n                    and current_date > subscription_end\n                then 'did_not_come_back'\n            end as clients_type,\n   case\n                when (current_date <= subscription_end\n                or int_channels_count_active_by_account.account_Id is not null)\n                then 'still_active'\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    <= 7\n                then 'bought_new_subscription_within_leaving_period'\n\n                when\n                    lead(subscription_start) over (\n                        partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                    )\n                    is null\n                    and date_diff(current_date, subscription_end, day) <= 7\n                then 'may_become_active'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    > 7\n                then 'came_back_after_leaving_period'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    is null\n                    and current_date > subscription_end\n                then 'did_not_come_back'\n            end as clients_type_for_communications  -- \u0422\u0438\u043f \u043a\u043b\u0438\u0435\u043d\u0442\u0430: still_active, bought_new_subscription_within_leaving_period, came_back_after_leaving_period, did_not_come_back, may_become_active\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date` int_subscriptions_last_end_date\n        left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels_count_active_by_account` int_channels_count_active_by_account on int_subscriptions_last_end_date.account_Id = int_channels_count_active_by_account.account_Id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_defining_clients_types`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.603027Z", "completed_at": "2025-05-21T12:31:11.613690Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.655675Z", "completed_at": "2025-05-21T12:31:11.655687Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.18014931678771973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_defining_clients_types_with_payments_and_promised_payment", "compiled": true, "compiled_code": "\n    select distinct -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0442\u0438\u043f \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0435\u0433\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a (\u0431\u0435\u0437 \u0442\u0440\u0438\u0430\u043b\u043e\u0432)\n            int_subscriptions_last_end_date.*,\n            date_add(subscription_end, interval 1 day) as data_otvala,  -- \u0414\u0430\u0442\u0430 \u043e\u0442\u0432\u0430\u043b\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n            lead(subscription_start) over (partition by int_subscriptions_last_end_date.account_id order by subscription_start) nextsubscriptiondate,   -- \u0414\u0430\u0442\u0430 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n            date_diff(lead(subscription_start) over (partition by int_subscriptions_last_end_date.account_id order by subscription_start),\n                subscription_end,\n                day\n            ) datesbetween, -- \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043e\u0442\u0432\u0430\u043b\u043e\u043c \u0438 \u0434\u0430\u0442\u043e\u0439 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n           \n            case\n                when (current_date <= subscription_end)\n                then 'still_active'\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    <= 7\n                then 'bought_new_subscription_within_leaving_period'\n\n                when\n                    lead(subscription_start) over (\n                        partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                    )\n                    is null\n                    and date_diff(current_date, subscription_end, day) <= 7\n                then 'may_become_active'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    > 7\n                then 'came_back_after_leaving_period'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    is null\n                    and current_date > subscription_end\n                then 'did_not_come_back'\n            end as client_type_with_churn_period_7\n             ,\n                \n            case\n                when (current_date <= subscription_end)\n                then 'still_active'\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    <= 20\n                then 'bought_new_subscription_within_leaving_period'\n\n                when\n                    lead(subscription_start) over (\n                        partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                    )\n                    is null\n                    and date_diff(current_date, subscription_end, day) <= 20\n                then 'may_become_active'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    > 20\n                then 'came_back_after_leaving_period'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    is null\n                    and current_date > subscription_end\n                then 'did_not_come_back'\n            end as client_type_with_churn_period_20\n             \n                \n        from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_with_payments_and_promised_payment` int_subscriptions_last_end_date\n        inner join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_paid_subscription_with_type_and_tariff` int_accounts_who_paid_without_free \n        on int_subscriptions_last_end_date.account_Id = int_accounts_who_paid_without_free.account_Id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_defining_clients_types_with_payments_and_promised_payment`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.607731Z", "completed_at": "2025-05-21T12:31:11.615316Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.656911Z", "completed_at": "2025-05-21T12:31:11.656922Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.21972107887268066, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_is_client_active_by_month", "compiled": true, "compiled_code": "with partners_info as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_with_clients_by_month`\n),\n\nsubscriptions_period as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_active_accounts_by_month`\n)\n\n-- \u041a\u0430\u043a\u0438\u0435 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u044b \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u044b \u043a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0443 \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435 \u0438 \u0443 \u043a\u0430\u043a\u0438\u0445 \u0438\u0437 \u043d\u0438\u0445 \u0431\u044b\u043b\u0430 \u0430\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 (\u0441\u0447\u0438\u0442\u0430\u0435\u043c, \u0435\u0441\u043b\u0438 \u0431\u044b\u043b \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u0434\u0435\u043d\u044c). \u041d\u0435 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0442\u0440\u0438\u0430\u043b\u044b, \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u0438 \u0438 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nselect distinct partner_id,     -- \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\npartners_info.month,            -- \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\nsubscriptions_period.account_id as active_account_id,   -- \u0443 \u0434\u043e\u0447\u043a\u0438 \u0435\u0441\u0442\u044c \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u0430\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430\n partners_info.account_id as all_account_id             -- \u0434\u043e\u0447\u043a\u0430 \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0430 \u043a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0443\nfrom partners_info\nleft join subscriptions_period on partners_info.account_id=subscriptions_period.account_id\nand subscriptions_period.month=partners_info.month\nwhere partner_type in ('partner','tech-partner')\nand account_type='standart'", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_is_client_active_by_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.609757Z", "completed_at": "2025-05-21T12:31:11.655065Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.697091Z", "completed_at": "2025-05-21T12:31:11.697100Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2573702335357666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_defining_clients_types_who_paid_without_trials_and_promised_payments", "compiled": true, "compiled_code": "\n    select distinct -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0442\u0438\u043f \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0435\u0433\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a (\u0431\u0435\u0437 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u0438 \u0442\u0440\u0438\u0430\u043b\u043e\u0432)\n            int_subscriptions_last_end_date.*,\n            date_add(subscription_end, interval 1 day) as data_otvala,  -- \u0414\u0430\u0442\u0430 \u043e\u0442\u0432\u0430\u043b\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n            lead(subscription_start) over (partition by int_subscriptions_last_end_date.account_id order by subscription_start) nextsubscriptiondate,   -- \u0414\u0430\u0442\u0430 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n            date_diff(lead(subscription_start) over (partition by int_subscriptions_last_end_date.account_id order by subscription_start),\n                subscription_end,\n                day\n            ) datesbetween, -- \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043e\u0442\u0432\u0430\u043b\u043e\u043c \u0438 \u0434\u0430\u0442\u043e\u0439 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n           \n            case\n                when (current_date <= subscription_end)\n                then 'still_active'\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    <= 2\n                then 'bought_new_subscription_within_leaving_period'\n\n                when\n                    lead(subscription_start) over (\n                        partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                    )\n                    is null\n                    and date_diff(current_date, subscription_end, day) <= 2\n                then 'may_become_active'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    > 2\n                then 'came_back_after_leaving_period'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    is null\n                    and current_date > subscription_end\n                then 'did_not_come_back'\n            end as client_type_with_churn_period_2\n             ,\n                \n            case\n                when (current_date <= subscription_end)\n                then 'still_active'\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    <= 5\n                then 'bought_new_subscription_within_leaving_period'\n\n                when\n                    lead(subscription_start) over (\n                        partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                    )\n                    is null\n                    and date_diff(current_date, subscription_end, day) <= 5\n                then 'may_become_active'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    > 5\n                then 'came_back_after_leaving_period'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    is null\n                    and current_date > subscription_end\n                then 'did_not_come_back'\n            end as client_type_with_churn_period_5\n             ,\n                \n            case\n                when (current_date <= subscription_end)\n                then 'still_active'\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    <= 7\n                then 'bought_new_subscription_within_leaving_period'\n\n                when\n                    lead(subscription_start) over (\n                        partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                    )\n                    is null\n                    and date_diff(current_date, subscription_end, day) <= 7\n                then 'may_become_active'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    > 7\n                then 'came_back_after_leaving_period'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    is null\n                    and current_date > subscription_end\n                then 'did_not_come_back'\n            end as client_type_with_churn_period_7\n             ,\n                \n            case\n                when (current_date <= subscription_end)\n                then 'still_active'\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    <= 20\n                then 'bought_new_subscription_within_leaving_period'\n\n                when\n                    lead(subscription_start) over (\n                        partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                    )\n                    is null\n                    and date_diff(current_date, subscription_end, day) <= 20\n                then 'may_become_active'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    > 20\n                then 'came_back_after_leaving_period'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    is null\n                    and current_date > subscription_end\n                then 'did_not_come_back'\n            end as client_type_with_churn_period_20\n             ,\n                \n            case\n                when (current_date <= subscription_end)\n                then 'still_active'\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    <= 90\n                then 'bought_new_subscription_within_leaving_period'\n\n                when\n                    lead(subscription_start) over (\n                        partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                    )\n                    is null\n                    and date_diff(current_date, subscription_end, day) <= 90\n                then 'may_become_active'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    > 90\n                then 'came_back_after_leaving_period'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    is null\n                    and current_date > subscription_end\n                then 'did_not_come_back'\n            end as client_type_with_churn_period_90\n             \n                \n        from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_without_trials_and_promised_payments` int_subscriptions_last_end_date\n        inner join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_paid_subscription_with_type_and_tariff` int_accounts_who_paid_without_free on int_subscriptions_last_end_date.account_Id = int_accounts_who_paid_without_free.account_Id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_defining_clients_types_who_paid_without_trials_and_promised_payments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.736522Z", "completed_at": "2025-05-21T12:31:11.821095Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.826163Z", "completed_at": "2025-05-21T12:31:11.826172Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2537822723388672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_who_paid_in_dynamics_combined_intervals", "compiled": true, "compiled_code": "with deduped_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_in_dynamics_deduped_intervals`\n),\n\nold_and_new_data_with_segments as (\n    select account_id,\n    who_paid,\n    start_date,\n    start_at,\n    end_date,\n    subscription_id,\n    action,\n    (case when end_date>=current_date then current_date\n    else end_date\n    end) as end_date_corrected \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscrptions_who_paid_old_and_new_data_union_with_who_paid`\n    where end_date!=start_date\n\n),\n\nlast_payments as (\n    select account_id, max(end_date)  as last_payment_date from old_and_new_data_with_segments\n    \n    group by 1\n),\n\n\ndeduped_intervals_with_flag as (\n    SELECT *,\n    start_date != IFNULL(LAG(end_date) OVER (PARTITION BY account_id ORDER BY start_date), start_date)\n    \n\n     as flag,\n      segment != IFNULL(LAG(segment) OVER (PARTITION BY account_id ORDER BY start_date), segment) as different_segment\n    FROM deduped_intervals),\n\ndeduped_intervals_with_group as (\n    SELECT *, \n    count(CASE WHEN flag THEN 1 END) OVER (PARTITION BY account_id ORDER BY start_date) grp\n    from deduped_intervals_with_flag\n),\n\ndedup_interval_with_max_end_date_by_group as (\n    select *,  max(end_date) over (partition by account_id, grp) as grp_max_date from deduped_intervals_with_group\n),\n\ndedup_interval_next as (\n    select *, lag(grp_max_date) over (partition by account_id order by start_date) as previous_group_max_date from dedup_interval_with_max_end_date_by_group\n),\n\n\ndedup_interval_next_with_fixed_end_date as (\n    select *, (case when previous_group_max_date>=end_date then previous_group_max_date\n    else end_date\n    end) as end_date_fixed  from dedup_interval_next\n),\n\ncombined_intervals AS (\n  SELECT account_id, segment, MIN(start_date) subscription_start, MAX(end_date_fixed) subscription_end\n  FROM dedup_interval_next_with_fixed_end_date\n  GROUP BY account_id, grp, segment\n),\n\n\nsegments_to_deduplicate as (\n    select *, row_number() over (partition by account_id, subscription_start order by subscription_end desc) rn\n    from combined_intervals\n),\n\nsegments_to_deduplicated as (\n    select * from segments_to_deduplicate\n    where rn=1\n),\n\nlag_subscription_start as (\nselect *, lag(subscription_start,1) over (partition by account_id order by subscription_start desc) as previous_subscription_start \nfrom segments_to_deduplicated\norder by subscription_start asc),\n\nsubscription_end_fixed as (\n\nselect (case when previous_subscription_start<subscription_end then previous_subscription_start\nelse subscription_end\nend) as subscription_end_fixed_date, *, row_number() over (partition by account_id order by subscription_start desc) as last_row from lag_subscription_start\n),\nsubs_fixed as (\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0441 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0440\u0430\u0441\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0435\u0433\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430\u0445 \u0441 \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438\nselect subscription_end_fixed.*, (case when last_payment_date>subscription_end_fixed_date and last_row=1 then last_payment_date\nelse subscription_end_fixed_date end) as subscription_end_with_last_payment_date,\nlast_payment_date\n from subscription_end_fixed\nleft join last_payments on last_payments.account_id=subscription_end_fixed.account_id)\nselect * from subs_fixed", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_in_dynamics_combined_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.823997Z", "completed_at": "2025-05-21T12:31:11.869188Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.874125Z", "completed_at": "2025-05-21T12:31:11.874135Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.13966774940490723, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_who_paid_in_dynamics_combined_intervals_all_segments", "compiled": true, "compiled_code": "with deduped_intervals_with_previos_segment as (\n    select *,\n     lag(all_payments_segment) over (partition by account_id order by start_date,end_date) as previous_segment_by_payment\n     from   `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_in_dynamics_deduped_intervals_all_segments`\n     --where account_id = 10187719\n),\n\ndeduped_intervals as (\n    select account_id,\n    start_date,\n    end_date,\n    (case when previous_segment_by_payment!=segment and all_payments_segment is null then previous_segment_by_payment\n    else segment \n    end\n    ) as segment\n     from  deduped_intervals_with_previos_segment\n),\n\nold_and_new_data_with_segments as (\n    select account_id,\n    who_paid,\n    start_date,\n    start_at,\n    end_date,\n    subscription_id,\n    action,\n    (case when end_date>=current_date then current_date\n    else end_date\n    end) as end_date_corrected \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscrptions_who_paid_old_and_new_data_union_with_who_paid`\n    where end_date!=start_date\n\n),\n\nlast_payments as (\n    select account_id, max(end_date)  as last_payment_date from old_and_new_data_with_segments\n    \n    group by 1\n),\n\n\ndeduped_intervals_with_flag as (\n    SELECT *,\n    start_date != IFNULL(LAG(end_date) OVER (PARTITION BY account_id ORDER BY start_date), start_date)\n    \n\n     as flag,\n      segment != IFNULL(LAG(segment) OVER (PARTITION BY account_id ORDER BY start_date), segment) as different_segment\n    FROM deduped_intervals),\n\ndeduped_intervals_with_group as (\n    SELECT *, \n    count(CASE WHEN flag THEN 1 END) OVER (PARTITION BY account_id ORDER BY start_date) grp\n    from deduped_intervals_with_flag\n),\n\ndedup_interval_with_max_end_date_by_group as (\n    select *,  max(end_date) over (partition by account_id, grp) as grp_max_date from deduped_intervals_with_group\n),\n\ndedup_interval_next as (\n    select *, lag(grp_max_date) over (partition by account_id order by start_date) as previous_group_max_date from dedup_interval_with_max_end_date_by_group\n),\n\n\ndedup_interval_next_with_fixed_end_date as (\n    select *, (case when previous_group_max_date>=end_date then previous_group_max_date\n    else end_date\n    end) as end_date_fixed  from dedup_interval_next\n),\n\ncombined_intervals AS (\n  SELECT account_id, segment, MIN(start_date) subscription_start, MAX(end_date_fixed) subscription_end\n  FROM dedup_interval_next_with_fixed_end_date\n  GROUP BY account_id, grp, segment\n),\n\n\nsegments_to_deduplicate as (\n    select *, row_number() over (partition by account_id, subscription_start order by subscription_end desc) rn\n    from combined_intervals\n),\n\nsegments_to_deduplicated as (\n    select * from segments_to_deduplicate\n    where rn=1\n),\n\nlag_subscription_start as (\nselect *, lag(subscription_start,1) over (partition by account_id order by subscription_start desc) as previous_subscription_start \nfrom segments_to_deduplicated\norder by subscription_start asc),\n\nsubscription_end_fixed as (\n\nselect (case when previous_subscription_start<subscription_end then previous_subscription_start\nelse subscription_end\nend) as subscription_end_fixed_date, *, row_number() over (partition by account_id order by subscription_start desc) as last_row from lag_subscription_start\n), \nsubs_fixed as (\n\nselect subscription_end_fixed.*, (case when last_payment_date>subscription_end_fixed_date and last_row=1 then last_payment_date\nelse subscription_end_fixed_date end) as subscription_end_with_last_payment_date,\nlast_payment_date\n from subscription_end_fixed\nleft join last_payments on last_payments.account_id=subscription_end_fixed.account_id)\nselect * from subs_fixed    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0440\u0430\u0441\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0435\u0433\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430\u0445", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_in_dynamics_combined_intervals_all_segments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.828071Z", "completed_at": "2025-05-21T12:31:11.876589Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.919692Z", "completed_at": "2025-05-21T12:31:11.919703Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14086651802062988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_metrics_for_partners_active_users_aggregated", "compiled": true, "compiled_code": "with partners_data as (\nselect last_partner_in_month as partner_id,\n        last_partner_type_in_month as partner_type,\n        date_trunc(date,month) month,\n        currency,\n        case when date_trunc(date,month) = date_trunc(register_date,month) then 'new' else 'old' end as client_type,\n         case when last_partner_type_in_month in ('partner') and segment_monthly = 'partner_paid' then 'of-partner'\n              when last_partner_type_in_month in ('tech-partner') then 'tech-partner'\n           end segments_aggregated,\n        sources.registration_source_agg\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_active_users` partner_metrics\njoin `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accs on partner_metrics.last_partner_in_month = accs.account_id\njoin `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_attribution_data` sources on accs.account_id = sources.account_id\n\nwhere (last_partner_type_in_month in ('tech-partner'))\nor (last_partner_type_in_month in ('partner') and segment_monthly = 'partner_paid')\n\n)\n, partners_active_all as (\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_,\n        month,\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,\n        case when grouping(client_type) = 1 then 'all' else client_type end client_type_,\n        count(distinct partner_id) as active_partners_count,\n      'all' as market_type\nfrom partners_data\n   group by GROUPING SETS \n(\n  (segments_aggregated,month),\n        (client_type,month),\n        (segments_aggregated,month,client_type),\n        (month),\n\n  (segments_aggregated,month,registration_source_agg),\n        (client_type,month,registration_source_agg),\n        (segments_aggregated,month,client_type,registration_source_agg),\n        (month,registration_source_agg)\n\n)\n\n),partners_active_eur_usd_rur_kzt as (\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_,\n        month,\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,\n        case when grouping(client_type) = 1 then 'all' else client_type end client_type_,\n        count(distinct partner_id) as active_partners_count,\n      case when currency in ('USD','EUR') then  'usd_eur' else 'ru_kzt' end  as market_type\nfrom partners_data\nwhere currency in ('RUR','USD','KZT','EUR')\n   group by GROUPING SETS \n(\n  (segments_aggregated,month,market_type),\n        (client_type,month,market_type),\n        (segments_aggregated,month,client_type,market_type),\n        (month,market_type),\n\n  (segments_aggregated,month,registration_source_agg,market_type),\n        (client_type,month,registration_source_agg,market_type),\n        (segments_aggregated,month,client_type,registration_source_agg,market_type),\n        (month,registration_source_agg,market_type)\n)\n\n\n),partners_active_rur as (\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_,    -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n        month,                  -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,   -- \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n        case when grouping(client_type) = 1 then 'all' else client_type end client_type_,   -- \u0422\u0438\u043f \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n        count(distinct partner_id) as active_partners_count,   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432\n      currency as market_type   -- \u0422\u0438\u043f \u0440\u044b\u043d\u043a\u0430\nfrom partners_data\nwhere currency in ('RUR','KZT','EUR','USD')\n   group by GROUPING SETS \n(\n  (segments_aggregated,month,market_type),\n        (client_type,month,market_type),\n        (segments_aggregated,month,client_type,market_type),\n        (month,market_type),\n\n  (segments_aggregated,month,registration_source_agg,market_type),\n        (client_type,month,registration_source_agg,market_type),\n        (segments_aggregated,month,client_type,registration_source_agg,market_type),\n        (month,registration_source_agg,market_type)\n)\n        -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n)\nselect * from partners_active_all\nunion all\nselect * from partners_active_rur\nunion all\nselect * from partners_active_eur_usd_rur_kzt", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_active_users_aggregated`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.871862Z", "completed_at": "2025-05-21T12:31:11.877855Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.921045Z", "completed_at": "2025-05-21T12:31:11.921056Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1802670955657959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_metrics_for_partners_active_users_for_whom_partner_paid_count", "compiled": true, "compiled_code": "with int_accounts_partners_metrics_for_partners_active_users_for_whom_partner_paid as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_active_users_for_whom_partner_paid`\n)\nselect  partner_id,\n        date_trunc(date,month) date,\n        'monthly' as type,\n        count(distinct account_id) daughters_count\nfrom int_accounts_partners_metrics_for_partners_active_users_for_whom_partner_paid\nwhere segment_monthly = 'partner_paid'\nand date <= current_date()\ngroup by 1,2\n\nunion all\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u043e\u0447\u0435\u043a\nselect  partner_id,                                 -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        current_date(),                             -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u0430\u044f \u0434\u0430\u0442\u0430\n        'all' as type,                              -- \u0422\u0438\u043f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\n        count(distinct account_id) daughters_count  -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u0447\u0435\u043a\nfrom int_accounts_partners_metrics_for_partners_active_users_for_whom_partner_paid\nwhere segment_monthly = 'partner_paid'\ngroup by 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_active_users_for_whom_partner_paid_count`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.870227Z", "completed_at": "2025-05-21T12:31:11.878203Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.921545Z", "completed_at": "2025-05-21T12:31:11.921555Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.21958661079406738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_metrics_for_partners_active_periods", "compiled": true, "compiled_code": "with int_accounts_partners_metrics_for_partners_active_users_for_whom_partner_paid as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_active_users_for_whom_partner_paid`\n)\n,active_days as (\nselect distinct\n        partner_id,\n        segment_monthly,\n        account_id,\n        date,\n        max(date) over (partition by account_id,partner_id,segment_monthly) last_active_date\nfrom int_accounts_partners_metrics_for_partners_active_users_for_whom_partner_paid\n)\n,active_months as (\nselect distinct\n            partner_id,                     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n            segment_monthly,                -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u043c\u0435\u0441\u044f\u0447\u043d\u043e\n            account_id,                     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n            date_trunc(date,month) month,   -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\n            last_active_date                -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0434\u0430\u0442\u0430 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438\nfrom active_days\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u0435\u0440\u0438\u043e\u0434\u044b \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432\nselect *\nfrom active_months", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_active_periods`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.874695Z", "completed_at": "2025-05-21T12:31:11.919280Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:11.922704Z", "completed_at": "2025-05-21T12:31:11.922713Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2557203769683838, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_metrics_channels_sold", "compiled": true, "compiled_code": "\n\nwith last_value_tariff as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_by_subscription_id_tarif_period_quantity`\n),\nlast_value_tarif_by_subscription_id as (\n    select subscription_id,\n            subscription_type,\n            data_source,\n            partner_id,\n            paid_month, \n            tariff_new,\n            period_new,\n            quantity_new \n\n    from last_value_tariff\n    where tariff_new is not null\n    group by 1,2,3,4,5,6,7,8\n),\nunion_types as (\n select partner_id,\n              paid_month,           -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n              'monthly' as type,    -- \u0422\u0438\u043f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\n  sum(quantity_new) as paid_channels_quantity,\n   sum(case when subscription_type in ('waba','wapi') then quantity_new end) as paid_channels_waba_quantity,\n   sum(case when subscription_type='tgapi' then quantity_new end) as paid_channels_tgapi_quantity,\n   sum(case when subscription_type='whatsapp' then quantity_new end) as paid_channels_wa_quantity,\n    sum(case when subscription_type='telegram' then quantity_new end) as paid_channels_telegram_quantity,\n    sum(case when subscription_type='instagram' then quantity_new end) as paid_channels_instagram_quantity,\n    sum(case when subscription_type='avito' then quantity_new end) as paid_channels_avito_quantity,\n    sum(case when subscription_type= 'vk' then quantity_new end) as paid_channels_vk_quantity,\n    sum(case when subscription_type= 'viber' then quantity_new end) as paid_channels_viber_quantity\n\n  from last_value_tarif_by_subscription_id\n  where data_source = 'partner_payment'\n  group by 1,2\n\nunion all\nselect partner_id,              -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n              current_date(),\n              'all' as type,    -- \u0422\u0438\u043f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\n  sum(quantity_new) as paid_channels_quantity,  -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432\n   sum(case when subscription_type in ('waba','wapi') then quantity_new end) as paid_channels_waba_quantity,    -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 WABA\n   sum(case when subscription_type='tgapi' then quantity_new end) as paid_channels_tgapi_quantity,              -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 TGAPI\n   sum(case when subscription_type='whatsapp' then quantity_new end) as paid_channels_wa_quantity,              -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 WHATSAPP\n    sum(case when subscription_type='telegram' then quantity_new end) as paid_channels_telegram_quantity,       -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 TELEGRAM\n    sum(case when subscription_type='instagram' then quantity_new end) as paid_channels_instagram_quantity,     -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 INSTAGRAM\n    sum(case when subscription_type='avito' then quantity_new end) as paid_channels_avito_quantity,             -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 AVITO\n    sum(case when subscription_type= 'vk' then quantity_new end) as paid_channels_vk_quantity,                  -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 VK\n    sum(case when subscription_type= 'viber' then quantity_new end) as paid_channels_viber_quantity             -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 VIBER\n\n  from last_value_tarif_by_subscription_id\n  where data_source = 'partner_payment'\n  group by 1\n)   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u043c\u0438 \u043a\u0430\u043d\u0430\u043b\u043e\u0432\nselect *\nfrom union_types", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_channels_sold`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:11.961783Z", "completed_at": "2025-05-21T12:31:12.084853Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.087804Z", "completed_at": "2025-05-21T12:31:12.087815Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.25243234634399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_lost_revenue_due_to_churn", "compiled": true, "compiled_code": "with\n\n    difference_last_month as (\n        select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_by_id_with_previous_and_next_subscription`\n    ),\n\n    lost_revenue_last_month_grouped_by_subscripion as (\n        select\n            subscription_id,\n            period_new,\n            tariff_new,\n            quantity_new,\n            partner_discount_new,\n            subscription_updates.paid_at,\n            currency,\n            action\n        from\n            `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_updates__corect_date_and_filledna_tarif_period_quantity` subscription_updates\n        left join\n            `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billingpackages\n            on subscription_updates.subscription_id = billingpackages.guid\n        where action not in ('balanceTopup', 'setPromisedPayment')\n    ),\n\n\n    lost_revenue as (\n        select\n            difference_last_month.*,\n            (\n                case\n                    when lost_revenue_last_month_grouped_by_subscripion.period_new = 12\n                    then 0.8\n                    when lost_revenue_last_month_grouped_by_subscripion.period_new = 6\n                    then 0.9\n                    else 1\n                end\n            ) as period_discount,\n            coalesce(\n                lost_revenue_last_month_grouped_by_subscripion.period_new,\n                billingpackages.period\n            ) as period_new,\n            coalesce(\n                lost_revenue_last_month_grouped_by_subscripion.quantity_new,\n                billingpackages.quantity\n            ) as quantity_new,\n            coalesce(\n                lost_revenue_last_month_grouped_by_subscripion.tariff_new,\n                billingpackages.tariff\n            ) as tariff_new,\n            partner_discount_new,\n            wazzup_tariff_new.sum as tariff_price_new,\n            lost_revenue_last_month_grouped_by_subscripion.currency,\n            row_number() over (\n                partition by\n                    lost_revenue_last_month_grouped_by_subscripion.subscription_id,\n                    subscription_end\n                order by lost_revenue_last_month_grouped_by_subscripion.paid_at desc\n            ) rn\n        from difference_last_month\n        left join\n            lost_revenue_last_month_grouped_by_subscripion\n            on lost_revenue_last_month_grouped_by_subscripion.subscription_id\n            = difference_last_month.subscription_id\n            and cast(lost_revenue_last_month_grouped_by_subscripion.paid_at as date)\n            <= difference_last_month.subscription_end\n        left join\n            `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billingpackages\n            on billingpackages.guid = difference_last_month.subscription_id\n        left join\n            `dwh-wazzup`.`analytics_tech`.`wazzup_tariff` wazzup_tariff_new\n            on wazzup_tariff_new.currency\n            = lost_revenue_last_month_grouped_by_subscripion.currency\n            and wazzup_tariff_new.tariff = coalesce(\n                lost_revenue_last_month_grouped_by_subscripion.tariff_new,\n                billingpackages.tariff\n            )\n        where difference_between_days >= 21\n    ),\n    lost_revenue_sum as (\n        select\n            account_id,                 -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n            subscription_id,            -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n            subscription_start,         -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n            tariff_price_new,           -- \u0426\u0435\u043d\u0430 \u043d\u043e\u0432\u043e\u0433\u043e \u0442\u0430\u0440\u0438\u0444\u0430\n            period_discount,            -- \u0421\u043a\u0438\u0434\u043a\u0430 \u0437\u0430 \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 (10% \u0437\u0430 \u043f\u043e\u043b\u0433\u043e\u0434\u0430 \u0438 20% \u0437\u0430 \u0433\u043e\u0434)\n            period_new,                 -- \u041d\u043e\u0432\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n            quantity_new,               -- \u041d\u043e\u0432\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0432 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n            difference_between_days,    -- \u0412\u044b\u0431\u0438\u0440\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043f\u043b\u0430\u0442\u0438\u043b\u0438 \u043d\u0430\u043c \u0431\u043e\u043b\u0435\u0435 21\u0433\u043e \u0434\u043d\u044f\n            date_add(subscription_end, interval 1 month) as churn_date, -- \u0414\u0430\u0442\u0430 \u043e\u0442\u043a\u043e\u043b\u0430\n            (\n                case\n                    when partner_discount_new is null\n                    then 1\n                    else 1 - partner_discount_new\n                end\n            )* tariff_price_new*1*quantity_new as lost_revenue, -- \u041f\u043e\u0442\u0435\u0440\u044f\u043d\u043d\u0430\u044f \u043f\u0440\u0438\u0431\u044b\u043b\u044c\n            currency    -- \u0412\u0430\u043b\u044e\u0442\u0430\n        from lost_revenue\n        where rn = 1\n    )   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f \u043f\u043e\u0442\u0435\u0440\u044f\u043b\u0430 \u0434\u0435\u043d\u0435\u0433 \u0438\u0437-\u0437\u0430 \u043e\u0442\u043a\u043e\u043b\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\nselect\n    lost_revenue_sum.*,\n    date_trunc(churn_date, month) as churn_month,   -- \u041c\u0435\u0441\u044f\u0446 \u043e\u0442\u043a\u043e\u043b\u0430\n    (\n        case\n            when lost_revenue_sum.currency = 'RUR'\n            then coalesce(abs(lost_revenue), 0)\n            when rur is not null\n            then coalesce(abs(lost_revenue), 0) * rur\n            when lost_revenue_sum.currency = 'EUR' and rur is null\n            then coalesce(abs(lost_revenue), 0) * 85\n            when lost_revenue_sum.currency = 'USD' and rur is null\n            then coalesce(abs(lost_revenue), 0) * 75\n            when lost_revenue_sum.currency = 'KZT' and rur is null\n            then coalesce(abs(lost_revenue), 0) * 0.24\n        end\n    ) as lost_sum_in_rubles,    -- \u041f\u043e\u0442\u0435\u0440\u044f\u043d\u043d\u0430\u044f \u043f\u0440\u0438\u0431\u044b\u043b\u044c \u0432 \u0440\u0443\u0431\u043b\u044f\u0445 \u0441 \u0444\u0438\u043a\u0441. \u043a\u0443\u0440\u0441\u043e\u043c\n\nfrom lost_revenue_sum\nleft join\n    `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted`  exchange_rates_unpivoted\n    on exchange_rates_unpivoted._ibk = lost_revenue_sum.churn_date\n    and exchange_rates_unpivoted.currency = lost_revenue_sum.currency", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_lost_revenue_due_to_churn`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.088298Z", "completed_at": "2025-05-21T12:31:12.133193Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.144633Z", "completed_at": "2025-05-21T12:31:12.144644Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1433722972869873, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_returned_users_revenue", "compiled": true, "compiled_code": "with difference_last_month as (\n        select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_by_id_with_previous_and_next_subscription`\n    ),\n \n \n returned_revenue as (\n\n select date_trunc(paid_date,month) as paid_month,  -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n paid_date,                                         -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n difference_last_month.account_id,                  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n sum_in_rubles,                                     -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n difference_last_month.subscription_id from difference_last_month\n left join `dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_real_money` real_money \n on real_money.paid_date=difference_last_month.subscription_start\n and  real_money.subscription_id=difference_last_month.subscription_id\n where difference_subscription_start_and_previous_subscription_end>20 and real_money.action='renewal')\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0435\u043d\u0435\u0433 \u043f\u0440\u0438\u043d\u0435\u0441\u043b\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0435\u0440\u043d\u0443\u043b\u0438\u0441\u044c\n select * from returned_revenue", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_returned_users_revenue`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.130777Z", "completed_at": "2025-05-21T12:31:12.144099Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.147028Z", "completed_at": "2025-05-21T12:31:12.147037Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14060401916503906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_last_end_date_with_months_weeks_without_trials", "compiled": true, "compiled_code": "select subscriptions_defining_clients_types.*,  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u043c\u0435\u0441\u044f\u0446 \u0438 \u043d\u0435\u0434\u0435\u043b\u044e \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 (\u0431\u0435\u0437 \u0442\u0440\u0438\u0430\u043b\u043e\u0432)\n        month,      -- \u041c\u0435\u0441\u044f\u0446 \u043c\u0435\u0436\u0434\u0443 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u0435\u0451 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0435\u043c\n        week,       -- \u041d\u0435\u0434\u0435\u043b\u044f \u043c\u0435\u0436\u0434\u0443 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u0435\u0451 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0435\u043c\n            case\n                when\n                    date_diff(subscription_start, last_subscription_end, day) > 20\n                    and date_trunc(last_subscription_end, month) != month\n                    and date_trunc(subscription_start, month) = month\n                then 'return_payment_monthly'\n                else 'other_payments'\n            end as payment_type_monthly,    -- \u0422\u0438\u043f \u043e\u043f\u043b\u0430\u0442\u044b \u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439\n\n            case\n                when\n                    date_diff(subscription_start, last_subscription_end, day) > 20\n                    and date_trunc(last_subscription_end, week(monday)) != week\n                    and date_trunc(subscription_start, week(monday)) = week\n                then 'return_payment_weekly'\n                else 'other_payments'\n            end as payment_type_weekly      -- \u0422\u0438\u043f \u043e\u043f\u043b\u0430\u0442\u044b \u043d\u0435\u0434\u0435\u043b\u044c\u043d\u044b\u0439\n\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_defining_clients_types_without_trials` subscriptions_defining_clients_types\ninner join `dwh-wazzup`.`dbt_nbespalov`.`stg_months` months\n            on months.month >= date_trunc(subscription_start, month)\n            and months.month <= date_trunc(subscription_end, month)\ninner join `dwh-wazzup`.`dbt_nbespalov`.`stg_weeks` weeks\n            on weeks.week >= date_trunc(subscription_start, week(monday))\n            and weeks.week <= date_trunc(subscription_end, week(monday))\nwhere (date_trunc(week,month) = months.month or week<=months.month)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_with_months_weeks_without_trials`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.133777Z", "completed_at": "2025-05-21T12:31:12.145383Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.186670Z", "completed_at": "2025-05-21T12:31:12.186681Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.17915582656860352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_profile_info", "compiled": true, "compiled_code": "\nwith profile_info as (\n    select account_Id,                  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        accounts.register_date,         -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        users.phone,                    -- \u0442\u0435\u043b\u0435\u0444\u043e\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        users.name,                     -- \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        accounts.regEmail as email,     -- \u043f\u043e\u0447\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u0430\u044f \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        accounts.currency,              -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442\n        accounts.account_language,      -- \u044f\u0437\u044b\u043a \u041b\u041a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442\n        city,                           -- \u0433\u043e\u0440\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043a\u0430\u043a \u043c\u044b \u0435\u0433\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043b\u0438\u043b\u0438\n        region,                         -- \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043a\u0430\u043a \u043c\u044b \u0435\u0433\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\n        accounts.country,               -- \u0441\u0442\u0440\u0430\u043d\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043a\u0430\u043a \u043c\u044b \u0435\u0451 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043b\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 alpha-2\n        discount as partner_discount,   -- \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u0430\u044f \u0441\u043a\u0438\u0434\u043a\u0430 (\u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e\u0442 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0443) \u0438\u043b\u0438 null \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        region_type,                    -- \u043e\u0431\u0449\u0435\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u043e\u043d\u043e\u0432 - CIS - \u0421\u041d\u0413, non-CIS - \u0432\u0441\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u0432\u043d\u0435 \u0421\u041d\u0413\n        demo_account,                   -- account_id \u0434\u0435\u043c\u043e-\u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 (\u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e\u0442 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0443 (type partner,tech-partner,tech-partner-postpay)) \u0438\u043b\u0438 null \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        accounts.type,                  -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        utm_source,\n        utm_campaign,\n        utm_medium,\n        utm_term,\n        utm_content, \n        is_activated_by_email\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts\n    left join `dwh-wazzup`.`dbt_nbespalov`.`stg_users` users on users.email=accounts.regEmail\n\n), paying_segments as (\n    select distinct account_id,\n            row_number() over(partition by account_id order by start_date desc) rn ,\n            partner_id,\n            refparent_id,\n            segment as segment_type\n     from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_who_paid_segments_with_partner_type_and_account_type`), \n\ncountry as (select * from `dwh-wazzup`.`analytics_tech`.`country`),\n\nattribution_data as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_defining_clients_types` \n),\n\nactive_integrations as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_integrations_active_groupped_by_accounts_type`\n\n),\n\nlast_integrations as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_integrations_last_created_integration_by_account_id`\n\n),\n\naccount_leaving_situation as (\n    select          account_id, \n                    clients_type_for_communications,\n                    data_otvala,\n                    row_number() over (partition by account_Id order by subscription_start desc) arn\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_defining_clients_types`\n    ),\n\npaid_subscription__type_with_type_and_tarif as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_paid_subscription_with_type_and_tariff`\n),\n\n    \nprofile_info_with_accounts_type as (\n    select profile_info.*, \n            accounts_demo.register_date as partner_register_date,   -- \u0434\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 (\u0435\u0441\u043b\u0438 \u0443 account_id type: partner,tech-partner,tech-partner-postpay)\n            russianName\tas russian_country_name,                    -- \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u0438\u0437 country \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\n            country.region as region_international,                 -- \u0440\u0435\u0433\u0438\u043e\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u0421\u041d\u0413, \u041c\u0415\u041d\u0410, \u041b\u0410\u0422\u0410\u041d ) \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u043d\u0430\u0448\u0435\u043c\u0443 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u043c\u0443 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044e\n            paying_segments.partner_id,                             -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n            paying_segments.refparent_id,                           -- ID \u0440\u0435\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n            active_integrations.active_integration_name,            -- \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f, \u0430\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0432 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432 \u041b\u041a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n            coalesce((\n                case when active_integrations.active_integration_name='does_not_have_an_active_integration' then null else \n                active_integrations.active_integration_name end), last_integrations.last_integration_name) as last_integration_name,    -- \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f, \u0430\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0432 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432 \u041b\u041a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043b\u0438\u0431\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f, \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439\n            case \n                 when profile_info.type = 'partner-demo' then '\u0434\u0435\u043c\u043e-\u043f\u0430\u0440\u0442\u043d\u0451\u0440'\n                 when profile_info.type = 'partner' then '\u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0451\u0440'\n                 when profile_info.type = 'employee' then '\u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a'\n                 when profile_info.type = 'tech-partner' then '\u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u0442\u0435\u0445\u043f\u0430\u0440\u0442\u043d\u0435\u0440'\n                 when profile_info.type = 'child-postpay' then '\u0434\u043e\u0447\u043a\u0430 \u043f\u043e\u0441\u0442\u043e\u043f\u043b\u0430\u0442\u043d\u0438\u043a\u043e\u0432'\n                 when profile_info.type = 'tech-partner-postpay' then '\u0442\u0435\u0445\u043f\u0430\u0440\u0442\u043d\u0435\u0440-\u043f\u043e\u0441\u0442\u043e\u043f\u043b\u0430\u0442\u043d\u0438\u043a'\n                 when segment_type ='standart_without_partner' then '\u043e\u0431\u044b\u0447\u043d\u044b\u0439 (\u044e\u0437\u0435\u0440 \u0431\u0435\u0437 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430)'\n                 when segment_type = 'tech_partner_child__tech_partner_paid' then '\u0414\u043e\u0447\u043a\u0430 \u0442\u0435\u0445 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043b\u0430\u0442\u0438\u0442 \u0447\u0435\u0440\u0435\u0437 \u0442\u0435\u0445 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430'\n                 when segment_type = 'tech_partner_child__child_paid' then '\u0414\u043e\u0447\u043a\u0430 \u0442\u0435\u0445 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043b\u0430\u0442\u0438\u0442 \u0441\u0430\u043c\u0430'\n                 when segment_type = 'partner' then '\u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0451\u0440'\n                 when segment_type = 'employee' then '\u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a'\n                 when segment_type = 'partner-demo' then '\u0434\u0435\u043c\u043e-\u043f\u0430\u0440\u0442\u043d\u0451\u0440'\n                 when segment_type = 'of_partner_child__of_partner_paid' then '\u0414\u043e\u0447\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043b\u0430\u0442\u0438\u0442 \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430'\n                 when segment_type = 'of_partner_child_child_paid' then '\u0421\u0430\u043c\u043e\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u0430\u044f \u0434\u043e\u0447\u043a\u0430 \u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043b\u0430\u0442\u0438\u0442 \u0441\u0430\u043c\u0430'\n                 when segment_type = 'tech-partner' then '\u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u0442\u0435\u0445\u043f\u0430\u0440\u0442\u043d\u0435\u0440'\n                 when segment_type = 'tech-partner-postpay' then '\u0442\u0435\u0445\u043f\u0430\u0440\u0442\u043d\u0435\u0440-\u043f\u043e\u0441\u0442\u043e\u043f\u043b\u0430\u0442\u043d\u0438\u043a'\n            else 'unknown' end as account_segment_type,         -- \u0441\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n            coalesce(clients_type_for_communications,'never_bought_a_subscription') as account_leaving_situation_type,  -- \u0422\u0438\u043f \u043a\u043b\u0438\u0435\u043d\u0442\u0430: still_active, bought_new_subscription_within_leaving_period, came_back_after_leaving_period, did_not_come_back, may_become_active\n            accounts_partner_type.type as partner_account_type  -- type \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u0435\u0441\u043b\u0438 \u043e\u043d \u0435\u0441\u0442\u044c (null \u0438\u043d\u0430\u0447\u0435)\n            from profile_info \n            left join `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts_demo\n                    on accounts_demo.account_id=profile_info.demo_account\n            left join paying_segments \n                    on profile_info.account_id = paying_segments.account_id\n                    and rn = 1\n            left join country \n                    on country.iso2=profile_info.country\n            left join account_leaving_situation\n                    on profile_info.account_id = account_leaving_situation.account_Id\n                    and arn = 1\n            left join active_integrations\n                    on active_integrations.account_id=profile_info.account_id\n            left join last_integrations\n                    on last_integrations.account_id=profile_info.account_id   \n            left join `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts_partner_type \n            on accounts_partner_type.account_id=paying_segments.partner_id                   \n    ),\ntest_accounts as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_test_accounts`\n),\n\nfirst_subscription_date_with_1_more_day_duration as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_first_subscription_date_with_more_than_1_day_duration`\n),\n\nprofile_info_with_country as (\nselect profile_info_with_accounts_type.*,\n        paid_subscription__type_with_type_and_tarif.type_and_tariff as paid_subscription_type_and_tarif,\n        (case \n        when currency is not null then currency\n        when currency is null and profile_info_with_accounts_type.country='RU' then 'RUR'\n        when currency is null and profile_info_with_accounts_type.country='kz' then 'KZT'\n        when currency is null and profile_info_with_accounts_type.country in ('au', 'be', 'bg', 'hu', 'de', 'gr', 'dk', 'ie', 'es', 'it',\n        'cy', 'lv', 'lt', 'lu', 'mt', 'nl', 'pl', 'pt', 'sk', 'si',\n        'fi', 'fr', 'hr', 'cz', 'se', 'ee', 'no', 'gb', 'is', 'li',\n        'ch', 'ad', 'mc', 'sm', 'gi') then 'EUR'\n        else 'USD'\n        end\n        ) as account_currency_by_country, --https://wazzup24.atlassian.net/wiki/spaces/WAZ/pages/2563250\n        registration_source_agg_current, --\u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 (\u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430)\n        registration_source_current,  --\u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 (\u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430)\n        registration_source_agg, --\u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 (\u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430)\n        registration_source,    -- \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 (\u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430)\n        (case when profile_info_with_accounts_type.type = 'employee' or test_accounts.account_Id is not null then True else False end) as is_employee,\n        first_subscription_date_with_1_more_day_duration.min_paid_date as first_paid_subscription_date_with_1_more_day_duration\n\nfrom profile_info_with_accounts_type\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_attribution_data` attribution_data on attribution_data.account_id=profile_info_with_accounts_type.account_id\nleft join test_accounts on profile_info_with_accounts_type.account_Id = test_accounts.account_Id\nleft join first_subscription_date_with_1_more_day_duration on first_subscription_date_with_1_more_day_duration.account_id=profile_info_with_accounts_type.account_id\nleft join paid_subscription__type_with_type_and_tarif on paid_subscription__type_with_type_and_tarif.account_id=profile_info_with_accounts_type.account_id\n\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u043e\u0431\u0440\u0430\u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0435\nselect *except(utm_campaign),\n        case when utm_campaign like '%%D0%%' then REGEXP_EXTRACT(utm_campaign, r'(\\d+)$') else utm_campaign end as utm_campaign\nfrom profile_info_with_country", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.138962Z", "completed_at": "2025-05-21T12:31:12.146270Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.187699Z", "completed_at": "2025-05-21T12:31:12.187708Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.21950197219848633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_last_end_date_with_months", "compiled": true, "compiled_code": "select subscriptions_defining_clients_types.*,  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0438 \u043c\u0435\u0441\u044f\u0446 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438\n        month,  -- \u041c\u0435\u0441\u044f\u0446 \u043c\u0435\u0436\u0434\u0443 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u0435\u0451 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0435\u043c\n            case\n                when\n                    date_diff(subscription_start, last_subscription_end, day) > 20\n                    and date_trunc(last_subscription_end, month) != month\n                    and date_trunc(subscription_start, month) = month\n                then 'return_payment_monthly'\n                else 'other_payments'\n            end as payment_type_monthly\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_defining_clients_types` subscriptions_defining_clients_types\ninner join `dwh-wazzup`.`dbt_nbespalov`.`stg_months` months\n            on months.month >= date_trunc(subscription_start, month)\n            and months.month <= date_trunc(subscription_end, month)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_with_months`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.141843Z", "completed_at": "2025-05-21T12:31:12.147500Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.225893Z", "completed_at": "2025-05-21T12:31:12.225906Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.25499725341796875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_left_and_returned_date_with_payments_and_promised_payments_with_account_type_and_partner_type", "compiled": true, "compiled_code": "with subscription_by_days as (\nSELECT *\n FROM `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_defining_clients_types_with_payments_and_promised_payment`),\n\npartner_type_and_account_type as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated`\n),\nsubscription_with_account_and_partner_type as (\n\nselect subscription_by_days.*,\n account_type,                                  -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \n  partner_type,                                 -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  partner_type_and_account_type.refparent_id,   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0440\u0435\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  start_date,                                   -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\naffiliates.reflink_code                         -- \u041a\u043e\u0434 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u0430\n from subscription_by_days \n left join  partner_type_and_account_type \n    on subscription_by_days.account_id=partner_type_and_account_type.account_id\n    and subscription_by_days.subscription_start>=partner_type_and_account_type.start_date\n    and subscription_by_days.subscription_start<=partner_type_and_account_type.end_date\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_affiliates` affiliates on affiliates.child_id=partner_type_and_account_type.account_id ),\n\nsubscription_duplicates as (\n\nselect *, \n(case when account_type='standart' and partner_type='partner' and reflink_code='manual_registration' then 'of-partner-client_manual'\nwhen account_type='standart' and partner_type='partner' and reflink_code is distinct from 'manual_registration' then 'of-partner-client_ref_link'\nwhen account_type='standart' and partner_type='tech-partner' then 'tech-partner-client'\nwhen account_type='standart' and partner_type='tech-partner-postpay' then 'tech-partner-client'\nwhen account_type='standart' and refparent_id is not null and partner_type is null then 'referal'\nwhen account_type='standart' and partner_type is null then 'standart'\nwhen account_type='partner' then 'of-partner'\nwhen account_type='tech-partner' then 'tech-partner'\nwhen account_type='tech-partner-postpay' then 'tech-partner'\nwhen account_type='standart' and partner_type='standart' then 'standart'\nend\n) as account_type_partner_type,       -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0441 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043e\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\nrow_number() over (partition by account_id, subscription_start order by start_date desc) rn from -- \u041f\u0430\u0440\u0442\u0438\u0430\u0446\u0438\u044f \u043f\u043e \u043d\u043e\u043c\u0435\u0440\u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0438 \u0434\u0430\u0442\u0435 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nsubscription_with_account_and_partner_type)\n\nselect * from subscription_duplicates -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0443\u0448\u0435\u0434\u0448\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441 \u043f\u0440\u0438\u0447\u0438\u043d\u043e\u0439 \u0438\u0445 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430\nwhere rn=1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_left_and_returned_date_with_payments_and_promised_payments_with_account_type_and_partner_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.266796Z", "completed_at": "2025-05-21T12:31:12.349657Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.352676Z", "completed_at": "2025-05-21T12:31:12.352686Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2498002052307129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_last_end_date_with_days_who_paid_without_trials_and_promised_payments", "compiled": true, "compiled_code": "select subscriptions_defining_clients_types.*,  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 (\u0431\u0435\u0437 \u0442\u0440\u0438\u0430\u043b\u043e\u0432 \u0438 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439)\n        date        -- \u0414\u0430\u0442\u0430 \u043c\u0435\u0436\u0434\u0443 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u0435\u0451 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0435\u043c\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_defining_clients_types_who_paid_without_trials_and_promised_payments` subscriptions_defining_clients_types\ninner join `dwh-wazzup`.`dbt_nbespalov`.`stg_days` days\n            on days.date >= subscription_start\n            and days.date <= subscription_end", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_with_days_who_paid_without_trials_and_promised_payments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.354254Z", "completed_at": "2025-05-21T12:31:12.400557Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.405696Z", "completed_at": "2025-05-21T12:31:12.405706Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0999748706817627, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_last_end_date_with_months_who_paid_without_trials_and_promised_payments", "compiled": true, "compiled_code": "select subscriptions_defining_clients_types.*,  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0438 \u043c\u0435\u0441\u044f\u0446 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 (\u0431\u0435\u0437 \u0442\u0440\u0438\u0430\u043b\u043e\u0432 \u0438 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439)\n        month,  -- \u041c\u0435\u0441\u044f\u0446 \u043c\u0435\u0436\u0434\u0443 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u0435\u0451 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0435\u043c\n            case\n                when\n                    date_diff(subscription_start, last_subscription_end, day) > 20\n                   -- and date_trunc(last_subscription_end, month) != month\n                    and date_trunc(subscription_start, month) = month\n                then 'return_payment_monthly'\n                else 'other_payments'\n            end as payment_type_monthly\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_defining_clients_types_who_paid_without_trials_and_promised_payments` subscriptions_defining_clients_types\ninner join `dwh-wazzup`.`dbt_nbespalov`.`stg_months` months\n            on months.month >= date_trunc(subscription_start, month)\n            and months.month <= date_trunc(subscription_end, month)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_with_months_who_paid_without_trials_and_promised_payments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.396317Z", "completed_at": "2025-05-21T12:31:12.406258Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.447538Z", "completed_at": "2025-05-21T12:31:12.447549Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.13827967643737793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_last_end_date_with_weeks_who_paid_without_trials_and_promised_payments", "compiled": true, "compiled_code": "select subscriptions_defining_clients_types.*,  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0438 \u043d\u0435\u0434\u0435\u043b\u044e \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 (\u0431\u0435\u0437 \u0442\u0440\u0438\u0430\u043b\u043e\u0432 \u0438 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439)\n        week,       -- \u041d\u0435\u0434\u0435\u043b\u044f \u043c\u0435\u0436\u0434\u0443 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u0435\u0451 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0435\u043c\n            case\n                when\n                    date_diff(subscription_start, last_subscription_end, day) > 20\n                    and date_trunc(last_subscription_end, week(monday)) != week\n                    and date_trunc(subscription_start, week(monday)) = week\n                then 'return_payment_weekly'\n                else 'other_payments'\n            end as payment_type_weekly      -- \u0422\u0438\u043f \u043e\u043f\u043b\u0430\u0442\u044b \u043d\u0435\u0434\u0435\u043b\u044c\u043d\u044b\u0439\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_defining_clients_types_who_paid_without_trials_and_promised_payments` subscriptions_defining_clients_types\ninner join `dwh-wazzup`.`dbt_nbespalov`.`stg_weeks` weeks\n            on weeks.week >= date_trunc(subscription_start, week(monday))\n            and weeks.week <= date_trunc(subscription_end, week(monday))", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_with_weeks_who_paid_without_trials_and_promised_payments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.398260Z", "completed_at": "2025-05-21T12:31:12.406629Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.448312Z", "completed_at": "2025-05-21T12:31:12.448322Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.21401000022888184, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_left_and_returned_date_with_account_type_and_partner_type", "compiled": true, "compiled_code": "with subscription_by_days as (\nSELECT *\n FROM `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_defining_clients_types_who_paid_without_trials_and_promised_payments`),\n\npartner_type_and_account_type as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated`\n),\nsubscription_with_account_and_partner_type as (\n\nselect subscription_by_days.*,\n account_type,                                  -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n  partner_type,                                 -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  partner_type_and_account_type.refparent_id,   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0440\u0435\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  start_date,                                   -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\naffiliates.reflink_code                         -- \u041a\u043e\u0434 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u0430\n from subscription_by_days \n left join  partner_type_and_account_type \n    on subscription_by_days.account_id=partner_type_and_account_type.account_id\n    and subscription_by_days.subscription_start>=partner_type_and_account_type.start_date\n    and subscription_by_days.subscription_start<=partner_type_and_account_type.end_date\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_affiliates` affiliates on affiliates.child_id=partner_type_and_account_type.account_id ),\n\nsubscription_duplicates as (\n\nselect *, \n(case when account_type='standart' and partner_type='partner' and reflink_code='manual_registration' then 'of-partner-client_manual'\nwhen account_type='standart' and partner_type='partner' and reflink_code is distinct from 'manual_registration' then 'of-partner-client_ref_link'\nwhen account_type='standart' and partner_type='tech-partner' then 'tech-partner-client'\nwhen account_type='standart' and partner_type='tech-partner-postpay' then 'tech-partner-client'\nwhen account_type='standart' and refparent_id is not null and partner_type is null then 'referal'\nwhen account_type='standart' and partner_type is null then 'standart'\nwhen account_type='partner' then 'of-partner'\nwhen account_type='tech-partner' then 'tech-partner'\nwhen account_type='tech-partner-postpay' then 'tech-partner'\nwhen account_type='standart' and partner_type='standart' then 'standart'\nend\n) as account_type_partner_type, -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0441 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043e\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\nrow_number() over (partition by account_id, subscription_start order by start_date desc) rn from -- \u041f\u0430\u0440\u0442\u0438\u0430\u0446\u0438\u044f \u043f\u043e \u043d\u043e\u043c\u0435\u0440\u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0438 \u0434\u0430\u0442\u0435 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nsubscription_with_account_and_partner_type)\n\nselect * from subscription_duplicates\nwhere rn=1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_left_and_returned_date_with_account_type_and_partner_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.400928Z", "completed_at": "2025-05-21T12:31:12.407446Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.448836Z", "completed_at": "2025-05-21T12:31:12.448846Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.21448588371276855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_who_paid_in_dynamics_defining_clients_with_segments", "compiled": true, "compiled_code": "with segments as (\n    select  subscription_start as segment_start,\n            subscription_end_with_last_payment_date as segment_end,\n            account_id, -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n            segment \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_in_dynamics_combined_intervals_all_segments`\n\n), \n\nclient_types as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_defining_clients_types`\n\n),\n\ndefining_clients_with_segments as (\n    select coalesce(client_types.account_id, segments.account_id) as account_id,\n    coalesce((case when subscription_start>=segment_start then subscription_start end), segment_start\n    ) as subscription_start,                    -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    subscription_start as active_period_start,  -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\n    coalesce((case when subscription_end<=segment_end then subscription_end end),\n    segment_end)  as subscription_end,          -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    subscription_end as active_period_end,      -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\n    segment_start,  -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\n    segment_end,    -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\n    segment,        -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442: of_partner_child__of_partner_paid, of_partner_child_child_paid, unknown, standart_without_partner, tech_partner_child__child_paid, tech_partner_child__tech_partner_paid, partner, tech-partner, employee, tech-partner-postpay\n    has_paid        -- \u041a\u043b\u0438\u0435\u043d\u0442 \u043d\u0430\u043c \u043f\u043b\u0430\u0442\u0438\u043b?\n     from client_types\n    full outer join  segments\n    on segments.account_id=client_types.account_id\n    and segments.segment_start<=client_types.subscription_end\n    where segment is not null and subscription_start is not null),\n\n\ndefining_clients_with_segments_to_deduplicate as (\n    select *, row_number() over (partition by account_id, subscription_start order by segment_start desc) as rn \n    from defining_clients_with_segments\n),\n\nsegments_final as (\n    select * from defining_clients_with_segments_to_deduplicate\n    where rn=1  -- \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u0441\u0430\u043c\u044b\u0445 \u043f\u043e\u0437\u0434\u043d\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043f\u043e segment_start\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0435\u0433\u043c\u0435\u043d\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u0434\u0430\u0442\u044b \u044d\u0442\u043e\u0433\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043f\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430\u043c\nselect *, (case when subscription_end>=current_date then current_date\n    else subscription_end   -- \u041b\u0438\u0431\u043e \u0434\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u043b\u0438\u0431\u043e \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0434\u0430\u0442\u0430 (\u0435\u0441\u043b\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0437\u0436\u0435 \u0447\u0435\u043c \u0441\u0435\u0433\u043e\u0434\u043d\u044f)\n    end) as subscription_end_fixed from segments_final", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_in_dynamics_defining_clients_with_segments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.402919Z", "completed_at": "2025-05-21T12:31:12.408307Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.449832Z", "completed_at": "2025-05-21T12:31:12.449843Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2544212341308594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_metrics_for_partners_conversation_from_first_to_third_active_period", "compiled": true, "compiled_code": "with active_months as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_active_periods`\n), lead_information as (\n        select *,\n        lead(month) over (partition by partner_id,account_id,segment_monthly order by month ) next_active_month_with_active_subscription_and_current_partner,\n        lead(month,2) over (partition by account_id order by month ) next_active_month,\n        lead(partner_id,2) over (partition by account_id order by month ) next_active_partner,\n        lead(segment_monthly,2) over (partition by account_id order by month ) next_active_segment,\n        first_value(month) over (partition by account_id order by month) first_paid_month,\n        from active_months\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043f\u043e \u0431\u0435\u0441\u0435\u0434\u0430\u043c \u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u043e \u0442\u0440\u0435\u0442\u0438\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438\nSelect  \n        partner_id,                             -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        date_add(month,interval 2 month) month, -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\n        'monthly' as type,                      -- \u0422\u0438\u043f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\n        count(distinct case when partner_id = next_active_partner\n                                  and segment_monthly = next_active_segment\n                                and date_diff(next_active_month,first_paid_month,month) =2 \n                                then account_id end)/ count(distinct account_id) as C2  -- \u041c\u0435\u0442\u0440\u0438\u043a\u0430 C2 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u043e\u043b\u044e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445: \u041f\u0430\u0440\u0442\u043d\u0435\u0440 \u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442 \u043e\u0441\u0442\u0430\u043b\u0438\u0441\u044c \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u043c\u0435\u0441\u044f\u0446\u0435\u0432. \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043f\u0435\u0440\u0432\u043e\u0439 \u043e\u043f\u043b\u0430\u0442\u043e\u0439 \u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u043c\u0435\u0441\u044f\u0446\u0435\u043c \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u043e\u0432\u043d\u043e 2 \u043c\u0435\u0441\u044f\u0446\u0430.\nfrom lead_information\nwhere month = first_paid_month\n        and segment_monthly = 'partner_paid'\ngroup by partner_id,2\nunion all\n Select  \n        partner_id,                             -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        current_date(),                         -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\n        'all' as type,                          -- \u0422\u0438\u043f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\n        count(distinct case when partner_id = next_active_partner\n                                  and segment_monthly = next_active_segment\n                                and date_diff(next_active_month,first_paid_month,month) =2 \n                                then account_id end)/ count(distinct account_id) as C2  -- \u041c\u0435\u0442\u0440\u0438\u043a\u0430 C2 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u043e\u043b\u044e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445: \u041f\u0430\u0440\u0442\u043d\u0435\u0440 \u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442 \u043e\u0441\u0442\u0430\u043b\u0438\u0441\u044c \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u043c\u0435\u0441\u044f\u0446\u0435\u0432. \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043f\u0435\u0440\u0432\u043e\u0439 \u043e\u043f\u043b\u0430\u0442\u043e\u0439 \u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u043c\u0435\u0441\u044f\u0446\u0435\u043c \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u043e\u0432\u043d\u043e 2 \u043c\u0435\u0441\u044f\u0446\u0430.\nfrom lead_information\nwhere month = first_paid_month\n        and segment_monthly = 'partner_paid'\ngroup by partner_id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_conversation_from_first_to_third_active_period`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.567539Z", "completed_at": "2025-05-21T12:31:12.612124Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.617081Z", "completed_at": "2025-05-21T12:31:12.617096Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.24975800514221191, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_metrics_for_partners_left_users_for_whom_partner_paid", "compiled": true, "compiled_code": "with active_months as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_active_periods`\n), defining_next_active_month as (\nselect *,\nlead(month) over (partition by partner_id,account_id,segment_monthly order by month ) next_active_month_with_active_subscription_and_current_partner\nfrom active_months\n)\n,union_metrics as (\nselect partner_id,                              -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        current_date() as month,                -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\n        account_id as left_daughters_account,   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0443\u0448\u0435\u0434\u0448\u0435\u0439 \u0434\u043e\u0447\u043a\u0438\n        'all' as type                           -- \u0422\u0438\u043f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\nfrom defining_next_active_month\nwhere next_active_month_with_active_subscription_and_current_partner is null\n        and last_active_date < current_date()\n        and segment_monthly = 'partner_paid'\n\nunion all\n\nselect partner_id,                              -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        month as month,                         -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\n        account_id as left_daughters_account ,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0443\u0448\u0435\u0434\u0448\u0435\u0439 \u0434\u043e\u0447\u043a\u0438\n        'monthly' as type                       -- \u0422\u0438\u043f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\nfrom defining_next_active_month\nwhere (next_active_month_with_active_subscription_and_current_partner is null or date_diff(next_active_month_with_active_subscription_and_current_partner,month,month) > 1)\n        and last_active_date < current_date()\n        and segment_monthly = 'partner_paid'\n        and month = date_trunc(current_date(),month)\n\nunion all\n\nselect partner_id,                              -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        month as month,                         -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\n        account_id as left_daughters_account ,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0443\u0448\u0435\u0434\u0448\u0435\u0439 \u0434\u043e\u0447\u043a\u0438\n        'monthly' as type                       -- \u0422\u0438\u043f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\nfrom defining_next_active_month\nwhere (next_active_month_with_active_subscription_and_current_partner is null or date_diff(next_active_month_with_active_subscription_and_current_partner,month,month) > 1)\n        and segment_monthly = 'partner_paid'\n        and month < date_trunc(current_date(),month)\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0443\u0448\u0435\u0434\u0448\u0438\u0445 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u043e\u0447\u0435\u043a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432\nselect *\nfrom union_metrics", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_left_users_for_whom_partner_paid`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.614929Z", "completed_at": "2025-05-21T12:31:12.660966Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.671829Z", "completed_at": "2025-05-21T12:31:12.671840Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10552692413330078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_metrics_for_partners_left_users_for_whom_partner_paid_count", "compiled": true, "compiled_code": "with active_months as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_active_periods`\n), defining_next_active_month as (\nselect *,\nlead(month) over (partition by partner_id,account_id,segment_monthly order by month ) next_active_month_with_active_subscription_and_current_partner\nfrom active_months\n)\n,union_metrics as (\nselect partner_id,                                              -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        current_date() as month,                                -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\n        count(distinct account_id) as left_daughters_count,     -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0448\u0435\u0434\u0448\u0438\u0445 \u0434\u043e\u0447\u0435\u043a\n        'all' as type                                           -- \u0422\u0438\u043f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\nfrom defining_next_active_month\nwhere next_active_month_with_active_subscription_and_current_partner is null\n        and last_active_date < current_date()\n        and segment_monthly = 'partner_paid'\ngroup by 1\n\nunion all\n\nselect partner_id,                                              -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        month as month,                                         -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\n        count(distinct account_id) as left_daughters_count ,    -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0448\u0435\u0434\u0448\u0438\u0445 \u0434\u043e\u0447\u0435\u043a\n        'monthly' as type                                       -- \u0422\u0438\u043f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\nfrom defining_next_active_month\nwhere (next_active_month_with_active_subscription_and_current_partner is null or date_diff(next_active_month_with_active_subscription_and_current_partner,month,month) > 1)\n        and last_active_date < current_date()\n        and segment_monthly = 'partner_paid'\n        and month = date_trunc(current_date(),month)\ngroup by 1,2\n\nunion all\n\nselect partner_id,                                              -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        month as month,                                         -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\n        count(distinct account_id) as left_daughters_count ,    -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0448\u0435\u0434\u0448\u0438\u0445 \u0434\u043e\u0447\u0435\u043a\n        'monthly' as type                                       -- \u0422\u0438\u043f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\nfrom defining_next_active_month\nwhere (next_active_month_with_active_subscription_and_current_partner is null or date_diff(next_active_month_with_active_subscription_and_current_partner,month,month) > 1)\n        and segment_monthly = 'partner_paid'\n        and month < date_trunc(current_date(),month)\ngroup by 1,2\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0448\u0435\u0434\u0448\u0438\u0445 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u043e\u0447\u0435\u043a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432\nselect *\nfrom union_metrics", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_left_users_for_whom_partner_paid_count`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.658290Z", "completed_at": "2025-05-21T12:31:12.672396Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.714258Z", "completed_at": "2025-05-21T12:31:12.714269Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.1428685188293457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_net_churn_revenue", "compiled": true, "compiled_code": "\n\nwith in_revenue_aggregated as (\n    select account_id,  \t    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    revenue_type,               -- \u0422\u0438\u043f \u0434\u043e\u0445\u043e\u0434\u0430\n    paid_month,                 -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n    sum(sum_in_rubles)          -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    from \n    `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_real_money_paid_old_and_new_revenue_type`\n    group by 1,2,3\n),\n\nlost_revenue_due_to_downsell as ( -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u043e\u043d\u0436\u0438\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u0445\u043e\u0434\u0430 \u0438\u0437-\u0437\u0430 \u043f\u043e\u043d\u0438\u0436\u0435\u043d\u0438\u044f \u0442\u0430\u0440\u0438\u0444\u0430\n    select account_id,                          -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    'downsell_loss' as revenue_type,            -- \u0422\u0438\u043f \u0434\u043e\u0445\u043e\u0434\u0430  - \u043f\u043e\u043d\u0438\u0436\u0435\u043d\u0438\u0435 \u0442\u0430\u0440\u0444\u0438\u0430\n    paid_month,                                 -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n    -sum(lost_sum_in_rubles) as sum_in_rubles   -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_lost_revenue_due_to_quantity_and_tariff_change`\n    group by 1,2,3\n),\n\nlost_revenue_due_to_churn as (  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u043e\u043d\u0438\u0436\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u0445\u043e\u0434\u0430 \u0438\u0437-\u0437\u0430 \u0443\u0445\u043e\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n    select account_id,                          -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    'churn_loss' as revenue_type,               -- \u0422\u0438\u043f \u0434\u043e\u0445\u043e\u0434\u0430 - \u0443\u0445\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    churn_month as paid_month,                  -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n    -sum(lost_sum_in_rubles) from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_lost_revenue_due_to_churn`  -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    group by 1 ,2, 3\n),\n\nreturned_users_revenue as (     -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u043c\u0438\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438\n    select account_id,                          -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    'returned_revenue' as revenue_type,         -- \u0422\u0438\u043f \u0434\u043e\u0445\u043e\u0434\u0430 - \u043a\u043b\u0438\u0435\u043d\u0442 \u0432\u0435\u0440\u043d\u0443\u043b\u0441\u044f\n    paid_month,                                 -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n    sum(sum_in_rubles) from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_returned_users_revenue`           -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    group by 1 ,2, 3\n),\n\n\nall_revenue_type_union as (\n\nselect  * from lost_revenue_due_to_downsell\nunion all\nselect  * from lost_revenue_due_to_churn\nunion all \nselect * from in_revenue_aggregated\nunion all\nselect * from returned_users_revenue)\n\nselect * from all_revenue_type_union    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u0438\u0447\u0438\u043d\u0443 \u0438 \u0441\u0443\u043c\u043c\u0443 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u043e\u0445\u043e\u0434\u0430\npivot(sum(sum_in_rubles) as sum_in_rubles for revenue_type in ('downsell_loss','returned_revenue','churn_loss','new_users_revenue','old_users_new_subscription','upsell_revenue'))", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_net_churn_revenue`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.661497Z", "completed_at": "2025-05-21T12:31:12.673086Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.714907Z", "completed_at": "2025-05-21T12:31:12.714916Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1808462142944336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_dynamics_type_without_trials", "compiled": true, "compiled_code": "with\n    original as (\n        select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_without_trials_and_promised_payments`\n    ),\n    clients_type as (\n        select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_defining_clients_types_without_trials`\n    ), \n    last_subscription as (\n        select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_with_months_weeks_without_trials`\n    )\nselect  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0443 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e\u0431 \u043e\u0442\u0432\u0430\u043b\u0430\u0445 (\u0431\u0435\u0437 \u0442\u0440\u0438\u0430\u043b\u043e\u0432)\n    data_otvala,                                    -- \u0414\u0430\u0442\u0430 \u043e\u0442\u0432\u0430\u043b\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    account_id,                                     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    week,                                           -- \u041d\u0435\u0434\u0435\u043b\u044f \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    month,                                          -- \u041c\u0435\u0441\u044f\u0446 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    currency,                                       -- \u0412\u0430\u043b\u044e\u0442\u0430\n    --segment,\n    clients_type,                                   -- \u0422\u0438\u043f \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    payment_type_weekly,                            -- \u0422\u0438\u043f \u043e\u043f\u043b\u0430\u0442\u044b \u043d\u0435\u0434\u0435\u043b\u044c\u043d\u044b\u0439\n    payment_type_monthly,                           -- \u0422\u0438\u043f \u043e\u043f\u043b\u0430\u0442\u044b \u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439\n    date_trunc(data_otvala, month) as month_date    -- \u041c\u0435\u0441\u044f\u0446 \u043e\u0442\u0432\u0430\u043b\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\nfrom last_subscription\norder by account_id asc", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_dynamics_type_without_trials`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.663549Z", "completed_at": "2025-05-21T12:31:12.673749Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.715557Z", "completed_at": "2025-05-21T12:31:12.715568Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.2191455364227295, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_abcx_segmentation_revenue_amount_with_real_money_spend_on_subscription", "compiled": true, "compiled_code": "\n\nwith int_subscription_updates__corect_date_and_filledna_tarif_period_quantity as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_updates__corect_date_and_filledna_tarif_period_quantity`\n),\nraise_info as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_and_wapi_sessions_real_money_with_subscription_updates`\n),\nstg_billing_packages as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages`\n),\nint_accounts_profile_info as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n),\nstg_months as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_months`\n),\nstg_accounts as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`\n),\naffiliates as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_affiliates`)\n\n,all_regular_payments as (\n    select date_trunc(cast(subscription_info.paid_at as date),month) as paid_month,\n           cast(subscription_info.paid_at as date) paid_date,\n            subscription_info.paid_at,\n                    /*case when coalesce(new_until_expired_days,until_expired_days) is not null\n                    then date_add(cast(subscription_info.paid_at as date),interval coalesce(new_until_expired_days,until_expired_days) day)\n                    else date_add(cast(subscription_info.paid_at as date),interval 1 month)\n                    end as till_what_date,*/\n\n            case when coalesce(period_new,period,1) = 1 and\n                    date_diff(\n                                case when coalesce(new_until_expired_days,until_expired_days) is not null\n                                    then date_add(cast(subscription_info.paid_at as date),interval coalesce(new_until_expired_days,until_expired_days) day)\n                                    else date_add(cast(subscription_info.paid_at as date),interval 1 month)\n                                end,\n                                cast(subscription_info.paid_at as date),month)  > 1\n                    then date_add(cast(subscription_info.paid_at as date),interval 1 month)\n                    else case when coalesce(new_until_expired_days,until_expired_days) is not null\n                                then date_add(cast(subscription_info.paid_at as date),interval coalesce(new_until_expired_days,until_expired_days) day)\n                         else date_add(cast(subscription_info.paid_at as date),interval 1 month)\n                         end\n                         end as till_what_date,\n              \n                        case when coalesce(new_until_expired_days,until_expired_days) is not null\n                                then date_add(cast(subscription_info.paid_at as date),interval coalesce(new_until_expired_days,until_expired_days) day)\n                         else date_add(cast(subscription_info.paid_at as date),interval 1 month)\n                         end as till_what_date_without_one_month_condition,\n\n\n\n                    date_add(date_trunc(case when coalesce(period_new,period,1) = 1 and\n                    date_diff(\n                    case when coalesce(new_until_expired_days,until_expired_days) is not null\n                            then date_add(cast(subscription_info.paid_at as date),interval coalesce(new_until_expired_days,until_expired_days) day)\n                         else date_add(cast(subscription_info.paid_at as date),interval 1 month)\n                         end,cast(subscription_info.paid_at as date),month) >1\n                        then date_add(cast(subscription_info.paid_at as date),interval 1 month)\n                        else case when coalesce(new_until_expired_days,until_expired_days) is not null\n                        then date_add(cast(subscription_info.paid_at as date),interval coalesce(new_until_expired_days,until_expired_days) day)\n                        else date_add(cast(subscription_info.paid_at as date),interval 1 month)\n                        end \n                                end,month),\n                                                 interval - 1 day) as till_what_date_fixed_end,\n\n                    int_accounts_profile_info.account_Id,\n                    raise_info.action,\n                    raise_info.subscription_id,\n                    raise_info.sum_in_rubles_spent_on_subscription,\n                    case when stg_accounts.currency in ('RUR','KZT') then 'ru' else 'global' end as market_type,\n                    coalesce(new_until_expired_days,until_expired_days,30) until_expired,\n                    coalesce(period_new,period,1) period,\n                    --raise_info.sum_in_rubles_spent_on_subscription/coalesce(new_until_expired_days,until_expired_days,30) sum_per_day,\n                    account_segment_type as account_type,\n                    int_accounts_profile_info.register_date\n       from raise_info\n       join int_subscription_updates__corect_date_and_filledna_tarif_period_quantity subscription_info on raise_info.subscription_update_id = subscription_info.guid\n       join stg_billing_packages on subscription_info.subscription_id = stg_billing_packages.guid\n       join int_accounts_profile_info on stg_billing_packages.account_id = int_accounts_profile_info .account_id\n       join stg_accounts on raise_info.account_id = stg_accounts.account_Id\n       left join affiliates affs on raise_info.account_id = affs.child_id\n       where raise_info.action not in ('raiseTariff','addQuantity')\n                --and raise_info.account_id = 71372436\n                --order by 2\n                )\n,combine_data_in_one_month_ as (\n  select row_number() over (partition by paid_month,subscription_id order by paid_at  desc) rn,\n        coalesce(lag(paid_date) over (partition by paid_month,subscription_id order by paid_at),paid_date) paid_date,\n        coalesce(lag(paid_at) over (partition by paid_month,subscription_id order by paid_at),paid_at) paid_at,\n        sum(sum_in_rubles_spent_on_subscription) over (partition by paid_month,subscription_id order by paid_at asc) sum_in_rubles_spent_on_subscription,\n        sum(period) over (partition by paid_month,subscription_id order by paid_at asc) periods_in_month,\n        * except(paid_date,paid_at,sum_in_rubles_spent_on_subscription)\n        \n  from all_regular_payments\norder by subscription_id,paid_at\n),combine_data_in_one_month as (\n  select *,\n  case when paid_date < lag(till_what_date_without_one_month_condition) over (partition by subscription_id order by paid_date) then TRUE else False end as  was_active\n  from combine_data_in_one_month_\n  where rn = 1\n)\n/*\nselect *\nfrom combine_data_in_one_month\n--where rn = 1\n*/\n,defining_correct_paid_dates as (\n    /*\n    \u042d\u0442\u043e \u0434\u043b\u044f \u043e\u043f\u043b\u0430\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u0432 \u043f\u0435\u0440\u0438\u043e\u0434 \u0443\u0436\u0435 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438.\n    */\n     select \nsubscription_id,\n            last_day(lag(till_what_date_without_one_month_condition) over (partition by subscription_id order by paid_at),month) ,\ncase \n    when (was_active is TRUE or periods_in_month != period) then      \n                      case when period = 1 and date_diff(till_what_date_without_one_month_condition,paid_date,month) = 2 then paid_date\n                           when\n                            paid_date < lag(till_what_date_without_one_month_condition) over (partition by subscription_id order by paid_at) and lag(till_what_date) over (partition by subscription_id order by      paid_at) != last_day(lag(till_what_date) over (partition by subscription_id order by paid_at),month) \n                      then\n                             date_add(lag(till_what_date_without_one_month_condition) over (partition by subscription_id order by paid_at),interval 1 day) \n                      when paid_date < lag(till_what_date_without_one_month_condition) over (partition by subscription_id order by paid_at) and lag(till_what_date) over (partition by subscription_id order by paid_at) = last_day(lag(till_what_date_without_one_month_condition) over (partition by subscription_id order by paid_at),month) \n                      then\n                             lag(till_what_date_without_one_month_condition) over (partition by subscription_id order by paid_at)\n                               else paid_date end\n\n        when (periods_in_month = period or was_active is false) then\n                    case when \n                            paid_date < lag(till_what_date) over (partition by subscription_id order by paid_at) and lag(till_what_date) over (partition by subscription_id order by paid_at) != last_day(lag(till_what_date) over (partition by subscription_id order by paid_at),month) \n                      then\n                             date_add(lag(till_what_date) over (partition by subscription_id order by paid_at),interval 1 day) \n                      when paid_date < lag(till_what_date) over (partition by subscription_id order by paid_at) and lag(till_what_date) over (partition by subscription_id order by paid_at) = last_day(lag(till_what_date) over (partition by subscription_id order by paid_at),month) \n                      then\n                             lag(till_what_date) over (partition by subscription_id order by paid_at)\n                               else paid_date end \n\n   end as paid_date_fixed,\n                         period,\n                         paid_date,\n            sum_in_rubles_spent_on_subscription,\n            till_what_date,\n            till_what_date_without_one_month_condition,\n            case when date_diff(till_what_date_without_one_month_condition,paid_date,month) = 0 then till_what_date_without_one_month_condition\n                 when  was_active is TRUE or periods_in_month != period  \n                          then date_add(date_trunc(till_what_date_without_one_month_condition,month),interval -1 day)\n                 when  periods_in_month = period or was_active is false then  till_what_date_fixed_end \n                      else date_add(date_trunc(till_what_date_without_one_month_condition,month),interval -1 day) end as till_what_date_fixed_end,\n            periods_in_month,\n            account_id,\n            until_expired,\n            account_type,\n            was_active,\n                        register_date,\n                        market_type\nfrom combine_data_in_one_month\nwhere rn =1\norder by subscription_id,paid_at\n--and account_id =\n),\n    prepare_to_correct_paid_dates as (\n        select *except(till_what_date_fixed_end),\n        case when paid_date_fixed > till_what_date_fixed_end then date_add(date_trunc(till_what_date_without_one_month_condition,month),interval -1 day)\n        else till_what_date_fixed_end end as till_what_date_fixed_end\n        from defining_correct_paid_dates\n    ),\n    metrics_to_correct_paid_dates as (\n   select *,\n        date_diff(paid_date_fixed, lag(till_what_date_fixed_end) over (partition by subscription_id order by paid_date),month) pfixed,\n        date_diff(paid_date, lag(paid_date) over (partition by subscription_id order by paid_date),month) pm\n    from prepare_to_correct_paid_dates \n    ),   \n     correcting_paid_dates  as (\n        select *except(paid_date_fixed),\n        case when pfixed = 2 and pm = 1 then paid_date else paid_date_fixed end as paid_date_fixed\n        from metrics_to_correct_paid_dates \n    ),defining_correct_until_expired_days as (\n        select *,\n\n        /*(case when date_diff(till_what_date_without_one_month_condition,paid_date,month) = 0\n                then  until_expired\n             else date_diff(till_what_date_fixed_end,paid_date_fixed,day)+1 end until_expired_fixed,\n        sum_in_rubles_spent_on_subscription,\n        sum_in_rubles_spent_on_subscription/(  case when date_diff(till_what_date_without_one_month_condition,paid_date,month) = 0\n                                                then  until_expired\n                                                else date_diff(till_what_date_fixed_end,paid_date_fixed,day)+1 end) sum_per_day*/\n case when date_diff(till_what_date_without_one_month_condition,paid_date,month) = 0\n                then  1\n     when date_diff(till_what_date_without_one_month_condition,paid_date_fixed,month) = 0\n                then 1\n                else date_diff(till_what_date_fixed_end,paid_date_fixed,month)+1 end until_expired_fixed,\n\n        sum_in_rubles_spent_on_subscription,\n        sum_in_rubles_spent_on_subscription/(case when date_diff(till_what_date_without_one_month_condition,paid_date,month) = 0\n                                                      then  1\n                                            when date_diff(till_what_date_without_one_month_condition,paid_date_fixed,month) = 0\n                                                then 1\n                                             else date_diff(till_what_date_fixed_end,paid_date_fixed,month)+1 end) sum_per_day\n\n\n        from correcting_paid_dates\n\n)\n,joining_subscription_history as (\n            select  subs_info.*,\n            paid_date_fixed,\n                        month,\n                        sum_per_day,\n                        till_what_date_fixed_end,\n                        account_type,\n                        register_date,\n                        market_type\n            from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_combined_intervals_only_paid_fixed_end` subs_info\n            join stg_months mnts on mnts.month >= date_trunc(subscription_start,month) \n                                                        and mnts.month < date_trunc(subscription_end,month)\n            join defining_correct_until_expired_days defining_correct_until_expired_days on defining_correct_until_expired_days.subscription_id = subs_info.subscription_id\n                                    and defining_correct_until_expired_days.paid_date_fixed >= subscription_start and defining_correct_until_expired_days.paid_date_fixed <= subscription_end\n                                      and date_trunc(paid_date_fixed,month) <= month and month <= date_trunc(till_what_date_fixed_end,month) \n            --order by paid_date_fixed,month\n\n            --join `dwh-wazzup`.`dbt_swazzup`.`stg_days` days on paid_date_fixed <= days.date and days.date <= till_what_date_fixed_end      and date_trunc(days.date,month) = mnts.month\n            \n)\n/*,subscription_history_by_month as (\nselect \n                  sum(sum_per_day) as sum_earned_by_period  \n        --sum_in_rubles_spent_on_subscription/count(*) over (partition by subscription_id,subscription_start,subscription_end ) sum_earned_by_period\nfrom joining_subscription_history\njoin stg_months mnts on mnts.month >= date_trunc(subscription_start,month) \n                                            and mnts.month < date_trunc(subscription_end,month)\n) */\n,regular_payments_groupped_data  as (\nselect account_id,\n        account_type,\n        register_date,\n        market_type,\n        month,\n        sum(sum_per_day) sum_in_rubles_spent_on_subscription_period\nfrom joining_subscription_history\ngroup by account_id,\n        register_date,\n         account_type,\n          market_type,\n            month)\n,\nraise_add as (\n                select raise_info.paid_date,\n                        int_accounts_profile_info.account_Id,\n                        raise_info.action,\n                        raise_info.subscription_id,\n                        raise_info.subscription_update_id,\n                        raise_info.sum_in_rubles_spent_on_subscription,\n                        subscription_info.until_expired_days,\n                         case when stg_accounts.currency in ('RUR','KZT') then 'ru' else 'global' end as market_type,\n                        account_segment_type as account_type,\n                             int_accounts_profile_info.register_date        \n                from raise_info\n                join int_subscription_updates__corect_date_and_filledna_tarif_period_quantity subscription_info on raise_info.subscription_update_id = subscription_info.guid\n                join stg_billing_packages on subscription_info.subscription_id = stg_billing_packages.guid\n                join int_accounts_profile_info on stg_billing_packages.account_id = int_accounts_profile_info.account_id\n                 join stg_accounts on raise_info.account_id = stg_accounts.account_Id\n                left join affiliates affs on raise_info.account_id = affs.child_id\n                where raise_info.action  in ('raiseTariff','addQuantity')\n                        \n                --and date_trunc(ra.paid_date,month) >= '2023-06-01'\n), upgrade_months_info as (\n                select account_id,\n                        account_type,\n                        market_type,\n                        register_date,\n                        date_trunc(paid_date,month) upgrade_month,\n                        date_trunc(date_add(paid_date,interval until_expired_days day),month) till_what_month_upgrade,\n                        case when date_diff(date_trunc(date_add(paid_date,interval until_expired_days day),month),date_trunc(paid_date,month),month) = 0 then 1\n                        else date_diff(date_trunc(date_add(paid_date,interval until_expired_days day),month),date_trunc(paid_date,month),month)\n                        end upgrade_months_active_count,\n                        sum_in_rubles_spent_on_subscription as upgrade_sum\n                from raise_add\n),\ngroupped_data as (\n                select  account_id,\n                        account_type,\n                        market_type,\n                        register_date,\n                        upgrade_month,\n                        upgrade_months_info.till_what_month_upgrade,\n                        upgrade_months_info.upgrade_months_active_count,\n                        sum(upgrade_sum) upgrade_sum_in_month,\n                        sum(upgrade_sum)/upgrade_months_info.upgrade_months_active_count as upgrade_sum_monthly\n                from upgrade_months_info\n                where upgrade_month is not null\n                group by 1,2,3,4,5,6,7),\nraise_add_groupped_data as (\n                select  account_id,\n                        account_type,\n                        market_type,\n                        register_date,\n                        month,\n                        sum(upgrade_sum_monthly) upgrade_sum_monthly\n                from groupped_data\n                join stg_months months on upgrade_month <= months.month\n                and months.month <= till_what_month_upgrade\n                --and upgrade_sum_monthly != 0 \n                group by 1,2,3,4,5)\nselect  regular_payments_groupped_data.month,           -- \u041c\u0435\u0441\u044f\u0446, \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u0430\u0442\u0435 \u0432\u044b\u0440\u0443\u0447\u043a\u0438 \u0438 expired_days, \u0444\u043e\u0440\u043c\u0430\u0442 2022-11-29\n        regular_payments_groupped_data.account_id,      -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n        regular_payments_groupped_data.account_type,\n        regular_payments_groupped_data.market_type,\n        regular_payments_groupped_data.register_date,\n        sum(sum_in_rubles_spent_on_subscription_period+coalesce(upgrade_sum_monthly,0)) revenue_amount  -- \u0420\u0430\u0437\u043c\u0435\u0440 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0432\u044b\u0440\u0443\u0447\u043a\u0438 (\u0432\u044b\u0440\u0443\u0447\u043a\u0430/\u043f\u0435\u0440\u0438\u043e\u0434) \u0432 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435\nfrom regular_payments_groupped_data \nleft join raise_add_groupped_data on regular_payments_groupped_data.account_id = raise_add_groupped_data.account_id\n                                    and regular_payments_groupped_data.month = raise_add_groupped_data.month\ngroup by 1,2,3,4,5\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0432\u044b\u0440\u0443\u0447\u043a\u043e\u0439 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0435\u0451 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043f\u043e\u0432\u044b\u0448\u0435\u043d\u0438\u0435 \u0442\u0430\u0440\u0438\u0444\u043e\u0432. \u041f\u043e\u0434 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0440\u0443\u0447\u043a\u0438 \u043d\u0430 \u043a\u0443\u043f\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043a\u0443\u043f\u0438\u043b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0437\u0430 10\u043a \u0440\u0443\u0431\u043b\u0435\u0439 2023-05-05 \u043d\u0430 5 \u043c\u0435\u0441\u044f\u0446\u0435\u0432.\u0422\u043e \u0435\u0441\u0442\u044c \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0435\u0433\u043e \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u0432 \u043a\u0430\u0436\u0434\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 2\u043a \u0440\u0443\u0431\u043b\u0435\u0439 \u043c\u0430\u0439,\u0438\u044e\u043d\u044c,\u0438\u044e\u043b\u044c,\u0430\u0432\u0433\u0443\u0441\u0442,\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c \u0438, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435 \u0432\u043d\u0451\u0441 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0435\u043d\u044c\u0433\u0438, \u0442\u043e \u043e\u043a\u0442\u044f\u0431\u0440\u044c, \u0438\u043d\u0430\u0447\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u043e\u0432\u0430\u044f \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_revenue_amount_with_real_money_spend_on_subscription`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.668455Z", "completed_at": "2025-05-21T12:31:12.674609Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.716531Z", "completed_at": "2025-05-21T12:31:12.716541Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2591898441314697, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_abcx_segmentation_users_living_time", "compiled": true, "compiled_code": "with stg_accounts as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`\n),\nmonths as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_months`\n),\naffiliates as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_affiliates`\n), \nint_subscriptions_deduplicated_without_promised_date_combined_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_without_promised_date_combined_intervals`\n),\nprofile_info as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n),\naccounts_live_time as \n(SELECT distinct\n        intervals.account_id,                                                                       -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n        accounts.country,                                                                           -- \u0421\u0442\u0440\u0430\u043d\u0430\n        month as live_month,                                                                        -- \u041c\u0435\u0441\u044f\u0446 \u0436\u0438\u0437\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a, \u0444\u043e\u0440\u043c\u0430\u0442 2022-11-29\n        first_value(subscription_start) over (partition by intervals.account_id order by intervals.subscription_start) first_subscription_start,    -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        date_trunc(subscription_start,month) as start_month,\n        date_trunc(subscription_end,month) as end_month,                                            \n        profile_info.register_date,                                                                 -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n        case when dense_rank() over (partition by intervals.account_id order by month) <= 3 then 'new'\n        else 'old' end as client_living_type,                                                       -- \u0422\u0438\u043f \u0436\u0438\u0437\u043d\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n        case when accounts.currency in ('RUR','KZT') then 'ru' else 'global' end as market_type,    -- \u0420\u044b\u043d\u043e\u043a\n         account_segment_type as account_type                                                       -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nFROM int_subscriptions_deduplicated_without_promised_date_combined_intervals intervals\ninner join stg_accounts accounts\n            on accounts.account_id=intervals.account_id\ninner join profile_info on intervals.account_id = profile_info.account_id and is_employee is false\nleft join affiliates affiliates\n            on affiliates.child_id=accounts.account_id\ninner join months months on date_trunc(subscription_start,month) <= month and month <= date_trunc(subscription_end,month)\n      \n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u0438\u0445 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0436\u0438\u0437\u043d\u0438\nselect distinct *except(start_month,end_month),\n    first_value(end_month) over (partition by account_id order by end_month desc) last_end_month    -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nfrom accounts_live_time", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_users_living_time`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.833870Z", "completed_at": "2025-05-21T12:31:12.877671Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.882184Z", "completed_at": "2025-05-21T12:31:12.882195Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.24881291389465332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_mobile_app_visited_at_first_month", "compiled": true, "compiled_code": "with\n    mobile_ab_min_visited_date as (\n        select\n            accountid as account_id,\n            min(cast(visitedat as date)) as visited_at_first_date\n        from dwh-wazzup.snapshots.crmEmployees_snapshot\n        group by 1\n    ),\n\n    visit_at_first_month as (\n        select mobile_ab_min_visited_date.account_id    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        from mobile_ab_min_visited_date\n        inner join\n            `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n            on mobile_ab_min_visited_date.account_id = profile_info.account_id\n        where mobile_ab_min_visited_date.visited_at_first_date<=date_add(profile_info.register_date, interval 1 month)\n    )\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u0448\u043b\u0438 \u0432 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\nselect * from visit_at_first_month", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_mobile_app_visited_at_first_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.880343Z", "completed_at": "2025-05-21T12:31:12.931541Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.936496Z", "completed_at": "2025-05-21T12:31:12.936523Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10496759414672852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_fifty_discount_by_month_and_account", "compiled": true, "compiled_code": "with account_info as (\n        select account_id,\n        country,\n        currency,\n        region_type from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n        where partner_discount='0.5')\n        ,\n\ndiscount_history as (\n        select account_id,\n        min(occured_date) as occured_date\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_billing_affiliate_subscription_payments_real_money_with_who_paid` \n        where partner_discount=0.5 and account_type in ('partner','tech-partner')\n        group by 1\n)\n    -- \u041a\u043e\u0433\u0434\u0430 \u0443 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0431\u044b\u043b\u0430 \u043f\u0435\u0440\u0432\u0430\u044f \u043e\u043f\u043b\u0430\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441\u043e \u0441\u043a\u0438\u0434\u043a\u043e\u0439 50%\nselect discount_history.account_id as partner_id,   -- \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        occured_date    -- \u0434\u0430\u0442\u0430, \u043a\u043e\u0433\u0434\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437 \u043e\u043f\u043b\u0430\u0442\u0438\u043b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0432 50%\nfrom discount_history \ninner join account_info \non account_info.account_id=discount_history.account_id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_fifty_discount_by_month_and_account`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.928695Z", "completed_at": "2025-05-21T12:31:12.935253Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.939312Z", "completed_at": "2025-05-21T12:31:12.939321Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.1390700340270996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_metrics_for_partners_reg_to_active", "compiled": true, "compiled_code": "with active_users_by_period as (\n        select  partner_id,\n                date_trunc(min(date),month) date,\n                'monthly' as type,\n                account_id\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_active_users_for_whom_partner_paid`\n        where segment_monthly = 'partner_paid'\n        group by partner_id,account_id\n\n        union all\n\n\n        select  partner_id,\n                date_trunc(min(date),month) date,\n                'all' as type,\n                account_id ,\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_active_users_for_whom_partner_paid`\n        where segment_monthly = 'partner_paid'\n        group by partner_id,account_id)\n\n,defining_first_partner_info as (\n          select account_id,\n               partner_id,\n               min(start_date) over (partition by account_id) first_start_date\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated`\n        where partner_type is not null and partner_type != '0'\n                and partner_type = 'partner'\n),registers as (\nselect partners.account_id,\n                partners.partner_id,\n                start_date as become_a_daughter_at\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` partners\njoin defining_first_partner_info on partners.account_id = defining_first_partner_info.account_id\n                                  and partners.partner_id = defining_first_partner_info.partner_id\nwhere partner_type is not null and partner_type != '0'\n        and partner_type = 'partner'\n        and start_date = first_start_date\n)\n,\n    registers_based_affs as (\n      select partner_id,\n              child_id,\n              date_trunc(date_add(created_at,interval 3 hour),minute) registered_at \n      from `dwh-wazzup`.`dbt_nbespalov`.`stg_affiliates`\n    ),profile_info as (\n        select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n    )\n,registrations_by_type as (\nselect registers.partner_id,\n         cast(date_trunc(registers.become_a_daughter_at,month) as date) as reg_month,       \n          registers.account_id reg_daughters_account_id,\n          'monthly' as type\n  from registers\n  join registers_based_affs on registers.account_id = registers_based_affs.child_id\n    join profile_info on registers.account_id = profile_info.account_id and profile_info.type != 'partner-demo' and profile_info.is_employee is false\n\n  where  date_diff(registers.become_a_daughter_at,cast(registers_based_affs.registered_at as date), day) <=7 \n\n  union all\n\nselect registers.partner_id,\n         cast(date_trunc(registers.become_a_daughter_at,month) as date) as reg_month,       \n          registers.account_id reg_daughters_account_id,\n          'all' as type\n  from registers\n  join registers_based_affs on registers.account_id = registers_based_affs.child_id\n    join profile_info on registers.account_id = profile_info.account_id and profile_info.type != 'partner-demo' and profile_info.is_employee is false\n\n  where  date_diff(registers.become_a_daughter_at,cast(registers_based_affs.registered_at as date), day) <=7 \n),\nregistrations_convertation_to_activation as (\nselect registrations_by_type.*,\n        active_users_by_period.*except(partner_id,type,account_id)\nfrom registrations_by_type\nleft join active_users_by_period on registrations_by_type.partner_id = active_users_by_period.partner_id\n                                and registrations_by_type.type = active_users_by_period.type\n                                and registrations_by_type.reg_daughters_account_id = active_users_by_period.account_id\n),union_metrics as (\nselect partner_id,                                                      -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n      reg_month,                                                        -- \u041c\u0435\u0441\u044f\u0446 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n      type,                                                             -- \u0422\u0438\u043f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\n      count(distinct case when reg_month = date then reg_daughters_account_id end) converted_daughters_count,   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u0447\u0435\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0435\u0440\u0435\u0448\u043b\u0438 \u0432 '\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0435'\n      count(distinct reg_daughters_account_id) all_daughters_count,     -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0441\u0435\u0445 \u0434\u043e\u0447\u0435\u043a\n    count(distinct case when reg_month = date then reg_daughters_account_id end)/    count(distinct reg_daughters_account_id) C1        -- \u041c\u0435\u0442\u0440\u0438\u043a\u0430 C1 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u043e\u043b\u044e \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0438\u0441\u044c \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 (reg_month = date), \u043f\u043e \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044e \u043a\u043e \u0432\u0441\u0435\u043c \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u043c \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c.\nfrom  registrations_convertation_to_activation\nwhere type = 'monthly'\ngroup by partner_id,\n        reg_month,\n        type\n\nunion all\n\nselect partner_id,                                                      -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        current_date(),                                                 -- \u0422\u0435\u043a\u0443\u0449\u0430\u044f \u0434\u0430\u0442\u0430\n        type,                                                           -- \u0422\u0438\u043f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\n        count(distinct case when reg_month = date then reg_daughters_account_id end) converted_daughters_count, -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u0447\u0435\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0435\u0440\u0435\u0448\u043b\u0438 \u0432 '\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0435'\n        count(distinct reg_daughters_account_id) all_daughters_count,   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0441\u0435\u0445 \u0434\u043e\u0447\u0435\u043a\n        count(distinct case when reg_month = date then reg_daughters_account_id end)/    count(distinct reg_daughters_account_id) C1    -- \u041c\u0435\u0442\u0440\u0438\u043a\u0430 C1 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u043e\u043b\u044e \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0438\u0441\u044c \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 (reg_month = date), \u043f\u043e \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044e \u043a\u043e \u0432\u0441\u0435\u043c \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u043c \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c.\nfrom  registrations_convertation_to_activation\nwhere type = 'all'\ngroup by partner_id,\n        type\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043f\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u043c \u0441 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u043e\u0447\u043a\u0438 \u0434\u043e \u0435\u0451 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438\nselect *\nfrom union_metrics", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_reg_to_active`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.926524Z", "completed_at": "2025-05-21T12:31:12.935607Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.940181Z", "completed_at": "2025-05-21T12:31:12.940190Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1785755157470703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_metrics_for_partners_referal_earnings_prep", "compiled": true, "compiled_code": "with discount_info as (\nselect distinct\n        partner_id,\n        date_trunc(paid_date,month) paid_month,\n        first_value(partner_discount) over (partition by partner_id,date_trunc(paid_date,month) order by paid_date desc) last_partner_discount_in_month\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates` subs\njoin `dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_and_wapi_sessions_real_money_with_data_source_and_subscription_update_id` real_money on subs.guid = real_money.subscription_update_id\nwhere data_source = 'partner_payment')  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043e\u043a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432 \u0441 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u043e\u0432 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0441\u043a\u0438\u0434\u043a\u0443 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\nselect reward.account_id as partner_id,                                 -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        date_add(reward.paid_month, interval 1 month) as paid_month,    -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n        sum_in_rubles earned_sum_referals,                              -- \u0421\u0443\u043c\u043c\u0430, \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u0430\u044f \u0441 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u043e\u0432\n        (sum_in_rubles/0.2 * coalesce(last_partner_discount_in_month,cast(profile_info.partner_discount as numeric))) - sum_in_rubles as lost_sum_referals, -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0435\u0440\u044f\u043d\u043d\u0430\u044f \u0441 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u043e\u0432\n        last_partner_discount_in_month                                  -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_reward_by_month_and_account` reward\njoin `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info on reward.account_id = profile_info.account_id\nleft join discount_info on reward.paid_month = discount_info.paid_month\n                        and reward.account_id = discount_info.partner_id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_referal_earnings_prep`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.923531Z", "completed_at": "2025-05-21T12:31:12.935928Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:12.940837Z", "completed_at": "2025-05-21T12:31:12.940846Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.21890974044799805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_metrics_for_partners_referal_earnings", "compiled": true, "compiled_code": "with discount_info as (\nselect distinct\n        partner_id,\n        date_trunc(paid_date,month) paid_month,\n        first_value(partner_discount) over (partition by partner_id,date_trunc(paid_date,month) order by paid_date desc) last_partner_discount_in_month\nfrom `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates` subs\njoin `dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_and_wapi_sessions_real_money_with_data_source_and_subscription_update_id` real_money on subs.guid = real_money.subscription_update_id\nwhere data_source = 'partner_payment')\n,referal_earnings_and_losses as (\nselect reward.account_id as partner_id,\n        date_add(reward.paid_month, interval 1 month) as paid_month,\n        sum_in_rubles earned_sum_referals,\n        (sum_in_rubles/0.2 * coalesce(last_partner_discount_in_month,cast(profile_info.partner_discount as numeric))) - sum_in_rubles as lost_sum_referals,\n        last_partner_discount_in_month\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_reward_by_month_and_account` reward\njoin `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info on reward.account_id = profile_info.account_id\nleft join discount_info on reward.paid_month = discount_info.paid_month\n                        and reward.account_id = discount_info.partner_id\n)\n,union_metrics as (\nselect partner_id,                                      -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        paid_month,                                     -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n        sum(earned_sum_referals) earned_sum_referals,   -- \u0421\u0443\u043c\u043c\u0430, \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u0430\u044f \u0441 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u043e\u0432\n        sum(lost_sum_referals) lost_sum_referals,       -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0435\u0440\u044f\u043d\u043d\u0430\u044f \u0441 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u043e\u0432\n        'monthly' as type                               -- \u0422\u0438\u043f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\nfrom referal_earnings_and_losses\ngroup by partner_id,\n            paid_month\nunion all\n\nselect partner_id,                                      -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        current_date(),                                 -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n        sum(earned_sum_referals) earned_sum_referals,   -- \u0421\u0443\u043c\u043c\u0430, \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u0430\u044f \u0441 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u043e\u0432\n        sum(lost_sum_referals) lost_sum_referals,       -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0435\u0440\u044f\u043d\u043d\u0430\u044f \u0441 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u043e\u0432\n        'all' as type                                   -- \u0422\u0438\u043f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\nfrom referal_earnings_and_losses\ngroup by partner_id)\nselect *    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043e\u043a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432 \u0441 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u043e\u0432\nfrom union_metrics", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_referal_earnings`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:12.931926Z", "completed_at": "2025-05-21T12:31:12.939646Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:13.019274Z", "completed_at": "2025-05-21T12:31:13.019285Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.25960445404052734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_metrics_for_partners_registrated_users_count", "compiled": true, "compiled_code": "with defining_first_partner_info as (\n  select account_id,\n       partner_id,\n       start_date,\n       min(start_date) over (partition by account_id) first_start_date\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated`\nwhere partner_type is not null and partner_type != '0'\n        and partner_type = 'partner'\n),registers as (\nselect          account_id,\n                partner_id,\n                start_date as become_a_daughter_at\nfrom defining_first_partner_info \nwhere  start_date = first_start_date\n),registers_based_affs as (\n      select partner_id,\n              child_id,\n              date_trunc(date_add(created_at,interval 3 hour),minute) registered_at \n      from `dwh-wazzup`.`dbt_nbespalov`.`stg_affiliates`\n    ),\n    profile_info as (\n        select * \n        from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n    )   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u0432\u044b\u0445 \u0434\u043e\u0447\u0435\u043a \u0443 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\nselect registers.partner_id,                                                              -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n         cast(date_trunc(registers.become_a_daughter_at,month) as date) as reg_month,     -- \u041c\u0435\u0441\u044f\u0446 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438  \n          count(distinct registers.account_id) reg_daughters_count,                       -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u0432\u044b\u0445 \u0434\u043e\u0447\u0435\u043a\n          'monthly' as type                                                               -- \u0422\u0438\u043f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\n  from registers\n  join registers_based_affs on registers.account_id = registers_based_affs.child_id\n  join profile_info on registers.account_id = profile_info.account_id and profile_info.type != 'partner-demo' and profile_info.is_employee is false\n  where  date_diff(registers.become_a_daughter_at,cast(registers_based_affs.registered_at as date), day) <=7 \n  group by registers.partner_id,reg_month\n\n  union all\n    \nselect registers.partner_id,                    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n         current_date() as reg_month,           -- \u0422\u0435\u043a\u0443\u0449\u0430\u044f \u0434\u0430\u0442\u0430\n          count(distinct registers.account_id), -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u0432\u044b\u0445 \u0434\u043e\u0447\u0435\u043a\n          'all' as type                         -- \u0422\u0438\u043f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\n  from registers\n  join registers_based_affs on registers.account_id = registers_based_affs.child_id\n  join profile_info on registers.account_id = profile_info.account_id and profile_info.type != 'partner-demo' and profile_info.is_employee is false\n  where  date_diff(registers.become_a_daughter_at,cast(registers_based_affs.registered_at as date), day) <=7 \n  group by registers.partner_id,reg_month", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_registrated_users_count`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:13.098305Z", "completed_at": "2025-05-21T12:31:13.142684Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:13.146021Z", "completed_at": "2025-05-21T12:31:13.146030Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.25481271743774414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_tariffs_by_month", "compiled": true, "compiled_code": "WITH subscription_updates_with_filled_tariff AS (\n  SELECT\n    su.*,\n    IFNULL(su.tariff, FIRST_VALUE(su.tariff IGNORE NULLS) OVER (PARTITION BY subscription_id ORDER BY created_date ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)) AS filled_tariff,\n    account_id\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates` su\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` bp ON bp.guid = su.subscription_id\n),\n\ngenerating_start_end_ats AS (\n  SELECT\n    account_id,\n    subscription_id,\n    created_at AS start_at,\n    DATE_ADD(created_at, interval COALESCE(new_until_expired_days, until_expired_days, 30) day) AS end_at,\n    filled_tariff\n  FROM subscription_updates_with_filled_tariff\n  WHERE state = 'activated'\n    AND action NOT IN ('setPromisedPayment', 'balanceTopup')\n),\n\nsubscriptions AS (\n  SELECT\n    account_id,\n    subscription_id,\n    start_at,\n    CASE WHEN end_at IS NULL THEN LEAD(start_at) OVER (PARTITION BY subscription_id ORDER BY start_at) ELSE end_at END AS end_at,\n    filled_tariff\n  FROM generating_start_end_ats\n),\n\nformatting_end_at AS (\n  SELECT\n    account_id,\n    subscription_id,\n    start_at,\n    CASE WHEN end_at > LEAD(start_at) OVER (PARTITION BY subscription_id ORDER BY start_at) THEN LEAD(start_at) OVER (PARTITION BY subscription_id ORDER BY start_at)\n         ELSE end_at END AS end_at,\n    filled_tariff\n  FROM subscriptions\n),\n\nmonth_series AS (\n  SELECT\n    account_id,\n    subscription_id,\n    filled_tariff,\n    DATE_TRUNC(month_date, month) AS active_month\n  FROM formatting_end_at,\n  UNNEST(\n    GENERATE_DATE_ARRAY(\n      DATE_TRUNC(DATE(start_at), month),\n      DATE_TRUNC(DATE(end_at), month),\n      INTERVAL 1 month\n    )\n  ) AS month_date\n)\n-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0442\u0430\u0440\u0438\u0444\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0430\u043a\u0442\u0438\u0432\u043d\u044b \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c\nSELECT DISTINCT\n  active_month,     -- \u041c\u0435\u0441\u044f\u0446 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438\n  filled_tariff AS tariff,    -- \u0422\u0430\u0440\u0438\u0444\n  ms.account_id     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nFROM month_series ms\nJOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` api ON ms.account_id = api.account_id\nWHERE is_employee is false\n  AND filled_tariff is not null", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_tariffs_by_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:13.147907Z", "completed_at": "2025-05-21T12:31:13.202605Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:13.209846Z", "completed_at": "2025-05-21T12:31:13.209855Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.11045122146606445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_active_channels", "compiled": true, "compiled_code": "WITH profile_info AS (\n    SELECT account_id, currency, type, is_employee\n    FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n    WHERE is_employee IS FALSE\n),\nchannels AS (\n    SELECT *\n    FROM `dwh-wazzup`.`dbt_nbespalov`.`int_channels_agg_with_trials`\n),\nsubscriptions AS (\n    SELECT\n        subscription_id,\n        subscription_start,\n        subscription_end\n    FROM `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_combined_intervals`\n),\nactive_channels AS (\n    SELECT\n        p.currency,\n        p.type,\n        ach.channel_id,\n        ach.transport,\n        ach.package_id,\n        ach.min_datetime,\n        ach.max_datetime,\n        ach.is_free,\n        ach.account_id,\n        ach.whatsap_trial,\n        ach.instagram_trial,\n        ach.tgapi_trial,\n        ach.wapi_trial,\n        ach.avito_trial,\n        ach.vk_trial,\n        ach.telegram_trial,\n        day  AS date,\n        s.subscription_id,\n        s.subscription_start,\n        s.subscription_end\n    FROM channels ach,\n    UNNEST(GENERATE_DATE_ARRAY(DATE(ach.min_datetime), DATE(ach.max_datetime))) AS day\n    JOIN profile_info p\n        ON ach.account_id = p.account_id\n    LEFT JOIN subscriptions s\n        ON s.subscription_id = ach.package_id\n        AND s.subscription_start <= day\n        AND s.subscription_end >= day\n    WHERE day BETWEEN date(ach.min_datetime) AND date(ach.max_datetime)\n),partner_info AS ( \n    SELECT *\n    FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated`\n),active_channels_with_min_date AS (\n    SELECT\n        ac.*,\n        ap.account_type,\n        ap.partner_type,\n        ap.partner_id,\n        ap.refparent_id,\n      --  MIN(ac.date) OVER (PARTITION BY ac.account_id, ac.transport) AS min_channel_date_by_transport,\n      --  MIN(ac.date) OVER (PARTITION BY ac.account_id) AS min_channel_date_by_account\n    FROM active_channels ac\n    LEFT JOIN partner_info ap\n        ON ac.account_id = ap.account_id\n        AND ac.date BETWEEN ap.start_date AND ap.end_date\n    WHERE ac.channel_id NOT IN ('4f764c42-2372-4233-b3dc-891df42e88a5')\n)\nselect *\nfrom active_channels_with_min_date\nwhere date >= '2022-01-01'", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_channels`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:13.150110Z", "completed_at": "2025-05-21T12:31:13.207644Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:13.210763Z", "completed_at": "2025-05-21T12:31:13.210772Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.14847111701965332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_active_groupped_by_accounts_transport", "compiled": true, "compiled_code": "      -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438 \u043a\u0430\u043d\u0430\u043b\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443 \u0438 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0443\nselect distinct profile_info.account_id,                                    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n                    1 as transport_order_number,                            -- \u041f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0430\u043d\u0430\u043b\u0430\n                  IFNULL(transport,'\u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0410\u0432\u0438\u0442\u043e \u043a\u0430\u043d\u0430\u043b\u0430') transport  -- \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442 \u043a\u0430\u043d\u0430\u043b\u0430\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary` channels on profile_info.account_Id = channels.account_Id and transport = 'avito' and state = 'active' and deleted = false\n  \n\n  union all\n  \n  select distinct profile_info.account_id,\n                    3,\n                  IFNULL(transport,'\u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e Instagram \u043a\u0430\u043d\u0430\u043b\u0430') transport\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary` channels on profile_info.account_Id = channels.account_Id and transport = 'instagram' and state = 'active' and deleted = false\n\nunion all\n\n select distinct profile_info.account_id,\n                    4,\n                  IFNULL(transport,'\u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e Telegram Bot \u043a\u0430\u043d\u0430\u043b\u0430') transport\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary` channels on profile_info.account_Id = channels.account_Id and transport = 'telegram' and state = 'active' and deleted = false\n\nunion all\n\n select distinct profile_info.account_id,\n                    5,\n                  IFNULL(transport,'\u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e Telegram Personal \u043a\u0430\u043d\u0430\u043b\u0430') transport\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary` channels on profile_info.account_Id = channels.account_Id and transport = 'tgapi' and state = 'active' and deleted = false\n\n  union all \n\n select distinct profile_info.account_id,\n                    6,\n                  IFNULL(transport,'\u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0412\u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0435 \u043a\u0430\u043d\u0430\u043b\u0430') transport\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary` channels on profile_info.account_Id = channels.account_Id and transport = 'vk' and state = 'active' and deleted = false\n\n  union all\n\n\n select distinct profile_info.account_id,\n                    7,\n                  IFNULL(transport,'\u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e Waba \u043a\u0430\u043d\u0430\u043b\u0430') transport\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary` channels on profile_info.account_Id = channels.account_Id and transport in ('waba','wapi') and state = 'active' and deleted = false\n\nunion all\n\n select distinct profile_info.account_id,\n                    8,\n                  IFNULL(transport,'\u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e Whatsapp Web \u043a\u0430\u043d\u0430\u043b\u0430') transport\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary` channels on profile_info.account_Id = channels.account_Id and transport = 'whatsapp' and state = 'active' and deleted = false\n\nunion all\n\n select distinct profile_info.account_id,\n                    9,\n                  IFNULL(transport,'\u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e Viber \u043a\u0430\u043d\u0430\u043b\u0430') transport\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary` channels on profile_info.account_Id = channels.account_Id and transport = 'viber' and state = 'active' and deleted = false", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_groupped_by_accounts_transport`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:13.197954Z", "completed_at": "2025-05-21T12:31:13.208945Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:13.212415Z", "completed_at": "2025-05-21T12:31:13.212426Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.22666430473327637, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_by_account_id_n_days_after_registration", "compiled": true, "compiled_code": "with channels as (\n    select account_id,\n    case when transport = 'wapi' then 'waba'\n         else transport \n    end as transport,\n    created_date,\n    temporary ,\n    guid\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_channels`\n) -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u043a\u0430\u043d\u0430\u043b\u0430\u043c\u0438 \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443 \u0447\u0435\u0440\u0435\u0437 n \u0434\u043d\u0435\u0439 \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n select profile_info.account_id,    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n \n     \n                   count(case when date_diff(channels.created_date, register_date, day) <=7 and transport = 'avito' and temporary=False  then channels.guid end ) avito_7_channels_not_temporary,\n                   count(case when date_diff(channels.created_date, register_date, day) <=7 and transport = 'avito'  then channels.guid end ) avito_7_channels_all\n                     ,\n                \n                   count(case when date_diff(channels.created_date, register_date, day) <=14 and transport = 'avito' and temporary=False  then channels.guid end ) avito_14_channels_not_temporary,\n                   count(case when date_diff(channels.created_date, register_date, day) <=14 and transport = 'avito'  then channels.guid end ) avito_14_channels_all\n                     ,\n                \n                   count(case when date_diff(channels.created_date, register_date, day) <=21 and transport = 'avito' and temporary=False  then channels.guid end ) avito_21_channels_not_temporary,\n                   count(case when date_diff(channels.created_date, register_date, day) <=21 and transport = 'avito'  then channels.guid end ) avito_21_channels_all\n                     \n                 \n                ,\n                \n     \n                   count(case when date_diff(channels.created_date, register_date, day) <=7 and transport = 'waba' and temporary=False  then channels.guid end ) waba_7_channels_not_temporary,\n                   count(case when date_diff(channels.created_date, register_date, day) <=7 and transport = 'waba'  then channels.guid end ) waba_7_channels_all\n                     ,\n                \n                   count(case when date_diff(channels.created_date, register_date, day) <=14 and transport = 'waba' and temporary=False  then channels.guid end ) waba_14_channels_not_temporary,\n                   count(case when date_diff(channels.created_date, register_date, day) <=14 and transport = 'waba'  then channels.guid end ) waba_14_channels_all\n                     ,\n                \n                   count(case when date_diff(channels.created_date, register_date, day) <=21 and transport = 'waba' and temporary=False  then channels.guid end ) waba_21_channels_not_temporary,\n                   count(case when date_diff(channels.created_date, register_date, day) <=21 and transport = 'waba'  then channels.guid end ) waba_21_channels_all\n                     \n                 \n                ,\n                \n     \n                   count(case when date_diff(channels.created_date, register_date, day) <=7 and transport = 'whatsapp' and temporary=False  then channels.guid end ) whatsapp_7_channels_not_temporary,\n                   count(case when date_diff(channels.created_date, register_date, day) <=7 and transport = 'whatsapp'  then channels.guid end ) whatsapp_7_channels_all\n                     ,\n                \n                   count(case when date_diff(channels.created_date, register_date, day) <=14 and transport = 'whatsapp' and temporary=False  then channels.guid end ) whatsapp_14_channels_not_temporary,\n                   count(case when date_diff(channels.created_date, register_date, day) <=14 and transport = 'whatsapp'  then channels.guid end ) whatsapp_14_channels_all\n                     ,\n                \n                   count(case when date_diff(channels.created_date, register_date, day) <=21 and transport = 'whatsapp' and temporary=False  then channels.guid end ) whatsapp_21_channels_not_temporary,\n                   count(case when date_diff(channels.created_date, register_date, day) <=21 and transport = 'whatsapp'  then channels.guid end ) whatsapp_21_channels_all\n                     \n                 \n                ,\n                \n     \n                   count(case when date_diff(channels.created_date, register_date, day) <=7 and transport = 'instagram' and temporary=False  then channels.guid end ) instagram_7_channels_not_temporary,\n                   count(case when date_diff(channels.created_date, register_date, day) <=7 and transport = 'instagram'  then channels.guid end ) instagram_7_channels_all\n                     ,\n                \n                   count(case when date_diff(channels.created_date, register_date, day) <=14 and transport = 'instagram' and temporary=False  then channels.guid end ) instagram_14_channels_not_temporary,\n                   count(case when date_diff(channels.created_date, register_date, day) <=14 and transport = 'instagram'  then channels.guid end ) instagram_14_channels_all\n                     ,\n                \n                   count(case when date_diff(channels.created_date, register_date, day) <=21 and transport = 'instagram' and temporary=False  then channels.guid end ) instagram_21_channels_not_temporary,\n                   count(case when date_diff(channels.created_date, register_date, day) <=21 and transport = 'instagram'  then channels.guid end ) instagram_21_channels_all\n                     \n                 \n                ,\n                \n     \n                   count(case when date_diff(channels.created_date, register_date, day) <=7 and transport = 'tgapi' and temporary=False  then channels.guid end ) tgapi_7_channels_not_temporary,\n                   count(case when date_diff(channels.created_date, register_date, day) <=7 and transport = 'tgapi'  then channels.guid end ) tgapi_7_channels_all\n                     ,\n                \n                   count(case when date_diff(channels.created_date, register_date, day) <=14 and transport = 'tgapi' and temporary=False  then channels.guid end ) tgapi_14_channels_not_temporary,\n                   count(case when date_diff(channels.created_date, register_date, day) <=14 and transport = 'tgapi'  then channels.guid end ) tgapi_14_channels_all\n                     ,\n                \n                   count(case when date_diff(channels.created_date, register_date, day) <=21 and transport = 'tgapi' and temporary=False  then channels.guid end ) tgapi_21_channels_not_temporary,\n                   count(case when date_diff(channels.created_date, register_date, day) <=21 and transport = 'tgapi'  then channels.guid end ) tgapi_21_channels_all\n                     \n                 \n                ,\n                \n     \n                   count(case when date_diff(channels.created_date, register_date, day) <=7 and transport = 'vk' and temporary=False  then channels.guid end ) vk_7_channels_not_temporary,\n                   count(case when date_diff(channels.created_date, register_date, day) <=7 and transport = 'vk'  then channels.guid end ) vk_7_channels_all\n                     ,\n                \n                   count(case when date_diff(channels.created_date, register_date, day) <=14 and transport = 'vk' and temporary=False  then channels.guid end ) vk_14_channels_not_temporary,\n                   count(case when date_diff(channels.created_date, register_date, day) <=14 and transport = 'vk'  then channels.guid end ) vk_14_channels_all\n                     ,\n                \n                   count(case when date_diff(channels.created_date, register_date, day) <=21 and transport = 'vk' and temporary=False  then channels.guid end ) vk_21_channels_not_temporary,\n                   count(case when date_diff(channels.created_date, register_date, day) <=21 and transport = 'vk'  then channels.guid end ) vk_21_channels_all\n                     \n                 \n                ,\n                \n     \n                   count(case when date_diff(channels.created_date, register_date, day) <=7 and transport = 'telegram' and temporary=False  then channels.guid end ) telegram_7_channels_not_temporary,\n                   count(case when date_diff(channels.created_date, register_date, day) <=7 and transport = 'telegram'  then channels.guid end ) telegram_7_channels_all\n                     ,\n                \n                   count(case when date_diff(channels.created_date, register_date, day) <=14 and transport = 'telegram' and temporary=False  then channels.guid end ) telegram_14_channels_not_temporary,\n                   count(case when date_diff(channels.created_date, register_date, day) <=14 and transport = 'telegram'  then channels.guid end ) telegram_14_channels_all\n                     ,\n                \n                   count(case when date_diff(channels.created_date, register_date, day) <=21 and transport = 'telegram' and temporary=False  then channels.guid end ) telegram_21_channels_not_temporary,\n                   count(case when date_diff(channels.created_date, register_date, day) <=21 and transport = 'telegram'  then channels.guid end ) telegram_21_channels_all\n                     \n                 \n                \n                  \n            from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info \n            left join channels on channels.account_id = profile_info.account_Id  \n            group by profile_info.account_id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_by_account_id_n_days_after_registration`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:13.193378Z", "completed_at": "2025-05-21T12:31:13.209458Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:13.213073Z", "completed_at": "2025-05-21T12:31:13.213081Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.22827482223510742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_active_with_subscription_groupped_by_accounts_transport", "compiled": true, "compiled_code": "  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u043a\u0430\u043d\u0430\u043b\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443 \u0438 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0443\nselect distinct profile_info.account_id,                                    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n                    1 as transport_order_number,                            -- \u041f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0430\u043d\u0430\u043b\u0430\n                  IFNULL(transport,'\u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0410\u0432\u0438\u0442\u043e \u043a\u0430\u043d\u0430\u043b\u0430') transport  -- \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442 \u043a\u0430\u043d\u0430\u043b\u0430\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  \n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_with_active_subscription` channels on profile_info.account_Id = channels.account_Id and transport = 'avito' and paid_At is not null\n  \n\n  union all\n  \n  select distinct profile_info.account_id,\n                    3,\n                  IFNULL(transport,'\u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e Instagram \u043a\u0430\u043d\u0430\u043b\u0430') transport\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_with_active_subscription` channels on profile_info.account_Id = channels.account_Id and transport = 'instagram' and paid_At is not null \n\nunion all\n\n select distinct profile_info.account_id,\n                    4,\n                  IFNULL(transport,'\u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e Telegram Bot \u043a\u0430\u043d\u0430\u043b\u0430') transport\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_with_active_subscription` channels on profile_info.account_Id = channels.account_Id \n                                                                                        and transport = 'telegram'\n                                                                                        and (\n                                                                                            (tariff = 'free' and paid_At is null) \n                                                                                            or\n                                                                                            (tariff != 'free' and paid_At is not null)\n                                                                                            )\n\nunion all\n\n select distinct profile_info.account_id,\n                    5,\n                  IFNULL(transport,'\u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e Telegram Personal \u043a\u0430\u043d\u0430\u043b\u0430') transport\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_with_active_subscription` channels on profile_info.account_Id = channels.account_Id and transport = 'tgapi'  \n  union all \n\n select distinct profile_info.account_id,\n                    6,\n                  IFNULL(transport,'\u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0412\u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0435 \u043a\u0430\u043d\u0430\u043b\u0430') transport\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_with_active_subscription` channels on profile_info.account_Id = channels.account_Id \n                                                                                                    and transport = 'vk'\n                                                                                                    and (\n                                                                                                       (tariff = 'free' and paid_At is null) \n                                                                                                       or\n                                                                                                       (tariff != 'free' and paid_At is not null)\n                                                                                                       )\n\n  union all\n\n\n select distinct profile_info.account_id,\n                    7,\n                  IFNULL(transport,'\u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e Waba \u043a\u0430\u043d\u0430\u043b\u0430') transport\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_with_active_subscription` channels on profile_info.account_Id = channels.account_Id and transport in ('waba','wapi') and paid_At is not null \n\nunion all\n\n select distinct profile_info.account_id,\n                    8,\n                  IFNULL(transport,'\u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e Whatsapp Web \u043a\u0430\u043d\u0430\u043b\u0430') transport\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_with_active_subscription` channels on profile_info.account_Id = channels.account_Id and transport = 'whatsapp' and paid_At is not null \nunion all\n\n select distinct profile_info.account_id,\n                    9,\n                  IFNULL(transport,'\u041d\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e Viber \u043a\u0430\u043d\u0430\u043b\u0430') transport\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_with_active_subscription` channels on profile_info.account_Id = channels.account_Id and transport = 'viber' and paid_At is not null \n\n\norder by account_Id,transport_order_number", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_with_subscription_groupped_by_accounts_transport`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:13.202990Z", "completed_at": "2025-05-21T12:31:13.211341Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:13.291335Z", "completed_at": "2025-05-21T12:31:13.291344Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2658700942993164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_groupped_by_accounts_transport", "compiled": true, "compiled_code": "  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043a\u0430\u043d\u0430\u043b\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443 \u0438 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0443\nselect distinct profile_info.account_id,                                -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n                    1 as transport_order_number,                        -- \u041f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0430\u043d\u0430\u043b\u0430\n                  IFNULL(transport,'\u041d\u0435 \u0431\u044b\u043b\u043e \u0410\u0432\u0438\u0442\u043e \u043a\u0430\u043d\u0430\u043b\u0430') transport    -- \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442 \u043a\u0430\u043d\u0430\u043b\u0430\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary` channels on profile_info.account_Id = channels.account_Id and transport = 'avito' and deleted = false\n  \n\n  union all\n  \n  select distinct profile_info.account_id,\n                    3,\n                  IFNULL(transport,'\u041d\u0435 \u0431\u044b\u043b\u043e Instagram \u043a\u0430\u043d\u0430\u043b\u0430') transport\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary` channels on profile_info.account_Id = channels.account_Id and transport = 'instagram' and deleted = false\n\nunion all\n\n select distinct profile_info.account_id,\n                    4,\n                  IFNULL(transport,'\u041d\u0435 \u0431\u044b\u043b\u043e Telegram Bot \u043a\u0430\u043d\u0430\u043b\u0430') transport\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary` channels on profile_info.account_Id = channels.account_Id and transport = 'telegram' and deleted = false\n\nunion all\n\n select distinct profile_info.account_id,\n                    5,\n                  IFNULL(transport,'\u041d\u0435 \u0431\u044b\u043b\u043e Telegram Personal \u043a\u0430\u043d\u0430\u043b\u0430') transport\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary` channels on profile_info.account_Id = channels.account_Id and transport = 'tgapi' and deleted = false\n\n  union all \n\n select distinct profile_info.account_id,\n                    6,\n                  IFNULL(transport,'\u041d\u0435 \u0431\u044b\u043b\u043e \u0412\u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0435 \u043a\u0430\u043d\u0430\u043b\u0430') transport\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary` channels on profile_info.account_Id = channels.account_Id and transport = 'vk' and deleted = false\n\n  union all\n\n select distinct profile_info.account_id,\n                    7,\n                  IFNULL(transport,'\u041d\u0435 \u0431\u044b\u043b\u043e Waba \u043a\u0430\u043d\u0430\u043b\u0430') transport\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary` channels on profile_info.account_Id = channels.account_Id and transport in ('waba','wapi') and deleted = false\n\nunion all\n\n select distinct profile_info.account_id,\n                    8,\n                  IFNULL(transport,'\u041d\u0435 \u0431\u044b\u043b\u043e Whatsapp Web \u043a\u0430\u043d\u0430\u043b\u0430') transport\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary` channels on profile_info.account_Id = channels.account_Id and transport = 'whatsapp' and deleted = false\n\nunion all\n\n select distinct profile_info.account_id,\n                    9,\n                  IFNULL(transport,'\u041d\u0435 \u0431\u044b\u043b\u043e Viber \u043a\u0430\u043d\u0430\u043b\u0430') transport\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n  left join `dwh-wazzup`.`dbt_nbespalov`.`int_channels__not_temporary` channels on profile_info.account_Id = channels.account_Id and transport = 'viber' and deleted = false", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_groupped_by_accounts_transport`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:13.291742Z", "completed_at": "2025-05-21T12:31:13.413884Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:13.417306Z", "completed_at": "2025-05-21T12:31:13.417316Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2526538372039795, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_waba_balance_by_spending_by_month", "compiled": true, "compiled_code": "WITH  waba_transactions AS (\n                                SELECT date_trunc(waba_transactions.transaction_date, month) AS paid_month\n                                     , waba_transactions.subscription_id\n                                     , waba_transactions.currency\n                                     , deleted_at\n                                     , rur                       \n                                     , amount\n                                     ,  first_value(waba_transactions.currency) over (partition by waba_transactions.subscription_id,date_trunc(waba_transactions.transaction_date, month) order by id desc) AS last_currency_of_the_month\n                                FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_transactions` waba_transactions\n                                    LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_sessions` waba_sessions\n                                ON waba_sessions.transaction_id = waba_transactions.id\n                                    LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billing_packages ON billing_packages.guid=waba_transactions.subscription_id\n                                    LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates\n                                    ON exchange_rates.currency=waba_transactions.currency AND exchange_rates.data=waba_transactions.transaction_date\n                                    LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deleted_from_eventLogs` deleted ON deleted.subscription_id=waba_transactions.subscription_id\n                                WHERE waba_sessions.state IS DISTINCT FROM 'canceled'\n                                    AND amount!=0\n                                    AND waba_transactions.subscription_id IS DISTINCT FROM '57bf9315-afcb-4421-a18f-b053097dec27'\n                                    AND NOT EXISTS\n                                    (SELECT account_id\n                                    FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` partner_type_and_account_type\n                                    WHERE billing_packages.account_id=partner_type_and_account_type.account_id AND account_type='employee')\n                                    AND NOT EXISTS\n                                    (SELECT account_id\n                                    FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n                                    WHERE is_employee IS TRUE\n                                    AND profile_info.account_id = billing_packages.account_id\n                                    )\n                                \n                            )\n    ,amount_balance_by_month AS (\n                               SELECT paid_month\n                                     , last_currency_of_the_month\n                                     , waba_transactions.subscription_id\n                                     , waba_transactions.currency\n                                     , max(date_trunc(deleted_at, month))                    AS deleted_month\n                                     , sum(amount * coalesce(rur, 1))                        AS sum_in_rubles\n                                     , sum(amount)                                           AS original_sum\n                                FROM  waba_transactions\n                                GROUP BY 1, 2, 3, 4\n                                )\n      , balance_by_month AS (\n                             SELECT *\n                                     , sum(sum_in_rubles) OVER (PARTITION BY subscription_id, currency ORDER BY paid_month ASC) AS balance\n                                     , first_value(paid_month) over (partition by subscription_id,last_currency_of_the_month order by paid_month desc) as  last_month_for_currency\n                                     , first_value(last_currency_of_the_month) over (partition by subscription_id order by paid_month desc) as  last_currency\n                             FROM amount_balance_by_month\n                           )\n      , calendar_subscription_id AS (\n                                     SELECT DISTINCT subscription_id \n                                                     , month \n                                                     , last_currency_of_the_month\n                                     FROM balance_by_month\n                                         CROSS JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_months`\n                                     WHERE MONTH >=paid_month\n                                       AND MONTH <=date_trunc(CURRENT_DATE, MONTH)\n                                       AND (MONTH<deleted_month\n                                        OR deleted_month IS NULL)\n                                        and (month <= last_month_for_currency or last_currency = last_currency_of_the_month) \n                                )\n      , calendar_with_currency_data AS (\n                                        SELECT calendar_subscription_id.* \n                                               , balance\n                                               , deleted_month\n                                               , first_value(coalesce(balance,0)) over (partition by calendar_subscription_id.subscription_id,month order by coalesce(balance,0) desc ) AS correct_balance\n                                        FROM calendar_subscription_id\n                                            LEFT JOIN balance_by_month\n                                                    ON balance_by_month.paid_month = calendar_subscription_id.month\n                                                    AND balance_by_month.subscription_id = calendar_subscription_id.subscription_id\n                                                    AND balance_by_month.last_currency_of_the_month = calendar_subscription_id.last_currency_of_the_month\n                                        WHERE currency = calendar_subscription_id.last_currency_of_the_month or currency is null           \n                                )\n      , calendar_to_fillna AS (\n                                SELECT *\n                                     , sum(CASE WHEN balance IS NOT NULL THEN 1 ELSE 0 END) OVER (PARTITION BY subscription_id ORDER BY month ASC) AS r_close\n                                FROM calendar_with_currency_data\n                                where coalesce(balance,0) = correct_balance\n                                )\n      , calendar_filled_na AS (\n                                SELECT *\n                                     , first_value(balance) OVER (PARTITION BY subscription_id, r_close ORDER BY month ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS balance_filled\n                                FROM calendar_to_fillna\n                                )\n                                \n-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u043e\u0431\u0449\u0438\u043c \u0431\u0430\u043b\u0430\u043d\u0441\u043e\u043c WABA \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c\nSELECT month                                 -- \u041c\u0435\u0441\u044f\u0446\n     , last_currency_of_the_month AS currency\n     , sum(balance_filled)        AS balance -- \u0411\u0430\u043b\u0430\u043d\u0441 \u043d\u0430 \u043a\u043e\u043d\u0435\u0446 \u043c\u0435\u0441\u044f\u0446\u0430\nFROM calendar_filled_na\nWHERE balance_filled > 0\nGROUP BY 1, 2", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_waba_balance_by_spending_by_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:13.458175Z", "completed_at": "2025-05-21T12:31:13.470080Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:13.475025Z", "completed_at": "2025-05-21T12:31:13.475033Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10088205337524414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_waba_balance_end_of_month", "compiled": true, "compiled_code": "WITH transaction_currency AS (\n                             SELECT *\n                             FROM `dwh-wazzup`.`dbt_nbespalov`.`int_channels_waba_currency_by_each_month`\n                             ),\n\n     balance_data AS (\n                             SELECT date_sub(date_trunc(billingpackages_waba._ibk, month),\n                                             INTERVAL 1 MONTH) AS balance_month\n                                  , balance\n                                  , balance * coalesce(rur, 1) AS balance_sum_in_rubles\n                             FROM `dwh-wazzup`.`wazzup`.`billingPackages_waba` billingPackages_waba\n                                 LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates\n                             ON exchange_rates.currency=billingPackages_waba.account_currency AND exchange_rates.data=last_day(date_sub(date_trunc(billingPackages_waba._ibk, MONTH), INTERVAL 1 MONTH))\n                                 INNER JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billing_packages\n                                 ON billing_packages.guid=billingPackages_waba.guid\n                             WHERE billing_packages.guid IS DISTINCT\n                             FROM '57bf9315-afcb-4421-a18f-b053097dec27'\n                                 AND billingPackages_waba.state!='deleted'\n                                 AND balance>0\n                                 AND NOT EXISTS\n                                 (SELECT account_id\n                                 FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` partner_type_and_account_type\n                                 WHERE billing_packages.account_id=partner_type_and_account_type.account_id AND account_type='employee')\n                                 AND NOT EXISTS\n                                 (SELECT account_id\n                                 FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n                                 WHERE is_employee IS TRUE\n                                 AND profile_info.account_id = billing_packages.account_id\n                                 )\n                             )\n\n-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u043e\u0431\u0449\u0438\u043c \u0431\u0430\u043b\u0430\u043d\u0441\u043e\u043c WABA \u043d\u0430 \u043a\u043e\u043d\u0435\u0446 \u043c\u0435\u0441\u044f\u0446\u0430\nSELECT balance_month                                       -- \u041c\u0435\u0441\u044f\u0446\n     , sum(balance)               AS balance               -- \u041e\u0431\u0449\u0438\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u043d\u0430 \u043a\u043e\u043d\u0435\u0446 \u043c\u0435\u0441\u044f\u0446\u0430\n     , sum(balance_sum_in_rubles) AS balance_sum_in_rubles -- \u041e\u0431\u0449\u0438\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u043d\u0430 \u043a\u043e\u043d\u0435\u0446 \u043c\u0435\u0441\u044f\u0446\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\nFROM balance_data\nGROUP BY 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_waba_balance_end_of_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:13.461777Z", "completed_at": "2025-05-21T12:31:13.472708Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:13.475689Z", "completed_at": "2025-05-21T12:31:13.475699Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.1394481658935547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_waba_balance_end_of_the_month_gupshup", "compiled": true, "compiled_code": "WITH service_subscription_ids as (\n    SELECT waba_subscription_id\n    FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_transactions_gupshup` wt\n    JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` bp on wt.subscription_id = bp.guid\n    JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` api on bp.account_id = api.account_id\n    AND is_employee\n),\n    transactions_calculation AS (\n                                  SELECT waba_subscription_id\n                                        , cast(wtg.date_at AS date)                                                                                          AS transaction_date\n                                        , wtg.currency\n                                        , sum(amount * coalesce(rur, 1)) OVER (PARTITION BY waba_subscription_id,wtg.currency ORDER BY id)                   AS cum_sum_in_rubles\n                                        , sum(amount) OVER (PARTITION BY waba_subscription_id,wtg.currency ORDER BY id)                                      AS cum_original_sum\n                                        , first_value(wtg.currency) OVER (PARTITION BY waba_subscription_id,cast(wtg.date_at AS date) ORDER BY id DESC)      AS last_currency_of_the_day\n                                        , first_value(wtg.currency) OVER (PARTITION BY waba_subscription_id,date_trunc(wtg.date_at, month) ORDER BY id DESC) AS last_currency_of_the_month\n                                        , id\n                                  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_transactions_gupshup` wtg\n                                      LEFT JOIN dwh-wazzup.dbt_prod.int_payments_exchange_rates_unpivoted exchange_rates_unpivoted\n                                                 ON exchange_rates_unpivoted._ibk = CAST (wtg.date_at AS DATE)\n                                                 AND exchange_rates_unpivoted.currency = wtg.currency\n                                  WHERE NOT EXISTS (\n                                            SELECT 1\n                                            FROM service_subscription_ids\n                                            WHERE service_subscription_ids.waba_subscription_id = wtg.waba_subscription_id\n                                  )\n                                  \n                                 ),\n    transactions_per_day AS (\n                              SELECT DISTINCT waba_subscription_id\n                                             , transaction_date\n                                             , currency\n                                             , last_currency_of_the_day\n                                             , last_currency_of_the_month\n                                             , first_value(cum_sum_in_rubles) OVER (PARTITION BY waba_subscription_id,currency,transaction_date ORDER BY id DESC) AS cum_sum_in_rubles\n                                             , first_value(cum_original_sum)  OVER (PARTITION BY waba_subscription_id,currency,transaction_date ORDER BY id DESC) AS cum_original_sum\n                              FROM transactions_calculation tc\n                            ),\n    defining_lead_date AS (\n                           SELECT *\n                                  , lead(transaction_date, 1, current_date) OVER (PARTITION BY waba_subscription_id,currency ORDER BY transaction_date) AS next_date\n                           FROM transactions_per_day\n                         ),\n    creating_date_intervals AS (\n                                SELECT *\n                                FROM defining_lead_date\n                                JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_days` sd ON sd.date >= transaction_date AND sd.date < next_date\n                               ),\n    defining_last_state_of_the_month AS (\n                                          SELECT   creating_date_intervals.date AS balance_date\n                                                 , cum_sum_in_rubles            AS balance_in_rubles\n                                                 , cum_original_sum             AS balance_in_original_currency\n                                                 , last_currency_of_the_month   AS currency\n                                                 , waba_subscription_id         AS waba_subscription_id \n                                                 , row_number() over (partition by date_trunc(creating_date_intervals.date,month),waba_subscription_id order by date desc) AS rn\n                                          FROM creating_date_intervals\n                                              JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_waba_subscription_gupshup` ws ON creating_date_intervals.waba_subscription_id = ws.id\n                                          WHERE creating_date_intervals.currency = last_currency_of_the_month\n                                                  AND (date < CAST(deleted_at AS DATE)\n                                                          OR deleted_at IS NULL)\n                                         )\nSELECT date_trunc(balance_date,month) AS balance_month\n       , balance_in_rubles\n       , balance_in_original_currency\n       , currency\n       , waba_subscription_id \nFROM defining_last_state_of_the_month\nWHERE rn = 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_waba_balance_end_of_the_month_gupshup`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:13.465163Z", "completed_at": "2025-05-21T12:31:13.473628Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:13.476074Z", "completed_at": "2025-05-21T12:31:13.476082Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.17712998390197754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_integrations_groupped_by_accounts_type", "compiled": true, "compiled_code": "with accounts_info as (\n    Select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`),\n\nspecific_integrations as (\n   select \n        distinct account_id, \n                 case when integration_type like '%amo%' then 'AMO'\n                      when integration_type like  '%bitrix%' then 'Bitrix24'\n                      when integration_type like  '%hubspot%' then 'Hubspot'\n                      when integration_type like '%zoho%' then 'Zoho'\n                      when integration_type like '%pipe%' then 'Pipedrive'  -- \u0442\u0438\u043f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0435\u0449\u0435 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0432\u0440\u043e\u0434\u0435\n                      when integration_type like '%api%' then 'API'\n                  end as integration_type\n   from `dwh-wazzup`.`dbt_nbespalov`.`int_integrations_with_type_with_pipedrive`\n   where    integration_type like '%amo%'    \n             or integration_type like  '%bitrix%' \n             or integration_type like  '%hubspot%'\n             or integration_type like '%zoho%'  \n             or integration_type like '%pipe%'  \n             or integration_type like '%api%'\n   )    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u0430\u043a\u043e\u0439 \u0442\u0438\u043f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n--account_and_integrations as (\n    select profile_info.account_id, -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n           IFNULL(integration_type,'\u041d\u0435 \u0431\u044b\u043b\u043e \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438') as integration_filter  -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0431\u044b\u043b\u0430. \u0415\u0441\u043b\u0438 \u043d\u0435 \u0431\u044b\u043b\u043e - '\u041d\u0435 \u0431\u044b\u043b\u043e \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438'\n    from accounts_info profile_info\n    left join specific_integrations spi on profile_info.account_id = spi.account_id\n   -- where profile_info.account_id = 72504447\n/*\nselect account_id\n        ,MAX(IF(integration_type = 'AMO', true, false)) as had_amo\n        ,MAX(IF(integration_type = 'Bitrix24', true, false)) as had_bitrix\n        ,MAX(IF(integration_type = 'Hubspot', true, false)) as had_hubspot\n        ,MAX(IF(integration_type = 'Zoho',true, false)) as had_zoho\n        ,MAX(IF(integration_type = 'Pipedrive', true, false)) as had_pipedrive\n        ,MAX(IF(integration_type = 'API', true, false)) as had_api\nFrom account_and_integrations\ngroup by account_id\norder by account_id*/", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_integrations_groupped_by_accounts_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:13.467250Z", "completed_at": "2025-05-21T12:31:13.474141Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:13.477109Z", "completed_at": "2025-05-21T12:31:13.477118Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.21527981758117676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_with_account_and_partner_type", "compiled": true, "compiled_code": "with payments_all as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_all_payments_union`\n),\n\npartner_type_and_account_type as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated`\n),\n\nprofile_info as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n),\n\npayments as (select payments_all.account_id,    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    payments_all.sum_in_rubles, -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    payments_all.sum_in_USD,    -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445\n    original_sum,               -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    payments_all.paid_date,     -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    payments_all.currency,      -- \u0412\u0430\u043b\u044e\u0442\u0430\n    payments_all.data_source,   -- \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043e\u043f\u043b\u0430\u0442\u044b\n    partner_type_and_account_type.partner_id,   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    partner_type_and_account_type.refparent_id, -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0440\u0435\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    partner_type,               -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    account_type,               -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    start_occured_at,           -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    start_date,                 -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    partner_register_date       -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    from payments_all\n    left join  partner_type_and_account_type \n    on payments_all.account_id=partner_type_and_account_type.account_id\n    and payments_all.paid_date>=partner_type_and_account_type.start_date\n    and payments_all.paid_date<=partner_type_and_account_type.end_date\n    left join profile_info\n    on profile_info.account_id=partner_type_and_account_type.partner_id\n    where original_sum!=0),\n\npayments_to_deduplicate as (\n\nselect *, row_number() over (partition by account_id, paid_date, currency, data_source order by start_date desc) as rn -- \u0421\u0430\u043c\u044b\u0435 \u043f\u043e\u0437\u0434\u043d\u0438\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u0438 \u043f\u043e account_id, paid_date, currency, data_source\nfrom payments\n),\n\npayments_deduplicated as (\n  select *, date_trunc(paid_date, month) as paid_month -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n  from payments_to_deduplicate\n  where rn=1\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u0441 \u043d\u043e\u043c\u0435\u0440\u0430\u043c\u0438 \u0430\u043a\u043a\u0430\u043d\u0442\u043e\u0432 \u0438 \u0442\u0438\u043f\u043e\u043c \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\nselect * from payments_deduplicated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_with_account_and_partner_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:13.470536Z", "completed_at": "2025-05-21T12:31:13.476751Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:13.594763Z", "completed_at": "2025-05-21T12:31:13.594775Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2577333450317383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_with_account_and_partner_type_with_bills_date", "compiled": true, "compiled_code": "with payments_all as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_all_payments_union_bills_with_paid_in_wazzup`\n),\n\npartner_type_and_account_type as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated`\n),\n\nprofile_info as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n),\n\npayments as (select payments_all.account_id,    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    payments_all.sum_in_rubles,     -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    payments_all.sum_in_USD,        -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445\n    original_sum,                   -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    payments_all.paid_date,         -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    payments_all.currency,          -- \u0412\u0430\u043b\u044e\u0442\u0430\n    payments_all.data_source,       -- \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043e\u043f\u043b\u0430\u0442\u044b\n    partner_type_and_account_type.partner_id,   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    partner_type_and_account_type.refparent_id, -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0440\u0435\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    partner_type,                   -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    case when profile_info.is_employee then 'employee' else account_type end as account_type,   -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    start_occured_at,               -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    start_date,                     -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    partner_register_date           -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    from payments_all\n    left join  partner_type_and_account_type \n    on payments_all.account_id=partner_type_and_account_type.account_id\n    and payments_all.paid_date>=partner_type_and_account_type.start_date\n    and payments_all.paid_date<=partner_type_and_account_type.end_date\n    left join profile_info\n    on profile_info.account_id=partner_type_and_account_type.partner_id\n    where original_sum!=0),\n\npayments_to_deduplicate as (\n\nselect *, row_number() over (partition by account_id, paid_date, currency, data_source order by start_date desc) as rn -- \u0421\u0430\u043c\u044b\u0435 \u043f\u043e\u0437\u0434\u043d\u0438\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u0438 \u043f\u043e account_id, paid_date, currency, data_source\nfrom payments\n),\n\npayments_deduplicated as (\n  select *, date_trunc(paid_date, month) as paid_month -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n  from payments_to_deduplicate\n  where rn=1\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u043f\u043e \u0431\u0438\u043b\u043b\u0438\u043d\u0433\u0443 \u0441 \u043d\u043e\u043c\u0435\u0440\u0430\u043c\u0438 \u0430\u043a\u043a\u0430\u043d\u0442\u043e\u0432 \u0438 \u0442\u0438\u043f\u043e\u043c \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\nselect * from payments_deduplicated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_with_account_and_partner_type_with_bills_date`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:13.633865Z", "completed_at": "2025-05-21T12:31:13.679203Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:13.682316Z", "completed_at": "2025-05-21T12:31:13.682325Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.25221872329711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscription_info_based_on_first_payment_without_promised_payments_who_paid", "compiled": true, "compiled_code": "with accounts_who_paid as (\n    select account_Id from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_paid_subscription_with_type_and_tariff`   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n),\n  registration_source_who_paid as (\n    select attribution_data.* \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_attribution_data` attribution_data\n    inner join accounts_who_paid who_paid on attribution_data.account_id = who_paid.account_id\n    ),\n\nfirst_subscription_type as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_first_subscription_date_and_type`\n    ),\n\nprofile_info as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n),\n\naccounts_full_info as (\n    select \n            distinct\n            profile_info.account_id,                                            -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n            profile_info.russian_country_name,                                  -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\n            profile_info.currency as account_currency,                          -- \u0412\u0430\u043b\u044e\u0442\u0430\n            profile_info.type as account_type,                                  -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n            registration_source_who_paid.registration_date,                     -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n            registration_source_who_paid.utm_source,                            -- \u041a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043e\u0442\u043a\u0443\u0434\u0430 \u043f\u0440\u0438\u0448\u0435\u043b \u043a\u043b\u0438\u0435\u043d\u0442\n            registration_source_who_paid.utm_medium,                            -- \u0422\u0438\u043f \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \u043e\u0442\u043a\u0443\u0434\u0430 \u043f\u0440\u0438\u0448\u0435\u043b \u043a\u043b\u0438\u0435\u043d\u0442\n            registration_source_who_paid.utm_campaign,                          -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438\u043b\u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u043a\u043b\u0430\u043c\u044b\n            registration_source_who_paid.utm_term,                              -- \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0438\u0448\u043b\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u044b\n            registration_source_who_paid.utm_content,                           -- \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043f\u043e\u0445\u043e\u0436\u0438\u0445 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439 \u0438\u043b\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u043d\u0443\u0442\u0440\u0438 \u043e\u0434\u043d\u043e\u0439 \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u0438 (\u0431\u0430\u043d\u043d\u0435\u0440\u043e\u0432, \u043a\u043d\u043e\u043f\u043e\u043a, \u0442\u0435\u043a\u0441\u0442\u043e\u0432)\n            registration_source_who_paid.registration_source_agg_current,       -- \u0422\u0438\u043f \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n            registration_source_who_paid.registration_source_current,           -- \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n            registration_source_who_paid.account_registration_type_current,     -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d\u043d\u044b\u0439 \u043f\u043e \u0438\u0442\u043e\u0433\u0443 \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u0438\n            tariff,                                                             -- \u0422\u0430\u0440\u0438\u0444 \u043a\u0443\u043f\u043b\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n            period,                                                             -- \u041f\u0435\u0440\u0438\u043e\u0434 \u043a\u0443\u043f\u043b\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n            profile_info.is_employee                                            -- \u042d\u0442\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430?\n    from registration_source_who_paid\n    left join first_subscription_type\n    on registration_source_who_paid.account_id=first_subscription_type.account_id\n    left join profile_info\n    on registration_source_who_paid.account_id=profile_info.account_id\n),\nall_subscriptions as (\n    select int_subscriptions_deduplicated_without_promised_date_combined_intervals.* from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_without_promised_date_combined_intervals` int_subscriptions_deduplicated_without_promised_date_combined_intervals\n    inner join accounts_who_paid who_paid on int_subscriptions_deduplicated_without_promised_date_combined_intervals.account_id = who_paid.account_id\n\n),\nsubscriptions_data as (\n  select all_subscriptions.*,\n         accounts_full_info.* except(account_id),\n         first_value(subscription_start) over(partition by all_subscriptions.account_id order by subscription_start) as first_subscription_start,\n         first_value(subscription_end) over(partition by all_subscriptions.account_id order by subscription_end desc) as last_subscription_end,\n  from all_subscriptions \n  left join accounts_full_info on all_subscriptions.account_id = accounts_full_info.account_id \n)                   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043e\u043a\u0443\u043f\u043e\u043a \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0441 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0442\u043e\u043c, \u043e\u0442\u043a\u0443\u0434\u0430 \u043f\u0440\u0438\u0448\u0435\u043b \u043a\u043b\u0438\u0435\u043d\u0442 (\u0431\u0435\u0437 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439)\nselect *except(is_employee)\nfrom subscriptions_data\nwhere is_employee is false", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscription_info_based_on_first_payment_without_promised_payments_who_paid`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:13.686404Z", "completed_at": "2025-05-21T12:31:13.732325Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:13.736198Z", "completed_at": "2025-05-21T12:31:13.736208Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.09801101684570312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_last_end_date_without_trials_and_promised_payments_with_tariff_and_transport", "compiled": true, "compiled_code": "select paid_intervals.*,   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 (\u0431\u0435\u0437 \u0442\u0440\u0438\u0430\u043b\u043e\u0432 \u0438 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439)\n        currency, -- \u0412\u0430\u043b\u044e\u0442\u0430\n       lag(subscription_end, 1) over ( partition by paid_intervals.account_id, paid_intervals.tariff, paid_intervals.transport order by subscription_end asc) as last_subscription_end   -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nfrom  `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_without_promised_date_combined_intervals_with_tariff_and_transport` paid_intervals\njoin `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` accounts on paid_intervals.account_Id = accounts.account_Id \nwhere is_employee is false", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_without_trials_and_promised_payments_with_tariff_and_transport`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:13.684237Z", "completed_at": "2025-05-21T12:31:13.732709Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:13.737683Z", "completed_at": "2025-05-21T12:31:13.737691Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.13895535469055176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_combined_by_type_all_subscriptions_free_trial_paid", "compiled": true, "compiled_code": "\n\nwith deduped_intervals as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_by_type_all_subscriptions_free_trial_paid`\n),\n\ndeduped_intervals_with_flag as (\n    SELECT *,\n    start_date != IFNULL(LAG(end_date) OVER (PARTITION BY account_id, type ORDER BY start_date), start_date) as flag\n    FROM deduped_intervals),\n\ndeduped_intervals_with_group as (\n    SELECT *, \n    count(CASE WHEN flag THEN 1 END) OVER (PARTITION BY account_id, type ORDER BY start_date) grp\n    from deduped_intervals_with_flag\n),\n\ncombined_intervals AS (\n  SELECT account_id, type,  MIN(start_date) subscription_start, MAX(end_date) subscription_end\n  FROM deduped_intervals_with_group\n  GROUP BY account_id, grp, type\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0435\u0451 \u0434\u0430\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0441 \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u043c\u0438 (\u0442\u043e\u043b\u044c\u043a\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0435)\nselect combined_intervals.* from combined_intervals\ninner join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n            on profile_info.account_id=combined_intervals.account_id\nwhere profile_info.is_employee is false\nand profile_info.type NOT IN ('partner-demo', 'child-postpay')", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_combined_by_type_all_subscriptions_free_trial_paid`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:13.727231Z", "completed_at": "2025-05-21T12:31:13.736764Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:13.778034Z", "completed_at": "2025-05-21T12:31:13.778045Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.18088483810424805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_more_than_2_types_1_month_registration", "compiled": true, "compiled_code": "with combined_intervals as ( -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e\u0431 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    select account_id,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    subscription_id,    -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    subscription_start  -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_combined_intervals`\n),\n\nbillingPackages as ( -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430\u0445\n    select guid,                -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \n    type as subscription_type   -- \u0422\u0438\u043f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` \n), \n\nprofile_info as (   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e\u0431 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0435\n    select account_id,          -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    register_date               -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n)\nselect combined_intervals.account_id as accounts_with_2_or_more_subscription_type   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c\u0438, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 2 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432\nfrom combined_intervals inner join billingPackages\non combined_intervals.subscription_id=billingPackages.guid\ninner join  profile_info\non profile_info.account_id=combined_intervals.account_id\nwhere combined_intervals.subscription_start<=date_add(profile_info.register_date, interval 1 month)\ngroup by 1 \nhaving count (distinct subscription_type)>=2", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_more_than_2_types_1_month_registration`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:13.729719Z", "completed_at": "2025-05-21T12:31:13.737140Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:13.778542Z", "completed_at": "2025-05-21T12:31:13.778552Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.21897602081298828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_sum_in_first_month", "compiled": true, "compiled_code": "with subscription_sum as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_and_converted_currency`\n),\n\nsubscription_info as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_updates__corect_date_and_filledna_tarif_period_quantity`\n),\n\nprofile_info as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n)\n -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0441\u0443\u043c\u043c\u043e\u0439 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. \u0414\u043b\u0438\u043d\u043d\u044b\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 \u0441\u0432\u043e\u0439 \u043f\u0435\u0440\u0438\u043e\u0434\nSELECT subscription_sum.account_id,                                             -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nsum(sum_in_rubles/subscription_info.period_new) as sum_in_rubles_by_period,     -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nsum(sum_in_rubles) as sum_in_rubles                                             -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\nFROM subscription_sum inner join  subscription_info\non subscription_sum.guid=subscription_info.guid\ninner join profile_info on profile_info.account_id=subscription_sum.account_id\nwhere subscription_sum.start_date<=date_add(register_date, interval 1 month)\nand period_new is not null\ngroup by 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_sum_in_first_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:13.734247Z", "completed_at": "2025-05-21T12:31:13.777558Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:13.819130Z", "completed_at": "2025-05-21T12:31:13.819140Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2655365467071533, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_sum_three_month", "compiled": true, "compiled_code": "with subscription_sum as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_and_converted_currency`\n),\n\nsubscription_info as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_updates__corect_date_and_filledna_tarif_period_quantity`\n),\n\nprofile_info as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n)\n                        -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0441\u0443\u043c\u043c\u043e\u0439 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u043f\u0435\u0440\u0432\u044b\u0435 3 \u043c\u0435\u0441\u044f\u0446\u0430 \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. \u0414\u043b\u0438\u043d\u043d\u044b\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 \u0441\u0432\u043e\u0439 \u043f\u0435\u0440\u0438\u043e\u0434\nSELECT subscription_sum.account_id,                                             -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nsum(sum_in_rubles/subscription_info.period_new) as sum_in_rubles_by_period,     -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nsum(sum_in_rubles) as sum_in_rubles                                             -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\nFROM subscription_sum inner join  subscription_info\non subscription_sum.guid=subscription_info.guid\ninner join profile_info on profile_info.account_id=subscription_sum.account_id\nwhere subscription_sum.start_date<=date_add(register_date, interval 3 month)\nand period_new is not null\ngroup by 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_sum_three_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:13.900841Z", "completed_at": "2025-05-21T12:31:13.952846Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:13.958375Z", "completed_at": "2025-05-21T12:31:13.958387Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2625725269317627, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_waba_with_sum_and_currency", "compiled": true, "compiled_code": "with payments_all as (\n    select (case when partner_account_id is not null then partner_account_Id else account_id end) as account_id,\n    wapi_original_sum,                              -- \u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f WABA\n    wapi_transactions_in_rubles,                    -- \u0422\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    wapi_sum_in_USD,                                -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f WABA \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445\n    paid_at_billing_date,                           -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b\n    currency                                        -- \u0412\u0430\u043b\u044e\u0442\u0430\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_and_converted_currency_billing_date`\n    where wapi_original_sum!=0\n), -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u043f\u043e WABA c \u0441\u0443\u043c\u043c\u043e\u0439 != 0\n\npayments_all_groupped_by_account_and_payment_date as (\n    select account_id,                              -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    paid_at_billing_date,                           -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b\n    currency,                                       -- \u0412\u0430\u043b\u044e\u0442\u0430\n    sum(wapi_original_sum) as wapi_original_sum,    -- \u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f WABA\n    sum(wapi_transactions_in_rubles) as wapi_transactions_in_rubles,    -- \u0422\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    sum(wapi_sum_in_USD) as wapi_sum_in_USD         -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f WABA \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445\n    from payments_all\n    group by 1,2,3\n), -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u043f\u043e WABA \u0441 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c, \u0434\u0430\u0442\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u0430 \u0438 \u0432\u0430\u043b\u044e\u0442\u0435\n\npartner_type_and_account_type as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated`\n),  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0435 \u0438 \u0435\u0433\u043e \u0441\u043c\u0435\u043d\u0435\n\nprofile_info as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n), -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e\u0431 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0435\n\npayments as (select payments_all.account_id,\n    wapi_original_sum as original_sum,              -- \u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f WABA\n    wapi_sum_in_USD as wapi_sum_in_USD,             -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f WABA \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445\n    payments_all.paid_at_billing_date,              -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    wapi_transactions_in_rubles\tas sum_in_rubles,   -- \u0422\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    payments_all.currency,                          -- \u0412\u0430\u043b\u044e\u0442\u0430\n    partner_type_and_account_type.partner_id,       -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    partner_type_and_account_type.refparent_id,     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0440\u0435\u0444. \u043f\u0430\u043f\u044b\n    partner_type,                                   -- \u0422\u0438\u043f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430: partner, tech-partner, standart, tech-partner-postpay \u0438\u043b\u0438 null\n    account_type,                                   -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430: child-postpay, tech-partner, standart, tech-partner-postpay, employee, partner \u0438\u043b\u0438 null\n    start_occured_at,                               -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0437\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c\n    start_date,                                     -- \u0414\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0437\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c\n    partner_register_date                           -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    from payments_all_groupped_by_account_and_payment_date payments_all\n    left join  partner_type_and_account_type \n    on payments_all.account_id=partner_type_and_account_type.account_id\n    and payments_all.paid_at_billing_date>=partner_type_and_account_type.start_date\n    and payments_all.paid_at_billing_date<=partner_type_and_account_type.end_date\n    left join profile_info\n    on profile_info.account_id=partner_type_and_account_type.partner_id),\n\npayments_to_deduplicate as (\n\nselect *, \nrank() over (partition by account_id, paid_at_billing_date, currency order by start_date desc) as rn  -- \u0420\u0430\u043d\u0433 \u043f\u0430\u0440\u0442\u0438\u0430\u0446\u0438\u0438\nfrom payments\n),\n\npayments_deduplicated as (\n  select *, date_trunc(paid_at_billing_date, month) as paid_month from payments_to_deduplicate        -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n  where rn=1\n)\n-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a WABA \u0441 \u0441\u0443\u043c\u043c\u043e\u0439, \u0432\u0430\u043b\u044e\u0442\u043e\u0439 \u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0435\nselect * from payments_deduplicated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_waba_with_sum_and_currency`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:13.955622Z", "completed_at": "2025-05-21T12:31:14.001478Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.008390Z", "completed_at": "2025-05-21T12:31:14.008400Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.15047574043273926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_with_sum_in_rubles_partner_refparent", "compiled": true, "compiled_code": "with payments_all as (\n    select account_id, \n    start_date as paid_date, \n    currency,\n    (case when partner_account_id is not null then 'partner_paid'\n    else 'client_paid'\n    end) as who_paid,\n    sum(sum_in_rubles) as sum_in_rubles from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_and_converted_currency`\n    group by 1,2,3,4\n),\n\npartner_type_and_account_type as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated`\n),\n\nprofile_info as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n),\n\npayments as (select payments_all.account_id,\n    payments_all.sum_in_rubles,\n    payments_all.paid_date,\n    payments_all.currency,\n    partner_type_and_account_type.partner_id,\n    partner_type_and_account_type.refparent_id,\n    partner_type,\n    account_type,\n    partner_type_and_account_type.start_occured_at,\n    partner_type_and_account_type.start_date,\n    partner_register_date,\n    who_paid\n    from payments_all\n    left join  partner_type_and_account_type \n    on payments_all.account_id=partner_type_and_account_type.account_id\n    and payments_all.paid_date>=partner_type_and_account_type.start_date\n    and payments_all.paid_date<=partner_type_and_account_type.end_date\n    left join profile_info\n    on profile_info.account_id=partner_type_and_account_type.partner_id\n    where sum_in_rubles!=0),\n\npayments_to_deduplicate as (\n\nselect *, row_number() over (partition by account_id, paid_date, currency,who_paid order by start_date desc) as rn  from payments\n),\n\npayments_deduplicated as (\n  select account_id,        -- \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0434\u043e\u0447\u043a\u0438 (\u043a\u043e\u043c\u0443 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430)\n    sum_in_rubles,          -- \u0442\u0440\u0430\u0442\u044b \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    paid_date,              -- \u0434\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    currency,               -- \u0432\u0430\u043b\u044e\u0442\u0430\n    partner_id,             -- \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    refparent_id,           -- \u0440\u0435\u0444\u0435\u0440\u0430\u043b \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    partner_type,           -- \u0442\u0438\u043f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    account_type,           -- \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    start_occured_at,       -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    start_date,             -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    partner_register_date,  -- \u0434\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    who_paid,               -- \u043a\u0442\u043e \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u043b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\n    date_trunc(paid_date, month) as paid_month     -- \u043c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n    from payments_to_deduplicate\n    where rn=1\n),\n\npayments_with_overall_sum as (\n\nselect *, sum(sum_in_rubles) over (partition by partner_id) as sum_in_rubles_for_all_time from payments_deduplicated),\n\n\nsum_distinct as (\n    select distinct partner_id, sum_in_rubles_for_all_time from payments_with_overall_sum\n    where sum_in_rubles!=0\n),\n\npartner_with_percentile_distinct as (\n\nselect partner_id, PERCENTILE_CONT(sum_in_rubles_for_all_time, 0.99) OVER() as percentile_99,   -- 99% \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c \u043f\u043e \u0442\u0440\u0430\u0442\u0430\u043c \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\nPERCENTILE_CONT(sum_in_rubles_for_all_time, 0.50) OVER() as percentile_50,  -- 50% \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c \u043f\u043e \u0442\u0440\u0430\u0442\u0430\u043c \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\nPERCENTILE_CONT(sum_in_rubles_for_all_time, 0.75) OVER() as percentile_75,  -- 75% \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c \u043f\u043e \u0442\u0440\u0430\u0442\u0430\u043c \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\nPERCENTILE_CONT(sum_in_rubles_for_all_time, 0.25) OVER() as percentile_25   -- 25% \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c \u043f\u043e \u0442\u0440\u0430\u0442\u0430\u043c \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\n from sum_distinct),\n sum_in_rubles_with_percentile as (\n\nselect payments_with_overall_sum.*, percentile_25, percentile_50, percentile_75, percentile_99, \n(case when sum_in_rubles_for_all_time<=percentile_25 then 'percentile_25'\nwhen sum_in_rubles_for_all_time<=percentile_50 then 'percentile_50'\nwhen sum_in_rubles_for_all_time<=percentile_75 then 'percentile_75'\nwhen sum_in_rubles_for_all_time<=percentile_99 then 'percentile_99'\nelse 'percentile 100'\n end ) as percentile from payments_with_overall_sum \nleft join partner_with_percentile_distinct\non payments_with_overall_sum.partner_id=partner_with_percentile_distinct.partner_id)\n    -- \u0442\u0440\u0430\u0442\u044b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\nselect sum_in_rubles_with_percentile.* \nfrom sum_in_rubles_with_percentile\nwhere not exists (\n    select account_id\n    from profile_info\n    where is_employee\n    and profile_info.account_id = sum_in_rubles_with_percentile.account_id\n)\nand not exists (\n        select account_id\n    from profile_info\n    where is_employee\n    and profile_info.account_id = sum_in_rubles_with_percentile.partner_id\n)\nand not exists (\n    select account_id\n    from profile_info\n    where is_employee\n    and profile_info.account_id = sum_in_rubles_with_percentile.refparent_id\n)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_in_rubles_partner_refparent`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:13.960584Z", "completed_at": "2025-05-21T12:31:14.008776Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.054793Z", "completed_at": "2025-05-21T12:31:14.054802Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.14435720443725586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_accounts_registration_sources", "compiled": true, "compiled_code": "with profile_info as (\n    select account_id\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n    where is_employee\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nselect attribution_data.*, \n        accounts.currency   -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u0441\u0435\u0433\u043e\u0434\u043d\u044f\u0448\u043d\u0438\u0439 \u0434\u0435\u043d\u044c\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_attribution_data` attribution_data\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts\n                        on attribution_data.account_id=accounts.account_id\nwhere account_type='standart'\nand not exists (\n    select account_id\n    from profile_info\n    where profile_info.account_id = attribution_data.account_id\n)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_accounts_registration_sources`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.002500Z", "completed_at": "2025-05-21T12:31:14.013872Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.056368Z", "completed_at": "2025-05-21T12:31:14.056380Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.18471026420593262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_active_accounts_by_days_by_segment", "compiled": true, "compiled_code": "with segments as (\n    select subscription_start as segment_start,\n    subscription_end_with_last_payment_date as segment_end,\n    account_id,\n    segment from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_in_dynamics_combined_intervals_all_segments`\n\n), \n\nclient_types as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_defining_clients_types`\n\n),\n\ndefining_clients_with_segments as (\n    select coalesce(client_types.account_id, segments.account_id) as account_id,                        -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    coalesce((case when subscription_start>=segment_start then subscription_start end), segment_start\n    ) as subscription_start,                    -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438\n    subscription_start as active_period_start,  -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438/\u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\n    coalesce((case when subscription_end<=segment_end then subscription_end end),\n    segment_end)  as subscription_end,          -- \u0414\u0430\u0442\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438\n    subscription_end as active_period_end,      -- \u0414\u0430\u0442\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438/\u0434\u0430\u0442\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\n    segment_start,                              -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\n    segment_end,                                -- \u0414\u0430\u0442\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\n    segment,                                    -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442\n    has_paid                                    -- True - \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\n     from client_types\n    full outer join  segments\n    on segments.account_id=client_types.account_id\n    and segments.segment_start<=client_types.subscription_end\n    where segment is not null and subscription_start is not null),\n\n\ndefining_clients_with_segments_to_deduplicate as (\n    select *, row_number() over (partition by account_id, subscription_start order by segment_start desc) as rn -- \u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0435 \u043f\u043e\u043b\u0435 - \u0434\u043b\u044f \u0434\u0435\u0434\u0443\u043f\u043b\u0438\u043a\u0430\u0446\u0438\u0438\n    from defining_clients_with_segments\n),\n\nsegments_final as (\n    select * from defining_clients_with_segments_to_deduplicate\n    where rn=1\n),\n\nsegments_final_with_date as (\n    select segments_final.*,\n    days.date                   -- \u0414\u0430\u0442\u0430 - \u043f\u043e\u044f\u0432\u044f\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0431\u044b\u043b \u0430\u043a\u0442\u0438\u0432\u0435\u043d \u0432 \u044d\u0442\u043e\u0442 \u0434\u0435\u043d\u044c\n    from segments_final\n    inner join  `dwh-wazzup`.`analytics_tech`.`days` days\n    on days.date>=segments_final.subscription_start and days.date<=subscription_end),\n\nsegments_with_if_new_payments as (\n    select *, \n    first_value(date_trunc(subscription_start,month)) over (partition by account_id order by subscription_start ) as first_subscription_start_month,    -- \u041c\u0435\u0441\u044f\u0446 \u043d\u0430\u0447\u0430\u043b\u0430 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438\n    first_value(subscription_start) over (partition by account_id order by subscription_start ) as first_subscription_start_date                        -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438\n    from segments_final_with_date),\n\nsegment_with_currency as (\nselect segments_with_if_new_payments.*, \ncurrency            -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u0441\u0435\u0433\u043e\u0434\u043d\u044f\u0448\u043d\u0438\u0439 \u0434\u0435\u043d\u044c\nfrom segments_with_if_new_payments\ninner join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\non profile_info.account_id=segments_with_if_new_payments.account_id)\n    -- \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e \u0434\u043d\u044f\u043c. \u0417\u0430\u043f\u0438\u0441\u044c \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432 \u044d\u0442\u043e\u0442 \u0434\u0435\u043d\u044c \u0431\u044b\u043b \u0430\u043a\u0442\u0438\u0432\u0435\u043d. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u0445 https://www.notion.so/687832f855e84aefbb3b5b65c89b8923?pvs=4\nselect * from segment_with_currency", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_active_accounts_by_days_by_segment`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.005572Z", "completed_at": "2025-05-21T12:31:14.014237Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.056915Z", "completed_at": "2025-05-21T12:31:14.056923Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2229626178741455, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_active_paid_subscriptions_type_by_accounts", "compiled": true, "compiled_code": "SELECT profile_info.*, \nstg_billingpackages.period,                     -- \u0422\u0435\u043a\u0443\u0449\u0430\u044f \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u043c\u0435\u0441\u044f\u0446\u0430\u0445\nstg_billingpackages.quantity,                   -- \u0422\u0435\u043a\u0443\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0432 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435. \u041d\u043e, \u0434\u043b\u044f tech-partner-postpay - 10000. \u042d\u0442\u043e \u0431\u044b\u043b\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u0441\u043e\u0437\u043d\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u0434\u043b\u044f ,\u0447\u0442\u043e\u0431\u044b \u0432\u0441\u0435 \u043a\u0430\u043d\u0430\u043b\u044b-\u0434\u043e\u0447\u043a\u0438 tech-partner-postpay \u0431\u044b\u043b\u0438 \u0432 \u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\nstg_billingpackages.tariff,                     -- \u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u0442\u0430\u0440\u0438\u0444 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nstg_billingpackages.guid,                       -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438.\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f Postgress \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0437\u0430\u043f\u0438\u0441\u0438\nstg_billingpackages.type as subscription_type,  -- \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nstg_billingPackages.expires_at                  -- \u0422\u0435\u043a\u0443\u0449\u0430\u044f \u0434\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\ninner join `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` stg_billingpackages on stg_billingpackages.account_id=profile_info.account_id\nwhere paid_at is not null and stg_billingpackages.state='active'  and not is_employee\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0438\u043c \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u043c \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_active_paid_subscriptions_type_by_accounts`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.009247Z", "completed_at": "2025-05-21T12:31:14.055888Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.100728Z", "completed_at": "2025-05-21T12:31:14.100738Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.260237455368042, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_balance_accounts", "compiled": true, "compiled_code": "WITH source_data as (\n  SELECT            -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0432\u0441\u0435\u0445 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \n    CASE WHEN ba.account_id = 28266449 AND currency = 'USD' THEN 60569941 ELSE ba.account_id END AS account_id,     -- Id \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    CASE WHEN ba.account_id = 28266449 THEN 'RUR'\n    ELSE first_value(currency) OVER (PARTITION BY ba.account_id, DATE_TRUNC(occured_at, month) ORDER BY occured_at desc) END AS last_currency,     -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0430\u043b\u044e\u0442\u0430 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0438 \u043c\u0435\u0441\u044f\u0446\u0430\n    occured_at,                                     -- \u0412\u0440\u0435\u043c\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    CAST(occured_at as date) as paid_date,      -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    CAST(DATE_TRUNC(occured_at, month) as date) as paid_month,    -- \u041c\u0435\u0441\u044f\u0446 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    original_sum AS sum_org,                        -- \u0421\u0443\u043c\u043c\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    currency,                                       -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba\n  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` tch ON tch.account_id = ba.account_id \n                                                                                          AND CAST(occured_at as date) >= tch.start_date\n                                                                                          AND CAST(occured_at as date) < tch.end_date\n  WHERE tch.account_type != 'employee'\n),\n\nsource_data_current as (      -- \u041f\u043e\u0438\u0441\u043a \u043e\u0431\u0449\u0435\u0439 \u0441\u0443\u043c\u043c\u044b \u0437\u0430 \u043c\u0435\u0441\u044f\u0446 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0432\u0430\u043b\u044e\u0442\u044b \u0434\u043b\u044f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n  SELECT \n    account_id,                                     -- Id \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    paid_month as current_month,                    -- \u041c\u0435\u0441\u044f\u0446 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u043e\u0432\n    last_currency as last_currency_current_month,   -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0430\u043b\u044e\u0442\u0430 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430\n    FIRST_VALUE(paid_month) OVER (PARTITION BY account_id ORDER BY paid_month ASC) as first_month, -- \u041f\u0435\u0440\u0432\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438\n  FROM source_data\n  GROUP BY 1, 2, 3\n),\n\nbalance_current_agg as (        -- \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0432\u0430\u043b\u044e\u0442\u0435 \u043c\u0435\u0441\u044f\u0446\u0430\n  SELECT \n    sdc.account_id,                 -- Id \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    first_month,                    -- \u041f\u0435\u0440\u0432\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438\n    current_month,                  -- \u041c\u0435\u0441\u044f\u0446 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u043e\u0432\n    last_currency_current_month,    -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0430\u043b\u044e\u0442\u0430 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430\n    COALESCE(lead(current_month) OVER (PARTITION BY sdc.account_id ORDER BY current_month asc), DATE_ADD(DATE_TRUNC(CURRENT_DATE(), month), INTERVAL 1 month)) as next_month,\n    -- sd.paid_month,\n    sum(sd.sum_org) as sum_current_org     -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0435 \u043d\u0430 \u043d\u0430\u0447\u0430\u043b\u043e \u043c\u0435\u0441\u044f\u0446\u0430\n  FROM source_data_current sdc\n  JOIN source_data sd ON sd.account_id = sdc.account_id AND sd.currency = sdc.last_currency_current_month AND sd.paid_month <= sdc.current_month\n  GROUP BY 1, 2, 3, 4\n),\n\nbalance_all_month as (        -- \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0434\u043b\u044f \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u043e\u0441\u0442\u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0438\n  SELECT \n    account_id,                           -- Id \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    last_currency_current_month,   -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0430\u043b\u044e\u0442\u0430 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430\n    sum_current_org,     -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0435 \u043d\u0430 \u043d\u0430\u0447\u0430\u043b\u043e \u043c\u0435\u0441\u044f\u0446\u0430\n    m.month as current_month  -- \u041c\u0435\u0441\u044f\u0446 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u043e\u0432\n  FROM balance_current_agg\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_months` m ON  m.month >= current_month AND m.month < next_month\n),\n\nbalance_rur_currency_is_employee as (     -- \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u043e\u0447\u0438\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0438 \u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0432 \u0440\u0443\u0431\u043b\u0438\n  SELECT \n    bam.account_id,                                                         -- Id \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    -- tch.account_type,                                                       -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    current_month,                                                          -- \u041c\u0435\u0441\u044f\u0446 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u043e\u0432\n    last_currency_current_month,                                            -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0430\u043b\u044e\u0442\u0430 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430\n    sum_current_org,                                                        -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0435 \u043d\u0430 \u043d\u0430\u0447\u0430\u043b\u043e \u043c\u0435\u0441\u044f\u0446\u0430 \u0432 \u0432\u0430\u043b\u044e\u0442\u0435\n    sum_current_org * COALESCE(cor_rate, 1) as sum_current_rur,             -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0435 \u043d\u0430 \u043d\u0430\u0447\u0430\u043b\u043e \u043c\u0435\u0441\u044f\u0446\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n  FROM balance_all_month bam\n  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_exchangeRates` er ON er._ibk = current_month AND last_currency_current_month = er.currency AND nominal = 'RUR' \n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` api ON api.account_Id = bam.account_id and is_employee is false \n\n),\n\nbalance_previous_month as (\n  SELECT \n    account_id,                     -- Id \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    -- account_type,                   -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    current_month,                  -- \u041c\u0435\u0441\u044f\u0446 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u043e\u0432\n    last_currency_current_month,    -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0430\u043b\u044e\u0442\u0430 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430\n    sum_current_org,                -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0435 \u043d\u0430 \u043d\u0430\u0447\u0430\u043b\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430 \u0432 \u0432\u0430\u043b\u044e\u0442\u0435\n    sum_current_rur,                -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0435 \u043d\u0430 \u043d\u0430\u0447\u0430\u043b\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    LAG(last_currency_current_month) OVER (PARTITION BY account_id ORDER BY current_month) as last_currency_previous_month,    -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0430\u043b\u044e\u0442\u0430 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0438 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430\n    LAG(sum_current_org) OVER (PARTITION BY account_id ORDER BY current_month) as sum_previous_org,     -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0435 \u043d\u0430 \u043d\u0430\u0447\u0430\u043b\u043e \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430 \u0432 \u0432\u0430\u043b\u044e\u0442\u0435\n    LAG(sum_current_rur) OVER (PARTITION BY account_id ORDER BY current_month) as sum_previous_rur,     -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0435 \u043d\u0430 \u043d\u0430\u0447\u0430\u043b\u043e \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n  FROM balance_rur_currency_is_employee\n),\n\nfinal_table as (\n  SELECT \n    bpm.account_id,                         -- Id \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    -- account_type as ac_type,\n    COALESCE(account_type, LEAD(account_type) OVER (PARTITION BY bpm.account_id ORDER BY current_month), 'standart') as account_type,                       -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    -- \u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 int_accounts_type_and_partner_change_with_partner_type_deduplicated \u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f\u0445 \u043d\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u0442\u0441\u044f \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0432 current_month\n    -- \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043c\u0435\u0441\u044f\u0446 \u043f\u043e\u0434\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437 \u044d\u0442\u0438\u0445 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    -- \u0414\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430 (\u043c\u0435\u0441\u044f\u0446 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c \u043c\u0435\u0441\u044f\u0446\u0435\u043c), \u0447\u0442\u043e\u0431\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e 'standart', \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e\u0447\u0442\u0438 \u0432\u0441\u0435 \u044d\u0442\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u043f\u043e\u0442\u043e\u043c \u043f\u0435\u0440\u0435\u0442\u0435\u043a\u0430\u044e\u0442 \u0432 'standart' \n    current_month,                      -- \u041c\u0435\u0441\u044f\u0446 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u043e\u0432\n    last_currency_current_month,        -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0430\u043b\u044e\u0442\u0430 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430\n    ROUND(sum_current_org) as sum_current_org,                    -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0435 \u043d\u0430 \u043d\u0430\u0447\u0430\u043b\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430 \u0432 \u0432\u0430\u043b\u044e\u0442\u0435\n    ROUND(sum_current_rur) as sum_current_rur,                    -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0435 \u043d\u0430 \u043d\u0430\u0447\u0430\u043b\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    last_currency_previous_month,       -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0430\u043b\u044e\u0442\u0430 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0438 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430\n    ROUND(sum_previous_org) as sum_previous_org,                   -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0435 \u043d\u0430 \u043d\u0430\u0447\u0430\u043b\u043e \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430 \u0432 \u0432\u0430\u043b\u044e\u0442\u0435\n    ROUND(sum_previous_rur) as sum_previous_rur,                   -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0435 \u043d\u0430 \u043d\u0430\u0447\u0430\u043b\u043e \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n  FROM balance_previous_month bpm\n    LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` tch ON tch.account_id = bpm.account_id \n                                                                                          AND current_month >= tch.start_date\n                                                                                          AND current_month < tch.end_date\n--   WHERE tch.account_type in ('standart', 'partner', 'tech-partner')\n  ORDER BY current_month\n  \n)\n\nSELECT *\nFROM final_table", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_balance_accounts`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.096813Z", "completed_at": "2025-05-21T12:31:14.218705Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.222887Z", "completed_at": "2025-05-21T12:31:14.222897Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2523064613342285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_channels_waba_spending", "compiled": true, "compiled_code": "WITH channels AS (\n                 SELECT account_id\n                      , guid\n                      , phone\n                 FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_channels`\n                 WHERE transport = 'wapi'\n                 ),\n\n     waba_sessions AS (\n                 SELECT chat_id\n                      , initiator\n                      , channel_id\n                      , session_type\n                      , session_id\n                      , country\n                      , state\n                      , transaction_id\n                 FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_sessions` sessions\n                 WHERE state != 'canceled'\n                   AND NOT EXISTS (\n                     SELECT 1\n                     FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_sessions_gupshup` gupshup\n                     JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_sessions` core ON gupshup.session_id = core.session_id\n                   AND CAST (gupshup.paid_at_waba_sessions AS DATE) = CAST (core.paid_at_waba_sessions AS DATE)\n                     WHERE sessions.session_id = gupshup.session_id\n                     ) -- \u044d\u0442\u043e \u0431\u0430\u0433\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u0441\u0441\u0438\u0438, \u043f\u043e\u043a\u0430 \u0440\u0435\u0448\u0438\u043b\u0438 \u0438\u0445 \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0442\u044c \n                 ),\n\n     waba_transactions AS (\n                 SELECT amount\n                      , date_at\n                      , currency\n                      , id\n                 FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_transactions`\n                 WHERE type = 'payment' -- \u0431\u0435\u0440\u0435\u043c \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0434\u0435\u043d\u0435\u0433\n                 ),\n\n     gupshup_spending_prep AS (\n                 SELECT waba_transactions.total_amount   AS amount\n                      , waba_sessions.created_at         AS date_at\n                      --waba_transactions.date_at,\n                      , waba_transactions.currency\n                      , channels.account_id\n                      , channels.phone                   AS phone\n                      , waba_sessions.chat_id\n                      , waba_sessions.country\n                      , waba_sessions.channel_id\n                      , waba_sessions.session_type\n                      , waba_sessions.state\n                      , row_number() OVER (PARTITION BY CASE WHEN waba_sessions.session_id IS NOT NULL\n                                                                 THEN waba_sessions.session_id\n                                                             ELSE cast(waba_transactions.id as string)\n                     END\n                     ORDER BY waba_transactions.id DESC) AS last_state_of_the_session\n                 FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_transactions_gupshup` waba_transactions\n                 JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_sessions_gupshup` waba_sessions ON waba_transactions.waba_session_id = waba_sessions.transaction_id\n                 JOIN channels ON waba_sessions.channel_id = channels.guid\n                 WHERE waba_sessions.state != 'canceled'\n                   AND waba_transactions.type = 'payment'\n                   \n\n                   union all\n\n            -- \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0447\u0435\u0439 channel_id \u043c\u044b \u043d\u0435 \u0441\u043c\u043e\u0433\u043b\u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c (\u043d\u0435\u0442 \u0432 \u0433\u0435\u0439\u0442\u0435, \u043b\u0438\u0431\u043e \u043c\u044b \u043d\u0435\u0432\u0435\u0440\u043d\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u044b)\n                    SELECT waba_transactions.total_amount   AS amount\n                      , waba_sessions.created_at         AS date_at\n                      --waba_transactions.date_at,\n                      , waba_transactions.currency\n                      , channels.account_id\n                      , channels.phone                   AS phone\n                      , waba_sessions.chat_id\n                      , waba_sessions.country\n                      , waba_sessions.channel_id\n                      , waba_sessions.session_type\n                      , waba_sessions.state\n                      , row_number() OVER (PARTITION BY CASE WHEN waba_sessions.session_id IS NOT NULL\n                                                                 THEN waba_sessions.session_id\n                                                             ELSE cast(waba_transactions.id as string)\n                     END\n                     ORDER BY waba_transactions.id DESC) AS last_state_of_the_session\n                 FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_transactions_gupshup` waba_transactions\n                 JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_channels_waba_sessions_gupshup` waba_sessions ON waba_transactions.waba_session_id = waba_sessions.transaction_id\n                 left JOIN channels ON waba_sessions.channel_id = channels.guid\n                 WHERE waba_sessions.state != 'canceled'\n                   AND waba_transactions.type = 'payment'\n                   and channels.guid is null\n                \n                 --where waba_sessions.session_id is not null \u0432 \u0433\u0443\u043f\u0448\u0443\u043f\u0435 \u0443 \u0437\u0430\u0445\u043e\u043b\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439 \u043d\u0435\u0442 session_id\n                 ),\n     gupshup_spending AS (\n                 SELECT account_id\n                      , channel_id\n                      , phone\n                      , chat_id\n                      , cast(NULL AS string) AS initiator --legacy, \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f\n                      , country\n                      , session_type\n                      , state\n                      , date_at\n                      , amount\n                      , currency\n                 FROM gupshup_spending_prep\n                 WHERE last_state_of_the_session = 1\n                         --and amount != 0\n                 ),\n     waba_spending AS (\n                 SELECT channels.account_id\n                      , channels.guid                         AS channel_id\n                      , channels.phone\n                      , cast(waba_sessions.chat_id AS string) AS chat_id\n                      , waba_sessions.initiator\n                      , waba_sessions.country\n                      , waba_sessions.session_type\n                      , waba_sessions.state\n                      , waba_transactions.date_at\n                      , waba_transactions.amount\n                      , waba_transactions.currency\n                 FROM channels\n                     INNER JOIN waba_sessions\n                             ON channels.guid = waba_sessions.channel_id\n                     INNER JOIN waba_transactions\n                             ON waba_sessions.transaction_id = waba_transactions.id\n                 WHERE NOT (amount = 0 AND session_id IS NULL)\n\n                 UNION ALL\n\n                 SELECT account_id      -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n                      , channel_id      -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u0430\u043d\u0430\u043b\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u0435\u0442 guid \u0438\u0437 stg_channels\n                      , phone           -- \u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u043e\u0437\u0434\u0430\u043d\u0430 \u0432\u0430\u0431\u0430\n                      , chat_id         -- \u0422\u0435\u043b\u0435\u0444\u043e\u043d \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0430 (\u043a\u043e\u043d\u0442\u0430\u043a\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a chatType-chatId. \u0417\u0434\u0435\u0441\u044c chatType = 'wapi')\n                      , initiator       -- \u0418\u043d\u0438\u0446\u0438\u0430\u0442\u043e\u0440 \u0441\u0435\u0441\u0441\u0438\u0438 \u0438\u0437 \u0444\u0435\u0439\u0441\u0431\u0443\u043a\u0430. \u041d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u0435\u0441\u0441\u0438\u0438. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b: 'business' | 'contact' | 'free'\n                      , country         -- \u0421\u0442\u0440\u0430\u043d\u0430 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0430. \u041d\u0443\u0436\u043d\u0430 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u0435\u0441\u0441\u0438\u0438\n                      , session_type    -- \u0422\u0438\u043f \u0441\u0435\u0441\u0441\u0438\u0438, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0444\u0435\u0439\u0441\u0431\u0443\u043a\u043e\u043c \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0442\u0430\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b: 'utility' | 'authentication' | 'marketing' | 'service' | 'referral_conversion'\n                      , state           -- \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043e\u043f\u043b\u0430\u0442\u044b \u0441\u0435\u0441\u0441\u0438\u0438, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b: 'holded' | 'paid' | 'canceled'\n                      , date_at         -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438, \u0444\u043e\u0440\u043c\u0430\u0442 2022-11-29T19:49:52.778Z\n                      , amount          -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f/\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f\n                      , currency        -- \u0412\u0430\u043b\u044e\u0442\u0430, \u043a\u0430\u043a \u0438 \u0432 \u041b\u041a. \u0412 \u0446\u0435\u043b\u043e\u043c \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043b\u0438\u0447\u0430\u0442\u044c\u0441\u044f \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u044f\u0445, \u0435\u0441\u043b\u0438 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0431\u044b\u043b\u0430 \u0441\u043c\u0435\u043d\u0430 \u0432\u0430\u043b\u044e\u0442\u044b \u041b\u041a; RUR - \u0440\u0443\u0431\u043b\u0438, USD - \u0434\u043e\u043b\u043b\u0430\u0440\u044b, EUR - \u0435\u0432\u0440\u043e, KZT - \u0442\u0435\u043d\u0433\u0435\n                 FROM gupshup_spending\n\n                 ),\n     profile_info AS (\n                 SELECT account_id\n                 FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n                 WHERE is_employee IS TRUE\n                   AND account_id != 54963500 --\u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0441\u0430\u043f\u043f\u043e\u0440\u0442\u0430, \u043f\u043e\u043f\u0440\u043e\u0441\u0438\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c https://wazzup.planfix.ru/task/1135629/?comment=194165636\n                 )\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u043e \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f\u043c\u0438 \u0441 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0432\u0430\u0431\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434\nSELECT *\nFROM waba_spending\nWHERE NOT exists\n          (\n          SELECT account_id\n          FROM profile_info\n          WHERE waba_spending.account_id = profile_info.account_id\n          )", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_channels_waba_spending`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.224800Z", "completed_at": "2025-05-21T12:31:14.270545Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.277409Z", "completed_at": "2025-05-21T12:31:14.277419Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.14456844329833984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_channels_with_more_than_two_transports", "compiled": true, "compiled_code": "with channels as (\n    select * from  `dwh-wazzup`.`dbt_nbespalov`.`int_channels_transport_with_jinja`\n),\nprofile_info as (\n    select  * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0432 \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0435 \u043f\u043e \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0430\u043c\nselect channels.*,\nprofile_info.type,                  -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nprofile_info.russian_country_name,  -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\nprofile_info.account_segment_type,  -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\nprofile_info.region_international,  -- \u0440\u0435\u0433\u0438\u043e\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u0421\u041d\u0413, \u041c\u0415\u041d\u0410, \u041b\u0410\u0422\u0410\u041d ) \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u043d\u0430\u0448\u0435\u043c\u0443 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u043c\u0443 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044e\nprofile_info.first_paid_subscription_date_with_1_more_day_duration, -- \u0434\u0430\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0434\u043b\u0438\u043b\u0430\u043b\u0430\u0441\u044c \u0431\u043e\u043b\u0435\u0435 1 \u0434\u043d\u044f (\u043d\u0435 \u0431\u044b\u043b\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0430 \u0432 \u0442\u043e\u0442 \u0436\u0435 \u0434\u0435\u043d\u044c), \u0444\u043e\u0440\u043c\u0430\u0442 2022-01-09\nprofile_info.register_date,         -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\nprofile_info.currency               -- \u0412\u0430\u043b\u044e\u0442\u0430\n\n from channels left join profile_info \non channels.account_id=profile_info.account_id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_channels_with_more_than_two_transports`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.267997Z", "completed_at": "2025-05-21T12:31:14.277933Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.323621Z", "completed_at": "2025-05-21T12:31:14.323631Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.14245343208312988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_integrations_by_month_paying_users", "compiled": true, "compiled_code": "with integration_subscription_info as (\n    select * from \n    `dwh-wazzup`.`dbt_nbespalov`.`int_integrations_with_type_by_account_id_only_paid_and_promised_payment`\n    where rn=1\n    ),\n\nintegration_by_month_deduplicated_with_integration_type as ( select *,\n (case \n    when integration_type_with_api is null then 'no_integration'\n    when integration_type_with_api='\u0413\u0435\u0442\u043b\u0443' then 'Getcourse'\n    when integration_type_with_api='getloo' then 'Getcourse'\n    when integration_type_with_api='gc-messenger' then 'Getcourse'\n    when integration_type_with_api='\u041a\u043b\u0438\u0435\u043d\u0442\u0438\u043a\u0441' then 'KLIENTIKS CRM'\n    when integration_type_with_api='sbis' then '\u0421\u0411\u0418\u0421'\n    when integration_type_with_api='autodealer' then '\u0410\u0432\u0442\u043e\u0434\u0438\u043b\u0435\u0440'\n    when integration_type_with_api='Fitbase' then 'fitbase'\n    when integration_type_with_api='moyklass' then 'Moy Klass'\n    when integration_type_with_api='getcourseprofi' then 'Getcourse'\n    when integration_type_with_api='impulsecrm' then 'Impuls CRM'\n    when integration_type_with_api='\u0410\u043b\u044c\u0444\u0430 CRM' then 'alfacrm'\n    when integration_type_with_api='vionvi CRM' then 'vionvi'\n    when integration_type_with_api='omnidesk' then 'OmniDesk'\n    when integration_type_with_api='stocrm' then 'STOCRM'\n    when integration_type_with_api='Omnidesk' then 'OmniDesk'\n    when integration_type_with_api='Sport CRM' then 'SportCRM'\n    when integration_type_with_api='\u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0431\u0430\u0437\u0430' then 'clientbase'\n    when integration_type_with_api='7384' then 'api'\n    when integration_type_with_api='imb-service' then 'RetailCRM'\n    when integration_type_with_api='4kzn' then 'api'\n    when integration_type_with_api='akfa' then 'api'\n    when integration_type_with_api='accelonline' then 'api'\n    when integration_type_with_api='appcloud' then 'api'\n    when integration_type_with_api='webhook' then 'api'\n    when integration_type_with_api='wazzup24' then 'api'\n    when integration_type_with_api='beget' then 'api'\n    when integration_type_with_api='bronix' then 'api'\n    when integration_type_with_api='okk24' then 'api'\n    when integration_type_with_api='prime' then 'api'\n    when integration_type_with_api='olla' then 'api'\n    when integration_type_with_api='synergybot' then 'api'\n    when integration_type_with_api='annaver' then 'api'\n    when integration_type_with_api='yandexcloud' then 'api'\n    else integration_type_with_api\n    end) as integration_type_with_api_aggregated        -- \u0442\u0438\u043f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u043e\u0439 \u043f\u043e api - \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u043f\u0440\u0438\u0447\u0435\u0441\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. \u0418\u0444\u043d\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0447\u0430\u0441\u0442\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043c\u044b \u0432\u044b\u0442\u0430\u0441\u043a\u0438\u0432\u0430\u0435\u043c \u0438\u0437 \u0434\u043e\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043c\u0435\u043d\u0438, \u0430 \u043e\u043d\u0430 \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u043d\u0435\u0441\u0435\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e. \u0412 \u0442\u0430\u043a\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u043c\u044b \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 \u043e\u0431\u0449\u0435\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 'api' - \u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u043c\u044b \u0445\u0437, \u0447\u0442\u043e \u044d\u0442\u043e \u0437\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\n    from integration_subscription_info          \n),\n\nintegrations_with_profile_info as (\n\nselect integration_by_month_deduplicated_with_integration_type.*,\nlast_day(date,month) as last_day_of_month,                  -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0434\u0435\u043d\u044c \u043c\u0435\u0441\u044f\u0446\u0430\nlast_value(integration_type) over (partition by integration_by_month_deduplicated_with_integration_type.account_id, date_trunc(date,month) order by integration_start_date asc\nrows between unbounded preceding and unbounded following\n) as last_value_integration_type_month,                     -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u0438\u043f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0432 \u043c\u0435\u0441\u044f\u0446\u0435\nlast_value(integration_type_with_api) over (partition by integration_by_month_deduplicated_with_integration_type.account_id, date_trunc(date,month) order by integration_start_date asc\nrows between unbounded preceding and unbounded following\n) as last_value_integration_type_with_api_month,            -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u0438\u043f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u043e\u0439 api \u0432 \u043c\u0435\u0441\u044f\u0446\u0435\nlast_value(integration_type_with_api_aggregated) over (partition by integration_by_month_deduplicated_with_integration_type.account_id, date_trunc(date,month) order by integration_start_date asc\nrows between unbounded preceding and unbounded following\n) as last_value_integration_type_with_api_aggregated_month, -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u0438\u043f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 \u043f\u0440\u0438\u0447\u0435\u0441\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u043e\u0439 api \u0432 \u043c\u0435\u0441\u044f\u0446\u0435\nprofile_info.region_international,              -- \u0420\u0435\u0433\u0438\u043e\u043d\nprofile_info.russian_country_name,              -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\nprofile_info.utm_source,                        -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM source \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\nprofile_info.utm_campaign,                      -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM campaign \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\nprofile_info.utm_medium,                        -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM medium \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\nprofile_info.utm_term,                          -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM term \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\nprofile_info.utm_content,                       -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM content \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\nprofile_info.account_segment_type,              -- \u0441\u0435\u0433\u043c\u0435\u043d\u0442 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nprofile_info.currency,                          -- \u0412\u0430\u043b\u044e\u0442\u0430\nprofile_info.type,                              -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nprofile_info.registration_source_current,       -- \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 (\u0434\u043b\u044f \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432) \u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0441\u043a\u0438\u0445. \u041f\u0440\u0438\u0441\u0442\u0430\u0432\u043a\u0430 current \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u0430\u043a \u043a\u0430\u043a \u0442\u0443\u0442 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0430 \u043d\u0435 \u0432 \u043c\u043e\u043c\u0435\u043d\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\nprofile_info.registration_source_agg_current    -- \u0410\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f registration_source_current \u0438 account_type_current. \u0415\u0441\u043b\u0438 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043a\u0430\u043a-\u0442\u043e \u0441\u0432\u044f\u0437\u0430\u043d \u0441 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430\u043c\u0438, \u0442\u043e \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0438\u043d\u0430\u0447\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. \u041f\u0440\u0438\u0441\u0442\u0430\u0432\u043a\u0430 current \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u0430\u043a \u043a\u0430\u043a \u0442\u0443\u0442 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0430 \u043d\u0435 \u0432 \u043c\u043e\u043c\u0435\u043d\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n\n from integration_by_month_deduplicated_with_integration_type\ninner join  `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info \non profile_info.account_id=integration_by_month_deduplicated_with_integration_type.account_id\nwhere is_employee is distinct from True)\n    -- \u041a\u0430\u043a\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0431\u044b\u043b\u0430 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0432 \u0434\u043d\u0438 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438\u043b\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043d\u0430 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u043c \u043f\u043b\u0430\u0442\u0435\u0436\u0435\nselect * from integrations_with_profile_info", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_integrations_by_month_paying_users`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.272592Z", "completed_at": "2025-05-21T12:31:14.284089Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.325003Z", "completed_at": "2025-05-21T12:31:14.325014Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.18767023086547852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_integrations_payments", "compiled": true, "compiled_code": "with subscription_paid as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_and_converted_currency`\n    ),\nprofile_info as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n),\nwaba_revenue_postpay as (\n    select account_id,\n    paid_date as start_date,\n    currency,\n    amount as wapi_transactions_in_rubles\n    from `dwh-wazzup`.`partners_info`.`postpay_waba_revenue`),\n\nsubscriptions_with_integration as (\n   select  start_date,\n    account_id,\n   currency,\n  subscription_type,\n   sum(sum) as sum,\n   sum(sum_in_rubles) as sum_in_rubles, \n   sum(original_sum) as original_sum,\n   sum(sum_in_USD) as sum_in_USD,\n   sum(coalesce(wapi_original_sum,0)) as wapi_original_sum,\n   sum(coalesce(wapi_transactions_in_rubles,0)) as wapi_transactions_in_rubles,\n   sum(coalesce(wapi_sum_in_USD,0)) as wapi_sum_in_USD\n   from subscription_paid\n   group by 1,2,3,4\n) ,  \n\n\nintegraions_type as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_integrations_with_type_with_pipedrive`),\n\ncrm_marketplace as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_crmMarketplace`\n    where status='published'\n),    \n\npayments_and_integrations as (\n    select subscription_paid.start_date,\n    subscription_paid.sum,\n    subscription_paid.currency,\n    subscription_paid.account_id,\n    subscription_paid.subscription_type,\n    partner_id,\n    sum_in_rubles, \n    original_sum,\n    sum_in_USD,\n    wapi_original_sum,\n    wapi_transactions_in_rubles,\n    wapi_sum_in_USD,\n    (case \n    when integration_type_with_api is null then 'no_integration'\n    when integration_type_with_api='\u0413\u0435\u0442\u043b\u0443' then 'Getcourse'\n    when integration_type_with_api='getloo' then 'Getcourse'\n    when integration_type_with_api='gc-messenger' then 'Getcourse'\n    when integration_type_with_api='\u041a\u043b\u0438\u0435\u043d\u0442\u0438\u043a\u0441' then 'KLIENTIKS CRM'\n    when integration_type_with_api='sbis' then '\u0421\u0411\u0418\u0421'\n    when integration_type_with_api='autodealer' then '\u0410\u0432\u0442\u043e\u0434\u0438\u043b\u0435\u0440'\n    when integration_type_with_api='Fitbase' then 'fitbase'\n    when integration_type_with_api='moyklass' then 'Moy Klass'\n    when integration_type_with_api='getcourseprofi' then 'Getcourse'\n    when integration_type_with_api='impulsecrm' then 'Impuls CRM'\n    when integration_type_with_api='\u0410\u043b\u044c\u0444\u0430 CRM' then 'alfacrm'\n    when integration_type_with_api='vionvi CRM' then 'vionvi'\n    when integration_type_with_api='omnidesk' then 'OmniDesk'\n    when integration_type_with_api='stocrm' then 'STOCRM'\n    when integration_type_with_api='Omnidesk' then 'OmniDesk'\n    when integration_type_with_api='Sport CRM' then 'SportCRM'\n    when integration_type_with_api='\u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0431\u0430\u0437\u0430' then 'clientbase'\n    when integration_type_with_api='7384' then 'api'\n    when integration_type_with_api='imb-service' then 'RetailCRM'\n    when integration_type_with_api='4kzn' then 'api'\n    when integration_type_with_api='akfa' then 'api'\n    when integration_type_with_api='accelonline' then 'api'\n    when integration_type_with_api='appcloud' then 'api'\n    when integration_type_with_api='webhook' then 'api'\n    when integration_type_with_api='wazzup24' then 'api'\n    when integration_type_with_api='beget' then 'api'\n    when integration_type_with_api='bronix' then 'api'\n    when integration_type_with_api='okk24' then 'api'\n    when integration_type_with_api='prime' then 'api'\n    when integration_type_with_api='olla' then 'api'\n    when integration_type_with_api='synergybot' then 'api'\n    else integration_type_with_api\n    end) as integration_type_with_api,\n    integraions_type.integration_type,\n    integraions_type.created_at\n    from subscriptions_with_integration subscription_paid left join integraions_type\n    on subscription_paid.start_date>=date_add(cast(integraions_type.created_at as date),interval -7 day) and subscription_paid.start_date<=integraions_type.integration_end_date\n    and subscription_paid.account_id=integraions_type.account_id),\n\npayments_and_integrations_to_deduplicate as (\n  select *, row_number() over (partition by account_id,start_date, subscription_type, currency order by created_at desc) rn from payments_and_integrations \n),\n\npayments_and_integrations_with_converted_sum as (\n    select payments_and_integrations_to_deduplicate.start_date,             -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    payments_and_integrations_to_deduplicate.sum,                           -- \u0441\u0443\u043c\u043c\u0430 (\u0443\u0441\u0442\u0430\u0440\u0435\u043b\u043e)\n    payments_and_integrations_to_deduplicate.currency,                      -- \u0432\u0430\u043b\u044e\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    payments_and_integrations_to_deduplicate.account_id,                    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    payments_and_integrations_to_deduplicate.subscription_type,             -- \u0442\u0438\u043f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    payments_and_integrations_to_deduplicate.sum_in_rubles,                 -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    payments_and_integrations_to_deduplicate.original_sum,                  -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0432\u0430\u043b\u044e\u0442\u0435\n    payments_and_integrations_to_deduplicate.sum_in_USD,                    -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445\n    payments_and_integrations_to_deduplicate.wapi_original_sum,             -- \u0442\u0440\u0430\u0442\u044b \u043d\u0430 \u0432\u0430\u0431\u0443 \u0432 \u0432\u0430\u043b\u044e\u0442\u0435\n    payments_and_integrations_to_deduplicate.wapi_transactions_in_rubles,   -- \u0442\u0440\u0430\u0442\u044b \u043d\u0430 \u0432\u0430\u0431\u0443 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    payments_and_integrations_to_deduplicate.wapi_sum_in_USD,               -- \u0442\u0440\u0430\u0442\u044b \u043d\u0430 \u0432\u0430\u0431\u0443 \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445\n    partner_id,         -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    integration_type,   -- \u0442\u0438\u043f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n    coalesce(crm_marketplace.crm_name,payments_and_integrations_to_deduplicate.integration_type_with_api) as integration_type_with_api, -- \u0442\u0438\u043f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 \u0434\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0439 api\n    (case when status='published' then True \n    else False end\n    ) as is_published   -- \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u0430 \u043b\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0432 \u043c\u0430\u0440\u043a\u0435\u0442\u043f\u043b\u0435\u0439\u0441\u0435 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u043c\u0435\u043d\u0442\n    from payments_and_integrations_to_deduplicate\n    left join crm_marketplace\n    on lower(crm_marketplace.crm_name)=lower(payments_and_integrations_to_deduplicate.integration_type_with_api)\n    where rn=1\n)\n    -- \u0422\u0440\u0430\u0442\u044b \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a\u0430\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0431\u044b\u043b\u0430 \u0432 \u041b\u041a \u0432 \u043c\u043e\u043c\u0435\u043d\u0442 \u043e\u043f\u043b\u0430\u0442\u044b\nselect payments_and_integrations_with_converted_sum.*\nfrom payments_and_integrations_with_converted_sum\nwhere not exists (\n    select profile_info.account_id\n    from profile_info \n    where   payments_and_integrations_with_converted_sum.account_Id = profile_info.account_Id\n            and profile_info.is_employee \n)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_integrations_payments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.275618Z", "completed_at": "2025-05-21T12:31:14.322324Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.325929Z", "completed_at": "2025-05-21T12:31:14.325938Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.226792573928833, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_partners_registered_with_currency_and_country", "compiled": true, "compiled_code": "SELECT DISTINCT\n  account_id           AS partner_id,                                                 -- \u041d\u043e\u043c\u0435\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \n  russian_country_name AS russianName,                                                -- \u0421\u0442\u0440\u0430\u043d\u0430\n  currency,                                                                           -- \u0412\u0430\u043b\u044e\u0442\u0430\n  partner_register_date                                                               -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\nFROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\nWHERE type IN ('partner', 'standart')                                                 -- \u0411\u0435\u0440\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432\n  AND is_employee is false\nORDER BY 4", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_partners_registered_with_currency_and_country`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.278920Z", "completed_at": "2025-05-21T12:31:14.325588Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.412328Z", "completed_at": "2025-05-21T12:31:14.412340Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.22624564170837402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_replenishment_partner_accounts", "compiled": true, "compiled_code": "-- \u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u043e\u0433\u043e \u0441\u0447\u0435\u0442\u0430\n\nWITH real_money AS (      -- CTE \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e \u0442\u043e\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0435\u043d\u0435\u0433 \u043f\u043e\u043b\u043e\u0436\u0438\u043b\u0438 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u044b \u0432 RUR \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0435\n  SELECT\n    ba.account_id     AS partner_id,                  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ba.currency,                                      -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    ba.occured_date,                                  -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    api.type,                                         -- \u0422\u0438\u043f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    SUM(ba.sum)       AS real_money_org               -- \u0421\u0443\u043c\u043c\u0430 \u0434\u0435\u043d\u0435\u0433\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts__type_change_history` api ON api.account_id = ba.account_id AND DATETIME(ba.occured_at) BETWEEN api.start_occured_at AND api.end_occured_at\n    WHERE api.type in ('partner', 'tech-partner')     -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 - \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0438\u043b\u0438 \u0442\u0435\u0445.\u043f\u0430\u0440\u0442\u043d\u0435\u0440\n    AND ba.object = 'payment'                         -- \u0422\u0438\u043f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 - \u043f\u043b\u0430\u0442\u0451\u0436\n    AND ba.original_sum > 0                           -- \u041e\u0442\u0441\u0435\u043a\u0430\u0435\u043c \u0442\u0440\u0430\u0442\u044b\n    AND ba.method IN ('card', 'bank')                 -- \u041e\u0442\u0441\u0435\u043a\u0430\u0435\u043c \u0442\u0440\u0430\u043d\u0441\u0444\u0435\u0440\u044b\n    AND is_invalid IS DISTINCT FROM true              -- \u041a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0435 \u0441\u0447\u0435\u0442\u0430\n  GROUP BY 1, 2, 3, 4\n  ),\n\n\ntransfers AS (            -- CTE \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e \u0442\u043e\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0435\u043d\u0435\u0433 \u043f\u0435\u0440\u0435\u0432\u0435\u043b\u0438 \u043d\u0430 \u0441\u0447\u0451\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  SELECT\n    ba.account_id     AS partner_id,                  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ba.currency,                                      -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    ba.occured_date,                                  -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    api.type,                                         -- \u0422\u0438\u043f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    SUM(ba.sum)       AS transfer_org                 -- \u0421\u0443\u043c\u043c\u0430 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u0432\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts__type_change_history` api ON api.account_id = ba.account_id AND DATETIME(ba.occured_at) BETWEEN api.start_occured_at AND api.end_occured_at\n  -- JOIN currency_date cd ON cd.month = DATE_TRUNC(ba.occured_date, month) AND ba.currency = cd.currency\n    WHERE api.type in ('partner', 'tech-partner')     -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 - \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0438\u043b\u0438 \u0442\u0435\u0445.\u043f\u0430\u0440\u0442\u043d\u0435\u0440\n    AND ba.object = 'payment'                         -- \u0422\u0438\u043f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 - \u043f\u043b\u0430\u0442\u0451\u0436\n    AND (ba.method = 'transfer'                       -- \u041c\u0435\u0442\u043e\u0434 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 - \u0442\u0440\u0430\u043d\u0441\u0444\u0435\u0440\n    OR ba.method IS NULL)                             -- \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u0435\u0439\u0441\u043e\u0432 \u0441 NULL, \u043d\u043e \u044d\u0442\u043e \u0442\u0440\u0430\u043d\u0441\u0444\u0435\u0440\u044b\n    AND ba.original_sum > 0                           -- \u041e\u0442\u0441\u0435\u043a\u0430\u0435\u043c \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0442\u0440\u0430\u043d\u0441\u0444\u0435\u0440\u044b (\u0442\u0440\u0430\u0442\u044b)\n    -- AND ba.currency = cd.currency                     -- \u041d\u0443\u0436\u043d\u044b\u0439 \u0440\u044b\u043d\u043e\u043a\n    -- AND DATE_TRUNC(ba.occured_date, month) = cd.month -- \u041d\u0443\u0436\u043d\u044b\u0439 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a\n  GROUP BY 1, 2, 3, 4\n),\n\n\nbonus_money AS (          -- CTE \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e \u0442\u043e\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n  SELECT\n    ba.account_id     AS partner_id,                  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ba.currency,                                      -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    ba.occured_date,                                  -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    api.type,                                         -- \u0422\u0438\u043f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    SUM(ba.sum)       AS bonus_money_org              -- \u0421\u0443\u043c\u043c\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts__type_change_history` api ON api.account_id = ba.account_id AND DATETIME(ba.occured_at) BETWEEN api.start_occured_at AND api.end_occured_at\n    WHERE api.type in ('partner', 'tech-partner')     -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 - \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0438\u043b\u0438 \u0442\u0435\u0445.\u043f\u0430\u0440\u0442\u043d\u0435\u0440\n    AND object NOT IN ('payment', 'convertation')     -- \u041e\u0442\u0441\u0435\u043a\u0430\u0435\u043c \u043f\u043b\u0430\u0442\u0435\u0436\u0438 \u0438 \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u0438\n    AND ba.original_sum > 0                           -- \u041e\u0442\u0441\u0435\u043a\u0430\u0435\u043c \u0442\u0440\u0430\u0442\u044b (\u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u0442.\u043f)\n  GROUP BY 1, 2, 3, 4\n),\n\ninvalid_bills AS (          -- CTE \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e \u0442\u043e\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0435\u043d\u0435\u0433 \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0441 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432\n  SELECT\n    ba.account_id     AS partner_id,                  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ba.currency,                                      -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    ba.occured_date,                                  -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    api.type,                                         -- \u0422\u0438\u043f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    SUM(ba.sum)       AS invalid_bills_org            -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts__type_change_history` api ON api.account_id = ba.account_id AND DATETIME(ba.occured_at) BETWEEN api.start_occured_at AND api.end_occured_at\n    WHERE api.type in ('partner', 'tech-partner')     -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 - \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0438\u043b\u0438 \u0442\u0435\u0445.\u043f\u0430\u0440\u0442\u043d\u0435\u0440\n    AND object = 'payment'                  \n    AND is_invalid is true                            -- \u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0435 \u0441\u0447\u0435\u0442\u0430\n    AND ba.original_sum > 0                           -- \u041e\u0442\u0441\u0435\u043a\u0430\u0435\u043c \u0442\u0440\u0430\u0442\u044b (\u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u0442.\u043f)\n  GROUP BY 1, 2, 3, 4\n),\n\nconvertations AS (         -- CTE \u0441 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f\u043c\u0438 \u0437\u0430 \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u0438\n  SELECT\n    ba.account_id     AS partner_id,                  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ba.currency,                                      -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    ba.occured_date,                                  -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    api.type,                                         -- \u0422\u0438\u043f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    SUM(ba.sum)          AS convertations_org                  -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439 \u0437\u0430 \u0441\u043c\u0435\u043d\u0443 \u0432\u0430\u043b\u044e\u0442\u044b\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts__type_change_history` api ON api.account_id = ba.account_id AND DATETIME(ba.occured_at) BETWEEN api.start_occured_at AND api.end_occured_at\n    WHERE ba.object = 'convertation'                          -- \u0421\u043c\u0435\u043d\u0430 \u0432\u0430\u043b\u044e\u0442\u044b\n    AND api.type in ('partner', 'tech-partner')     -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 - \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0438\u043b\u0438 \u0442\u0435\u0445.\u043f\u0430\u0440\u0442\u043d\u0435\u0440\n    AND ba.original_sum > 0\n  GROUP BY 1, 2, 3, 4\n),\n\nall_topups AS (           -- CTE \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e \u0432\u0441\u0435\u0445 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f\u0445\n  SELECT\n    ba.account_id     AS partner_id,                  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ba.currency,                                      -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    ba.occured_date,                                  -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    api.type,                                         -- \u0422\u0438\u043f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    SUM(ba.sum)       AS combined_org                     -- \u041e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts__type_change_history` api ON api.account_id = ba.account_id AND DATETIME(ba.occured_at) BETWEEN api.start_occured_at AND api.end_occured_at\n    WHERE api.type in ('partner', 'tech-partner')     -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 - \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0438\u043b\u0438 \u0442\u0435\u0445.\u043f\u0430\u0440\u0442\u043d\u0435\u0440\n    AND ba.original_sum > 0                               -- \u041e\u0442\u0441\u0435\u043a\u0430\u0435\u043c \u0442\u0440\u0430\u0442\u044b (\u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u0442.\u043f)\n\n  GROUP BY 1, 2, 3, 4\n),\n\n\n\noriginal_currency_data as(\n  SELECT\n    partner_id,                         -- Id \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    type,                               -- \u0422\u0438\u043f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    currency,                           -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    occured_date,                       -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    real_money_org,                     -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    transfer_org,                       -- \u0421\u0443\u043c\u043c\u0430 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u0432 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    bonus_money_org,                    -- \u0421\u0443\u043c\u043c\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    invalid_bills_org,                  -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    convertations_org,                  -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439 \u0437\u0430 \u0441\u043c\u0435\u043d\u0443 \u0432\u0430\u043b\u044e\u0442\u044b \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    combined_org,                       -- \u041e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    COALESCE(real_money_org, 0) + COALESCE(invalid_bills_org, 0) as real_money_invalid_bills_org -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438 \u0438 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u043c\u0438 \u0441\u0447\u0435\u0442\u0430\u043c\u0438 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n  FROM real_money rm\n  FULL OUTER JOIN transfers t USING(partner_id, occured_date, currency, type)\n  FULL OUTER JOIN bonus_money bm USING(partner_id, occured_date, currency, type)\n  FULL OUTER JOIN invalid_bills ib USING(partner_id, occured_date, currency, type)\n  FULL OUTER JOIN convertations c USING(partner_id, occured_date, currency, type)\n  FULL OUTER JOIN all_topups alt USING(partner_id, occured_date, currency, type)\n),\n\noriginal_currency_and_rur_data as(\n  SELECT\n    ocd.partner_id,                         -- Id \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ocd.type,                               -- \u0422\u0438\u043f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    ocd.currency,                       -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    occured_date,                       -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    real_money_org,                     -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    transfer_org,                       -- \u0421\u0443\u043c\u043c\u0430 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u0432 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    bonus_money_org,                    -- \u0421\u0443\u043c\u043c\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    invalid_bills_org,                  -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    convertations_org,                  -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439 \u0437\u0430 \u0441\u043c\u0435\u043d\u0443 \u0432\u0430\u043b\u044e\u0442\u044b \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    combined_org,                       -- \u041e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    real_money_invalid_bills_org,       -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438 \u0438 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u043c\u0438 \u0441\u0447\u0435\u0442\u0430\u043c\u0438 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n\n    real_money_org * COALESCE(cor_rate, 1) as real_money_rur,                               -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    transfer_org * COALESCE(cor_rate, 1) as transfer_rur,                                   -- \u0421\u0443\u043c\u043c\u0430 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u0432 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    bonus_money_org * COALESCE(cor_rate, 1) as bonus_money_rur,                             -- \u0421\u0443\u043c\u043c\u0430 \u0431\u043e\u043d\u0443\u0441\u043e\u0432 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    invalid_bills_org * COALESCE(cor_rate, 1) as invalid_bills_rur,                         -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    convertations_org * COALESCE(cor_rate, 1) as convertations_rur,                         -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439 \u0437\u0430 \u0441\u043c\u0435\u043d\u0443 \u0432\u0430\u043b\u044e\u0442\u044b \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    combined_org * COALESCE(cor_rate, 1) as combined_rur,                                   -- \u041e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    real_money_invalid_bills_org * COALESCE(cor_rate, 1) as real_money_invalid_bills_rur    -- \u0421\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0435\u043d\u044c\u0433\u0430\u043c\u0438 \u0438 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u043c\u0438 \u0441\u0447\u0435\u0442\u0430\u043c\u0438 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    FROM original_currency_data ocd\n    LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_exchangeRates` er ON ocd.occured_date = er.data AND ocd.currency = er.currency AND nominal = 'RUR'\n    JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` api ON ocd.partner_id = api.account_Id and is_employee is false\n)\n\nSELECT *\nFROM original_currency_and_rur_data", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_replenishment_partner_accounts`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.365371Z", "completed_at": "2025-05-21T12:31:14.454042Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.495488Z", "completed_at": "2025-05-21T12:31:14.495499Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.25939154624938965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_replenishment_standart_accounts", "compiled": true, "compiled_code": "WITH subs_calculations_client AS (  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0442\u0440\u0430\u0442\u0430\u043c\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 WABA \u0432 \u043a\u0435\u0439\u0441\u0430\u0445, \u043a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u043b WABA+\u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u043e\u0434\u043d\u0438\u043c \u043f\u043b\u0430\u0442\u0435\u0436\u043e\u043c\n  SELECT\n  \n    tch.account_id AS client_id,                                                                  -- ID \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    tch.account_type,                                                                             -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    CASE WHEN ipb.guid IS NOT NULL THEN ipb.currency ELSE su.currency END as currency,            -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    CASE WHEN ipb.guid IS NOT NULL THEN paid_date ELSE su.created_date END as occured_date,       -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n\n    SUM(su.sum - wapi_transactions)        AS subs_sum_client,       -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    SUM(CASE WHEN ba.sum >= (su.sum - wapi_transactions) THEN (su.sum - wapi_transactions) \n             WHEN activation_object = 'partnerBalance' THEN (su.sum - wapi_transactions)\n             WHEN ba.sum > 0 AND activation_object != 'partnerBalance' AND su.state = 'activated' THEN ba.sum \n             ELSE ba.sum END) AS bonuses_spent_on_subs, -- \u0411\u043e\u043d\u0443\u0441\u044b, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0435 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` tch\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` bp ON tch.account_id = bp.account_id\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates` su ON su.subscription_id = bp.guid AND su.created_at BETWEEN tch.start_occured_at AND tch.end_occured_at\n  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_payments_bills` ipb ON su.activation_reason_id = ipb.guid\n  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba ON ba.subscription_update_id = su.guid\n  \n    WHERE tch.account_type = 'standart'                              -- \u0411\u044b\u043b \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c, \u043a\u043e\u0433\u0434\u0430 \u043f\u043b\u0430\u0442\u0438\u043b\n    --AND (tch.partner_type IN ('standart', 'partner') OR tch.partner_type IS NULL)\n    AND su.action != 'balanceTopup'                                  -- \u0418\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c WABA\n    AND wapi_transactions > 0                                        -- \u0421\u0443\u043c\u043c\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 WABA \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0443\u043b\u044f\n    AND su.state = 'activated'                                       -- \u0422\u043e\u043b\u044c\u043a\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    AND su.partner_discount IS NULL                                  -- \u0418\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043a\u0435\u0439\u0441\u044b, \u043a\u043e\u0433\u0434\u0430 \u043f\u043b\u0430\u0442\u0438\u043b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n  GROUP BY 1, 2, 3, 4\n),\n\n\nwaba_calculations_client AS (  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0442\u0440\u0430\u0442\u0430\u043c\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA \u0432 \u043a\u0435\u0439\u0441\u0430\u0445, \u043a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u043b WABA+\u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u043e\u0434\u043d\u0438\u043c \u043f\u043b\u0430\u0442\u0435\u0436\u043e\u043c\n  SELECT\n    tch.account_id AS client_id,                                                                  -- ID \u043a\u043b\u0438\u0435\u043d\u0442\u0430    \n    tch.account_type,                                                                             -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    CASE WHEN ipb.guid IS NOT NULL THEN ipb.currency ELSE su.currency END as currency,            -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    CASE WHEN ipb.guid IS NOT NULL THEN paid_date ELSE su.created_date END as occured_date,       -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \n    SUM(wapi_transactions)          AS waba_sum_client,           -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\n    SUM(CASE WHEN ba.sum >= (su.sum - wapi_transactions) THEN (ba.sum - (su.sum - wapi_transactions)) \n             WHEN activation_object = 'partnerBalance' THEN wapi_transactions\n             WHEN ba.sum > 0 AND activation_object != 'partnerBalance' AND su.state = 'activated' AND ba.sum >= (su.sum - wapi_transactions) THEN (ba.sum - (su.sum - wapi_transactions))\n             WHEN ba.sum > 0 AND activation_object != 'partnerBalance' AND su.state = 'activated' AND activation_object = 'partnerBalance' THEN wapi_transactions\n             ELSE 0 END)            AS bonuses_spent_on_waba,     -- \u0411\u043e\u043d\u0443\u0441\u044b, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0435 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` tch\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` bp ON tch.account_id = bp.account_id\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates` su ON su.subscription_id = bp.guid AND su.created_at BETWEEN tch.start_occured_at AND tch.end_occured_at\n  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_payments_bills` ipb ON su.activation_reason_id = ipb.guid\n  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba ON ba.subscription_update_id = su.guid\n\n    WHERE tch.account_type = 'standart'                                   -- \u0411\u044b\u043b \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c, \u043a\u043e\u0433\u0434\u0430 \u043f\u043b\u0430\u0442\u0438\u043b\n    --AND (tch.partner_type IN ('standart', 'partner') OR tch.partner_type IS NULL)\n    AND su.action != 'balanceTopup'                               -- \u0418\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c WABA\n    AND wapi_transactions > 0                                     -- \u0421\u0443\u043c\u043c\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 WABA \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0443\u043b\u044f\n    AND su.state = 'activated'                                    -- \u0422\u043e\u043b\u044c\u043a\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    AND su.partner_discount IS NULL                               -- \u0418\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043a\u0435\u0439\u0441\u044b, \u043a\u043e\u0433\u0434\u0430 \u043f\u043b\u0430\u0442\u0438\u043b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n  GROUP BY 1, 2, 3, 4\n),\n\nclient_subscriptions AS (  -- CTE \u0441 \u043e\u043f\u043b\u0430\u0442\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438\n  SELECT\n    tch.account_id AS client_id,                                                                -- ID \u043a\u043b\u0438\u0435\u043d\u0442\u0430     \n    tch.account_type,                                                                           -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    CASE WHEN ipb.guid IS NOT NULL THEN ipb.currency ELSE su.currency END as currency,          -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    CASE WHEN ipb.guid IS NOT NULL THEN paid_date ELSE su.created_date END as occured_date,     -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n\n    SUM(su.sum)                                                                                   AS client_subscriptions_sum,  -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    SUM(CASE WHEN activation_object = 'partnerBalance' THEN su.sum \n             WHEN ba.sum > 0 AND activation_object != 'partnerBalance' AND su.state = 'activated' THEN ba.sum\n             ELSE ba.sum END)  AS bonus_money_spent,          -- \u0411\u043e\u043d\u0443\u0441\u044b, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0435 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` tch\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` bp ON tch.account_id = bp.account_id\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates` su ON su.subscription_id = bp.guid AND su.created_at BETWEEN tch.start_occured_at AND tch.end_occured_at\n  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_payments_bills` ipb ON su.activation_reason_id = ipb.guid\n  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba ON ba.subscription_update_id = su.guid\n\n    WHERE tch.account_type = 'standart'                                                                                                 -- \u0411\u044b\u043b \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c, \u043a\u043e\u0433\u0434\u0430 \u043f\u043b\u0430\u0442\u0438\u043b\n    AND su.action != 'balanceTopup'                                                                                             -- \u0411\u0435\u0440\u0435\u043c \u0432\u0441\u0451 \u043a\u0440\u043e\u043c\u0435 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WWABA\n    AND (wapi_transactions IS NULL OR wapi_transactions = 0)                                                                    -- \u041e\u0442\u0441\u0435\u043a\u0430\u0435\u043c \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0432\u044b\u0448\u0435 \u0442\u0440\u0430\u0442\u044b\n    AND su.state = 'activated'                                                                                                  -- \u0422\u043e\u043b\u044c\u043a\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    AND su.partner_discount IS NULL                                                                                             -- \u0418\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043a\u0435\u0439\u0441\u044b, \u043a\u043e\u0433\u0434\u0430 \u043f\u043b\u0430\u0442\u0438\u043b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n  GROUP BY 1, 2, 3, 4\n),\n \n\nclient_waba_balance AS (   -- CTE \u0441 \u043e\u043f\u043b\u0430\u0442\u043e\u0439 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438\n  SELECT\n    tch.account_id AS client_id,                                                                -- ID \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    tch.account_type,                                                                           -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    CASE WHEN ipb.guid IS NOT NULL THEN ipb.currency ELSE su.currency END as currency,          -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    CASE WHEN ipb.guid IS NOT NULL THEN paid_date ELSE su.created_date END as occured_date,     -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    SUM(su.sum)                                                                                   AS client_waba_sum,  -- \u0421\u0443\u043c\u043c\u0430, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\n    SUM(CASE WHEN activation_object = 'partnerBalance' THEN su.sum \n             WHEN ba.sum > 0 AND activation_object != 'partnerBalance' AND su.state = 'activated' THEN ba.sum\n             ELSE ba.sum END)  AS bonus_money_spent,                                                       -- \u0411\u043e\u043d\u0443\u0441\u044b, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u044b\u0435 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 WABA\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` tch\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` bp ON tch.account_id = bp.account_id\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates` su ON su.subscription_id = bp.guid AND su.created_at BETWEEN tch.start_occured_at AND tch.end_occured_at\n  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_payments_bills` ipb ON su.activation_reason_id = ipb.guid\n  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba ON ba.subscription_update_id = su.guid\n  \n    WHERE tch.account_type = 'standart'                                                                                -- \u0411\u044b\u043b \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c, \u043a\u043e\u0433\u0434\u0430 \u043f\u043b\u0430\u0442\u0438\u043b\n    AND su.action = 'balanceTopup'                                                                                     -- \u0411\u0435\u0440\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\n    AND su.state = 'activated'                                                                                         -- \u0422\u043e\u043b\u044c\u043a\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n    AND su.partner_discount IS NULL                                                                                    -- \u0418\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043a\u0435\u0439\u0441\u044b, \u043a\u043e\u0433\u0434\u0430 \u043f\u043b\u0430\u0442\u0438\u043b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n  GROUP BY 1, 2, 3, 4\n),\n\ninvalid_bills AS (          -- CTE \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e \u0442\u043e\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0435\u043d\u0435\u0433 \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u043a\u043b\u0438\u0435\u043d\u0442 \u0441 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432\n  SELECT\n    ba.account_id     AS client_id,                   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    tch.account_type,                                 -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    currency,                                         -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    occured_date,                                     -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    SUM(ba.sum)       AS invalid_bills_sum            -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` tch ON DATETIME(ba.occured_at) BETWEEN tch.start_occured_at AND tch.end_occured_at AND tch.account_id = ba.account_id\n    WHERE tch.account_type = 'standart'\n    AND object = 'payment'                  \n    AND is_invalid is true                            -- \u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0435 \u0441\u0447\u0435\u0442\u0430\n    AND ba.original_sum > 0                           -- \u041e\u0442\u0441\u0435\u043a\u0430\u0435\u043c \u0442\u0440\u0430\u0442\u044b (\u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u0442.\u043f)\n  GROUP BY 1, 2, 3, 4\n),\n\n\noriginal_currency_data as (         -- \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0435 \u0440\u0430\u0441\u0447\u0435\u0442\u044b \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n  SELECT\n    client_id,              -- ID \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    account_type,           -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    currency,               -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    occured_date,           -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n\n    COALESCE(subs_sum_client, 0) + COALESCE(client_subscriptions_sum, 0) \n    - (COALESCE(bonuses_spent_on_subs, 0) + COALESCE(cs.bonus_money_spent, 0))  AS subscriptions_sum_org,  -- \u0421\u0443\u043c\u043c\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a\n    COALESCE(waba_sum_client, 0) + COALESCE(client_waba_sum, 0)\n    - (COALESCE(bonuses_spent_on_waba, 0) + COALESCE(cw.bonus_money_spent, 0)) AS waba_sum_org,           -- \u0421\u0443\u043c\u043c\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 WABA \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439\n\n    COALESCE(invalid_bills_sum, 0) as invalid_bills_sum_org            -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432\n\n  FROM subs_calculations_client scc\n  FULL OUTER JOIN waba_calculations_client wcc USING (client_id,account_type, currency, occured_date)\n  FULL OUTER JOIN client_subscriptions cs USING (client_id,account_type, currency, occured_date)\n  FULL OUTER JOIN client_waba_balance cw USING (client_id,account_type, currency, occured_date)\n  FULL OUTER JOIN invalid_bills ib USING (client_id,account_type, currency, occured_date)\n\n),\n\noriginal_currency_total_data as (         -- \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0435 \u0440\u0430\u0441\u0447\u0435\u0442\u044b \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n  SELECT\n    client_id,              -- ID \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    account_type as type,           -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    currency,               -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    occured_date,           -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n\n    subscriptions_sum_org,  -- \u0421\u0443\u043c\u043c\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a\n    waba_sum_org,           -- \u0421\u0443\u043c\u043c\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 WABA \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439\n    invalid_bills_sum_org,  -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432\n\n    COALESCE(subscriptions_sum_org, 0) + COALESCE(waba_sum_org, 0) + COALESCE(invalid_bills_sum_org, 0) as total_org    -- \u0421\u0443\u043c\u043c\u0430 \u0432\u0441\u0435\u0445 \u043e\u043f\u043b\u0430\u0442 \n\n  FROM original_currency_data\n),\n\noriginal_currency_and_RUR_data as (         -- \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0435 \u0440\u0430\u0441\u0447\u0435\u0442\u044b \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435 \u0438 \u0440\u0443\u0431\u043b\u044f\u0445\n  SELECT\n    client_id,                      -- ID \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    ocd.type,                           -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    ocd.currency,                   -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    occured_date,                   -- \u0414\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n\n    subscriptions_sum_org,          -- \u0421\u0443\u043c\u043c\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    waba_sum_org,                   -- \u0421\u0443\u043c\u043c\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 WABA \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    invalid_bills_sum_org,          -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    total_org,                      -- \u0421\u0443\u043c\u043c\u0430 \u0432\u0441\u0435\u0445 \u043e\u043f\u043b\u0430\u0442 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    \n    subscriptions_sum_org * COALESCE(cor_rate, 1) as subscriptions_sum_RUR,             -- \u0421\u0443\u043c\u043c\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    waba_sum_org * COALESCE(cor_rate, 1) as waba_sum_RUR,                               -- \u0421\u0443\u043c\u043c\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 WABA \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    invalid_bills_sum_org * COALESCE(cor_rate, 1) as invalid_bills_sum_RUR,             -- \u0421\u0443\u043c\u043c\u0430 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    total_org * COALESCE(cor_rate, 1) as total_RUR                                      -- \u0421\u0443\u043c\u043c\u0430 \u0432\u0441\u0435\u0445 \u043e\u043f\u043b\u0430\u0442 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n\n  FROM original_currency_total_data ocd\n  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_exchangeRates` er ON ocd.occured_date = er.data AND ocd.currency = er.currency AND nominal = 'RUR'\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` api ON ocd.client_id = api.account_Id and is_employee is false\n)\n\n\n \nSELECT *\nFROM original_currency_and_RUR_data", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_replenishment_standart_accounts`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.497024Z", "completed_at": "2025-05-21T12:31:14.541584Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.550470Z", "completed_at": "2025-05-21T12:31:14.550480Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.1406714916229248, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_subscriptions_payments_with_waba_sessions_long", "compiled": true, "compiled_code": "with payments as (\n    select * from  `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_and_converted_currency` \n),\n\nsubscription_sum as  (\n    select currency, \n    start_date, \n    sum_in_rubles-coalesce(wapi_transactions_in_rubles,0) as sum_in_rubles, \n    original_sum-coalesce(wapi_original_sum,0) as original_sum,\n    sum_in_usd-coalesce(wapi_sum_in_usd,0) as sum_in_usd, \n    guid, \n    partner_account_id,\n    subscription_type,\n    account_id  from payments \n    where sum_in_rubles>=wapi_transactions_in_rubles \n),\n\nwaba_sessions_sum as \n    (select currency,                               -- \u0432\u0430\u043b\u044e\u0442\u0430\n    start_date,                                     -- \u0434\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    wapi_transactions_in_rubles as sum_in_rubles,   -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    wapi_original_sum as original_sum,              -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0432\u0430\u043b\u044e\u0442\u0435\n    wapi_sum_in_usd as sum_in_usd,                  -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445\n    guid,                                           -- guid \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438. \u0421\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0443\u0435\u0442 guid \u0438\u0437 subscriptionUpdates\n    partner_account_id,                             -- partner_account_id - \u0435\u0441\u043b\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u043b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n    'wapi_sessions' as subscription_type,           -- \u0442\u0438\u043f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    account_id                                      -- \u0430\u043a\u043a\u0430\u0443\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430\n    from payments where wapi_transactions_in_rubles>0\n        ),\n\nsubscriptions_and_waba_union as (\n    select * from subscription_sum\n    where sum_in_rubles!=0\n    union all \n    select * from waba_sessions_sum\n),\nprofile_info as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n)\n    -- \u0422\u0440\u0430\u0442\u044b \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u0438\u043f\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nselect subscriptions_and_waba_union.*\nfrom subscriptions_and_waba_union\nwhere not exists \n        (\n            select account_Id\n            from profile_info \n            where is_employee\n            and subscriptions_and_waba_union.account_id = profile_info.account_id\n        )", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_subscriptions_payments_with_waba_sessions_long`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.539647Z", "completed_at": "2025-05-21T12:31:14.551026Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.593765Z", "completed_at": "2025-05-21T12:31:14.593776Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.14092612266540527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_wazzup_subscription_deduplicated_by_type", "compiled": true, "compiled_code": "with  profile_info as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n),\ndistinct_subscription_by_user as (\n                      SELECT distinct billingpackages.account_id,\n                      currency,\n                      active_integration_name,\n                      account_segment_type as account_type,\n                      billingpackages.type\n                      FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billingpackages\n                      inner join profile_info  on billingpackages.account_id=profile_info.account_id \n                     where billingpackages.type!='equipment'\n                      and billingpackages.state='active' and (is_free is distinct from True) and  (paid_at is not null)   \n                      and  is_employee is false                \n                    order by account_id, billingpackages.type),\n\n subscription_added_data as (\n        select account_id, \n        currency,\n        account_type,\n        active_integration_name,\n\n        string_agg(case when type='whatsapp' then 'Whatsapp Web'\n        when type='instagram' then 'Instagram'\n        when type='tgapi' then 'Telegram Personal'\n        when type='telegram' then 'Telegram Bot'\n        when type='waba' then 'Waba'\n        when type='avito' then '\u0410\u0432\u0438\u0442\u043e'\n        when type='vk' then '\u0412\u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0435'\n        else type\n        end\n        , \" + \") as subscription_added\n        from distinct_subscription_by_user\n        group by  1,2,3,4\n\n )                   \n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0432\u0441\u0435\u0445 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442\nselect  subscription_added,         -- \u0412\u0441\u0435 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\ncurrency,                           -- \u0412\u0430\u043b\u044e\u0442\u0430\naccount_type,                       -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nactive_integration_name,            -- \u0422\u0438\u043f \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442\n\nLENGTH(subscription_added) - LENGTH(REGEXP_REPLACE(subscription_added, r'\\+', '')) + 1 as sub_number, -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0432 subscription_added\ncount(distinct account_id) as users -- \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\n\nfrom subscription_added_data\ngroup by 1,2,3,4", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_wazzup_subscription_deduplicated_by_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.541941Z", "completed_at": "2025-05-21T12:31:14.554092Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.594923Z", "completed_at": "2025-05-21T12:31:14.594935Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.1814579963684082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.Profeat_site.unique_int_accounts_profile_info_account_id.9ce82bfe57", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select account_id as unique_field\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n  where account_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.548803Z", "completed_at": "2025-05-21T12:31:14.593005Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.596003Z", "completed_at": "2025-05-21T12:31:14.596011Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2192070484161377, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_active_accounts_by_month", "compiled": true, "compiled_code": "with subscription_type as (\n     select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_with_months`\n) \n    -- \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c. \u0417\u0430\u043f\u0438\u0441\u044c \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432 \u044d\u0442\u043e\u0442 \u043c\u0435\u0441\u044f\u0446 \u0431\u044b\u043b \u0430\u043a\u0442\u0438\u0432\u0435\u043d (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0442\u0440\u0438\u0430\u043b\u043e\u0432!!!). \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u0445 https://www.notion.so/687832f855e84aefbb3b5b65c89b8923?pvs=4\nselect *, \nfirst_value(subscription_start) over (partition by account_id order by subscription_start ) as first_subscription_start -- \u043c\u0435\u0441\u044f\u0446, \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437 \u043e\u043f\u043b\u0430\u0442\u0438\u043b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0438\u043b\u0438 \u0443 \u043d\u0435\u0433\u043e \u043d\u0430\u0447\u0430\u043b\u0441\u044f \u0442\u0440\u0438\u0430\u043b\nfrom subscription_type", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_active_accounts_by_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.552143Z", "completed_at": "2025-05-21T12:31:14.596475Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.716535Z", "completed_at": "2025-05-21T12:31:14.716547Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2206733226776123, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_active_accounts_monthly", "compiled": true, "compiled_code": " -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0441 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c \u0438 \u0432\u0430\u043b\u044e\u0442\u0430\u043c\n select  \n          count(distinct t.account_id) as ActiveAccs,   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\n          month,                                        -- \u041c\u0435\u0441\u044f\u0446\n          currency                                      -- \u0412\u0430\u043b\u044e\u0442\u0430\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_with_months_who_paid_without_trials_and_promised_payments` t\ngroup by month,currency", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_active_accounts_monthly`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.635969Z", "completed_at": "2025-05-21T12:31:14.718760Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.763336Z", "completed_at": "2025-05-21T12:31:14.763347Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2597160339355469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_left_accounts_monthly", "compiled": true, "compiled_code": "\n\nwith counting_left_and_returned as (\n    select *,lead(payment_type_monthly) over (partition by account_id order by subscription_start,month) as next_return_payments\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_with_months_who_paid_without_trials_and_promised_payments`\n    where date_trunc(data_otvala,month) <= current_date\n)\nSELECT  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0448\u0435\u0434\u0448\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0435\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u043e\n        date_trunc(data_otvala,month) month_of_leave_date,  -- \u041c\u0435\u0441\u044f\u0446 \u043e\u0442\u043a\u043e\u043b\u0430\n        currency,                                           -- \u0412\u0430\u043b\u044e\u0442\u0430\n        count(distinct case when client_type_with_churn_period_20 in ('came_back_after_leaving_period','did_not_come_back') then account_Id  end) as left_guys, -- \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0443\u0448\u043b\u043e \u0437\u0430 \u043c\u0435\u0441\u044f\u0446\n        count(distinct case when client_type_with_churn_period_20 in ('came_back_after_leaving_period','did_not_come_back') and next_return_payments = 'return_payment_monthly' then account_id end) returned_on_left_day   -- \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043a\u0443\u043f\u0438\u043b\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0432 \u0434\u0435\u043d\u044c \u043e\u0442\u043a\u043e\u043b\u0430\nFROM counting_left_and_returned\ngroup by 1,2", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_left_accounts_monthly`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.761042Z", "completed_at": "2025-05-21T12:31:14.810805Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.817418Z", "completed_at": "2025-05-21T12:31:14.817427Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.18202662467956543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_returned_accounts_monthly", "compiled": true, "compiled_code": "\n  SELECT -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0445\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0435\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u043e\n       month,       -- \u041c\u0435\u0441\u044f\u0446 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430\n       currency,    -- \u0412\u0430\u043b\u044e\u0442\u0430\n       count(distinct account_Id ) as returned, -- \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432\u0435\u0440\u043d\u0443\u043b\u043e\u0441\u044c \u0437\u0430 \u043c\u0435\u0441\u044f\u0446\nFROM `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_with_months_who_paid_without_trials_and_promised_payments`\nwhere payment_type_monthly = 'return_payment_monthly'\ngroup by 1,2", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_returned_accounts_monthly`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.815334Z", "completed_at": "2025-05-21T12:31:14.859854Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.865807Z", "completed_at": "2025-05-21T12:31:14.865815Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14604425430297852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_left_accounts_weekly", "compiled": true, "compiled_code": "\n\nwith counting_left_and_returned as (\n    select *,lead(payment_type_weekly) over (partition by account_id order by subscription_start,week) as next_return_payments\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_with_weeks_who_paid_without_trials_and_promised_payments`\n    where date_trunc(data_otvala,week) <= current_date\n)\nSELECT -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0448\u0435\u0434\u0448\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0435\u0436\u0435\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u043e\n        date_trunc(data_otvala,week(Monday)) week_of_leave_date,    -- \u041d\u0435\u0434\u0435\u043b\u044f \u043e\u0442\u043a\u043e\u043b\u0430\n        currency,                                                   -- \u0412\u0430\u043b\u044e\u0442\u0430\n        count(distinct case when client_type_with_churn_period_20 in ('came_back_after_leaving_period','did_not_come_back') then account_Id  end) as left_guys, -- \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0443\u0448\u043b\u043e \u0437\u0430 \u043d\u0435\u0434\u0435\u043b\u044e\n        count(distinct case when client_type_with_churn_period_20 in ('came_back_after_leaving_period','did_not_come_back') and next_return_payments = 'return_payment_weekly' then account_id end) returned_on_left_day    -- \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043a\u0443\u043f\u0438\u043b\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0432 \u0434\u0435\u043d\u044c \u043e\u0442\u043a\u043e\u043b\u0430  \nFROM counting_left_and_returned\ngroup by 1,2", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_left_accounts_weekly`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.813115Z", "completed_at": "2025-05-21T12:31:14.860213Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.866282Z", "completed_at": "2025-05-21T12:31:14.866291Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1852567195892334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_active_accounts_weekly", "compiled": true, "compiled_code": "\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0441 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u043f\u043e \u043d\u0435\u0434\u0435\u043b\u044f\u043c \u0438 \u0432\u0430\u043b\u044e\u0442\u0430\u043c\nselect  \n          count(distinct t.account_id) as ActiveAccs,           -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\n          week,                                                 -- \u041d\u0435\u0434\u0435\u043b\u044f\n          currency                                              -- \u0412\u0430\u043b\u044e\u0442\u0430\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_with_weeks_who_paid_without_trials_and_promised_payments` t\ngroup by week,currency", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_active_accounts_weekly`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.818703Z", "completed_at": "2025-05-21T12:31:14.861840Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.867233Z", "completed_at": "2025-05-21T12:31:14.867242Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.22442841529846191, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_returned_accounts_weekly", "compiled": true, "compiled_code": "\n\n  SELECT    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0445\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0435\u0436\u0435\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u043e\n       week,        -- \u041d\u0435\u0434\u0435\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430\n       currency,    -- \u0412\u0430\u043b\u044e\u0442\u0430\n       count(distinct account_Id ) as returned, -- \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432\u0435\u0440\u043d\u0443\u043b\u043e\u0441\u044c \u0437\u0430 \u043d\u0435\u0434\u0435\u043b\u044e\nFROM `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_with_weeks_who_paid_without_trials_and_promised_payments`\nwhere payment_type_weekly = 'return_payment_weekly'\ngroup by 1,2", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_returned_accounts_weekly`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.862169Z", "completed_at": "2025-05-21T12:31:14.906005Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:14.990393Z", "completed_at": "2025-05-21T12:31:14.990402Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.22140884399414062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_channels_gupshup_migrations", "compiled": true, "compiled_code": "with profile_info as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n),\ngupshup_channels as (\n    select distinct phone\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_channels` \n    where transport in ('wapi','waba')\n                and deleted = False\n                and is_gupshup_waba is True\n                and temporary = False\n),\nchannels as (\n    select distinct stg_channels.*\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_channels` \n    left join gupshup_channels on stg_channels.phone = gupshup_channels.phone\n    where transport in ('wapi','waba')\n                and deleted = False\n                and is_gupshup_waba is false\n                and temporary = False\n                and gupshup_channels.phone is null\n    )\n, waba_channels_details as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_waba_channels_details`\n),\nsubscription_info as (\n    select account_id, \n        max(subscription_end) as last_subscription_end\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_left_and_returned_date_with_account_type_and_partner_type`\n    group by account_id\n),\ntelegram_notifications as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_account_administrators_and_telegram_usernames`\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043a\u0430\u043d\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e \u0441\u0438\u0445 \u043f\u043e\u0440 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0443 KeyReply. \u0422\u0443\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u0430\u0431\u0430 \u043a\u0430\u043d\u0430\u043b\u044b\nselect  channels.guid as channels_guid,                 -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u0430\u043d\u0430\u043b\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u0435\u0442 guid \u0438\u0437 stg_channels\n        channels.phone as channels_number,              -- \u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u043e\u0437\u0434\u0430\u043d\u0430 \u0432\u0430\u0431\u0430\n        channels.created_date as channel_creation_date, -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u0430\u043d\u0430\u043b\u0430\n        profile_info.email,                             -- \u043f\u043e\u0447\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u0430\u044f \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        profile_info.phone as accounts_phone_number,    -- \u0442\u0435\u043b\u0435\u0444\u043e\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        telegram_username,                              -- \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439 - \u0442\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0438\u0445\u043e\u0434\u044f\u0442 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f\n        channels.account_Id,                            -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        channels.state,                                 -- \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043a\u0430\u043d\u0430\u043b\u0430\n        tier,                                           -- \u0422\u0438\u0440 \u043a\u0430\u043d\u0430\u043b\u0430. https://wazzup24.atlassian.net/wiki/spaces/WAZ/pages/2561854/WABA#%D0%A3%D0%B2%D0%B5%D0%BB%D0%B8%D1%87%D0%B5%D0%BD%D0%B8%D0%B5-TIER\n        profile_info.account_language,                  -- \u044f\u0437\u044b\u043a \u041b\u041a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442\n        profile_info.partner_id,                        -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        partners_accounts.email as partner_accounts_email,  -- \u043f\u043e\u0447\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0440\u0430, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u0430\u044f \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        partners_accounts.account_language as partners_accounts_account_language,   -- \u044f\u0437\u044b\u043a \u041b\u041a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442\n        case when last_subscription_end is null then 'never_had_paid_subscription'\n             when last_subscription_end >= current_date() then 'still_active'\n             when last_subscription_end < current_date() then cast(FORMAT_DATE('%d-%m-%Y',PARSE_DATE('%Y-%m-%d',cast(last_subscription_end as string))) as string)\n             end  as subsrciption_status                -- \u0421\u0442\u0430\u0442\u0443\u0441 \u043f\u043b\u0430\u0442\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 (\u0431\u0435\u0437 \u0443\u0447\u0435\u0442\u0430 \u0442\u0440\u0438\u0430\u043b\u043e\u0432 \u0438 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439). \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0432 \u0434\u043e\u043a\u0435\nfrom channels\njoin profile_info on channels.account_id = profile_info.account_Id\nleft join waba_channels_details channel_details on channels.guid = channel_details.channel_id\nleft join telegram_notifications on channels.account_id = telegram_notifications.account_id \nleft join subscription_info on channels.account_Id = subscription_info.account_Id\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_affiliates` stg_affiliates on stg_affiliates.child_id=profile_info.account_id\nleft join profile_info partners_accounts on stg_affiliates.partner_id=partners_accounts.account_id\nwhere profile_info.type not in ('child-postpay','tech-partner-postpay')\nand profile_info.is_employee is false", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_channels_gupshup_migrations`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.945852Z", "completed_at": "2025-05-21T12:31:14.994917Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.035857Z", "completed_at": "2025-05-21T12:31:15.035866Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2259845733642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_metrics_for_partners_lost_revenue_due_to_churn", "compiled": true, "compiled_code": "\n\nwith    active_subscriptions as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_combined_intervals_only_paid`\n        inner join dbt_prod.stg_months months\n            on months.month >= date_trunc(subscription_start,month)\n            and months.month <= date_trunc(subscription_end,month)\n\n),left_users as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_left_users_for_whom_partner_paid`\n),difference_last_month as (\n        select left_users.* except(left_daughters_account),\n                left_daughters_account as account_id,\n                subscription_id,\n                subscription_start,\n                subscription_end\n        from left_users\n        join active_subscriptions on left_users.left_daughters_account = active_subscriptions.account_id\n                                    and left_users.month = active_subscriptions.month\n), billingPackages as (\n        select *\n        from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages`\n),\nlost_revenue_last_month_grouped_by_subscripion as (\n        select\n            billingpackages.account_id,\n            partner_types.partner_id,\n            subscription_id,\n            period_new,\n            tariff_new,\n            quantity_new,   \n            partner_discount_new,\n            subscription_updates.paid_at,\n            currency,\n            action\n        from\n            `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_updates__corect_date_and_filledna_tarif_period_quantity` subscription_updates\n        join  billingpackages\n                        on subscription_updates.subscription_id = billingpackages.guid\n        join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated` partner_types on billingpackages.account_id = partner_types.account_id\n                                                                                    and cast(subscription_updates.paid_date as date) >= partner_types.start_date\n                                                                                    and cast(subscription_updates.paid_date as date) < partner_types.end_date\n        where action not in ('balanceTopup', 'setPromisedPayment')\n        and partner_types.partner_id is not null and partner_types.partner_id != 0\n    ), lost_revenue as (\n        select\n            difference_last_month.*,\n            (\n                case\n                    when lost_revenue_last_month_grouped_by_subscripion.period_new = 12\n                    then 0.8\n                    when lost_revenue_last_month_grouped_by_subscripion.period_new = 6\n                    then 0.9\n                    else 1\n                end\n            ) as period_discount,\n            coalesce(\n                lost_revenue_last_month_grouped_by_subscripion.period_new,\n                billingpackages.period\n            ) as period_new,\n            coalesce(\n                lost_revenue_last_month_grouped_by_subscripion.quantity_new,\n                billingpackages.quantity\n            ) as quantity_new,\n            coalesce(\n                lost_revenue_last_month_grouped_by_subscripion.tariff_new,\n                billingpackages.tariff\n            ) as tariff_new,\n            partner_discount_new,\n           -- lost_revenue_last_month_grouped_by_subscripion.tariff_new as tariff_new_,\n           --     billingpackages.tariff as tariff_,\n            wazzup_tariff_new.sum as tariff_price_new,\n            lost_revenue_last_month_grouped_by_subscripion.currency,\n            row_number() over (partition by lost_revenue_last_month_grouped_by_subscripion.subscription_id, difference_last_month.subscription_end,difference_last_month.type\n                order by lost_revenue_last_month_grouped_by_subscripion.paid_at desc\n            ) rn,\n            billingpackages.type as subscription_type\n        from difference_last_month\n        left join lost_revenue_last_month_grouped_by_subscripion\n                                                on lost_revenue_last_month_grouped_by_subscripion.subscription_id = difference_last_month.subscription_id\n                                                and date_trunc(cast(lost_revenue_last_month_grouped_by_subscripion.paid_at as date),month) <= difference_last_month.month\n                                               -- and difference_last_month.subscription_start >= cast(lost_revenue_last_month_grouped_by_subscripion.paid_at as date)\n                                                --and difference_last_month.partner_id = lost_revenue_last_month_grouped_by_subscripion.partner_id\n        left join billingpackages\n                        on billingpackages.guid = difference_last_month.subscription_id\n        left join `dwh-wazzup`.`analytics_tech`.`wazzup_tariff` wazzup_tariff_new --select * from `dwh-wazzup`.`analytics_tech`.`wazzup_tariff`\n                    on wazzup_tariff_new.currency\n                                = lost_revenue_last_month_grouped_by_subscripion.currency\n                                and wazzup_tariff_new.tariff = coalesce(\n                                            lost_revenue_last_month_grouped_by_subscripion.tariff_new,\n                                            billingpackages.tariff)\n        \n    ),lost_revenue_sum as (\n        select\n            account_id,\n            partner_id,\n            subscription_id,\n            subscription_type,\n            tariff_price_new,\n            period_new,\n            quantity_new,\n            month as churn_month,\n            partner_discount_new,\n            type,\n            (\n                case\n                    when partner_discount_new is null\n                    then 1\n                    else partner_discount_new\n                end\n            )* tariff_price_new*period_new*quantity_new*period_discount as lost_revenue,\n            currency,\n            rn\n        from lost_revenue\n        where rn = 1\n    ), exchange_rates_info as (\n\n            select *,\n            max(data) over (partition by date_trunc(data,month)) last_day_of_month \n            from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted`\n    ), exchange_rates_unpivoted as (\n            select *except(data),\n            date_trunc(data,month) data\n            from exchange_rates_info\n            where last_day_of_month = data\n        ),\n        lost_revenue_info as (\nselect\n    lost_revenue_sum.*,\n    (\n        case\n            when lost_revenue_sum.currency = 'RUR'\n            then coalesce(abs(lost_revenue), 0)\n            when rur is not null\n            then coalesce(abs(lost_revenue), 0) * rur\n            when lost_revenue_sum.currency = 'EUR' and rur is null\n            then coalesce(abs(lost_revenue), 0) * 85\n            when lost_revenue_sum.currency = 'USD' and rur is null\n            then coalesce(abs(lost_revenue), 0) * 75\n            when lost_revenue_sum.currency = 'KZT' and rur is null\n            then coalesce(abs(lost_revenue), 0) * 0.24\n        end\n    ) as lost_sum_in_rubles,\n\nfrom lost_revenue_sum\nleft join   exchange_rates_unpivoted\n    on exchange_rates_unpivoted.data = lost_revenue_sum.churn_month\n    and exchange_rates_unpivoted.currency = lost_revenue_sum.currency\n    ),unpivot_metrics as (\n    select partner_id,\n        churn_month,\n        sum(lost_sum_in_rubles) as lost_revenue,\n        sum(case when subscription_type in ('waba','wapi') then lost_sum_in_rubles end) as lost_waba_sum,\n        sum(case when subscription_type='tgapi' then lost_sum_in_rubles  end) as lost_tgapi_sum,\n        sum(case when subscription_type='whatsapp' then lost_sum_in_rubles  end) as lost_wa_sum,\n        sum(case when subscription_type='telegram' then lost_sum_in_rubles  end) as lost_telegram_sum,\n        sum(case when subscription_type='instagram' then lost_sum_in_rubles  end) as lost_instagram_sum,\n        sum(case when subscription_type='avito' then lost_sum_in_rubles  end) as lost_avito_sum,\n        'monthly' as type\n    from lost_revenue_info\n    group by partner_id,\n        churn_month)    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u0442\u0435\u0440\u044f\u043d\u043d\u0443\u044e \u043f\u0440\u0438\u0431\u044b\u043b\u044c \u0438\u0437-\u0437\u0430 \u0443\u0445\u043e\u0434\u0430 \u0434\u043e\u0447\u0435\u043a\n        select partner_id,                  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n                churn_month,                -- \u041c\u0435\u0441\u044f\u0446 \u043e\u0442\u043a\u043e\u043b\u0430\n                type,                       -- \u0422\u0438\u043f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430\n                lost_revenue_transport,     -- \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043b\u0438 \u043f\u043b\u0430\u0442\u0438\u0442\u044c\n                lost_revenue_value          -- \u041f\u043e\u0442\u0435\u0440\u044f\u043d\u043d\u0430\u044f \u043f\u0440\u0438\u0431\u044b\u043b\u044c\n        from unpivot_metrics \n        unpivot(lost_revenue_value for lost_revenue_transport  in (lost_revenue, lost_waba_sum,lost_tgapi_sum,lost_wa_sum,lost_telegram_sum,lost_instagram_sum,lost_avito_sum))", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_lost_revenue_due_to_churn`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:14.992626Z", "completed_at": "2025-05-21T12:31:15.036892Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.087643Z", "completed_at": "2025-05-21T12:31:15.087655Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.2660682201385498, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_abcx_segmentation_revenue_amount", "compiled": true, "compiled_code": "with int_subscriptions_subscription_with_sum_and_converted_currency_billing_date as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_and_converted_currency_billing_date`\n)\n\n,stg_billingPackages as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages`\n)\n\n,int_accounts_who_paid__standart_russian_users_without_partners_living_time as (\n    select distinct account_id\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_users_living_time`\n), revenue_amount as (\nselect date_trunc(paid_at_billing_date,month) as month,\n          subs_updates.account_id,\n          coalesce(period_new,period) period,\n          sum(sum_in_rubles-wapi_transactions_in_rubles) as sum_in_rubles_all\n          from int_subscriptions_subscription_with_sum_and_converted_currency_billing_date subs_updates\ninner join stg_billingPackages billingPackes on billingPackes.guid=subs_updates.subscription_id\ninner join int_accounts_who_paid__standart_russian_users_without_partners_living_time accounts_live_time on  billingPackes.account_id = accounts_live_time.account_id \n\nwhere  sum !=0\n\ngroup by date_trunc(paid_at_billing_date,month), subs_updates.account_id,period\n\nunion all \n\nselect  \n        date_trunc(_ibk,month) as month,\n          accountid,\n          cast(period as int) period,\n          sum(cost)*40 as sum_in_rubles_all\n          from wazzup.billing billing\ninner join int_accounts_who_paid__standart_russian_users_without_partners_living_time accounts_live_time on  billing.accountid = accounts_live_time.account_id \nwhere object='package'\ngroup by date_trunc(_ibk,month),accountid,cast(period as int)),\ncombined_revenue_amount as (\nselect month,           -- \u041c\u0435\u0441\u044f\u0446, \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u0430\u0442\u0435 \u0432\u044b\u0440\u0443\u0447\u043a\u0438 \u0438 expired_days, \u0444\u043e\u0440\u043c\u0430\u0442 2022-11-29\n        account_id,     -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n        period,         -- \u041f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        sum(sum_in_rubles_all) sum_in_rubles_all    -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\nfrom revenue_amount\ngroup by month,\n        account_id,\n        period)\nselect *,   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0432\u044b\u0440\u0443\u0447\u043a\u043e\u0439 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    -- row_number() over (partition by combined_revenue_amount.account_id,live_month order by start_month desc)\nfrom combined_revenue_amount\nwhere sum_in_rubles_all != 0\n                                                                                                  --and combined_revenue_amount.month = accounts_live_time.live_month\n                                                                                                  --and combined_revenue_amount.month = accounts_live_time.start_month", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_revenue_amount`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.084219Z", "completed_at": "2025-05-21T12:31:15.095038Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.136825Z", "completed_at": "2025-05-21T12:31:15.136835Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.14679479598999023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_abcx_segmentation_users_living_time_with_revenue_periods", "compiled": true, "compiled_code": "with accounts_live_time as (\nselect * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_users_living_time`\n),\nrevenue as (\nselect month,\n        lead(month) over (partition by account_id order by month) as next_payment_month,\n        account_id,\n        revenue_amount\n--sum(sum_in_rubles_all/period) as revenue_amount\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_revenue_amount_with_real_money_spend_on_subscription`\n--group by 1,3\n),\nrevenue_avg as (\nselect *,\n        avg(revenue_amount) over (partition by account_id order by month rows BETWEEN 2 PRECEDING AND 0 FOLLOWING) as avg_sum_in_rubles\nfrom revenue\n),\ndefining_active_months_with_revenue_months as (\nselect accounts_live_time.account_id,           -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n        first_subscription_start,               -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        country,                                -- \u0421\u0442\u0440\u0430\u043d\u0430\n        live_month,                             -- \u041c\u0435\u0441\u044f\u0446 \u0436\u0438\u0437\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a, \u0444\u043e\u0440\u043c\u0430\u0442 2022-11-29\n        last_end_month,                         -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        revenue_amount,                         -- \u0421\u0443\u043c\u043c\u0430 \u043f\u0440\u0438\u0431\u044b\u043b\u0438\n        revenue_avg.month as payment_month,     -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n        avg_sum_in_rubles ,                     -- \u0421\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0430\u044f \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0437\u0430 3 \u043c\u0435\u0441\u044f\u0446\u0430 (2 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 + \u0442\u0435\u043a\u0443\u0449\u0438\u0439)\n        accounts_live_time.client_living_type,  -- \u0422\u0438\u043f \u0436\u0438\u0437\u043d\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n        row_number() over (partition by accounts_live_time.account_id,live_month order by month desc) rn,\n        market_type,                            -- \u0420\u044b\u043d\u043e\u043a\n        account_type,                           -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        register_date                           -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\nfrom accounts_live_time\nleft join revenue_avg  on revenue_avg.account_id = accounts_live_time.account_id\n        and accounts_live_time.live_month = revenue_avg.month\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u0438\u0445 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0436\u0438\u0437\u043d\u0438 \u0441 \u043f\u0440\u0438\u0431\u044b\u043b\u044c\u044e\nselect *\nfrom defining_active_months_with_revenue_months\n--where rn = 1\n--where account_id = 10082780\n--order by live_month\n--10082780\n--10186725", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_users_living_time_with_revenue_periods`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.088960Z", "completed_at": "2025-05-21T12:31:15.135299Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.140981Z", "completed_at": "2025-05-21T12:31:15.140990Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.18474864959716797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_metrics_for_partners_all_metrics_together", "compiled": true, "compiled_code": "\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043f\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u043c\nselect                      \n                          active.*except(daughters_count),\n                          cast(daughters_count as float64) daughters_count,                             -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u0447\u0435\u043a\n                          cast(left_users.left_daughters_count as float64) left_daughters_count,        -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0448\u0435\u0434\u0448\u0438\u0445 \u0434\u043e\u0447\u0435\u043a\n                          cast(regs.reg_daughters_count as float64) reg_daughters_count ,               -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0434\u043e\u0447\u0435\u043a\n                          cast(discount_sum_in_rubles as float64) discount_sum_in_rubles,               -- \u0421\u0443\u043c\u043c\u0430 \u043a\u043e\u043c\u0438\u0441\u0441\u0438\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n\n                          cast(paid_channels_quantity as float64) paid_channels_quantity,               -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432\n                          cast(paid_channels_waba_quantity as float64)  paid_channels_waba_quantity,    -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 WABA\n                          cast(paid_channels_tgapi_quantity as float64)  paid_channels_tgapi_quantity,  -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 TGAPI\n                          cast(paid_channels_wa_quantity as float64)  paid_channels_wa_quantity,        -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 WHATSAPP\n                          cast(paid_channels_telegram_quantity as float64)  paid_channels_telegram_quantity,    -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 TELEGRAM\n                          cast(paid_channels_instagram_quantity as float64)  paid_channels_instagram_quantity,  -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 INSTAGRAM\n                          cast(paid_channels_avito_quantity as float64) paid_channels_avito_quantity,   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 AVITO\n                          cast(paid_channels_vk_quantity as float64) paid_channels_vk_quantity,         -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 VK\n\n                          cast(paid_channels_waba_sum as float64)  paid_channels_waba_sum,              -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 WABA\n                          cast(paid_channels_tgapi_sum as float64)  paid_channels_tgapi_sum,            -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 TGAPI\n                          cast(paid_channels_wa_sum as float64)  paid_channels_wa_sum,                  -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 WHATSAPP\n                          cast(paid_channels_telegram_sum as float64)  paid_channels_telegram_sum,      -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 TELEGRAM\n                          cast(paid_channels_instagram_sum as float64)  paid_channels_instagram_sum,    -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 INSTAGRAM\n                          cast(paid_channels_avito_sum as float64) paid_channels_avito_sum,             -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 AVITO\n                          cast(paid_channels_vk_sum as float64) paid_channels_vk_sum,                   -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 VK\n\n                          c2_tab.c2,            -- \u041c\u0435\u0442\u0440\u0438\u043a\u0430 C2 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u043e\u043b\u044e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445: \u041f\u0430\u0440\u0442\u043d\u0435\u0440 \u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442 \u043e\u0441\u0442\u0430\u043b\u0438\u0441\u044c \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u043c\u0435\u0441\u044f\u0446\u0435\u0432. \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043f\u0435\u0440\u0432\u043e\u0439 \u043e\u043f\u043b\u0430\u0442\u043e\u0439 \u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u043c\u0435\u0441\u044f\u0446\u0435\u043c \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u043e\u0432\u043d\u043e 2 \u043c\u0435\u0441\u044f\u0446\u0430.\n                          c1_tab.C1 as c1,      -- \u041c\u0435\u0442\u0440\u0438\u043a\u0430 C1 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u043e\u043b\u044e \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0438\u0441\u044c \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 (reg_month = date), \u043f\u043e \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044e \u043a\u043e \u0432\u0441\u0435\u043c \u0434\u043e\u0447\u0435\u0440\u043d\u0438\u043c \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c.\n                          earned_sum_referals   -- \u0421\u0443\u043c\u043c\u0430, \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u0430\u044f \u0441 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u043e\u0432\nfrom      `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_active_users_for_whom_partner_paid_count` active\njoin      `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`  profile_info on active.partner_id = profile_info.account_id and is_employee is False and profile_info.type in ('partner','tech-partner')\n\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_left_users_for_whom_partner_paid_count` left_users on active.date = left_users.month\n                                                                                                                    and active.partner_id = left_users.partner_id\n                                                                                                                    and active.type = left_users.type\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_registrated_users_count` regs on active.date = regs.reg_month\n                                                                                                and active.partner_id = regs.partner_id\n                                                                                                and active.type = regs.type\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_earned_money` earned_money on active.date = earned_money.paid_month\n                                                                                            and active.partner_id = earned_money.partner_id\n                                                                                            and active.type = earned_money.type\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_channels_sold`  channels_count on active.date = channels_count.paid_month\n                                                                                        and active.partner_id = channels_count.partner_id\n                                                                                        and active.type = channels_count.type\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_conversation_from_first_to_third_active_period` c2_tab on active.date = c2_tab.month\n                                                                                                                 and active.partner_id = c2_tab.partner_id\n                                                                                                                 and active.type = c2_tab.type\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_reg_to_active` c1_tab on active.date = c1_tab.reg_month\n                                                                                        and active.partner_id = c1_tab.partner_id\n                                                                                        and active.type = c1_tab.type\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_referal_earnings` referal_earnings on active.date = referal_earnings.paid_month\n                                                                                                    and active.partner_id = referal_earnings.partner_id\n                                                                                                    and active.type = referal_earnings.type", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_all_metrics_together`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.092623Z", "completed_at": "2025-05-21T12:31:15.136371Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.141940Z", "completed_at": "2025-05-21T12:31:15.141948Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.22553181648254395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_active_channel_transport_by_month", "compiled": true, "compiled_code": "-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u0430\u043a\u0438\u0435 \u043f\u043b\u0430\u0442\u043d\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u044b \u0430\u043a\u0442\u0438\u0432\u043d\u044b \u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u043e\u043c\u0435\u0441\u044f\u0447\u043d\u043e\nSELECT DISTINCT\n    DATE_TRUNC(date, month) AS month,     -- \u041c\u0435\u0441\u044f\u0446\n    transport,                            -- \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\n    account_id                            -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nFROM `dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_channels`\nWHERE is_free is distinct from true     -- \u0411\u0435\u0440\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043b\u0430\u0442\u043d\u044b\u0435 \u043a\u0430\u043d\u0430\u043b\u044b\n    AND package_id is not null\nORDER BY 1, 3", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_active_channel_transport_by_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.137905Z", "completed_at": "2025-05-21T12:31:15.221753Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.263377Z", "completed_at": "2025-05-21T12:31:15.263387Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.21902251243591309, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_first_month_by_type", "compiled": true, "compiled_code": "with accounts as (\n    select account_id, register_date from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`\n),\n\nchannels as (\n    select account_id, guid from `dwh-wazzup`.`dbt_nbespalov`.`stg_channels`\n),\n\n\nactive_channels as (\n     select * from  `dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_channels`\n),\n\nunique_transport_paid_channels as (\n    SELECT \n    accounts.account_id,                        -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    transport,                                  -- \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442 \u043a\u0430\u043d\u0430\u043b\u0430\n    count(distinct channel_id) as channel_count -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432\n    FROM  accounts\n    inner join active_channels on active_channels.account_id=accounts.account_id \n    where active_channels.date<=date_add(accounts.register_date, interval 1 month) \n    and subscription_id is not null and is_free is distinct from True\n    group by 1,2\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u043a\u0430\u043d\u0430\u043b\u0430\u043c\u0438 \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\nselect * from unique_transport_paid_channels\npivot(sum(channel_count) for transport in ('tgapi','whatsapp','instagram','telegram','waba','vk','avito'))", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_first_month_by_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.219971Z", "completed_at": "2025-05-21T12:31:15.264601Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.306803Z", "completed_at": "2025-05-21T12:31:15.306813Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.21257781982421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_whatsapp_paid_added_first_month", "compiled": true, "compiled_code": "with\n    profile_info as (select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`),\n\n    channels_history as (\n        select account_id, \n        date, \n        transport, \n        subscription_id,\n        channel_id,\n        is_free\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_channels`\n    ),\n\n    channels as (select guid, phone from `dwh-wazzup`.`dbt_nbespalov`.`stg_channels`)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u043a\u0430\u043d\u0430\u043b\u0430\u043c\u0438 WHATSAPP, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0438 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u044b \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\nselect channels_history.account_id,             -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\ncount(distinct channels.phone) as channel_count -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432\nfrom channels_history\ninner join profile_info on profile_info.account_id = channels_history.account_id\ninner join channels on channels.guid = channels_history.channel_id\nwhere\n    channels_history.date <= date_add(profile_info.register_date, interval 1 month)\n    and channels_history.transport = 'whatsapp'\n    and channels_history.subscription_id is not null and is_free is distinct from True\ngroup by 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_whatsapp_paid_added_first_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.265799Z", "completed_at": "2025-05-21T12:31:15.309811Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.358228Z", "completed_at": "2025-05-21T12:31:15.358239Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.21909546852111816, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channes_unique_chats_per_accounts_first_month", "compiled": true, "compiled_code": "with accounts as (\n    select account_id, register_date from `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`\n),\n\nchannels as (\n    select account_id, guid from `dwh-wazzup`.`dbt_nbespalov`.`stg_channels`\n),\n\nunique_chats_data as (\n    select * from  `dwh-wazzup`.`dbt_nbespalov`.`stg_unique_chats`\n),\n\nactive_channels as (\n     select * from  `dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_channels`\n),\n\nunique_dialogs_paid_channels as (\n    SELECT distinct accounts.account_id, \n    unique_chats_data.date, \n    unique_chats as unique_dialogs\n    FROM  accounts\n    left join channels on accounts.account_id=channels.account_id \n    left join unique_chats_data on  unique_chats_data.channel_id=channels.guid\n    left join active_channels on active_channels.channel_id=unique_chats_data.channel_id \n    where unique_chats_data.date<=date_add(accounts.register_date, interval 1 month)\n    and active_channels.date<=date_add(accounts.register_date, interval 1 month) \n    and subscription_id is not null and is_free is distinct from True\n),\n\nunique_dialogs_paid_channels_aggregated as (\n    SELECT account_id,                      -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    sum(unique_dialogs) as unique_dialogs   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u0432\n    FROM  unique_dialogs_paid_channels\n    group by 1\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u0432 \u043f\u043e \u043a\u0430\u043d\u0430\u043b\u0430\u043c \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\nselect * from unique_dialogs_paid_channels_aggregated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channes_unique_chats_per_accounts_first_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.351356Z", "completed_at": "2025-05-21T12:31:15.360398Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.401691Z", "completed_at": "2025-05-21T12:31:15.401702Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1759204864501953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_onboarding__accounts_integrations_subscriptions_channels_messages", "compiled": true, "compiled_code": "WITH registration_sources AS (\n                             SELECT *\n                             FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_attribution_data`\n                             WHERE account_type_current = 'standart'\n                             ),\n     onboarding_users AS (\n                         SELECT DISTINCT account_id\n                         FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts_events__role_choose`\n                         WHERE crm != 'noCrm'\n                         ),\n     first_channels AS (\n                       SELECT *\n                       FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_first_channel_date_and_transport`\n                       ),\n     first_integration AS (\n                          SELECT *\n                          FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_first_integration_date_and_type`\n                          ),\n     first_subscription AS (\n                           SELECT *\n                           FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_first_subscription_date_and_type`\n                           ),\n     first_message AS (\n                      SELECT *\n                      FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_minIncomingMessage`\n                      ),\n     channels_before_first_subscription AS (\n                                           SELECT *\n                                           FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_channels_added_before_first_subscription`\n                                           ),\n     revenue AS (\n                SELECT account_id\n                     , sum(sum_in_rubles_spent_on_subscription) AS revenue\n                FROM `dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_and_wapi_sessions_real_money`\n                GROUP BY 1\n                ),\n     profile_info AS (\n                     SELECT *\n                     FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n                     ),\n     channels_by_account_id_n_days_after_registration AS (\n                                                         SELECT *\n                                                         FROM `dwh-wazzup`.`dbt_nbespalov`.`int_channels_by_account_id_n_days_after_registration`\n                                                         ),\n     userflow_data_up_to_14_05 AS (\n                                  SELECT *\n                                  FROM dwh-wazzup.views.userflow_up_to_05_14\n                                  ),\n     all_user_data AS (\n                      SELECT registration_sources.*\n                           , first_integration.created_date                                             AS integration_created_date -- \u0434\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n                           , first_integration.integration_type         -- \u0442\u0438\u043f \u043f\u0435\u0440\u0432\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n                           , first_integration.integration_type_valid   -- \u0442\u0438\u043f \u043f\u0435\u0440\u0432\u043e\u0439 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n                           , first_integration.integration_type_valid_created_date  -- \u0434\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0439 \u0432\u0430\u043b\u0438\u0434\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n                           , first_channels.created_date                                                AS channel_created_date -- \u0434\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u0430\u043d\u0430\u043b\u0430. \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u0430\u043d\u0430\u043b \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043e\u043d \u043f\u0435\u0440\u0435\u0448\u0435\u043b \u0432 temporary=False (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u0442\u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043b\u0438 qr \u043a\u043e\u0434 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 whatsapp)\n                           , first_channels.transport                   -- \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043a\u0430\u043d\u0430\u043b\u0430\n                           , first_message.min_message_date             -- \u0434\u0430\u0442\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0447\u0435\u0440\u0435\u0437 crm\n                           , first_subscription.start_date                                              AS min_subscription_date    -- \u0434\u0430\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n                           , first_subscription.subscription_type       -- \u0442\u0438\u043f \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n                           , first_subscription.period                  -- \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n                           , first_subscription.tariff                  -- \u0442\u0430\u0440\u0438\u0444 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n                           , first_subscription.quantity                -- \u0447\u0438\u0441\u043b\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n                           , channels_before_first_subscription.transport_added    -- \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u044b, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u043e \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n                           , profile_info.russian_country_name          -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\n                           , profile_info.currency                                                      AS account_currency -- \u0412\u0430\u043b\u044e\u0442\u0430\n                           , profile_info.region_international          -- \u0420\u0435\u0433\u0438\u043e\u043d\n                           , profile_info.account_language              -- \u042f\u0437\u044b\u043a \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n                           , revenue.revenue                            -- \u0432\u044b\u0440\u0443\u0447\u043a\u0430, \u043f\u0440\u0438\u043d\u0435\u0441\u043d\u043d\u0430\u044f \u044d\u0442\u0438\u043c \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u043c, \u0437\u0430 \u0432\u0441\u0435 \u0432\u0440\u0435\u043c\u044f\n                           , profile_info.account_currency_by_country   -- \u0412\u0430\u043b\u044e\u0442\u0430 \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0435\n                           , company_role                               -- \u0420\u043e\u043b\u044c \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u0430\u044f \u043f\u043e \u043e\u043f\u0440\u043e\u0441\u0443 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u043d\u0431\u043e\u0440\u0434\u0438\u043d\u0433\u0430\n                           , crm_from_survey                            -- CRM, \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u0430\u044f \u043f\u043e \u043e\u043f\u0440\u043e\u0441\u0443 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u043d\u0431\u043e\u0440\u0434\u0438\u043d\u0433\u0430\n                           , channels_by_account_id_n_days_after_registration.*EXCEPT(account_id)\n                           , CASE WHEN onboarding_users.account_id IS NOT NULL THEN TRUE ELSE FALSE END AS passed_onboarding\n                      FROM registration_sources\n                          LEFT JOIN first_channels\n                                  ON registration_sources.account_id = first_channels.account_id\n                          LEFT JOIN first_integration\n                                  ON registration_sources.account_id = first_integration.account_id\n                          LEFT JOIN first_subscription\n                                  ON registration_sources.account_id = first_subscription.account_id\n                          LEFT JOIN first_message\n                                  ON registration_sources.account_id = first_message.account_id\n                          LEFT JOIN channels_before_first_subscription\n                                  ON registration_sources.account_id = channels_before_first_subscription.account_id\n                          LEFT JOIN revenue\n                                  ON registration_sources.account_id = revenue.account_id\n                          LEFT JOIN profile_info\n                                  ON registration_sources.account_id = profile_info.account_id\n                          LEFT JOIN channels_by_account_id_n_days_after_registration\n                                  ON channels_by_account_id_n_days_after_registration.account_id\n                                  = registration_sources.account_id\n                          LEFT JOIN userflow_data_up_to_14_05\n                                  ON userflow_data_up_to_14_05.account_id\n                                  = cast(registration_sources.account_id AS string)\n                          LEFT JOIN onboarding_users ON registration_sources.account_id = onboarding_users.account_id\n                      ) -- \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u044d\u0442\u0430\u043f\u044b \u0432\u043e\u0440\u043e\u043d\u043a\u0438 \u043e\u043d\u0431\u043e\u0440\u0434\u0438\u043d\u0433\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: \u043e\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u043e \u043e\u043f\u043b\u0430\u0442\u044b\nSELECT *\nFROM all_user_data\nWHERE NOT exists (\n                 SELECT account_id\n                 FROM profile_info\n                 WHERE is_employee\n                   AND profile_info.account_id = all_user_data.account_id\n                 )", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_onboarding__accounts_integrations_subscriptions_channels_messages`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.349228Z", "completed_at": "2025-05-21T12:31:15.360811Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.402202Z", "completed_at": "2025-05-21T12:31:15.402214Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.21718859672546387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_active_channels", "compiled": true, "compiled_code": "SELECT date,\n  date_trunc(date,week) week,\n  date_trunc(date,month) month,\n  date_trunc(date,year) year,\n  CASE\n    WHEN type = 'partner-demo' THEN '\u0414\u0435\u043c\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442'\n    WHEN account_type IN ('partner','tech-partner') AND is_free THEN '\u0412 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435 \u0443 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430'\n    WHEN type = 'child-postpay' THEN '\u041a\u0430\u043d\u0430\u043b\u044b \u043f\u043e\u0441\u0442\u043e\u043f\u043b\u0430\u0442\u043d\u0438\u043a\u043e\u0432'\n    WHEN transport = 'whatsapp' AND is_free THEN '\u0412 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'whatsapp' AND subscription_id IS NOT NULL THEN '\u0412 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'whatsapp' AND date <= DATE_ADD(whatsap_trial, INTERVAL 1 DAY) AND subscription_id IS NULL THEN '\u0412 \u0442\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'tgapi' AND is_free THEN '\u0412 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'tgapi' AND subscription_id IS NOT NULL THEN '\u0412 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'tgapi' AND date <= DATE_ADD(tgapi_trial, INTERVAL 1 DAY) THEN '\u0412 \u0442\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'instagram' AND is_free THEN '\u0412 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'instagram' AND subscription_id IS NOT NULL THEN '\u0412 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'instagram' AND date <= DATE_ADD(instagram_trial, INTERVAL 1 DAY) AND subscription_id IS NULL THEN '\u0412 \u0442\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'waba' AND is_free THEN '\u0412 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'waba' AND subscription_id IS NULL AND package_id IS NOT NULL THEN '\u0412 \u0442\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'waba' AND subscription_id IS NOT NULL THEN '\u0412 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'waba' AND date <= DATE_ADD(wapi_trial, INTERVAL 1 DAY) AND subscription_id IS NULL THEN '\u0412 \u0442\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'avito' AND is_free THEN '\u0412 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'avito' AND subscription_id IS NOT NULL THEN '\u0412 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'avito' AND date <= DATE_ADD(avito_trial, INTERVAL 1 DAY) AND subscription_id IS NULL THEN '\u0412 \u0442\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'vk' AND is_free THEN '\u0412 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'vk' AND subscription_id IS NOT NULL THEN '\u0412 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'vk' AND date <= DATE_ADD(vk_trial, INTERVAL 1 DAY) AND subscription_id IS NULL THEN '\u0412 \u0442\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'vk' AND package_id IS NULL THEN '\u0412 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'telegram' AND subscription_id IS NOT NULL THEN '\u0412 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'telegram' AND package_id IS NOT NULL THEN '\u0412 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    WHEN transport = 'telegram' AND date <= DATE_ADD(telegram_trial, INTERVAL 1 DAY) AND subscription_id IS NULL THEN '\u0412 \u0442\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n    ELSE '\u0412 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435'\n  END AS channel_status,\n  transport,\n  COUNT(DISTINCT IF(currency = 'RUR', channel_id, NULL)) AS cnt_rur,\n  COUNT(DISTINCT IF(currency = 'EUR', channel_id, NULL)) AS cnt_eur,\n  COUNT(DISTINCT IF(currency = 'USD', channel_id, NULL)) AS cnt_usd,\n  COUNT(DISTINCT IF(currency = 'KZT', channel_id, NULL)) AS cnt_kzt,\n  COUNT(DISTINCT IF(currency IN ('RUR','KZT'), channel_id, NULL)) AS cnt_rurkzt,\n  COUNT(DISTINCT IF(currency IN ('USD','EUR'), channel_id, NULL)) AS cnt_usdeur,\n  COUNT(DISTINCT channel_id) AS cnt_all\n\nFROM `dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_channels`\nGROUP BY GROUPING SETS (  \n  (channel_status, date, transport),\n  (channel_status, week, transport),  \n  (channel_status, month, transport),\n  (channel_status, year, transport))", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_active_channels`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.355191Z", "completed_at": "2025-05-21T12:31:15.361467Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.402743Z", "completed_at": "2025-05-21T12:31:15.402752Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2150862216949463, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_all_groupped_by_accounts_transport", "compiled": true, "compiled_code": "\nwith channels as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_groupped_by_accounts_transport`\n),\n channels_for_filter as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_groupped_by_accounts_transport`\n    where transport not like '%\u041d\u0435%'\n),\nactive_channels as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_groupped_by_accounts_transport`\n    where transport not like '%\u041d\u0435\u0442%'\n),\n\nactive_channels_with_active_subscription as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_with_subscription_groupped_by_accounts_transport`\n    where transport not like '%\u041d\u0435\u0442%'\n),\n\ndoes_not_have_channels as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_groupped_by_accounts_transport`\n    where transport like '%\u041d\u0435%'\n),\n\ndoes_not_have_active_channels as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_groupped_by_accounts_transport`\n    where transport like '%\u041d\u0435\u0442%'\n),\n\ndoes_not_have_active_channels_with_active_subscription as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_with_subscription_groupped_by_accounts_transport`\n    where transport like '%\u041d\u0435\u0442%'\n),\n\n\n\nall_channels as (\nselect channels.account_Id, -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n\n        IFNULL(coalesce(channels_for_filter.transport,\n                LAST_VALUE(channels_for_filter.transport IGNORE NULLS) OVER (PARTITION BY channels.account_id ORDER BY channels.account_id)),'\u041d\u0435\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u043d\u0435\u0443\u0434\u0430\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u0430\u043d\u0430\u043b\u0430') transport_channel,    -- \u041a\u0430\u043a\u043e\u0439 \u043a\u0430\u043d\u0430\u043b \u0431\u044b\u043b \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430?\n        IFNULL(coalesce(active_channels.transport,\n                LAST_VALUE(active_channels.transport IGNORE NULLS) OVER (PARTITION BY channels.account_id ORDER BY channels.account_id)),'\u041d\u0435\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043a\u0430\u043d\u0430\u043b\u0430') transport_active_channel,    -- \u041a\u0430\u043a\u043e\u0439 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u043a\u0430\u043d\u0430\u043b \u0431\u044b\u043b \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430?\n        IFNULL(coalesce(active_channels_with_active_subscription.transport,\n                LAST_VALUE(active_channels_with_active_subscription.transport IGNORE NULLS) OVER (PARTITION BY channels.account_id ORDER BY channels.account_id)),'\u041d\u0435\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043a\u0430\u043d\u0430\u043b\u0430 \u0441 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439') transport_active_with_active_subscription, -- \u041a\u0430\u043a\u043e\u0439 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u043a\u0430\u043d\u0430\u043b \u0441 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439 \u0431\u044b\u043b \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430?\n        \n        IFNULL(coalesce(does_not_have_channels.transport,\n                LAST_VALUE(does_not_have_channels.transport IGNORE NULLS) OVER (PARTITION BY channels.account_id ORDER BY channels.account_id)),'\u0423 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0431\u044b\u043b\u0438 \u0432\u0441\u0435 \u043a\u0430\u043d\u0430\u043b\u044b') does_not_have_transport_channel,  -- \u041a\u0430\u043a\u043e\u0433\u043e \u043a\u0430\u043d\u0430\u043b\u0430 \u043d\u0435 \u0431\u044b\u043b\u043e \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430?\n        coalesce(does_not_have_active_channels.transport,\n                LAST_VALUE(does_not_have_active_channels.transport IGNORE NULLS) OVER (PARTITION BY channels.account_id ORDER BY channels.account_id)) does_not_have_transport_active_channel,  -- \u041a\u0430\u043a\u043e\u0433\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043a\u0430\u043d\u0430\u043b\u0430 \u043d\u0435 \u0431\u044b\u043b\u043e \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430?\n        coalesce(does_not_have_active_channels_with_active_subscription.transport,\n                LAST_VALUE(does_not_have_active_channels_with_active_subscription.transport IGNORE NULLS) OVER (PARTITION BY channels.account_id ORDER BY channels.account_id)) does_not_have_transport_active_with_active_subscription -- \u041a\u0430\u043a\u043e\u0433\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043a\u0430\u043d\u0430\u043b\u0430 \u0441 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439 \u043d\u0435 \u0431\u044b\u043b\u043e \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430?\n\nfrom channels\n\nleft join channels_for_filter\n        on channels.account_Id = channels_for_filter.account_Id \n        and channels.transport_order_number = channels_for_filter.transport_order_number\nleft join active_channels \n        on channels.account_Id = active_channels.account_Id \n        and channels.transport_order_number = active_channels.transport_order_number\nleft join active_channels_with_active_subscription \n        on channels.account_Id = active_channels_with_active_subscription.account_Id \n        and channels.transport_order_number = active_channels_with_active_subscription.transport_order_number\n\nleft join does_not_have_channels \n        on channels.account_Id = does_not_have_channels.account_Id \n        and channels.transport_order_number = does_not_have_channels.transport_order_number\nleft join does_not_have_active_channels\n        on channels.account_Id = does_not_have_active_channels.account_Id \n        and channels.transport_order_number = does_not_have_active_channels.transport_order_number\nleft join does_not_have_active_channels_with_active_subscription \n        on channels.account_Id = does_not_have_active_channels_with_active_subscription.account_Id \n        and channels.transport_order_number = does_not_have_active_channels_with_active_subscription.transport_order_number               \n        )   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043a\u0430\u043d\u0430\u043b\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443 \u0438 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0443\nselect * \nfrom all_channels\norder by account_Id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_all_groupped_by_accounts_transport`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.403790Z", "completed_at": "2025-05-21T12:31:15.524497Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.527686Z", "completed_at": "2025-05-21T12:31:15.527695Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2117314338684082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_revenue_by_month", "compiled": true, "compiled_code": "with payments_deduplicated as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_with_account_and_partner_type`\n)\n    -- \u0412\u044b\u0440\u0443\u0447\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043f\u0440\u0438\u043d\u0435\u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445 (\u0432\u043d\u043e\u0441\u0438\u043b\u0438 \u043b\u0438\u0431\u043e \u0434\u043e\u0447\u043a\u0438, \u043b\u0438\u0431\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440)\nselect \n        (case when account_type in ('partner','tech-partner')  then account_id\n              when partner_type in ('partner','tech-partner') and account_type='standart' \n         then partner_id end) as partner_id,  -- \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n         paid_month,                          -- \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\n    --count(distinct case when account_type in ('partner','tech-partner')  then account_id\n                    --    when partner_type in ('partner','tech-partner') and account_type='standart' \n                  -- then account_id end) distinct_users_count,\n    sum(case when account_type in ('partner','tech-partner') then sum_in_rubles end) as sum_in_rubles_partner_paid, -- \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445 \u043e\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    sum(sum_in_rubles) as sum_in_rubles       -- \u043e\u0431\u0449\u0430\u044f \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    from payments_deduplicated\n    group by 1,2", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_revenue_by_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.522455Z", "completed_at": "2025-05-21T12:31:15.528233Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.571423Z", "completed_at": "2025-05-21T12:31:15.571434Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.21108388900756836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_employees_payments", "compiled": true, "compiled_code": "with profile_info as (\n    select account_id\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n    where is_employee\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043e\u043f\u043b\u0430\u0442\u0430\u043c\u0438 \u043d\u0430\u0448\u0438\u0445 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432\nselect paid_date,                       -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n        all_payments_union.account_id,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        all_payments_union.currency,    -- \u0412\u0430\u043b\u044e\u0442\u0430\n        original_sum,                   -- \u0421\u0443\u043c\u043c\u0430 \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u043b\u0430\u0442\u0438\u0442\u044c \u043d\u0430 \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445, \u0442\u0435\u043d\u0433\u0435, \u0435\u0432\u0440\u043e \u0438\u043b\u0438 \u0440\u0443\u0431\u043b\u044f\u0445. \u0412 \u044d\u0442\u043e\u043c \u043f\u043e\u043b\u0435 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0441\u0443\u043c\u043c\u0430 \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u043d\u0435\u0441 10 \u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432, \u0442\u043e \u0442\u0443\u0442 \u0431\u0443\u0434\u0435\u0442 \u0446\u0438\u0444\u0440\u0430 10\n        data_source                     -- \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043e\u043f\u043b\u0430\u0442\u044b\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_payments_with_account_and_partner_type` all_payments_union\ninner join `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accounts on all_payments_union.account_id = accounts.account_id\nwhere original_sum !=0\nand (account_type in ('employee','partner-demo') or partner_type='employee' or all_payments_union.account_id in (select account_id from profile_info))\nand all_payments_union.data_source != 'bank_pay'", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_employees_payments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.529678Z", "completed_at": "2025-05-21T12:31:15.612903Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.621691Z", "completed_at": "2025-05-21T12:31:15.621700Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.14244914054870605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_payments_retention", "compiled": true, "compiled_code": "with payments_with_min_date as (\n    select *,\n    min(paid_month) over (partition by account_id) as first_payment_month,                 -- \u041c\u0435\u0441\u044f\u0446 \u043f\u0435\u0440\u0432\u043e\u0439 \u043e\u043f\u043b\u0430\u0442\u044b, \u0444\u043e\u0440\u043c\u0430\u0442 2022-11-29\n    dense_rank() over (partition by account_id order by paid_month) as month_payment_order -- \u041f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043e\u043f\u043b\u0430\u0442\u044b, \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_with_account_and_partner_type` \n    where account_type!='employee'),\n\nregistration_source as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_attribution_data`\n    ),\n\nfirst_subscription_type as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_first_subscription_date_and_type`\n    ),\n\nprofile_info as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n),\n\npayments_with_registration_source as (\n    select payments_with_min_date.*,\n    profile_info.russian_country_name,                          -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\n    profile_info.currency as account_currency,                  -- \u0412\u0430\u043b\u044e\u0442\u0430\n    registration_source.registration_date,                      -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n    registration_source.utm_source,                             -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM source \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\n    registration_source.utm_medium,                             -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM medium \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\n    registration_source.utm_campaign,                           -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM campaign \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\n    registration_source.utm_term,                               -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM term \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\n    registration_source.utm_content,                            -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM content \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\n    registration_source.registration_source_agg_current,        -- \u0410\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f registration_source_current \u0438 account_type_current. \u0415\u0441\u043b\u0438 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043a\u0430\u043a-\u0442\u043e \u0441\u0432\u044f\u0437\u0430\u043d \u0441 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430\u043c\u0438, \u0442\u043e \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0438\u043d\u0430\u0447\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. \u041f\u0440\u0438\u0441\u0442\u0430\u0432\u043a\u0430 current \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u0430\u043a \u043a\u0430\u043a \u0442\u0443\u0442 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0430 \u043d\u0435 \u0432 \u043c\u043e\u043c\u0435\u043d\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n    registration_source.registration_source_current,            -- \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 (\u0434\u043b\u044f \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432) \u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0441\u043a\u0438\u0445. \u041f\u0440\u0438\u0441\u0442\u0430\u0432\u043a\u0430 current \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u0430\u043a \u043a\u0430\u043a \u0442\u0443\u0442 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0430 \u043d\u0435 \u0432 \u043c\u043e\u043c\u0435\u043d\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n    registration_source.account_registration_type_current,      -- \u0422\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u0447\u0442\u043e \u0438 registration_source_agg_current, \u043d\u043e \u0437\u0434\u0435\u0441\u044c \u0432\u044b\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0441\u0435\u0433\u043e \u0434\u0432\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438, \u043b\u0438\u0431\u043e \u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u0430\u043a\u043a\u0430\u0443\u043d\u0442, \u043b\u0438\u0431\u043e \u0441\u0432\u044f\u0437\u0430\u043d \u0441 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430\u043c\u0438. \u041f\u0440\u0438\u0441\u0442\u0430\u0432\u043a\u0430 current \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u0430\u043a \u043a\u0430\u043a \u0442\u0443\u0442 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0430 \u043d\u0435 \u0432 \u043c\u043e\u043c\u0435\u043d\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n    profile_info.region_international,                          -- \u0420\u0435\u0433\u0438\u043e\u043d\n    tariff,                                                     -- \u0422\u0430\u0440\u0438\u0444 \u043f\u0435\u0440\u0432\u043e\u0439 \u043a\u0443\u043f\u043b\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    period,                                                     -- \u041f\u0435\u0440\u0438\u043e\u0434 \u043f\u0435\u0440\u0432\u043e\u0439 \u043a\u0443\u043f\u043b\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    profile_info.is_employee                                    -- \u042d\u0442\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430?\n    from payments_with_min_date\n    left join registration_source\n    on payments_with_min_date.account_id=registration_source.account_id\n    left join first_subscription_type\n    on payments_with_min_date.account_id=first_subscription_type.account_id\n    left join profile_info\n    on payments_with_min_date.account_id=profile_info.account_id\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043a\u043e\u0433\u043e\u0440\u043e\u0442\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u043e \u043e\u043f\u043b\u0430\u0442\u0430\u043c.\u041e\u043d\u0430 \u043d\u0443\u0436\u043d\u0430, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0432\u0435\u0440\u0441\u0438\u044e \u0432 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u0443\u044e \u043f\u043e\u043a\u0443\u043f\u043a\u0443, \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u043a\u043e\u0433\u043e\u0440\u0442\u044b \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439, \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c LTV\nselect * \nfrom payments_with_registration_source\nwhere not exists (\n    select account_id\n    from profile_info\n    where is_employee\n    and profile_info.account_id = payments_with_registration_source.account_id\n)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_payments_retention`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.617523Z", "completed_at": "2025-05-21T12:31:15.622908Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.666832Z", "completed_at": "2025-05-21T12:31:15.666845Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.17604732513427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_defining_clients_types_who_paid_without_trials_and_promised_payments_with_tariff_and_transport", "compiled": true, "compiled_code": "\n    select distinct -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0442\u0438\u043f \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0435\u0433\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a (\u0431\u0435\u0437 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u0438 \u0442\u0440\u0438\u0430\u043b\u043e\u0432)\n            int_subscriptions_last_end_date.*,\n            date_add(subscription_end, interval 1 day) as data_otvala,  -- \u0414\u0430\u0442\u0430 \u043e\u0442\u0432\u0430\u043b\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n            lead(subscription_start) over (partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start) nextsubscriptiondate,   -- \u0414\u0430\u0442\u0430 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n            date_diff(lead(subscription_start) over (partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start),\n                subscription_end,\n                day\n            ) datesbetween, -- \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043e\u0442\u0432\u0430\u043b\u043e\u043c \u0438 \u0434\u0430\u0442\u043e\u0439 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n           \n            case\n                when (current_date <= subscription_end)\n                then 'still_active'\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    <= 2\n                then 'bought_new_subscription_within_leaving_period'\n\n                when\n                    lead(subscription_start) over (\n                        partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start\n                    )\n                    is null\n                    and date_diff(current_date, subscription_end, day) <= 2\n                then 'may_become_active'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    > 2\n                then 'came_back_after_leaving_period'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    is null\n                    and current_date > subscription_end\n                then 'did_not_come_back'\n            end as client_type_with_churn_period_2\n             ,\n                \n            case\n                when (current_date <= subscription_end)\n                then 'still_active'\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    <= 5\n                then 'bought_new_subscription_within_leaving_period'\n\n                when\n                    lead(subscription_start) over (\n                        partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start\n                    )\n                    is null\n                    and date_diff(current_date, subscription_end, day) <= 5\n                then 'may_become_active'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    > 5\n                then 'came_back_after_leaving_period'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    is null\n                    and current_date > subscription_end\n                then 'did_not_come_back'\n            end as client_type_with_churn_period_5\n             ,\n                \n            case\n                when (current_date <= subscription_end)\n                then 'still_active'\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    <= 7\n                then 'bought_new_subscription_within_leaving_period'\n\n                when\n                    lead(subscription_start) over (\n                        partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start\n                    )\n                    is null\n                    and date_diff(current_date, subscription_end, day) <= 7\n                then 'may_become_active'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    > 7\n                then 'came_back_after_leaving_period'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    is null\n                    and current_date > subscription_end\n                then 'did_not_come_back'\n            end as client_type_with_churn_period_7\n             ,\n                \n            case\n                when (current_date <= subscription_end)\n                then 'still_active'\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    <= 20\n                then 'bought_new_subscription_within_leaving_period'\n\n                when\n                    lead(subscription_start) over (\n                        partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start\n                    )\n                    is null\n                    and date_diff(current_date, subscription_end, day) <= 20\n                then 'may_become_active'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    > 20\n                then 'came_back_after_leaving_period'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    is null\n                    and current_date > subscription_end\n                then 'did_not_come_back'\n            end as client_type_with_churn_period_20\n             ,\n                \n            case\n                when (current_date <= subscription_end)\n                then 'still_active'\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    <= 90\n                then 'bought_new_subscription_within_leaving_period'\n\n                when\n                    lead(subscription_start) over (\n                        partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start\n                    )\n                    is null\n                    and date_diff(current_date, subscription_end, day) <= 90\n                then 'may_become_active'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    > 90\n                then 'came_back_after_leaving_period'\n\n                when\n                    date_diff(\n                        lead(subscription_start) over (\n                            partition by int_subscriptions_last_end_date.account_id, int_subscriptions_last_end_date.tariff, int_subscriptions_last_end_date.transport order by subscription_start\n                        ),\n                        subscription_end,\n                        day\n                    )\n                    is null\n                    and current_date > subscription_end\n                then 'did_not_come_back'\n            end as client_type_with_churn_period_90\n             \n                \n        from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_last_end_date_without_trials_and_promised_payments_with_tariff_and_transport` int_subscriptions_last_end_date\n        inner join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_paid_subscription_with_type_and_tariff` int_accounts_who_paid_without_free on int_subscriptions_last_end_date.account_Id = int_accounts_who_paid_without_free.account_Id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_defining_clients_types_who_paid_without_trials_and_promised_payments_with_tariff_and_transport`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.613601Z", "completed_at": "2025-05-21T12:31:15.623261Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.667498Z", "completed_at": "2025-05-21T12:31:15.667521Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.21881604194641113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_creating_intervals_based_on_first_registration_period", "compiled": true, "compiled_code": "SELECT      who_paid_intervals.*except(period),\n                period as subscription_period,\n                month_intervals_registrations.time_period as time_period\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_info_based_on_first_payment_without_promised_payments_who_paid` who_paid_intervals\n    join `dwh-wazzup`.`dbt_nbespalov`.`stg_days_with_month_intervals` month_intervals_registrations on who_paid_intervals.registration_date = month_intervals_registrations.date \n    and date_trunc(month_intervals_registrations.time_period,month) <= current_date", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_creating_intervals_based_on_first_registration_period`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.615694Z", "completed_at": "2025-05-21T12:31:15.624186Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.668701Z", "completed_at": "2025-05-21T12:31:15.668711Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.2602877616882324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_creating_intervals_based_on_first_subscription_period", "compiled": true, "compiled_code": "SELECT      who_paid_intervals.*except(period),\n                period as subscription_period,\n                month_intervals_subscriptions.time_period as time_period\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_info_based_on_first_payment_without_promised_payments_who_paid` who_paid_intervals\n    join `dwh-wazzup`.`dbt_nbespalov`.`stg_days_with_month_intervals` month_intervals_subscriptions on who_paid_intervals.first_subscription_start = month_intervals_subscriptions.date \n    and date_trunc(month_intervals_subscriptions.time_period,month) <= current_date", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_creating_intervals_based_on_first_subscription_period`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.664040Z", "completed_at": "2025-05-21T12:31:15.707748Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.791046Z", "completed_at": "2025-05-21T12:31:15.791055Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.21222853660583496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_active_accounts_by_month_by_segment", "compiled": true, "compiled_code": "with segments as (\n    SELECT  account_id,                 -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n            segment,                    -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442\n            subscription_end_fixed,     -- \u0414\u0430\u0442\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 (\u0432\u0441\u0435\u0433\u0434\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0434\u0435\u043d\u044c (current_date), \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0437\u0436\u0435)\n            subscription_start,         -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438\n            lag(subscription_end_fixed, 1) over (partition by account_id order by subscription_start asc) as last_subscription_end_with_segment -- \u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443\n    FROM  `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_in_dynamics_defining_clients_with_segments`\n),\nsegments_with_if_return_payments as (\n    select segments.*, \n        month, -- \u041c\u0435\u0441\u044f\u0446 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435, \u0435\u0441\u043b\u0438 \u043e\u043d \u0431\u044b\u043b \u0430\u043a\u0442\u0438\u0432\u0435\u043d \u0445\u043e\u0442\u044f \u0431\u044b \u0434\u0435\u043d\u044c\n            (case\n                when\n                    date_diff(subscription_start, last_subscription_end_with_segment, day) > 20\n                    and date_trunc(last_subscription_end_with_segment, month) != month\n                    and date_trunc(subscription_start, month) = month\n                then 'return_payment_monthly'\n                else 'other_payments'\n            end) as payment_type_monthly    -- return_payment_monthly - \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0435\u0440\u043d\u0443\u043b\u0441\u044f \u0432 \u043e\u0442\u0447\u0435\u0442\u043d\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435 \u043f\u043e\u0441\u043b\u0435 20 \u0434\u043d\u0435\u0439 \u043d\u0435\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 , other - \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445\n    from segments\n    inner join `dwh-wazzup`.`dbt_nbespalov`.`stg_months` months\n    on months.month>=date_trunc(segments.subscription_start,month) and months.month<=date_trunc(segments.subscription_end_fixed,month)),\n\nsegments_with_if_new_payments as (\n    select *, \n    first_value(date_trunc(subscription_start,month)) over (partition by account_id order by subscription_start ) as first_subscription_start_month -- \u041c\u0435\u0441\u044f\u0446 \u043f\u0435\u0440\u0432\u043e\u0439 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438\n    from segments_with_if_return_payments),\n\nsegment_with_currency as (\nselect segments_with_if_new_payments.*, \n        region_international,       -- \u0420\u0435\u0433\u0438\u043e\u043d\n        russian_country_name,       -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\n        currency,                   -- \u0432\u0430\u043b\u044e\u0442\u0430\n        account_language\nfrom segments_with_if_new_payments\ninner join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\n            on profile_info.account_id=segments_with_if_new_payments.account_id\nwhere profile_info.is_employee is false            \n            ),\n\nlast_segment_in_month_to_deduplicate as (\n    select *, \n    row_number() over (partition by account_id,month order by subscription_start desc) as rn -- \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0434\u043b\u044f \u0434\u0435\u0434\u0443\u043f\u043b\u0438\u043a\u0430\u0446\u0438\u0438\n    from segment_with_currency\n),\nsubscriptions_history_with_dates as (\nselect *,\n          1 cnt_in_a_month\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_combined_by_type_all_subscriptions_free_trial_paid`\njoin `dwh-wazzup`.`dbt_nbespalov`.`stg_days` days on days.date >= subscription_start and days.date <= subscription_end\n),count_of_days_for_each_type as (\nselect  account_id,\n        date_trunc(date,month) month,\n        sum(case when type = 'trial' then cnt_in_a_month else 0 end)                                               as trial_sum_in_a_month,\n        sum(case when type = 'paid' then cnt_in_a_month else 0 end)                                                as paid_sum_in_a_month,\n        sum(case when type in ('free_subscriptions','free_subscriptions_partners') then cnt_in_a_month else 0 end) as free_sum_in_a_month\nfrom subscriptions_history_with_dates\ngroup by 1,2\n),defining_client_type as (\nselect *,\n      case when paid_sum_in_a_month  > 0 then 'paid'\n           when free_sum_in_a_month  > 0 then 'free'\n           when trial_sum_in_a_month > 0 then 'trial'\n           else 'unknown'\n           end client_type \nfrom count_of_days_for_each_type)\n  -- \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c. \u0417\u0430\u043f\u0438\u0441\u044c \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432 \u044d\u0442\u043e\u0442 \u043c\u0435\u0441\u044f\u0446\u0435 \u0431\u044b\u043b \u0430\u043a\u0442\u0438\u0432\u0435\u043d \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u0434\u0435\u043d\u044c. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e\u0431 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u0445 https://www.notion.so/687832f855e84aefbb3b5b65c89b8923?pvs=4\nselect last_segment_in_month_to_deduplicate.*,\n       client_type\nfrom last_segment_in_month_to_deduplicate\njoin defining_client_type using(account_id, month)\nwhere rn=1 --TODO \u0443\u0434\u0430\u043b\u0438\u0442\u044c rn \u0438\u0437 \u0433\u043e\u0442\u043e\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_active_accounts_by_month_by_segment`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.748066Z", "completed_at": "2025-05-21T12:31:15.794122Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.837741Z", "completed_at": "2025-05-21T12:31:15.837752Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.25477051734924316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_payments_revenue_with_waba", "compiled": true, "compiled_code": "with revenue as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_with_account_and_partner_type`\n    where account_type not in ('employee','partner-demo','child-postpay') and partner_type is distinct from 'employee'\n),\n\nwaba_revenue as (\n    select account_id, \n    paid_at_billing_date as paid_date,\n    paid_month,\n    currency,\n    partner_id,\n    refparent_id, \n    account_type,\n    partner_type,\n    partner_register_date,\n    sum_in_rubles as waba_sum_in_rubles,\n    original_sum as waba_original_sum,\n    wapi_sum_in_USD as waba_sum_in_USD\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_waba_with_sum_and_currency`\n    where account_type not in ('employee','partner-demo','child-postpay') and partner_type is distinct from 'employee'\n),\nwaba_revenue_postpay_grouped_by_paid_date_and_partner_id as (\n    select account_id,\n    paid_date,\n    currency,\n    sum(waba_sum_in_rubles) as waba_sum_in_rubles\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_postpay_waba_revenue_gs`\n    group by 1,2,3\n),\n\nwaba_revenue_postpay as (\n    select cast(account_id as integer) as account_id,\n    paid_date,\n    date_trunc(paid_date,month) as paid_month,\n    currency,\n    cast(null as integer) as partner_id,\n    cast(null as integer) as refparent_id,\n    'tech-partner-postpay' as account_type,\n    cast(null as string) as partner_type,\n    cast(null as datetime) as partner_register_date,\n    waba_sum_in_rubles as waba_sum_in_rubles,\n    waba_sum_in_rubles as waba_original_sum,\n    cast(null as float64) as waba_sum_in_USD\n    from waba_revenue_postpay_grouped_by_paid_date_and_partner_id   \n),\nwaba_all_revenue as (\n    select * from waba_revenue\n    UNION ALL \n    select * from waba_revenue_postpay\n),\n\n    revenue_and_waba_joined as (\n    select \n    coalesce(revenue.account_id, waba_revenue.account_id) as account_id,\n    coalesce(revenue.paid_date, waba_revenue.paid_date) as paid_date,\n    coalesce(revenue.partner_id, waba_revenue.partner_id) as partner_id,\n    coalesce(revenue.refparent_id, waba_revenue.refparent_id) as refparent_id,\n    coalesce(revenue.currency, waba_revenue.currency) as currency,\n    coalesce(revenue.paid_month, waba_revenue.paid_month) as paid_month,\n    coalesce(revenue.account_type, waba_revenue.account_type) as account_type,\n    coalesce(revenue.partner_type, waba_revenue.partner_type) as partner_type,\n    coalesce(revenue.partner_register_date, waba_revenue.partner_register_date) as partner_register_date,\n    data_source,\n    ifnull(sum_in_rubles,0) as sum_in_rubles,\n    ifnull(sum_in_USD,0) as sum_in_USD,\n    ifnull(original_sum,0) as original_sum,\n    ifnull(waba_sum_in_rubles,0) as waba_sum_in_rubles,\n    ifnull(waba_original_sum,0) as waba_original_sum,\n    ifnull(waba_sum_in_USD,0) as waba_sum_in_USD,\n    from revenue full outer join waba_all_revenue waba_revenue \n    on revenue.account_id=waba_revenue.account_id\n    and revenue.paid_date=waba_revenue.paid_date\n    and revenue.partner_id=waba_revenue.partner_id\n    and revenue.refparent_id=waba_revenue.refparent_id\n    and revenue.currency=waba_revenue.currency\n    and revenue.paid_month=waba_revenue.paid_month\n    and revenue.account_type=waba_revenue.account_type\n    and revenue.partner_type=waba_revenue.partner_type\n    and revenue.partner_register_date=waba_revenue.partner_register_date\n    ),\n\nrevenue_and_waba_joined_to_deduplicate_waba as (\n    select *, rank() over (partition by account_id,paid_date order by data_source) rn from revenue_and_waba_joined),\n\nrevenue_and_waba_joined_fixed as (\n\n    select \n    account_Id,             -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    paid_date,              -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    partner_id,             -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    refparent_id,           -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0440\u0435\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    currency,               -- \u0412\u0430\u043b\u044e\u0442\u0430\n    paid_month,             -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n    account_type,           -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    partner_type,           -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    data_source,            -- \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043e\u043f\u043b\u0430\u0442\u044b\n    sum_in_rubles,          -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    sum_in_USD,             -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445\n    original_sum,           -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    partner_register_date,  -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    (case when rn!=1 then 0 else waba_sum_in_rubles end) waba_sum_in_rubles,    -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    (case when rn!=1 then 0 else waba_original_sum end) waba_original_sum,      -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\n    (case when rn!=1 then 0 else waba_sum_in_USD end) waba_sum_in_USD           -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445\n    from revenue_and_waba_joined_to_deduplicate_waba),\n\nrevenue_with_segments as (\n    select *, (case when account_type='partner' then 'of-partner'\n    when account_type='tech-partner' then 'tech-partner'\n    when account_type='tech-partner-postpay' then 'tech-partner-postpay'\n    when account_type='standart' and partner_id is null and refparent_id is null then 'standart'\n    when account_type='standart' and partner_type is null and partner_id is not null and paid_date<partner_register_date then 'standart'\n    when account_type='standart' and partner_id is null and refparent_id is not null then 'referal'\n    when account_type='standart' and partner_type in ('partner','standart') then 'of-partner-client'\n    when account_type='standart' and partner_type='tech-partner' then 'tech-partner-client'\n    when partner_type='tech-partner-postpay' then 'tech-partner-postpay'\n    else 'unknown'\n    end\n    ) as segment_type -- \u0422\u0438\u043f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n     from revenue_and_waba_joined_fixed),\n\n\nrevenue_with_segments_aggregated as (\n    select *, (case when segment_type in ('standart','referal','of-partner-client') then 'final_client'\n    when segment_type='of-partner' then 'of-partner'\n    when segment_type in ('tech-partner','tech-partner-client','tech-partner-postpay') then 'tech-partner'\n    else 'unknown'\n    end\n    ) as segments_aggregated    -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 \n    from revenue_with_segments\n),\nprofile_info as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n)\n\nselect revenue_with_segments_aggregated.*,  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043e\u0445\u043e\u0434\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f WABA\n        russian_country_name,   -- \u0421\u0442\u0440\u0430\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\n        region_international    -- \u0420\u0435\u0433\u0438\u043e\u043d \u043a\u043b\u0438\u0435\u043d\u0442\u0430\nfrom revenue_with_segments_aggregated\nleft join  profile_info\non revenue_with_segments_aggregated.account_id=profile_info.account_id \nwhere not exists (\n    select account_id\n    from profile_info\n    where profile_info.account_id = revenue_with_segments_aggregated.account_id\n    and is_employee\n)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_payments_revenue_with_waba`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.835000Z", "completed_at": "2025-05-21T12:31:15.879789Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.890352Z", "completed_at": "2025-05-21T12:31:15.890361Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.14373302459716797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_revenue_by_segment_tech", "compiled": true, "compiled_code": "/* \u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0431\u043e\u0440\u0434\u043e\u0432 \u0441 \u0432\u044b\u0440\u0443\u0447\u043a\u043e\u0439 */\n\nwith revenue as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_with_account_and_partner_type`\n    where account_type not in ('employee','partner-demo','child-postpay') and partner_type is distinct from 'employee'\n),\n\nwaba_revenue as (\n    select account_id, \n    paid_at_billing_date as paid_date,\n    paid_month,\n    currency,\n    partner_id,\n    refparent_id, \n    account_type,\n    partner_type,\n    partner_register_date,\n    sum_in_rubles as waba_sum_in_rubles,\n    original_sum as waba_original_sum,\n    wapi_sum_in_USD as waba_sum_in_USD\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_waba_with_sum_and_currency`\n    where account_type not in ('employee','partner-demo','child-postpay') and partner_type is distinct from 'employee'\n),\nwaba_revenue_postpay_grouped_by_paid_date_and_partner_id as (\n    select partner_id as account_id,\n    paid_date,\n    currency,\n    sum(amount) as waba_sum_in_rubles\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_postpay_waba_revenue_with_gupshup`\n    group by 1,2,3\n),\n\nwaba_revenue_postpay as (\n    select cast(account_id as integer) as account_id,\n    paid_date,\n    date_trunc(paid_date,month) as paid_month,\n    currency,\n    cast(null as integer) as partner_id,\n    cast(null as integer) as refparent_id,\n    'tech-partner-postpay' as account_type,\n    cast(null as string) as partner_type,\n    cast(null as datetime) as partner_register_date,\n    waba_sum_in_rubles as waba_sum_in_rubles,\n    waba_sum_in_rubles as waba_original_sum,\n    cast(null as float64) as waba_sum_in_USD\n    from waba_revenue_postpay_grouped_by_paid_date_and_partner_id   \n),\nwaba_all_revenue as (\n    select * from waba_revenue\n    UNION ALL \n    select * from waba_revenue_postpay\n),\n\n    revenue_and_waba_joined as (\n    select \n    coalesce(revenue.account_id, waba_revenue.account_id) as account_id,\n    coalesce(revenue.paid_date, waba_revenue.paid_date) as paid_date,\n    coalesce(revenue.partner_id, waba_revenue.partner_id) as partner_id,\n    coalesce(revenue.refparent_id, waba_revenue.refparent_id) as refparent_id,\n    coalesce(revenue.currency, waba_revenue.currency) as currency,\n    coalesce(revenue.paid_month, waba_revenue.paid_month) as paid_month,\n    coalesce(revenue.account_type, waba_revenue.account_type) as account_type,\n    coalesce(revenue.partner_type, waba_revenue.partner_type) as partner_type,\n    coalesce(revenue.partner_register_date, waba_revenue.partner_register_date) as partner_register_date,\n    data_source,\n    ifnull(sum_in_rubles,0) as sum_in_rubles,\n    ifnull(sum_in_USD,0) as sum_in_USD,\n    ifnull(original_sum,0) as original_sum,\n    ifnull(waba_sum_in_rubles,0) as waba_sum_in_rubles,\n    ifnull(waba_original_sum,0) as waba_original_sum,\n    ifnull(waba_sum_in_USD,0) as waba_sum_in_USD,\n    from revenue full outer join waba_all_revenue waba_revenue \n    on revenue.account_id=waba_revenue.account_id\n    and revenue.paid_date=waba_revenue.paid_date\n    and revenue.partner_id=waba_revenue.partner_id\n    and revenue.refparent_id=waba_revenue.refparent_id\n    and revenue.currency=waba_revenue.currency\n    and revenue.paid_month=waba_revenue.paid_month\n    and revenue.account_type=waba_revenue.account_type\n    and revenue.partner_type=waba_revenue.partner_type\n    and revenue.partner_register_date=waba_revenue.partner_register_date\n    ),\n\nrevenue_and_waba_joined_to_deduplicate_waba as (\n    select *, rank() over (partition by account_id,paid_date order by data_source) rn from revenue_and_waba_joined),\n\nrevenue_and_waba_joined_fixed as (\n\n    select \n    account_Id,             -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    paid_date,              -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    partner_id,             -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    refparent_id,           -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0440\u0435\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    currency,               -- \u0412\u0430\u043b\u044e\u0442\u0430\n    paid_month,             -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n    account_type,           -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    partner_type,           -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    data_source,            -- \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043e\u043f\u043b\u0430\u0442\u044b\n    sum_in_rubles,          -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    sum_in_USD,             -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445\n    original_sum,           -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    partner_register_date,  -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    (case when rn!=1 then 0 else waba_sum_in_rubles end) waba_sum_in_rubles,    -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    (case when rn!=1 then 0 else waba_original_sum end) waba_original_sum,      -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA\n    (case when rn!=1 then 0 else waba_sum_in_USD end) waba_sum_in_USD           -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445\n    from revenue_and_waba_joined_to_deduplicate_waba),\n\nrevenue_with_segments as (\n    select *, (case when account_type='partner' then 'of-partner'\n    when account_type='tech-partner' then 'tech-partner'\n    when account_type='tech-partner-postpay' then 'tech-partner-postpay'\n    when account_type='standart' and partner_id is null and refparent_id is null then 'standart'\n    when account_type='standart' and partner_type is null and partner_id is not null and paid_date<partner_register_date then 'standart'\n    when account_type='standart' and partner_id is null and refparent_id is not null then 'referal'\n    when account_type='standart' and partner_type in ('partner','standart') then 'of-partner-client'\n    when account_type='standart' and partner_type='tech-partner' then 'tech-partner-client'\n    when partner_type='tech-partner-postpay' then 'tech-partner-postpay'\n    else 'unknown'\n    end\n    ) as segment_type -- \u0422\u0438\u043f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n     from revenue_and_waba_joined_fixed),\n\n\nrevenue_with_segments_aggregated as (\n    select *, (case when segment_type in ('standart','referal','of-partner-client') then 'final_client'\n    when segment_type='of-partner' then 'of-partner'\n    when segment_type in ('tech-partner','tech-partner-client','tech-partner-postpay') then 'tech-partner'\n    else 'unknown'\n    end\n    ) as segments_aggregated    -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 \n    from revenue_with_segments\n),\nprofile_info as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n)\n\nselect revenue_with_segments_aggregated.*,  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043e\u0445\u043e\u0434\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f WABA\n        russian_country_name,   -- \u0421\u0442\u0440\u0430\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\n        region_international    -- \u0420\u0435\u0433\u0438\u043e\u043d \u043a\u043b\u0438\u0435\u043d\u0442\u0430\nfrom revenue_with_segments_aggregated\nleft join  profile_info\non revenue_with_segments_aggregated.account_id=profile_info.account_id \nwhere not exists (\n    select account_id\n    from profile_info\n    where profile_info.account_id = revenue_with_segments_aggregated.account_id\n    and is_employee\n)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_revenue_by_segment_tech`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.880267Z", "completed_at": "2025-05-21T12:31:15.891582Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.934689Z", "completed_at": "2025-05-21T12:31:15.934698Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.14546561241149902, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_revenue_by_segments_with_paid_in_wazzup_bills", "compiled": true, "compiled_code": "with revenue as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_with_account_and_partner_type_with_bills_date`\n    where account_type not in ('employee','partner-demo','child-postpay') and partner_type is distinct from 'employee'\n),\n\nwaba_revenue as (\n    select account_id, \n    paid_at_billing_date as paid_date,\n    paid_month,\n    currency,\n    partner_id,\n    refparent_id, \n    account_type,\n    partner_type,\n    partner_register_date,\n    sum_in_rubles as waba_sum_in_rubles,\n    original_sum as waba_original_sum,\n    wapi_sum_in_USD as waba_sum_in_USD\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_waba_with_sum_and_currency`\n    where account_type not in ('employee','partner-demo') and partner_type is distinct from 'employee'\n),\nwaba_revenue_postpay_grouped_by_paid_date_and_partner_id as (\n    select partner_id as account_id,\n    paid_date,\n    currency,\n    sum(amount) as waba_sum_in_rubles\n    from `dwh-wazzup`.`partners_info`.`postpay_waba_revenue`\n    group by 1,2,3\n),\n\nwaba_revenue_postpay as (\n    select cast(account_id as integer),\n    paid_date,\n    date_trunc(paid_date,month) as paid_month,\n    currency,\n    cast(null as integer) as partner_id,\n    cast(null as integer) as refparent_id,\n    'tech-partner-postpay' as account_type,\n    cast(null as string) as partner_type,\n    cast(null as datetime) as partner_register_date,\n    waba_sum_in_rubles as waba_sum_in_rubles,\n    waba_sum_in_rubles as waba_original_sum,\n    cast(null as float64) as waba_sum_in_USD\n    from waba_revenue_postpay_grouped_by_paid_date_and_partner_id   \n),\nwaba_all_revenue as (\n    select * from waba_revenue\n    UNION ALL \n    select * from waba_revenue_postpay\n),\n\n    revenue_and_waba_joined as (\n    select \n    coalesce(revenue.account_id, waba_revenue.account_id) as account_id,\n    coalesce(revenue.paid_date, waba_revenue.paid_date) as paid_date,\n    coalesce(revenue.partner_id, waba_revenue.partner_id) as partner_id,\n    coalesce(revenue.refparent_id, waba_revenue.refparent_id) as refparent_id,\n    coalesce(revenue.currency, waba_revenue.currency) as currency,\n    coalesce(revenue.paid_month, waba_revenue.paid_month) as paid_month,\n    coalesce(revenue.account_type, waba_revenue.account_type) as account_type,\n    coalesce(revenue.partner_type, waba_revenue.partner_type) as partner_type,\n    coalesce(revenue.partner_register_date, waba_revenue.partner_register_date) as partner_register_date,\n    data_source,\n    ifnull(sum_in_rubles,0) as sum_in_rubles,\n    ifnull(sum_in_USD,0) as sum_in_USD,\n    ifnull(original_sum,0) as original_sum,\n    ifnull(waba_sum_in_rubles,0) as waba_sum_in_rubles,\n    ifnull(waba_original_sum,0) as waba_original_sum,\n    ifnull(waba_sum_in_USD,0) as waba_sum_in_USD,\n    from revenue full outer join waba_all_revenue waba_revenue \n    on revenue.account_id=waba_revenue.account_id\n    and revenue.paid_date=waba_revenue.paid_date\n    and revenue.partner_id=waba_revenue.partner_id\n    and revenue.refparent_id=waba_revenue.refparent_id\n    and revenue.currency=waba_revenue.currency\n    and revenue.paid_month=waba_revenue.paid_month\n    and revenue.account_type=waba_revenue.account_type\n    and revenue.partner_type=waba_revenue.partner_type\n    and revenue.partner_register_date=waba_revenue.partner_register_date\n    ),\n\nrevenue_and_waba_joined_to_deduplicate_waba as (\n    select *, rank() over (partition by account_id,paid_date order by data_source) rn from revenue_and_waba_joined),\n\nrevenue_and_waba_joined_fixed as (\n\n    select \n    account_Id,             -- \u0430\u043a\u043a\u0430\u0443\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043b \u043e\u043f\u043b\u0430\u0442\u0443\n    paid_date,              -- \u0434\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b. \u0414\u0430\u0442\u044b \u0434\u043b\u044f \u0431\u0435\u0437\u043d\u0430\u043b\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0434\u0430\u0442\u0430\u043c \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 wazzup\n    partner_id,             -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    refparent_id,           -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0440\u0435\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    currency,               -- \u0432\u0430\u043b\u044e\u0442\u0430\n    paid_month,             -- \u043c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n    account_type,           -- \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    partner_type,           -- \u0442\u0438\u043f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 (\u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440, \u0442\u0435\u0445. \u043f\u0430\u0440\u0442\u043d\u0435\u0440, \u0442\u0435\u0445. \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u043f\u043e\u0441\u0442\u043e\u043f\u043b\u0430\u0442\u0430)\n    data_source,            -- \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043e\u043f\u043b\u0430\u0442\u044b\n    sum_in_rubles,          -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445. \u041a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043d\u0430 \u0434\u0435\u043d\u044c \u043e\u043f\u043b\u0430\u0442\u044b\n    sum_in_USD,             -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445\n    original_sum,           -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0432\u0430\u043b\u044e\u0442\u0435\n    partner_register_date,  -- \u0434\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    (case when rn!=1 then 0 else waba_sum_in_rubles end) waba_sum_in_rubles,    -- \u0442\u0440\u0430\u0442\u044b \u043d\u0430 \u0432\u0430\u0431\u0443 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    (case when rn!=1 then 0 else waba_original_sum end) waba_original_sum,      -- \u0442\u0440\u0430\u0442\u044b \u043d\u0430 \u0432\u0430\u0431\u0443 \u0432 \u0432\u0430\u043b\u044e\u0442\u0435\n    (case when rn!=1 then 0 else waba_sum_in_USD end) waba_sum_in_USD           -- \u0442\u0440\u0430\u0442\u044b \u043d\u0430 \u0432\u0430\u0431\u0443 \u0432 \u0434\u043e\u043b\u043b\u0430\u0440\u0430\u0445\n    from revenue_and_waba_joined_to_deduplicate_waba),\n\nrevenue_with_segments as (\n    select *, (case when account_type='partner' then 'of-partner'\n    when account_type='tech-partner' then 'tech-partner'\n    when account_type='tech-partner-postpay' then 'tech-partner-postpay'\n    when account_type='standart' and partner_id is null and refparent_id is null then 'standart'\n    when account_type='standart' and partner_type is null and partner_id is not null and paid_date<partner_register_date then 'standart'\n    when account_type='standart' and partner_id is null and refparent_id is not null then 'referal'\n    when account_type='standart' and partner_type in ('partner','standart') then 'of-partner-client'\n    when account_type='standart' and partner_type='tech-partner' then 'tech-partner-client'\n    else 'unknown'\n    end\n    ) as segment_type       -- \u0442\u0438\u043f \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430: standart - \u043a\u043b\u0438\u0435\u043d\u0442 \u0431\u0435\u0437 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0438 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u0430, of-partner - \u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440, referal - \u0440\u0435\u0444\u0435\u0440\u0430\u043b, tech-partner-postpay - \u043f\u043e\u0441\u0442\u043e\u043f\u043b\u0430\u0442\u043d\u0438\u043a, tech-partner - \u0442\u0435\u0445. \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u043f\u0440\u0435\u0434\u043e\u043f\u043b\u0430\u0442\u043d\u0438\u043a, tech-partner-client - \u0434\u043e\u0447\u043a\u0430 \u0442\u0435\u0445. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430,  of-partner-client - \u0434\u043e\u0447\u043a\u0430 \u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    from revenue_and_waba_joined_fixed),\n\n\nrevenue_with_segments_aggregated as (\n    select *, (case when segment_type in ('standart','referal','of-partner-client') then 'final_client'\n    when segment_type='of-partner' then 'of-partner'\n    when segment_type in ('tech-partner','tech-partner-client','tech-partner-postpay') then 'tech-partner'\n    else 'unknown'\n    end\n    ) as segments_aggregated -- \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u044b: \u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440, \u0442\u0435\u0445. \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b\n    from revenue_with_segments\n)\n    -- \u0412\u044b\u0440\u0443\u0447\u043a\u0430 \u043f\u043e \u0434\u043d\u044f\u043c. \u0414\u0430\u0442\u044b \u0434\u043b\u044f \u0431\u0435\u0437\u043d\u0430\u043b\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0434\u0430\u0442\u0430\u043c \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0432 wazzup\nselect revenue_with_segments_aggregated.*, russian_country_name     -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\nfrom revenue_with_segments_aggregated\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\non revenue_with_segments_aggregated.account_id=profile_info.account_id \nwhere is_employee is distinct from True", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_revenue_by_segments_with_paid_in_wazzup_bills`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.885326Z", "completed_at": "2025-05-21T12:31:15.894172Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.936432Z", "completed_at": "2025-05-21T12:31:15.936441Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.18384766578674316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_active_paid_monthly", "compiled": true, "compiled_code": "with combined_intervals as (\n    select int_subscription_deduplicated.*,\n            billingpackages.type\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_deduplicated_by_id_combined_intervals` int_subscription_deduplicated\n    inner join `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billingpackages \n            on billingpackages.guid=int_subscription_deduplicated.subscription_id\n    where billingpackages.paid_at is not null \n  -- and int_subscription_deduplicated.account_id =  59580380\n   order by subscription_end\n),\n\nfirst_paid_date as (\n    select account_id, min(subscription_start) as min_start_date from combined_intervals\n    group by 1\n),\n\n\nsubscription_with_months  as (\n    select distinct\n    month,\n    subscription_id, \n    subscription_start,\n    account_id,\n    LAST_DAY(month, MONTH)  as last_day_of_month\n    from combined_intervals inner join `dwh-wazzup`.`dbt_nbespalov`.`stg_months` months\n    on months.month>=date_trunc(combined_intervals.subscription_start,month) and  ((LAST_DAY(months.month, MONTH)<=combined_intervals.subscription_end)\n    or (combined_intervals.subscription_end>=current_date()))\n    \n),\n\nlast_value_tarif as (\n    select stg_subscriptionUpdates.subscription_id,\n        --last_value(coalesce(partner_account_id,billingpackages.account_id)) over (partition by billingpackages.account_id, date_trunc(stg_subscriptionUpdates.paid_date, month) order by stg_subscriptionUpdates.created_at asc rows between unbounded preceding and unbounded following) as who_paid_account_id,\n            coalesce(partner_account_id,billingpackages.account_id) who_paid_account_id,\n    date_trunc(stg_subscriptionUpdates.paid_date, month) as paid_month,\n    billingpackages.type as subscription_type,\n    billingpackages.account_id as subscription_owner_account_id,\n    last_value(tariff_new) over (partition by stg_subscriptionUpdates.subscription_id, date_trunc(stg_subscriptionUpdates.paid_date, month) order by stg_subscriptionUpdates.created_at asc rows between unbounded preceding and unbounded following) as tariff_new,\n    last_value(period_new) over (partition by stg_subscriptionUpdates.subscription_id, date_trunc(stg_subscriptionUpdates.paid_date, month) order by stg_subscriptionUpdates.created_at asc rows between unbounded preceding and unbounded following) as period_new,\n    last_value(quantity_new) over (partition by stg_subscriptionUpdates.subscription_id, date_trunc(stg_subscriptionUpdates.paid_date, month) order by stg_subscriptionUpdates.created_at asc rows between unbounded preceding and unbounded following) as quantity_new\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscription_updates__corect_date_and_filledna_tarif_period_quantity` stg_subscriptionUpdates\n   -- join  `dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_and_wapi_sessions_real_money_with_data_source_and_subscription_update_id` who_paid_data \n                                                                                                  --  on stg_subscriptionUpdates.guid = who_paid_data.subscription_update_id\n    left join `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages`  billingpackages \n    on billingpackages.guid=stg_subscriptionUpdates.subscription_id\n    where tariff_new is not null\n    --and billingPackages.account_Id = 82596703\n),\n\nlast_value_tarif_by_subscription_id as (\n    select subscription_id,\n    subscription_type,\n    subscription_owner_account_id,\n    who_paid_account_id,\n    paid_month, \n    tariff_new,\n    period_new,\n    quantity_new \n    from last_value_tarif\n    where tariff_new is not null \n    group by 1,2,3,4,5,6,7,8\n),\n\nlast_value_tarif_next_month as ( \n    select *, coalesce(lag(paid_month) over (partition by subscription_id order by paid_month desc), date_add(current_date, interval 1 month)) as next_month\n    from last_value_tarif_by_subscription_id\n),tarif_info as (\n    select subscription_with_months.*, \n    tariff_new,\n    period_new,\n    quantity_new,\n    subscription_type,\n    who_paid_account_id,\n    subscription_owner_account_id\n     from subscription_with_months\n    left join last_value_tarif_next_month\n    on last_value_tarif_next_month.subscription_id=subscription_with_months.subscription_id\n\n    and subscription_with_months.month>=last_value_tarif_next_month.paid_month and \n    subscription_with_months.month<last_value_tarif_next_month.next_month\n    --where subscription_owner_account_id = 51109365\n    ),\nmart_active_accounts_by_date_to_deduplicate as (\n  select *,\n  row_number() over (partition by account_id, date order by subscription_start desc) as rn_segment\n   from   `dwh-wazzup`.`dbt_nbespalov`.`mart_active_accounts_by_days_by_segment`\n   --where account_id = 56983405\n ), active_accounts_by_date_deduplicated as (\n    select *,  \n    last_value(segment ignore nulls) over (partition by account_id, date_trunc(date,month) order by date asc rows between unbounded preceding and unbounded following) as last_value_segment_month,\n    date_trunc(date,month) as segment_month\n     from mart_active_accounts_by_date_to_deduplicate\n    where rn_segment=1\n), segments_monthly as (\n    select distinct account_id,\n                    segment_month,\n                    last_value_segment_month\n    from active_accounts_by_date_deduplicated\n),segments_joint as (\nselect tarif_info.*except(account_Id,who_paid_account_id), case when last_value_segment_month in ('of_partner_child__of_partner_paid','partner') then 'of-partner'\n                      when last_value_segment_month in ('tech_partner_child__child_paid','tech_partner_child__tech_partner_paid','tech-partner','tech-partner-postpay') then 'tech-partner'\n                    when last_value_segment_month in ('standart_without_partner','of_partner_child_child_paid','unknown') then 'final_client'\n                      end segment_aggregated,\n                      last_value_segment_month,\n            last_value(who_paid_account_id) over (partition by month,subscription_owner_account_id order by subscription_start asc rows between unbounded preceding and unbounded following) as who_paid_account_id,\n\nfrom tarif_info\njoin segments_monthly on tarif_info.subscription_owner_account_id = segments_monthly.account_id\n                              and tarif_info.month = segments_monthly.segment_month\n                             and last_value_segment_month not in ('employee')\nwhere month <= date_trunc(current_date(),month)\n\n\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438 \u0438 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u043a\u0430\u043d\u0430\u043b\u0430\u043c\u0438\n select who_paid_account_id as account_id,                          -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n            subscription_type,                                      -- \u0422\u0438\u043f (\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442) \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n            subscription_owner_account_id,                          -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n            segment_aggregated as segments_aggregated,              -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n              month,                                                -- \u041c\u0435\u0441\u044f\u0446 \u043c\u0435\u0436\u0434\u0443 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u0435\u0451 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0435\u043c\n              date_trunc(register_date,month) registration_month,   -- \u041c\u0435\u0441\u044f\u0446 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n              currency,                                             -- \u0412\u0430\u043b\u044e\u0442\u0430\n  sum(quantity_new) as paid_channels_quantity,                      -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432\n   sum(case when subscription_type in ('waba','wapi') then quantity_new end) as paid_channels_waba_quantity,    -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0441 \u0442\u0430\u0440\u0438\u0444\u043e\u043c WABA\n   sum(case when tariff_new='pro' then quantity_new end) as paid_channels_pro_quantity,                         -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0441 \u0442\u0430\u0440\u0438\u0444\u043e\u043c PRO\n    sum(case when tariff_new  in ('max','waba') then quantity_new end) as paid_channels_max_quantity,           -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0441 \u0442\u0430\u0440\u0438\u0444\u043e\u043c MAX\n    sum(case when tariff_new='start' then quantity_new end) as paid_channels_start_quantity                     -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0441 \u0442\u0430\u0440\u0438\u0444\u043e\u043c START\n  from segments_joint\n  join `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accs on segments_joint.who_paid_account_id = accs.account_id\n  group by who_paid_account_id,\n            subscription_owner_account_id,\n            subscription_type,\n             segment_aggregated,\n              month,\n              date_trunc(register_date,month),\n              currency", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_paid_monthly`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.883442Z", "completed_at": "2025-05-21T12:31:15.894678Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.936915Z", "completed_at": "2025-05-21T12:31:15.936924Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2233438491821289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_accounts_registration_sources_aggregated", "compiled": true, "compiled_code": "with registration_data as (\nselect case when registration_source_agg in ('partner_code','manual_registration') then 'of-partner'\n            when registration_source_agg in ('tech_partner_code') then 'tech-partner'\n        else 'final_client' end as segments_aggregated,\n              *,\n        date_trunc(registration_date,month) as registration_month\nfrom `dwh-wazzup`.`dbt_nbespalov`.`mart_accounts_registration_sources`\n)\n, registrations_all as (\n\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_,\n        registration_month,\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,\n        count(distinct account_id) registration_count,\n      'all' as market_type\nfrom registration_data\n   group by GROUPING SETS \n(\n  (segments_aggregated,registration_month),\n        (registration_source_agg,registration_month),\n        (segments_aggregated,registration_month,registration_source_agg),\n        (registration_month)\n)\n\n\n),registrations_eur_usd_rur_kzt as (\n\nselect case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_,\n        registration_month,\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,\n        count(distinct account_id) registration_count,\n      case when currency in ('USD','EUR') then  'usd_eur' else 'ru_kzt' end as market_type\nfrom registration_data\nwhere currency in ('RUR','USD','KZT','EUR')\n   group by GROUPING SETS \n(\n(segments_aggregated,registration_month,market_type),\n        (registration_source_agg,registration_month,market_type),\n        (segments_aggregated,registration_month,registration_source_agg,market_type),\n        (registration_month,market_type)\n)\n\n),\n\nregistrations_rur as (\n\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_,                -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n        registration_month,                                 -- \u041c\u0435\u0441\u044f\u0446 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,   -- \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n        count(distinct account_id) registration_count,      -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439\n      currency as market_type                               -- \u0420\u044b\u043d\u043e\u043a\nfrom registration_data\nwhere currency in ('RUR','KZT','EUR','USD')\n   group by GROUPING SETS \n(\n(segments_aggregated,registration_month,market_type),\n        (registration_source_agg,registration_month,market_type),\n        (segments_aggregated,registration_month,registration_source_agg,market_type),\n        (registration_month,market_type)\n)\n\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0442\u0438\u043f\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n\n)\nselect 'new' as client_type_,* from registrations_all\nunion all\nselect 'new' as client_type_,* from registrations_eur_usd_rur_kzt\nunion all\nselect 'new' as client_type_,* from registrations_rur\n\nunion all\n\nselect 'all' as client_type_,* from registrations_all\nunion all\nselect 'all' as client_type_,* from registrations_eur_usd_rur_kzt\nunion all\nselect 'all' as client_type_,* from registrations_rur\n\n\n\n      \n\n\n\n--manual reg - \u0440\u0443\u043a\u0438\n--partner code - \u0441\u0441\u044b\u043b\u043a\u0430", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_accounts_registration_sources_aggregated`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.892037Z", "completed_at": "2025-05-21T12:31:15.935776Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:15.979667Z", "completed_at": "2025-05-21T12:31:15.979679Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.21849703788757324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_channels_with_subscription_parameters_and_segment", "compiled": true, "compiled_code": "with subscription_with_parameters as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_by_subscription_id_tarif_period_quantity_by_dates`\n),\n\nactive_channels_with_tarifs as (\n  select channels.channel_id,\n  cast(channels.date as date) as date,\n  transport,\n  channels.account_id,\n  subscription_id,\n  segment,\n  is_free,\n  (case when segment in ('of_partner_child__of_partner_paid') then '\u0434\u043e\u0447\u043a\u0438 \u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430'\n  when segment in ('tech_partner_child__child_paid','tech_partner_child__tech_partner_paid') then '\u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0442\u0435\u0445. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430'\n  when segment in ('standart_without_partner','of_partner_child_child_paid') then '\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b'\n  end) as segment_aggregated,\n  accounts_by_days_by_segment.currency\n  from  `dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_channels` channels\n  left join `dwh-wazzup`.`dbt_nbespalov`.`mart_active_accounts_by_days_by_segment`  accounts_by_days_by_segment \n  on accounts_by_days_by_segment.date=cast(channels.date as date)\n  and accounts_by_days_by_segment.account_id=channels.account_id  \n    \n),\n\ntarif_info_aggregated_with_channel_info as (\n    select subscription_with_parameters.*,\n    active_channels_with_tarifs.channel_id,                         -- ID \u043a\u0430\u043d\u0430\u043b\u0430\n    active_channels_with_tarifs.transport,                          -- \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\n    active_channels_with_tarifs.segment,                            -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    active_channels_with_tarifs.segment_aggregated,                 -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n    active_channels_with_tarifs.is_free,                            -- \u0411\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0439 \u043b\u0438 \u043a\u0430\u043d\u0430\u043b (\u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430)?\n    active_channels_with_tarifs.date as channel_date,               -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u0430\u044f \u0434\u0430\u0442\u0430 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043a\u0430\u043d\u0430\u043b\u0430 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\n    active_channels_with_tarifs.account_id as channel_account_id    -- \u041d\u043e\u043c\u0435\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043a\u0430\u043d\u0430\u043b\u0430 \u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\n    from active_channels_with_tarifs \n    left join subscription_with_parameters\n    on active_channels_with_tarifs.account_id=subscription_with_parameters.account_id \n    and active_channels_with_tarifs.date=subscription_with_parameters.date\n    and active_channels_with_tarifs.subscription_id=subscription_with_parameters.subscription_id\n)\n    -- \u041a\u0430\u043d\u0430\u043b\u044b \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u043c\nselect * from tarif_info_aggregated_with_channel_info\nwhere segment is not null and is_free is distinct from true", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_channels_with_subscription_parameters_and_segment`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:15.937376Z", "completed_at": "2025-05-21T12:31:16.058651Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:16.100282Z", "completed_at": "2025-05-21T12:31:16.100292Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.25196337699890137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_subscription_parameters_and_segment_by_month", "compiled": true, "compiled_code": "with subscription_with_parameters as (\n     select *, last_value(tariff_new) over (partition by account_id, subscription_id, date_trunc(date,month) order by date asc rows between unbounded preceding and unbounded following ) as last_value_tarif_month,\n    last_value(quantity_new) over (partition by account_id, subscription_id, date_trunc(date,month) order by date asc rows between unbounded preceding and unbounded following) as last_value_quantity_month,\n    last_value(period_new) over (partition by account_id, subscription_id, date_trunc(date,month) order by date asc rows between unbounded preceding and unbounded following) as last_value_period_month\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_by_subscription_id_tarif_period_quantity_by_dates`),\n\n\nwapi_sessions_real_money as (\n    select paid_date,\n    account_id,\n    subscription_id,\n    sum(sum_in_rubles_spent_on_subscription) as sum_in_rubles_spent_on_subscription\n     from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_only_subscription_payments_and_wapi_sessions_real_money`\n     group by 1,2,3\n\n ),\n\n subscription_with_parameters_last_value_by_tarif as (\n    select date,\n    account_id,\n    subscription_id,\n    last_value_tarif_month,\n    last_value_quantity_month,\n    last_value_period_month,\n    subscription_type,\n    last_value_date_by_month\n    from subscription_with_parameters\n    group by 1,2,3,4,5,6,7,8\n ),\n\nmart_active_accounts_by_date_to_deduplicate as (\n  select *,\n  row_number() over (partition by account_id, date order by subscription_start desc) as rn_segment\n  \n   from   `dwh-wazzup`.`dbt_nbespalov`.`mart_active_accounts_by_days_by_segment`\n ),\n\n\n active_accounts_by_date_deduplicated as (\n    select *,  last_value(segment ignore nulls) over (partition by account_id, date_trunc(date,month) order by date asc rows between unbounded preceding and unbounded following) as last_value_segment_month\n     from mart_active_accounts_by_date_to_deduplicate\n    where rn_segment=1\n), \n\n\n\n tarif_info_aggregated as (\nselect subscription_with_parameters.*,\nlast_value_segment_month,\n(case when last_value_segment_month in ('of_partner_child__of_partner_paid') then 'of_partner'\nwhen last_value_segment_month in ('tech_partner_child__child_paid','tech_partner_child__tech_partner_paid') then 'tech_partner'\nwhen last_value_segment_month in ('standart_without_partner','of_partner_child_child_paid') then 'final_clients'\nend) as segment_aggregated,\n last_value(segment ignore nulls) over (partition by accounts_by_days_by_segment.account_id, date_trunc(accounts_by_days_by_segment.date,month) order by accounts_by_days_by_segment.date asc rows between unbounded preceding and unbounded following) as last_value_segment_month,\ncoalesce(sum_in_rubles_spent_on_subscription,0) as sum_in_rubles_spent_on_subscription,\ncurrency\nfrom subscription_with_parameters\nleft join wapi_sessions_real_money\non subscription_with_parameters.account_id=wapi_sessions_real_money.account_id \nand wapi_sessions_real_money.paid_date=subscription_with_parameters.date\nand wapi_sessions_real_money.subscription_id=subscription_with_parameters.subscription_id\nleft join active_accounts_by_date_deduplicated  accounts_by_days_by_segment \non accounts_by_days_by_segment.date=subscription_with_parameters.date\nand accounts_by_days_by_segment.account_id=subscription_with_parameters.account_id\nwhere segment is not null),\n\n\nactive_channels_with_tarifs as (\n  select mart_active_channels.channel_id,\n  cast(mart_active_channels.date as date) as date,\n  subscription_id\n   from  `dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_channels` mart_active_channels\n),\n\n\n channels_count as (SELECT uniquechats_data.channel_id, \naccount_id,\n uniquechats_data.date,\n subscription_id,\n unique_chats\n FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_unique_chats` uniquechats_data\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_channels` channels \non  uniquechats_data.channel_id=channels.guid\nleft join active_channels_with_tarifs \non active_channels_with_tarifs.date=uniquechats_data.date\nand active_channels_with_tarifs.channel_id=uniquechats_data.channel_id\n),\n\nsubscription_id_with_unique_chats_count as (\nselect date_trunc(date,month) as dialog_month,\naccount_id,\nsubscription_id,\nsum(unique_chats) as unique_chats\nfrom channels_count\n group by 1,2,3),\n\nsubscription_parameters_aggregated_by_month as (\nselect date_trunc(date, month) as subscription_month,                               -- \u041c\u0435\u0441\u044f\u0446 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n segment_aggregated,                                                                -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n last_value_period_month as period_new,                                             -- \u041d\u043e\u0432\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n last_value_quantity_month as quantity_new,                                         -- \u041d\u043e\u0432\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0432 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n last_value_tarif_month as tariff_new,                                              -- \u041d\u043e\u0432\u044b\u0439 \u0442\u0430\u0440\u0438\u0444 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n subscription_id,                                                                   -- ID \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n subscription_type,                                                                 -- \u0422\u0438\u043f (\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442) \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n account_id,                                                                        -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n currency,                                                                          -- \u0412\u0430\u043b\u044e\u0442\u0430\n sum(sum_in_rubles_spent_on_subscription) as sum_in_rubles_spent_on_subscription,   -- \u0421\u0443\u043c\u043c\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445, \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\n max(last_value_date_by_month) as last_value_date_by_month                          -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0434\u0435\u043d\u044c \u043c\u0435\u0441\u044f\u0446\u0430 \u0432 \u043c\u0435\u0441\u044f\u0446\u0435 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n from tarif_info_aggregated\n group by 1,2,3,4,5,6,7,8,9),\n\n subscription_parameters_with_dialogs_by_month as (\n\n select subscription_parameters_aggregated_by_month.*,\n unique_chats                                                                       -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u0432\n  from subscription_parameters_aggregated_by_month\n left join subscription_id_with_unique_chats_count \n on subscription_parameters_aggregated_by_month.subscription_month=subscription_id_with_unique_chats_count.dialog_month \n and subscription_parameters_aggregated_by_month.subscription_id=subscription_id_with_unique_chats_count.subscription_id)\n    -- \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c\n select \n* from subscription_parameters_with_dialogs_by_month", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_subscription_parameters_and_segment_by_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.102816Z", "completed_at": "2025-05-21T12:31:16.148317Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:16.156849Z", "completed_at": "2025-05-21T12:31:16.156857Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.1446850299835205, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_waba_balance_spending_by_currency_and_account", "compiled": true, "compiled_code": "SELECT       -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u0441 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 WABA \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c\u0438 \u0432\u0430\u043b\u044e\u0442\u0430\u043c\u0438 \u0438 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n       account_id                                                               -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n     , CAST(waba_channels.date_at AS DATE)                     AS spend_date    -- \u0414\u0430\u0442\u0430 \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f\n     , waba_channels.currency                                                   -- \u0412\u0430\u043b\u044e\u0442\u0430: RUR, USD, EUR, KZT\n     , state\n     , abs(sum(amount * coalesce(exchange_rates.cor_rate, 1))) AS sum_in_rubles -- \u0421\u0443\u043c\u043c\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n     , abs(sum(amount))                                        AS original_sum  -- \u0421\u0443\u043c\u043c\u0430 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\nFROM `dwh-wazzup`.`dbt_nbespalov`.`mart_channels_waba_spending` waba_channels\nLEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_exchangeRates` exchange_rates ON exchange_rates.currency=waba_channels.currency AND\n                                                        CAST (waba_channels.date_at AS DATE)=exchange_rates.data AND nominal='RUR'\nWHERE amount!=0 AND state in('paid','holded')\nGROUP BY 1, 2, 3, 4", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_waba_balance_spending_by_currency_and_account`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.145857Z", "completed_at": "2025-05-21T12:31:16.157864Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:16.204588Z", "completed_at": "2025-05-21T12:31:16.204597Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.14818596839904785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_replenishment_all_accounts_total", "compiled": true, "compiled_code": "WITH partner_data as (\n  SELECT\n    partner_id as account_id,                           -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    type,                                               -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    currency,                                           -- \u0412\u0430\u043b\u044e\u0442\u0430\n    occured_date,                                       -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    real_money_invalid_bills_org as replenishment_org,  -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    real_money_invalid_bills_RUR as replenishment_RUR   -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`mart_replenishment_partner_accounts` \n),\n\nstandrt_data as (\n  SELECT\n    client_id as account_id,                            -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    type,                                               -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    currency,                                           -- \u0412\u0430\u043b\u044e\u0442\u0430\n    occured_date,                                       -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    total_org as replenishment_org,                     -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    total_RUR as replenishment_RUR                      -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`mart_replenishment_standart_accounts` \n),\n\npostpay_data as (\n  SELECT \n    Cast(account_id as int64) as account_id,            -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    'tech-partner-postpay' as type,                     -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    currency,                                           -- \u0412\u0430\u043b\u044e\u0442\u0430\n    paid_date as occured_date,                          -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    original_sum as replenishment_org,                  -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    sum_in_rubles as replenishment_RUR,                 -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    \n  FROM `dwh-wazzup`.`dbt_nbespalov`.`int_payments_postpay_revenue_bills`\n  WHERE account_id is not null\n),\n\nfinal_table as (\n  SELECT  \n    account_id,                                         -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    type,                                               -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    currency,                                           -- \u0412\u0430\u043b\u044e\u0442\u0430\n    occured_date,                                       -- \u0414\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    replenishment_org,                                  -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435\n    replenishment_RUR                                   -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n  FROM partner_data pd\n  FULL OUTER JOIN standrt_data USING(account_id, type, currency, occured_date, replenishment_org, replenishment_RUR)\n  FULL OUTER JOIN postpay_data USING(account_id, type, currency, occured_date, replenishment_org, replenishment_RUR)\n) \n\nSELECT *\nFROM final_table", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_replenishment_all_accounts_total`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.149829Z", "completed_at": "2025-05-21T12:31:16.202060Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:16.205240Z", "completed_at": "2025-05-21T12:31:16.205250Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.18566107749938965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_left_and_returned_accounts", "compiled": true, "compiled_code": "with active_accounts_weekly as (\n          select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_active_accounts_weekly`\n),\nactive_accounts_monthly as (\n          select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_active_accounts_monthly`\n),\n\nweek_left_guys as (\n          select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_left_accounts_weekly`\n),\nmonth_left_guys as (\n          select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_left_accounts_monthly`\n),\nreturned_guys_weekly as (\n            select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_returned_accounts_weekly`\n\n),\nreturned_guys_monthly as (\n              select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_returned_accounts_monthly`\n\n)\n\nselect sum(activeaccs) As active_accs,\n       left_guys,\n       returned,\n       returned_on_left_day,\n       active_weekly.week as date,\n       active_weekly.currency,\n       'weekly' as TYPE\nfrom active_accounts_weekly active_weekly\nleft join week_left_guys left_weekly on left_weekly.week_of_leave_date = active_weekly.week  and left_weekly.currency = active_weekly.currency \nleft join returned_guys_weekly returned_weekly on returned_weekly.week = active_weekly.week  and returned_weekly.currency = active_weekly.currency\n--where active_weekly.week <= current_date\ngroup by 2,3,4,5,6,7\n\nunion all\n    -- \u0423\u0448\u0435\u0434\u0448\u0438\u0435 \u0438 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0435\u0441\u044f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u044b\nselect sum(activeaccs) As active_accs,  -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\n       left_guys,                       -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0448\u0435\u0434\u0448\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n       returned,                        -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0445\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n       returned_on_left_day,            -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0435\u0440\u043d\u0443\u043b\u0438\u0441\u044c \u0432 \u0434\u0435\u043d\u044c \u0443\u0445\u043e\u0434\u0430\n       active_monthly.month as date,    -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a\n       active_monthly.currency,         -- \u0412\u0430\u043b\u044e\u0442\u0430\n       'monthly' as TYPE                -- \u0422\u0438\u043f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0430\nfrom active_accounts_monthly active_monthly\nleft join month_left_guys left_monthly on left_monthly.month_of_leave_date = active_monthly.month  and left_monthly.currency = active_monthly.currency \nleft join returned_guys_monthly returned_monthly on returned_monthly.month = active_monthly.month  and returned_monthly.currency = active_monthly.currency\ngroup by 2,3,4,5,6,7", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.152546Z", "completed_at": "2025-05-21T12:31:16.204002Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:16.210873Z", "completed_at": "2025-05-21T12:31:16.210882Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.22551345825195312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_abcx_segmentation_defining_abcx_segmentation_type", "compiled": true, "compiled_code": "\n\nwith revenue_amount as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_revenue_amount_with_real_money_spend_on_subscription`\n    where market_type = 'ru'\n        and account_type = '\u043e\u0431\u044b\u0447\u043d\u044b\u0439 (\u044e\u0437\u0435\u0440 \u0431\u0435\u0437 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430)'\n),\nstg_channels as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_channels`\n),\nstg_billing_packages as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages`\n)\n,\naccount_active_periods_with_revenue_amount_distinct as (\nselect distinct account_id,\n                first_subscription_start,\n                last_end_month\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_users_living_time_with_revenue_periods`\nwhere market_type = 'ru'\nand account_type = '\u043e\u0431\u044b\u0447\u043d\u044b\u0439 (\u044e\u0437\u0435\u0440 \u0431\u0435\u0437 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430)'\n),\nprofile_info as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n),\nrevenue_amount_values as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_revenue_amount_with_real_money_spend_on_subscription`\n    where market_type = 'ru'\n    and account_type = '\u043e\u0431\u044b\u0447\u043d\u044b\u0439 (\u044e\u0437\u0435\u0440 \u0431\u0435\u0437 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430)'\n),\ngenerated_months as (\n        select * \n        from `dwh-wazzup`.`dbt_nbespalov`.`stg_months`\n        )\n\n,avg_money as (\n    select month,\n          revenue_amount_values.account_id,\n          first_subscription_start,\n          last_end_month,\n          lead(month) over (partition by revenue_amount_values.account_id order by month) as next_payment_month,\n          revenue_amount\n    from revenue_amount_values\n    join account_active_periods_with_revenue_amount_distinct accs on revenue_amount_values.account_id = accs.account_id\n)\n,account_active_periods_with_revenue_amount as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_users_living_time_with_revenue_periods`\n    where market_type = 'ru'\n        and account_type = '\u043e\u0431\u044b\u0447\u043d\u044b\u0439 (\u044e\u0437\u0435\u0440 \u0431\u0435\u0437 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430)'\n)\n,calculating_correct_averages as (\n    select avg_money.* except(next_payment_month),\n            coalesce(next_payment_month,date_trunc(date_add(current_date(),interval 1 month),month)) next_payment_month,\n            date_trunc(current_date(),month) as current_month\n    --avg(revenue_amount) over (partition by account_id order by avg_money.month rows BETWEEN 5 PRECEDING AND 0 FOLLOWING) avg_sum_in_rubles\n            --revenue_amount as avg_sum_in_rubles\n    from avg_money\n),revenue_average as (\n/*\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043c\u0435\u0441\u044f\u0446\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u044b \u0435\u0433\u043e \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0438 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0435 \u043f\u0435\u0440\u0446\u0438\u043d\u0442\u0435\u043b\u044f\n\u041c\u044b \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0435\u0433\u043e 4 \u043c\u0435\u0441\u044f\u0446\u0430. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0435\u0440\u0432\u0430\u044f \u043e\u043f\u043b\u0430\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f 2021-06-17, \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432 \u043c\u0435\u0441\u044f\u0446 2021-09-01 \u043c\u044b \u043d\u0430\u0447\u043d\u0435\u043c \u0435\u0433\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c.\n\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043c\u044b \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0435\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044b, \u0442\u043e \u0435\u0441\u0442\u044c \u043c\u0435\u0441\u044f\u0446\u0430, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u0440\u0430\u0441\u0447\u0435\u0442\u0435 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u0435\u0439.\n\u0412 \u043c\u043e\u043c\u0435\u043d\u0442 \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u0435\u0439 \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u00ab\u043d\u0430\u043a\u043e\u043f\u0438\u0432\u0448\u0430\u044f\u0441\u044f \u0441\u0440\u0435\u0434\u043d\u044f\u044f */\n    select\n          avg_money.account_id,\n          avg_money.month as payment_month,\n          avg_money.revenue_amount as revenue_amount_in_payment_month,\n          next_payment_month,\n          months.month as month_since_we_start_considering_user_in_percentile_calculation,\n          live_month,\n          client_living_type,\n          active_periods.avg_sum_in_rubles  as avg_sum_in_rubles\n    from calculating_correct_averages avg_money\n    inner join generated_months months on date_trunc(first_subscription_start,month) <= (date_add(months.month,interval -3 month))\n                            and months.month >= avg_money.month and (months.month < avg_money.next_payment_month)\n    inner join account_active_periods_with_revenue_amount active_periods on avg_money.account_id = active_periods.account_id\n    where months.month <= date_trunc(current_date,month)\n                          and months.month = live_month --\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u043c\u0435\u0441\u044f\u0446\u0430, \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0431\u044b\u043b \u0430\u043a\u0442\u0438\u0432\u0435\u043d\n),distincts_amount_for_each_account_month as (\n    select distinct account_id,\n                    month_since_we_start_considering_user_in_percentile_calculation,\n                    avg_sum_in_rubles\n    from revenue_average\n)\n,percentiles as (\nselect\n      account_id,\n      month_since_we_start_considering_user_in_percentile_calculation,\n      PERCENTILE_CONT(avg_sum_in_rubles,0.25) over (partition by month_since_we_start_considering_user_in_percentile_calculation) AS percentile_25,\n      PERCENTILE_CONT(avg_sum_in_rubles,0.75) over (partition by month_since_we_start_considering_user_in_percentile_calculation) AS percentile_75,\n      PERCENTILE_CONT(avg_sum_in_rubles,0.99) over (partition by month_since_we_start_considering_user_in_percentile_calculation) AS percentile_99\nfrom distincts_amount_for_each_account_month\n) ,percentile_group as (\n--\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0433\u0440\u0443\u043f\u043f\u044b \u043f\u043e \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044f\u043c\n\nselect distinct\n                account_active_periods_with_revenue_amount.account_id,\n                account_active_periods_with_revenue_amount.live_month,\n                percentile_25,\n                percentile_75,\n                percentile_99,\n                avg_sum_in_rubles,\n                case when account_active_periods_with_revenue_amount.client_living_type = 'new' then 'New'\n                     when avg_sum_in_rubles<percentile_25 then 'C'\n                     when avg_sum_in_rubles<percentile_75 then 'B'\n                     when avg_sum_in_rubles<percentile_99 then 'A'\n                     when avg_sum_in_rubles>=percentile_99 then 'X'\n                end as abcx_segment\nfrom account_active_periods_with_revenue_amount\nleft join percentiles on account_active_periods_with_revenue_amount.live_month = percentiles.month_since_we_start_considering_user_in_percentile_calculation\n                      and account_active_periods_with_revenue_amount.account_id = percentiles.account_id\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f ABCX \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0431\u0435\u0437 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430 \u0432 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0435. https://www.notion.so/ABCX-7b8f5f7d3e0b470e83fe632828d64821 \nselect percentile_group.account_id,         -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n       percentile_group.percentile_99,      -- 99-\u044b\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0432\u044b\u0440\u0443\u0447\u043a\u0438 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0434\u0430\u043d\u043d\u043e\u043c live_month \u043c\u0435\u0441\u044f\u0446\u0435\n       percentile_group.avg_sum_in_rubles,  -- \u0421\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0430\u044f \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0437\u0430 3 \u043c\u0435\u0441\u044f\u0446\u0430 (2 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 + \u0442\u0435\u043a\u0443\u0449\u0438\u0439)\n       percentile_group.abcx_segment,       -- ABCX \u0441\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0434\u0430\u043d\u043d\u043e\u043c live_month \u043c\u0435\u0441\u044f\u0446\u0435\n       percentile_group.live_month,         -- \u041c\u0435\u0441\u044f\u0446 \u0436\u0438\u0437\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a, \u0444\u043e\u0440\u043c\u0430\u0442 2022-11-29\n       account_segment_type,\n       count(distinct case when stg_channels.state = 'active' and temporary = False and deleted = False then stg_channels.guid end) as active_channels_count,   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043d\u0435\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432\n       count(distinct case when stg_channels.state = 'active' and temporary = False and deleted = False and stg_billing_packages.state = 'active' and paid_At is not null then stg_channels.guid end) as active_channels_count_with_paid_sub,   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043d\u0435\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0441 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u043b\u0430\u0442\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\n       count(distinct case when temporary = False and deleted = False then stg_channels.guid end ) as channels_count,   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043d\u0435\u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432\n       count(distinct case when temporary = False and deleted = False and stg_billing_packages.guid is not null and paid_At is not null then stg_channels.guid end ) as channels_count_with_paid_sub    -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043d\u0435\u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0432 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\nfrom percentile_group\njoin profile_info on percentile_group.account_id = profile_info.account_id\nleft join stg_channels  on percentile_group.account_id = stg_channels.account_id\nleft join stg_billing_packages  on stg_channels.package_Id = stg_billing_packages.guid\nwhere percentile_group.live_month <= date_trunc(current_date(),month)\ngroup by percentile_group.account_id,\n       percentile_group.percentile_99,\n       percentile_group.avg_sum_in_rubles,\n       percentile_group.abcx_segment,\n       percentile_group.live_month,\n       account_segment_type\n  \n\n\n\n\n/*\nselect *\nfrom dbt_prod.int_subscriptions_lost_revenue_due_to_quantity_and_tariff_change \nwhere account_id = 32916152\n\n\nwith accounts as (\nselect distinct lt.account_id,\nfirst_subscription_start,\n                c.guid\nfrom dbt_prod.int_accounts_who_paid__standart_russian_users_without_partners_living_time lt\njoin wazzup.channels c on lt.account_id = c.accountid\nwhere state = 'active' \n      and temporary = False\n      and deleted = False\n      and packageid is not null\n)\nselect account_id,first_subscription_start,count(distinct guid)\nfrom accounts\nwhere first_subscription_start < '2023-09-01'\ngroup by 1,2\norder by 3 desc\nlimit 100\n*/", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_defining_abcx_segmentation_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.158342Z", "completed_at": "2025-05-21T12:31:16.205919Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:16.288095Z", "completed_at": "2025-05-21T12:31:16.288106Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.22433900833129883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_abcx_segmentation_defining_abcx_segmentation_type_all_segments", "compiled": true, "compiled_code": "\n\nwith revenue_amount as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_revenue_amount_with_real_money_spend_on_subscription`\n   \n),\nstg_channels as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_channels`\n),\nstg_billing_packages as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages`\n)\n,\naccount_active_periods_with_revenue_amount_distinct as (\nselect distinct account_id,\n                first_subscription_start,\n                last_end_month\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_users_living_time_with_revenue_periods`\n\n),\nprofile_info as (\n    select *except(account_segment_type)\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n),\nrevenue_amount_values as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_revenue_amount_with_real_money_spend_on_subscription`\n \n),\ngenerated_months as (\n        select * \n        from `dwh-wazzup`.`dbt_nbespalov`.`stg_months`\n        )\n\n,avg_money as (\n    select month,\n          revenue_amount_values.account_id,\n          first_subscription_start,\n          lead(month) over (partition by revenue_amount_values.account_id order by month) as next_payment_month,\n          revenue_amount\n    from revenue_amount_values\n    join account_active_periods_with_revenue_amount_distinct accs on revenue_amount_values.account_id = accs.account_id\n)\n,account_active_periods_with_revenue_amount as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_users_living_time_with_revenue_periods`\n\n),\nsegments as (\n    select   \n        account_id,\n        date_trunc(date,month) segment_month,\n         case when segment ='standart_without_partner' then '\u043e\u0431\u044b\u0447\u043d\u044b\u0439 (\u044e\u0437\u0435\u0440 \u0431\u0435\u0437 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430)'\n                 when segment = 'tech_partner_child__tech_partner_paid' then '\u0414\u043e\u0447\u043a\u0430 \u0442\u0435\u0445 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043b\u0430\u0442\u0438\u0442 \u0447\u0435\u0440\u0435\u0437 \u0442\u0435\u0445 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430'\n                 when segment = 'tech_partner_child__child_paid' then '\u0414\u043e\u0447\u043a\u0430 \u0442\u0435\u0445 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043b\u0430\u0442\u0438\u0442 \u0441\u0430\u043c\u0430'\n                 when segment = 'partner' then '\u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0451\u0440'\n                 when segment = 'employee' then '\u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a'\n                 when segment = 'partner-demo' then '\u0434\u0435\u043c\u043e-\u043f\u0430\u0440\u0442\u043d\u0451\u0440'\n                 when segment = 'of_partner_child__of_partner_paid' then '\u0414\u043e\u0447\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043b\u0430\u0442\u0438\u0442 \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430'\n                 when segment = 'of_partner_child_child_paid' then '\u0421\u0430\u043c\u043e\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u0430\u044f \u0434\u043e\u0447\u043a\u0430 \u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043b\u0430\u0442\u0438\u0442 \u0441\u0430\u043c\u0430'\n                 when segment = 'tech-partner' then '\u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u0442\u0435\u0445\u043f\u0430\u0440\u0442\u043d\u0435\u0440'\n                 when segment = 'tech-partner-postpay' then '\u0442\u0435\u0445\u043f\u0430\u0440\u0442\u043d\u0435\u0440-\u043f\u043e\u0441\u0442\u043e\u043f\u043b\u0430\u0442\u043d\u0438\u043a'\n            else 'unknown' end as account_segment_type,\n        row_number() over (partition by account_id,date_trunc(date,month) order by date desc) rn_segments\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_in_dynamics_defining_clients_with_segments` segments\n    join `dwh-wazzup`.`dbt_nbespalov`.`stg_days` days on segments.segment_start <= days.date and days.date < segments.segment_end\n\n)\n,calculating_correct_averages as (\n    select avg_money.* except(next_payment_month),\n            coalesce(next_payment_month,date_trunc(date_add(current_date(),interval 1 month),month)) next_payment_month,\n            date_trunc(current_date(),month) as current_month\n    --avg(revenue_amount) over (partition by account_id order by avg_money.month rows BETWEEN 5 PRECEDING AND 0 FOLLOWING) avg_sum_in_rubles\n            --revenue_amount as avg_sum_in_rubles\n    from avg_money\n),revenue_average as (\n/*\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043c\u0435\u0441\u044f\u0446\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u044b \u0435\u0433\u043e \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0438 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0435 \u043f\u0435\u0440\u0446\u0438\u043d\u0442\u0435\u043b\u044f\n\u041c\u044b \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0435\u0433\u043e 4 \u043c\u0435\u0441\u044f\u0446\u0430. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0435\u0440\u0432\u0430\u044f \u043e\u043f\u043b\u0430\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f 2021-06-17, \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432 \u043c\u0435\u0441\u044f\u0446 2021-09-01 \u043c\u044b \u043d\u0430\u0447\u043d\u0435\u043c \u0435\u0433\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c.\n\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043c\u044b \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0435\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044b, \u0442\u043e \u0435\u0441\u0442\u044c \u043c\u0435\u0441\u044f\u0446\u0430, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u0440\u0430\u0441\u0447\u0435\u0442\u0435 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u0435\u0439.\n\u0412 \u043c\u043e\u043c\u0435\u043d\u0442 \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u0435\u0439 \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u00ab\u043d\u0430\u043a\u043e\u043f\u0438\u0432\u0448\u0430\u044f\u0441\u044f \u0441\u0440\u0435\u0434\u043d\u044f\u044f */\n    select\n          avg_money.account_id,\n          avg_money.month as payment_month,\n          avg_money.revenue_amount as revenue_amount_in_payment_month,\n          next_payment_month,\n          months.month as month_since_we_start_considering_user_in_percentile_calculation,\n          live_month,\n          last_end_month,\n          client_living_type,\n          active_periods.avg_sum_in_rubles  as avg_sum_in_rubles,\n          active_periods.market_type\n    from calculating_correct_averages avg_money\n    inner join generated_months months on date_trunc(first_subscription_start,month) <= (date_add(months.month,interval -3 month))\n                            and months.month >= avg_money.month and (months.month < avg_money.next_payment_month)\n    inner join account_active_periods_with_revenue_amount active_periods on avg_money.account_id = active_periods.account_id\n    where --months.month <= date_trunc(current_date,month) and\n          months.month = live_month --\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u043c\u0435\u0441\u044f\u0446\u0430, \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0431\u044b\u043b \u0430\u043a\u0442\u0438\u0432\u0435\u043d\n),distincts_amount_for_each_account_month as (\n    select distinct account_id,\n                    market_type,\n                    last_end_month,\n                    month_since_we_start_considering_user_in_percentile_calculation,\n                    avg_sum_in_rubles\n    from revenue_average\n)\n,percentiles as (\nselect\n     segments.account_id,\n     last_end_month,\n      month_since_we_start_considering_user_in_percentile_calculation,\n      PERCENTILE_CONT(avg_sum_in_rubles,0.25) over (partition by month_since_we_start_considering_user_in_percentile_calculation, case when account_segment_type in ('\u043e\u0431\u044b\u0447\u043d\u044b\u0439 (\u044e\u0437\u0435\u0440 \u0431\u0435\u0437 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430)','\u0421\u0430\u043c\u043e\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u0430\u044f \u0434\u043e\u0447\u043a\u0430 \u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043b\u0430\u0442\u0438\u0442 \u0441\u0430\u043c\u0430') then 'end_users'\n      else account_segment_type end,market_type) AS percentile_25,\n      PERCENTILE_CONT(avg_sum_in_rubles,0.75) over (partition by month_since_we_start_considering_user_in_percentile_calculation,case when account_segment_type in ('\u043e\u0431\u044b\u0447\u043d\u044b\u0439 (\u044e\u0437\u0435\u0440 \u0431\u0435\u0437 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430)','\u0421\u0430\u043c\u043e\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u0430\u044f \u0434\u043e\u0447\u043a\u0430 \u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043b\u0430\u0442\u0438\u0442 \u0441\u0430\u043c\u0430') then 'end_users'\n      else account_segment_type end,market_type) AS percentile_75,\n      PERCENTILE_CONT(avg_sum_in_rubles,0.99) over (partition by month_since_we_start_considering_user_in_percentile_calculation,case when account_segment_type in ('\u043e\u0431\u044b\u0447\u043d\u044b\u0439 (\u044e\u0437\u0435\u0440 \u0431\u0435\u0437 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430)','\u0421\u0430\u043c\u043e\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u0430\u044f \u0434\u043e\u0447\u043a\u0430 \u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043b\u0430\u0442\u0438\u0442 \u0441\u0430\u043c\u0430') then 'end_users'\n      else account_segment_type end,market_type) AS percentile_99\nfrom distincts_amount_for_each_account_month\njoin segments on distincts_amount_for_each_account_month.account_id = segments.account_id and rn_segments = 1\n                                 and distincts_amount_for_each_account_month.month_since_we_start_considering_user_in_percentile_calculation = segments.segment_month\n--where account_segment_type in ('\u043e\u0431\u044b\u0447\u043d\u044b\u0439 (\u044e\u0437\u0435\u0440 \u0431\u0435\u0437 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430)','\u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0451\u0440','\u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u0442\u0435\u0445\u043f\u0430\u0440\u0442\u043d\u0435\u0440','\u0421\u0430\u043c\u043e\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u0430\u044f \u0434\u043e\u0447\u043a\u0430 \u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043b\u0430\u0442\u0438\u0442 \u0441\u0430\u043c\u0430')\n\n) ,percentile_group as (\n--\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0433\u0440\u0443\u043f\u043f\u044b \u043f\u043e \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044f\u043c\n\nselect distinct\n                account_active_periods_with_revenue_amount.account_id,\n                account_active_periods_with_revenue_amount.live_month,\n                percentile_25,\n                percentile_75,\n                percentile_99,\n                account_active_periods_with_revenue_amount.last_end_month,\n                avg_sum_in_rubles,\n                account_active_periods_with_revenue_amount.market_type,\n                case when account_active_periods_with_revenue_amount.client_living_type = 'new' then 'New'\n                     when avg_sum_in_rubles<percentile_25 then 'C'\n                     when avg_sum_in_rubles<percentile_75 then 'B'\n                     when avg_sum_in_rubles<percentile_99 then 'A'\n                     when avg_sum_in_rubles>=percentile_99 then 'X'\n                end as abcx_segment\nfrom account_active_periods_with_revenue_amount\nleft join percentiles on account_active_periods_with_revenue_amount.live_month = percentiles.month_since_we_start_considering_user_in_percentile_calculation\n                      and account_active_periods_with_revenue_amount.account_id = percentiles.account_id\n),final as (\nselect percentile_group.account_id,         -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n       \n       percentile_group.percentile_25,      -- 25-\u044b\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0432\u044b\u0440\u0443\u0447\u043a\u0438 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0434\u0430\u043d\u043d\u043e\u043c live_month \u043c\u0435\u0441\u044f\u0446\u0435\n        percentile_group.percentile_75,     -- 75-\u044b\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0432\u044b\u0440\u0443\u0447\u043a\u0438 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0434\u0430\u043d\u043d\u043e\u043c live_month \u043c\u0435\u0441\u044f\u0446\u0435\n       percentile_group.percentile_99,      -- 99-\u044b\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0432\u044b\u0440\u0443\u0447\u043a\u0438 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0434\u0430\u043d\u043d\u043e\u043c live_month \u043c\u0435\u0441\u044f\u0446\u0435\n       percentile_group.avg_sum_in_rubles,  -- \u0421\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0430\u044f \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0437\u0430 3 \u043c\u0435\u0441\u044f\u0446\u0430 (2 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 + \u0442\u0435\u043a\u0443\u0449\u0438\u0439)\n       percentile_group.abcx_segment,       -- ABCX \u0441\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0434\u0430\u043d\u043d\u043e\u043c live_month \u043c\u0435\u0441\u044f\u0446\u0435\n       percentile_group.live_month,         -- \u041c\u0435\u0441\u044f\u0446 \u0436\u0438\u0437\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a, \u0444\u043e\u0440\u043c\u0430\u0442 2022-11-29\n       market_type,                         -- \u0420\u044b\u043d\u043e\u043a\n       percentile_group.last_end_month,     -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n       count(distinct case when stg_channels.state = 'active' and temporary = False and deleted = False then stg_channels.guid end) as active_channels_count,   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043d\u0435\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432\n       count(distinct case when stg_channels.state = 'active' and temporary = False and deleted = False and stg_billing_packages.state = 'active' and paid_At is not null then stg_channels.guid end) as active_channels_count_with_paid_sub,   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043d\u0435\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0441 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u043b\u0430\u0442\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\n       count(distinct case when temporary = False and deleted = False then stg_channels.guid end ) as channels_count,   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043d\u0435\u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432\n       count(distinct case when temporary = False and deleted = False and stg_billing_packages.guid is not null and paid_At is not null then stg_channels.guid end ) as channels_count_with_paid_sub    -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043d\u0435\u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0432 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\nfrom percentile_group\njoin profile_info on percentile_group.account_id = profile_info.account_id\nleft join stg_channels  on percentile_group.account_id = stg_channels.account_id\nleft join stg_billing_packages  on stg_channels.package_Id = stg_billing_packages.guid\n--where percentile_group.live_month <= date_trunc(current_date(),month)\ngroup by percentile_group.account_id,\n       \n       percentile_group.last_end_month,    \n       percentile_group.percentile_25,      \n        percentile_group.percentile_75,     \n       percentile_group.percentile_99,      \n       percentile_group.avg_sum_in_rubles,  \n       percentile_group.abcx_segment,       \n       percentile_group.live_month,         \n        market_type                        \n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f ABCX \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0431\u0435\u0437 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430 \u0432 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0435. https://www.notion.so/ABCX-7b8f5f7d3e0b470e83fe632828d64821. \u0412\u0441\u0435 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u044b\nselect final.*except(abcx_segment),\n        case when count(*) over (partition by final.account_id) >1 and live_month = last_end_month then null else abcx_segment end as abcx_segment, -- ABCX \u0441\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0434\u0430\u043d\u043d\u043e\u043c live_month \u043c\u0435\u0441\u044f\u0446\u0435\n               account_segment_type,    -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n      case when account_segment_type in ('\u043e\u0431\u044b\u0447\u043d\u044b\u0439 (\u044e\u0437\u0435\u0440 \u0431\u0435\u0437 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430)','\u0421\u0430\u043c\u043e\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u0430\u044f \u0434\u043e\u0447\u043a\u0430 \u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043b\u0430\u0442\u0438\u0442 \u0441\u0430\u043c\u0430') then '\u041a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442'\n           when account_segment_type in ('\u0414\u043e\u0447\u043a\u0430 \u0442\u0435\u0445 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043b\u0430\u0442\u0438\u0442 \u0441\u0430\u043c\u0430','\u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u0442\u0435\u0445\u043f\u0430\u0440\u0442\u043d\u0435\u0440','\u0414\u043e\u0447\u043a\u0430 \u0442\u0435\u0445 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043b\u0430\u0442\u0438\u0442 \u0447\u0435\u0440\u0435\u0437 \u0442\u0435\u0445 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430') then '\u041e\u0431\u044b\u0447\u043d\u044b\u0439 \u0442\u0435\u0445\u043f\u0430\u0440\u0442\u043d\u0435\u0440'\n           when account_segment_type in ('\u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0451\u0440','\u0414\u043e\u0447\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043b\u0430\u0442\u0438\u0442 \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430') then '\u041e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440'\n      else account_segment_type end as segment_type_groupped    -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u0433\u0440\u0443\u043f\u043f\u044b\nfrom final\njoin segments on final.account_id = segments.account_id and rn_segments = 1\n                                            and final.live_month = segments.segment_month\n/*\nselect *\nfrom dbt_prod.int_subscriptions_lost_revenue_due_to_quantity_and_tariff_change \nwhere account_id = 32916152\n\n\nwith accounts as (\nselect distinct lt.account_id,\nfirst_subscription_start,\n                c.guid\nfrom dbt_prod.int_accounts_who_paid__standart_russian_users_without_partners_living_time lt\njoin wazzup.channels c on lt.account_id = c.accountid\nwhere state = 'active' \n      and temporary = False\n      and deleted = False\n      and packageid is not null\n)\nselect account_id,first_subscription_start,count(distinct guid)\nfrom accounts\nwhere first_subscription_start < '2023-09-01'\ngroup by 1,2\norder by 3 desc\nlimit 100\n*/", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_defining_abcx_segmentation_type_all_segments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.207015Z", "completed_at": "2025-05-21T12:31:16.327234Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:16.369598Z", "completed_at": "2025-05-21T12:31:16.369609Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.25501275062561035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_abcx_segmentation_defining_abcx_segmentation_type_independend_daughters", "compiled": true, "compiled_code": "\n\nwith revenue_amount as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_revenue_amount_with_real_money_spend_on_subscription`\n    where market_type = 'ru'\n            and account_type = '\u0421\u0430\u043c\u043e\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u0430\u044f \u0434\u043e\u0447\u043a\u0430 \u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043b\u0430\u0442\u0438\u0442 \u0441\u0430\u043c\u0430'\n            and date_diff(current_date(),register_date,year) >= 1\n),\nstg_channels as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_channels`\n),\nstg_billing_packages as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages`\n)\n,\naccount_active_periods_with_revenue_amount_distinct as (\nselect distinct account_id,\n                first_subscription_start,\n                last_end_month\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_users_living_time_with_revenue_periods`\nwhere market_type = 'ru'\nand account_type = '\u0421\u0430\u043c\u043e\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u0430\u044f \u0434\u043e\u0447\u043a\u0430 \u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043b\u0430\u0442\u0438\u0442 \u0441\u0430\u043c\u0430'\n        and date_diff(current_date(),register_date,year) >= 1\n\n),\nprofile_info as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n),\nrevenue_amount_values as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_revenue_amount_with_real_money_spend_on_subscription`\n    where market_type = 'ru'\n            and account_type = '\u0421\u0430\u043c\u043e\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u0430\u044f \u0434\u043e\u0447\u043a\u0430 \u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043b\u0430\u0442\u0438\u0442 \u0441\u0430\u043c\u0430'\n        and date_diff(current_date(),register_date,year) >= 1\n),\ngenerated_months as (\n        select * \n        from `dwh-wazzup`.`dbt_nbespalov`.`stg_months`\n        )\n\n,avg_money as (\n    select month,\n          revenue_amount_values.account_id,\n          first_subscription_start,\n          last_end_month,\n          lead(month) over (partition by revenue_amount_values.account_id order by month) as next_payment_month,\n          revenue_amount\n    from revenue_amount_values\n    join account_active_periods_with_revenue_amount_distinct accs on revenue_amount_values.account_id = accs.account_id\n)\n,account_active_periods_with_revenue_amount as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_users_living_time_with_revenue_periods`\n    where market_type = 'ru'\n        and account_type = '\u0421\u0430\u043c\u043e\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u0430\u044f \u0434\u043e\u0447\u043a\u0430 \u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043b\u0430\u0442\u0438\u0442 \u0441\u0430\u043c\u0430'\n        and date_diff(current_date(),register_date,year) >= 1\n)\n,calculating_correct_averages as (\n    select avg_money.* except(next_payment_month),\n            coalesce(next_payment_month,date_trunc(date_add(current_date(),interval 1 month),month)) next_payment_month,\n            date_trunc(current_date(),month) as current_month\n    --avg(revenue_amount) over (partition by account_id order by avg_money.month rows BETWEEN 5 PRECEDING AND 0 FOLLOWING) avg_sum_in_rubles\n            --revenue_amount as avg_sum_in_rubles\n    from avg_money\n),revenue_average as (\n/*\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043c\u0435\u0441\u044f\u0446\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u044b \u0435\u0433\u043e \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0438 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0435 \u043f\u0435\u0440\u0446\u0438\u043d\u0442\u0435\u043b\u044f\n\u041c\u044b \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0435\u0433\u043e 4 \u043c\u0435\u0441\u044f\u0446\u0430. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0435\u0440\u0432\u0430\u044f \u043e\u043f\u043b\u0430\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f 2021-06-17, \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432 \u043c\u0435\u0441\u044f\u0446 2021-09-01 \u043c\u044b \u043d\u0430\u0447\u043d\u0435\u043c \u0435\u0433\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c.\n\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043c\u044b \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0435\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044b, \u0442\u043e \u0435\u0441\u0442\u044c \u043c\u0435\u0441\u044f\u0446\u0430, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u0440\u0430\u0441\u0447\u0435\u0442\u0435 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u0435\u0439.\n\u0412 \u043c\u043e\u043c\u0435\u043d\u0442 \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u0435\u0439 \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u00ab\u043d\u0430\u043a\u043e\u043f\u0438\u0432\u0448\u0430\u044f\u0441\u044f \u0441\u0440\u0435\u0434\u043d\u044f\u044f */\n    select\n          avg_money.account_id,\n          avg_money.month as payment_month,\n          avg_money.revenue_amount as revenue_amount_in_payment_month,\n          next_payment_month,\n          months.month as month_since_we_start_considering_user_in_percentile_calculation,\n          live_month,\n          client_living_type,\n          active_periods.avg_sum_in_rubles  as avg_sum_in_rubles\n    from calculating_correct_averages avg_money\n    inner join generated_months months on date_trunc(first_subscription_start,month) <= (date_add(months.month,interval -3 month))\n                            and months.month >= avg_money.month and (months.month < avg_money.next_payment_month)\n    inner join account_active_periods_with_revenue_amount active_periods on avg_money.account_id = active_periods.account_id\n    where months.month <= date_trunc(current_date,month)\n                          and months.month = live_month --\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u043c\u0435\u0441\u044f\u0446\u0430, \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0431\u044b\u043b \u0430\u043a\u0442\u0438\u0432\u0435\u043d\n),distincts_amount_for_each_account_month as (\n    select distinct account_id,\n                    month_since_we_start_considering_user_in_percentile_calculation,\n                    avg_sum_in_rubles\n    from revenue_average\n)\n,percentiles as (\nselect\n      account_id,\n      month_since_we_start_considering_user_in_percentile_calculation,\n      PERCENTILE_CONT(avg_sum_in_rubles,0.25) over (partition by month_since_we_start_considering_user_in_percentile_calculation) AS percentile_25,\n      PERCENTILE_CONT(avg_sum_in_rubles,0.75) over (partition by month_since_we_start_considering_user_in_percentile_calculation) AS percentile_75,\n      PERCENTILE_CONT(avg_sum_in_rubles,0.99) over (partition by month_since_we_start_considering_user_in_percentile_calculation) AS percentile_99\nfrom distincts_amount_for_each_account_month\n) ,percentile_group as (\n--\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0433\u0440\u0443\u043f\u043f\u044b \u043f\u043e \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044f\u043c\n\nselect distinct\n                account_active_periods_with_revenue_amount.account_id,\n                account_active_periods_with_revenue_amount.live_month,\n                percentile_25,\n                percentile_75,\n                percentile_99,\n                avg_sum_in_rubles,\n                case when account_active_periods_with_revenue_amount.client_living_type = 'new' then 'New'\n                     when avg_sum_in_rubles<percentile_25 then 'C'\n                     when avg_sum_in_rubles<percentile_75 then 'B'\n                     when avg_sum_in_rubles<percentile_99 then 'A'\n                     when avg_sum_in_rubles>=percentile_99 then 'X'\n                end as abcx_segment\nfrom account_active_periods_with_revenue_amount\nleft join percentiles on account_active_periods_with_revenue_amount.live_month = percentiles.month_since_we_start_considering_user_in_percentile_calculation\n                      and account_active_periods_with_revenue_amount.account_id = percentiles.account_id\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f ABCX \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0431\u0435\u0437 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430 \u0432 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0435. https://www.notion.so/ABCX-7b8f5f7d3e0b470e83fe632828d64821. \u041d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0435 \u0434\u043e\u0447\u043a\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432\nselect percentile_group.account_id,             -- \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 id \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b stg_accounts\n       percentile_group.percentile_99,          -- 99-\u044b\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0432\u044b\u0440\u0443\u0447\u043a\u0438 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0434\u0430\u043d\u043d\u043e\u043c live_month \u043c\u0435\u0441\u044f\u0446\u0435\n       percentile_group.avg_sum_in_rubles,      -- \u0421\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0430\u044f \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0437\u0430 3 \u043c\u0435\u0441\u044f\u0446\u0430 (2 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 + \u0442\u0435\u043a\u0443\u0449\u0438\u0439)\n       percentile_group.abcx_segment,           -- ABCX \u0441\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0434\u0430\u043d\u043d\u043e\u043c live_month \u043c\u0435\u0441\u044f\u0446\u0435\n       percentile_group.live_month,             -- \u041c\u0435\u0441\u044f\u0446 \u0436\u0438\u0437\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a, \u0444\u043e\u0440\u043c\u0430\u0442 2022-11-29\n       account_segment_type,                    -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n       count(distinct case when stg_channels.state = 'active' and temporary = False and deleted = False then stg_channels.guid end) as active_channels_count,   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043d\u0435\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432\n       count(distinct case when stg_channels.state = 'active' and temporary = False and deleted = False and stg_billing_packages.state = 'active' and paid_At is not null then stg_channels.guid end) as active_channels_count_with_paid_sub,   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043d\u0435\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0441 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u043b\u0430\u0442\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u043e\u0439\n       count(distinct case when temporary = False and deleted = False then stg_channels.guid end ) as channels_count,   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043d\u0435\u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432\n       count(distinct case when temporary = False and deleted = False and stg_billing_packages.guid is not null and paid_At is not null then stg_channels.guid end ) as channels_count_with_paid_sub    -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043d\u0435\u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0432 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\nfrom percentile_group\njoin profile_info on percentile_group.account_id = profile_info.account_id\nleft join stg_channels  on percentile_group.account_id = stg_channels.account_id\nleft join stg_billing_packages  on stg_channels.package_Id = stg_billing_packages.guid\nwhere percentile_group.live_month <= date_trunc(current_date(),month)\ngroup by percentile_group.account_id,\n       percentile_group.percentile_99,\n       percentile_group.avg_sum_in_rubles,\n       percentile_group.abcx_segment,\n       percentile_group.live_month,\n       account_segment_type\n  \n\n\n\n\n/*\nselect *\nfrom dbt_prod.int_subscriptions_lost_revenue_due_to_quantity_and_tariff_change \nwhere account_id = 32916152\n\n\nwith accounts as (\nselect distinct lt.account_id,\nfirst_subscription_start,\n                c.guid\nfrom dbt_prod.int_accounts_who_paid__standart_russian_users_without_partners_living_time lt\njoin wazzup.channels c on lt.account_id = c.accountid\nwhere state = 'active' \n      and temporary = False\n      and deleted = False\n      and packageid is not null\n)\nselect account_id,first_subscription_start,count(distinct guid)\nfrom accounts\nwhere first_subscription_start < '2023-09-01'\ngroup by 1,2\norder by 3 desc\nlimit 100\n*/", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_defining_abcx_segmentation_type_independend_daughters`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.372367Z", "completed_at": "2025-05-21T12:31:16.415768Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:16.421953Z", "completed_at": "2025-05-21T12:31:16.421962Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.18052220344543457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_metrics_for_partners_all_metrics_together_unpivot_all_type", "compiled": true, "compiled_code": "select *    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043f\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u043c, \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0447\u0435\u0440\u0435\u0437 unpivot \u0441 all type\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_all_metrics_together`\nunpivot(value for metric  in (daughters_count,\n                              c1,\n                              c2,\n                              left_daughters_count,\n                              reg_daughters_count,\n                              discount_sum_in_rubles,\n                              paid_channels_quantity,\n                              paid_channels_waba_quantity,\n                              paid_channels_tgapi_quantity,\n                              paid_channels_wa_quantity,\n                              paid_channels_telegram_quantity,\n                              paid_channels_instagram_quantity,\n                              paid_channels_avito_quantity,\n                              paid_channels_vk_quantity,\n                              paid_channels_waba_sum,\n                              paid_channels_tgapi_sum,\n                              paid_channels_wa_sum,\n                              paid_channels_telegram_sum,\n                              paid_channels_instagram_sum,\n                              paid_channels_avito_sum,\n                              paid_channels_vk_sum,\n                              earned_sum_referals)\n                              )\nwhere type = 'all'", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_all_metrics_together_unpivot_all_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.416821Z", "completed_at": "2025-05-21T12:31:16.429287Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:16.471046Z", "completed_at": "2025-05-21T12:31:16.471054Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.14284253120422363, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_metrics_for_partners_all_metrics_together_unpivot_period_type", "compiled": true, "compiled_code": "select *    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043f\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u043c, \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0447\u0435\u0440\u0435\u0437 unpivot \u0441 period type\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_all_metrics_together`\nunpivot(value for metric  in (daughters_count,\n                              c1,\n                              c2,\n                              left_daughters_count,\n                              reg_daughters_count,\n                              discount_sum_in_rubles,\n                              paid_channels_quantity,\n                              paid_channels_waba_quantity,\n                              paid_channels_tgapi_quantity,\n                              paid_channels_wa_quantity,\n                              paid_channels_telegram_quantity,\n                              paid_channels_instagram_quantity,\n                              paid_channels_avito_quantity,\n                              paid_channels_vk_quantity,\n                              paid_channels_waba_sum,\n                              paid_channels_tgapi_sum,\n                              paid_channels_wa_sum,\n                              paid_channels_telegram_sum,\n                              paid_channels_instagram_sum,\n                              paid_channels_avito_sum,\n                              paid_channels_vk_sum,\n                              earned_sum_referals)\n                              )\nwhere type in ('monthly','weekly')", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_all_metrics_together_unpivot_period_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.418571Z", "completed_at": "2025-05-21T12:31:16.429669Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:16.472028Z", "completed_at": "2025-05-21T12:31:16.472075Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.18171048164367676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_key_product_metrics__telegram_notification", "compiled": true, "compiled_code": "with notification_events as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`stg_account_events__telegram_notifications`\n),\n\nonboarding as (\n    select account_id,\n    registration_date\n    from\n        `dwh-wazzup`.`dbt_nbespalov`.`mart_onboarding__accounts_integrations_subscriptions_channels_messages`\n),\n\nnotifications_with_last_value as (\n    select\n        notification_events.*,\n        last_value(is_any_notification_on)\n            over (\n                partition by admin_id\n                order by\n                    occured_at asc\n                rows between unbounded preceding and unbounded following\n            )\n            as is_any_notification_on_last_value\n    from notification_events inner join onboarding\n        on notification_events.account_id = onboarding.account_id\n    where occured_at <= date_add(registration_date, interval 1 month)\n)\n    -- \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043f\u043e \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f\u043c \u0432 Telegram\nselect\n    account_id,                                             -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    logical_or(is_any_notification_on_last_value)\n        as is_any_notification_on_month_after_registration  -- \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u043b\u0438 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u0432 \u0442\u0435\u043b\u0435\u0433\u0435 \u0432 \u043c\u0435\u0441\u044f\u0446 \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\nfrom notifications_with_last_value\ngroup by 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_key_product_metrics__telegram_notification`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.422434Z", "completed_at": "2025-05-21T12:31:16.470201Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:16.475011Z", "completed_at": "2025-05-21T12:31:16.475022Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.18014121055603027, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_base_for_delivery_communications", "compiled": true, "compiled_code": "with accounts_info as (\n    Select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` \n),\n\nintegrations as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_integrations_groupped_by_accounts_type`\n),\n\nnot_deleted_and_errorless_integrations as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_integrations_not_deleted_and_error_groupped_by_accounts_type`\n),\nactive_integrations as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_integrations_active_groupped_by_accounts_type`\n),\n\nall_channels as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_all_groupped_by_accounts_transport`\n),\ncount_channels as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_count_by_account`\n),\ncount_active_channels as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_count_active_by_account`\n),\nint_accounts_minimum_trial_start_dates_situation as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_minimum_trial_start_dates_situation`\n),\npaid_accounts as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_paid_subscription_with_type_and_tariff`\n),\nactive_with_free_and_promised_payments_and_without_trials as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_with_active_subscriptions_paid_promised_free`\n)\n    /* \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0432\u0441\u0435\u0445 \u043d\u0430\u0448\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 (\u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432, \u0434\u043e\u0447\u0435\u043a \u043f\u043e\u0441\u0442\u043e\u043f\u043b\u0430\u0442\u043d\u0438\u043a\u043e\u0432 \u0438 \u0434\u0435\u043c\u043e-\u0430\u043a\u043a\u0430\u0443\u043d\u0442\u044b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432) \n     \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e\u0431 \u0438\u0445 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f\u0445/\u043a\u0430\u043d\u0430\u043b\u0430\u0445/\u043f\u043b\u0430\u0442\u043d\u043e\u0441\u0442\u0438. \u041d\u0443\u0436\u043d\u0430 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0440\u043a\u0435\u0442\u0438\u043d\u0433\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0439 \u0438\u043b\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0430\u043d\u0430\u043b\u0438\u0437\u043e\u0432, \u0433\u0434\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0430 \u0440\u0430\u0437\u043d\u043e\u0433\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 */\nSelect accounts_info.account_Id,                    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        email,                                      -- \u043f\u043e\u0447\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u0430\u044f \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        name,                                       -- \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        phone,                                      -- \u0442\u0435\u043b\u0435\u0444\u043e\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        channels_in_package,                        -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 (\u0441 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u044b, \u0438 \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0430\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u0430\u044f \u0438\u043b\u0438 \u0430\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u043f\u043b\u0430\u0442\u043d\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442\n        channels_count,                             -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 (\u0441 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u044b\n        country,                                    -- \u0441\u0442\u0440\u0430\u043d\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043a\u0430\u043a \u043c\u044b \u0435\u0451 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043b\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 alpha-2\n        currency,                                   -- \u0412\u0430\u043b\u044e\u0442\u0430\n        account_language,                           -- \u044f\u0437\u044b\u043a \u041b\u041a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442\n        account_leaving_situation_type,             -- \u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u0443\u0445\u043e\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041e\u043f\u0438\u0441\u0430\u043d\u043e \u0432 \u0434\u043e\u043a\u0435\n        account_segment_type,                       -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n        partner_id,                                 -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        refparent_id,                               -- ID \u0440\u0435\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        register_date,                              -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        integrations.* except(account_Id),\n        active_integrations.* except(account_Id),\n        all_channels.* except(account_Id),\n        not_deleted_and_errorless_integrations.* except(account_id),                    -- \u0422\u0438\u043f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043d\u0435 \u0432 \u0441\u0442\u0430\u0442\u0443\u0441\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0430. \u0415\u0441\u043b\u0438 'does_not_have_a_not_deleted_and_errorless_integration', \u0437\u043d\u0430\u0447\u0438\u0442 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0435\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0439 \u043d\u0435\u0443\u0434\u0430\u043b\u0435\u043d\u043d\u043e\u0439/\u043d\u0435 \u0432 \u0441\u0442\u0430\u0442\u0443\u0441\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442\n        trial_max_date_at_the_moment,               -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0434\u0435\u043d\u044c \u0442\u0440\u0438\u0430\u043b\u0430 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u0434\u0430\u0442\u044b\n        accounts_info.russian_country_name,         -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\n        accounts_info.region_international,         -- \u0420\u0435\u0433\u0438\u043e\u043d\n        coalesce(trial_max_day,'did_not_have_trial') as trial_max_day,                  -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0434\u0435\u043d\u044c \u0442\u0440\u0438\u0430\u043b\u0430 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442. \u0415\u0441\u043b\u0438 \u0442\u0440\u0438\u0430\u043b \u0432\u0441\u0435 \u0435\u0449\u0435 \u0430\u043a\u0442\u0438\u0432\u0435\u043d, \u0442\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0434\u0435\u043d\u044c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u0434\u0430\u0442\u044b, \u0438\u043d\u0430\u0447\u0435 `trial_ended`\n        case when paid_accounts.account_id is null then false else True end as did_pay, -- \u0415\u0441\u043b\u0438 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0431\u044b\u043b\u0430 \u043e\u043f\u043b\u0430\u0442\u0430 (paid_at is not null \u0432 billingPackages), \u0442\u043e true, \u0438\u043d\u0430\u0447\u0435 false\n        case when active_with_free_and_promised_payments_and_without_trials.account_id is null then false else True end as is_active    -- \u0415\u0441\u043b\u0438 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0435\u0441\u0442\u044c \u0430\u043a\u0442\u0438\u0432\u043d\u0430\u044f (\u043f\u043b\u0430\u0442\u043d\u0430\u044f, \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u0430\u044f \u0438\u043b\u0438 \u0432 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u043c \u043f\u043b\u0430\u0442\u0435\u0436\u0435) \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430, \u0442\u043e true, \u0438\u043d\u0430\u0447\u0435 false\nfrom accounts_info\nleft join integrations \n            on accounts_info.account_Id = integrations.account_Id\nleft join active_integrations\n            on accounts_info.account_Id = active_integrations.account_Id\nleft join not_deleted_and_errorless_integrations\n            on accounts_info.account_id = not_deleted_and_errorless_integrations.account_id\nleft join all_channels\n            on accounts_info.account_Id = all_channels.account_Id\nleft join count_active_channels \n        on accounts_info.account_id = count_active_channels.account_id\nleft join count_channels \n        on accounts_info.account_id = count_channels.account_id\nleft join int_accounts_minimum_trial_start_dates_situation\n        on accounts_info.account_id = int_accounts_minimum_trial_start_dates_situation.account_id\nleft join paid_accounts \n        on accounts_info.account_id = paid_accounts.account_id\nleft join active_with_free_and_promised_payments_and_without_trials\n        on accounts_info.account_id = active_with_free_and_promised_payments_and_without_trials.account_id\nwhere account_segment_type not in ('\u0434\u043e\u0447\u043a\u0430 \u043f\u043e\u0441\u0442\u043e\u043f\u043b\u0430\u0442\u043d\u0438\u043a\u043e\u0432','\u0434\u0435\u043c\u043e-\u043f\u0430\u0440\u0442\u043d\u0451\u0440','\u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a') \n    and accounts_info.account_Id not in (38783219,50838383)\n    and is_employee is false", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_base_for_delivery_communications`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.426312Z", "completed_at": "2025-05-21T12:31:16.471577Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:16.513083Z", "completed_at": "2025-05-21T12:31:16.513094Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.21781229972839355, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_partners_metrics_by_month", "compiled": true, "compiled_code": "with clients_info as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_is_client_active_by_month`\n),\npayments_by_month as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_revenue_by_month`\n),\n\n\nprofile_info as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n),\n\ncountry as (\n    select * from `dwh-wazzup`.`analytics_tech`.`country`\n),\n\nbillings as (SELECT  account_id,\n                     max(case when action='renewal' and billing_packages.paid_at is not null then True end) as is_renewal,\n                     max(case when billing_packages.paid_at is not null and billing_packages.period=12 and cast(billing_packages.created_at as date)<=date_add(current_date, interval 12 month) then True end) as subscription_12,\n                     max(case when billing_packages.paid_at is not null and billing_packages.period=6 and cast(billing_packages.created_at as date)<=date_add(current_date, interval 6 month) then True end) as subscription_6,\n                     max(case when billing_packages.paid_at is not null and billing_packages.period=1  and cast(billing_packages.created_at as date)<=date_add(current_date, interval 6 month) then True end) as subscription_1\nFROM `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates`  substriprion_updates\n\ninner join `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` billing_packages \non substriprion_updates.subscription_id=billing_packages.guid\nwhere substriprion_updates.state='activated'\ngroup by 1),\n\nsubscription_sum as (\n    select \taccount_id, \n    paid_month, \n    sum(sum_in_rubles) as sum_in_rubles_subscriptions\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_with_sum_in_rubles_partner_refparent`\n    group by 1,2\n),\n\npartners_by_month as (\nselect month, \ncoalesce(payments_by_month.partner_id,clients_info.partner_id) as partner_id, \npartner_register_date,\nregion_type, \nprofile_info.russian_country_name as russianName, \ncity, \nregion, \nprofile_info.type,\nprofile_info.currency, \nis_employee,\nactive_account_id, \nall_account_id,\nis_renewal,\nsubscription_12,\nsubscription_6,\nsubscription_1 ,\n sum_in_rubles_subscriptions,\n sum_in_rubles,\nsum_in_rubles_partner_paid, \nfrom clients_info left join payments_by_month\n on clients_info.month=payments_by_month.paid_month \n and clients_info.partner_id=payments_by_month.partner_id\nleft join  profile_info \non clients_info.partner_id=profile_info.account_id\nleft join billings on billings.account_id=clients_info.active_account_id\nleft join subscription_sum on subscription_sum.account_id=clients_info.active_account_id and subscription_sum.paid_month=clients_info.month\n),\n\npartners_without_clients as (\nselect month.month,                                     -- \u041e\u0442\u0447\u0435\u0442\u043d\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\nprofile_info.account_id as partner_id,                  -- Account id \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043e\u0431\u0438\u0440\u0430\u044e\u0442\u0441\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0438\npartner_register_date,                                  -- \u0414\u0430\u0442\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043a\u0438\nregion_type,                                            -- \u0440\u0435\u0433\u0438\u043e\u043d (\u0421\u041d\u0413, \u041d\u0415-\u0421\u041d\u0413, \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e)\nrussian_country_name as russianName,                    -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\ncity,                                                   -- \u0433\u043e\u0440\u043e\u0434\nregion,                                                 -- \u043e\u0431\u043b\u0430\u0441\u0442\u044c\ntype,                                                   -- \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\ncurrency,                                               -- \u0432\u0430\u043b\u044e\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\nprofile_info.is_employee,                               -- \u044d\u0442\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430?\ncast(null as int64) as active_account_id,               -- \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u0434\u043e\u0447\u043a\u0430 \u0431\u044b\u043b\u0430 \u0430\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435. \u0438\u043d\u0430\u0447\u0435 null\ncast(null as int64) as all_account_id,                  -- \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u0434\u043e\u0447\u043a\u0430 \u0431\u044b\u043b\u0430 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u0430 \u043a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0443 \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435\ncast(null as bool) as is_renewal,                       -- True, \u0435\u0441\u043b\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0431\u044b\u043b\u0430 \u043f\u0440\u043e\u0434\u043b\u0435\u043d\u0430 \u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e\ncast(null as bool) as subscription_12,                  -- True, \u0435\u0441\u043b\u0438 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0431\u044b\u043b\u0430 \u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 12 \u043c\u0435\u0441\u044f\u0446\u0435\u0432\ncast(null as bool) as subscription_6,                   -- True, \u0435\u0441\u043b\u0438 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0431\u044b\u043b\u0430 \u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 6 \u043c\u0435\u0441\u044f\u0446\u0435\u0432\ncast(null as bool) as subscription_1 ,                  -- True, \u0435\u0441\u043b\u0438 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0431\u044b\u043b\u0430 \u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 1 \u043c\u0435\u0441\u044f\u0446\n cast(null as float64) as sum_in_rubles_subscriptions   -- \u0442\u0440\u0430\u0442\u044b \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435\n from profile_info\nleft join dwh-wazzup.analytics_tech.months month\non month.month >= date_trunc(profile_info.partner_register_date,month)\n\nwhere profile_info.type in ('partner','tech-partner') and not exists (select account_id from partners_by_month \nwhere partners_by_month.partner_id=profile_info.account_id)),\n\npartners_without_clients_with_payments as (\nselect partners_without_clients.*, \nsum_in_rubles_partner_paid,             -- \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u043e\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435\nsum_in_rubles                           -- \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u043e\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u043e\u0433\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 + \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435\nfrom partners_without_clients \nleft join payments_by_month\non partners_without_clients.partner_id=payments_by_month.partner_id\nand partners_without_clients.month=payments_by_month.paid_month),\n\npartners_and_clients as (\nselect * \nfrom partners_by_month\nunion all\nselect * \nfrom partners_without_clients_with_payments)\n    -- \u041f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c\nselect *except(is_employee) \nfrom partners_and_clients\nwhere is_employee is false\n\nand not exists (\n        select account_id\n    from profile_info\n    where profile_info.account_id = partners_and_clients.all_account_id\n    and is_employee\n)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_partners_metrics_by_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.472600Z", "completed_at": "2025-05-21T12:31:16.554598Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:16.636008Z", "completed_at": "2025-05-21T12:31:16.636022Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.25801920890808105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_creating_intervals_based_on_first_registration_period_time_intervals", "compiled": true, "compiled_code": "SELECT creating_intervals_based_on_first_registration_period.*,\n                dense_rank() over (partition by account_id order by creating_intervals_based_on_first_registration_period.time_period) time_period_number,\n                month_intervals_registrations.time_period as till_time_period\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_creating_intervals_based_on_first_registration_period` creating_intervals_based_on_first_registration_period\n        join `dwh-wazzup`.`dbt_nbespalov`.`stg_days_with_month_intervals` month_intervals_registrations on creating_intervals_based_on_first_registration_period.time_period = month_intervals_registrations.date and month_intervals_registrations.rn = 2", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_creating_intervals_based_on_first_registration_period_time_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.638809Z", "completed_at": "2025-05-21T12:31:16.683278Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:16.689864Z", "completed_at": "2025-05-21T12:31:16.689874Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.1790931224822998, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_left_and_returned_date_with_account_type_and_partner_type_with_tariff_and_transport", "compiled": true, "compiled_code": "with subscription_by_days as (\nSELECT *\n FROM `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_defining_clients_types_who_paid_without_trials_and_promised_payments_with_tariff_and_transport`),\n\npartner_type_and_account_type as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated`\n),\nsubscription_with_account_and_partner_type as (\n\nselect subscription_by_days.*,\n account_type,                                  -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n  partner_type,                                 -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  partner_type_and_account_type.refparent_id,   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0440\u0435\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  start_date,                                   -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\naffiliates.reflink_code                         -- \u041a\u043e\u0434 \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u0430\n from subscription_by_days \n left join  partner_type_and_account_type \n    on subscription_by_days.account_id=partner_type_and_account_type.account_id\n    and subscription_by_days.subscription_start>=partner_type_and_account_type.start_date\n    and subscription_by_days.subscription_start<=partner_type_and_account_type.end_date\nleft join `dwh-wazzup`.`dbt_nbespalov`.`stg_affiliates` affiliates on affiliates.child_id=partner_type_and_account_type.account_id ),\n\nsubscription_duplicates as (\n\nselect *, \n(case when account_type='standart' and partner_type='partner' and reflink_code='manual_registration' then 'of-partner-client_manual'\nwhen account_type='standart' and partner_type='partner' and reflink_code is distinct from 'manual_registration' then 'of-partner-client_ref_link'\nwhen account_type='standart' and partner_type='tech-partner' then 'tech-partner-client'\nwhen account_type='standart' and partner_type='tech-partner-postpay' then 'tech-partner-client'\nwhen account_type='standart' and refparent_id is not null and partner_type is null then 'referal'\nwhen account_type='standart' and partner_type is null then 'standart'\nwhen account_type='partner' then 'of-partner'\nwhen account_type='tech-partner' then 'tech-partner'\nwhen account_type='tech-partner-postpay' then 'tech-partner'\nwhen account_type='standart' and partner_type='standart' then 'standart'\nend\n) as account_type_partner_type, -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0441 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043e\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\nrow_number() over (partition by account_id, tariff, transport, subscription_start order by start_date desc) rn from -- \u041f\u0430\u0440\u0442\u0438\u0430\u0446\u0438\u044f \u043f\u043e \u043d\u043e\u043c\u0435\u0440\u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0438 \u0434\u0430\u0442\u0435 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\nsubscription_with_account_and_partner_type)\n\nselect * from subscription_duplicates\nwhere rn=1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_left_and_returned_date_with_account_type_and_partner_type_with_tariff_and_transport`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.684839Z", "completed_at": "2025-05-21T12:31:16.694106Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:16.737092Z", "completed_at": "2025-05-21T12:31:16.737103Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.14045405387878418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_creating_intervals_based_on_first_subscription_period_time_intervals", "compiled": true, "compiled_code": "SELECT creating_intervals_based_on_first_subscription_period.*,\n                dense_rank() over (partition by account_id order by creating_intervals_based_on_first_subscription_period.time_period) time_period_number,\n                month_intervals_subscriptions.time_period as till_time_period\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_creating_intervals_based_on_first_subscription_period` creating_intervals_based_on_first_subscription_period\n        join `dwh-wazzup`.`dbt_nbespalov`.`stg_days_with_month_intervals` month_intervals_subscriptions on creating_intervals_based_on_first_subscription_period.time_period = month_intervals_subscriptions.date and month_intervals_subscriptions.rn = 2", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_creating_intervals_based_on_first_subscription_period_time_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.686805Z", "completed_at": "2025-05-21T12:31:16.694478Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:16.737871Z", "completed_at": "2025-05-21T12:31:16.737880Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.17954158782958984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_active_accounts_by_month_by_segment_aggregated_active_at_the_end_of_the_month", "compiled": true, "compiled_code": "with accounts_data_pre as (\nselect mart_active_accounts_by_month_by_segment.account_id,\n       mart_active_accounts_by_month_by_segment.currency,\n       --case when date_trunc(subscription_end_fixed,month) = month and last_day(month,month) > subscription_end_fixed then False else True end is_active_in_month,\n        date_trunc(register_date,month) as registration_month,\n        case when month = date_trunc(register_date,month) then 'new' else 'old' end as client_type,\n        \n         case when segment in ('of_partner_child__of_partner_paid','partner') then 'of-partner'\n              when segment in ('tech_partner_child__child_paid','tech_partner_child__tech_partner_paid','tech-partner') then 'tech-partner'\n              when segment in ('standart_without_partner','of_partner_child_child_paid') then 'final_client'\n           end segments_aggregated,\n        registration_source_agg,\n           month\nfrom `dwh-wazzup`.`dbt_nbespalov`.`mart_active_accounts_by_month_by_segment`\njoin `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` accs on mart_active_accounts_by_month_by_segment.account_id = accs.account_id\njoin `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_attribution_data` sources on accs.account_id = sources.account_id\n\nwhere segment in ('of_partner_child__of_partner_paid','partner','tech_partner_child__child_paid','tech_partner_child__tech_partner_paid','tech-partner','standart_without_partner','of_partner_child_child_paid'))\n, accounts_data as (\n    select *\n    from accounts_data_pre\n    --where is_active_in_month\n)\n, accounts_active_all as (\n\n\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_,\n        month,\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,\n        case when grouping(client_type) = 1 then 'all' else client_type end client_type_,\n        count(distinct account_Id) as active_accounts_count,\n      'all' as market_type\nfrom accounts_data\n   group by GROUPING SETS \n(\n  (segments_aggregated,month),\n        (client_type,month),\n        (segments_aggregated,month,client_type),\n        (month),\n\n  (segments_aggregated,month,registration_source_agg),\n        (client_type,month,registration_source_agg),\n        (segments_aggregated,month,client_type,registration_source_agg),\n        (month,registration_source_agg)\n\n)\n\n\n\n),accounts_active_eur_usd_kzt_rur as (\n\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_,\n        month,\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,\n        case when grouping(client_type) = 1 then 'all' else client_type end client_type_,\n        count(distinct account_Id) as active_accounts_count,\n      case when currency in ('USD','EUR') then  'usd_eur' else 'ru_kzt' end  as market_type\nfrom accounts_data\nwhere currency in ('RUR','USD','KZT','EUR')\n   group by GROUPING SETS \n(\n  (segments_aggregated,month,market_type),\n        (client_type,month,market_type),\n        (segments_aggregated,month,client_type,market_type),\n        (month,market_type),\n\n  (segments_aggregated,month,registration_source_agg,market_type),\n        (client_type,month,registration_source_agg,market_type),\n        (segments_aggregated,month,client_type,registration_source_agg,market_type),\n        (month,registration_source_agg,market_type)\n\n)\n\n\n),accounts_active_rur as (\n\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_,                -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n        month,                                                  -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,   -- \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n        case when grouping(client_type) = 1 then 'all' else client_type end client_type_,   -- \u0422\u0438\u043f \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n        count(distinct account_Id) as active_accounts_count,    -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432\n      currency as market_type                                   -- \u0420\u044b\u043d\u043e\u043a\nfrom accounts_data\nwhere currency in ('RUR','KZT','EUR','USD')\n   group by GROUPING SETS \n(\n  (segments_aggregated,month,market_type),\n        (client_type,month,market_type),\n        (segments_aggregated,month,client_type,market_type),\n        (month,market_type),\n\n  (segments_aggregated,month,registration_source_agg,market_type),\n        (client_type,month,registration_source_agg,market_type),\n        (segments_aggregated,month,client_type,registration_source_agg,market_type),\n        (month,registration_source_agg,market_type)\n\n)\n    -- \u0410\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u0430\u043c \u0441 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c\u044e \u0432 \u043a\u043e\u043d\u0446\u0435 \u043c\u0435\u0441\u044f\u0446\u0430\n\n)\nselect * from accounts_active_all\nunion all\nselect * from accounts_active_rur\nunion all\nselect * from accounts_active_eur_usd_kzt_rur", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_active_accounts_by_month_by_segment_aggregated_active_at_the_end_of_the_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.691949Z", "completed_at": "2025-05-21T12:31:16.736233Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:16.739340Z", "completed_at": "2025-05-21T12:31:16.739348Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.17644691467285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_first_payment_date_and_sum_in_rubles_by_segment_and_partner", "compiled": true, "compiled_code": "select account_id,      -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        segment_type,   -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442\n        partner_id,     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        min(paid_date) as first_payment_date,   -- \u0414\u0430\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u043e\u043f\u043b\u0430\u0442\u044b\n        sum(sum_in_rubles) as sum_in_rubles     -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_payments_revenue_with_waba`\nwhere sum_in_rubles!=0\ngroup by 1,2,3\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u043f\u043b\u0430\u0442\u0443 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432 \u043f\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0443 \u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0443", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_first_payment_date_and_sum_in_rubles_by_segment_and_partner`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.690339Z", "completed_at": "2025-05-21T12:31:16.736741Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:16.739875Z", "completed_at": "2025-05-21T12:31:16.739884Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.21595454216003418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_first_payment_date_and_sum_in_rubles", "compiled": true, "compiled_code": "select account_id,                              -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        segment_type,                           -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n        min(paid_date) as first_payment_date,   -- \u0414\u0430\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u043e\u043f\u043b\u0430\u0442\u044b\n        sum(sum_in_rubles) as sum_in_rubles     -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_payments_revenue_with_waba`\nwhere sum_in_rubles!=0\ngroup by 1,2\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u0442\u0430\u043c\u0438 \u043f\u0435\u0440\u0432\u043e\u0439 \u043e\u043f\u043b\u0430\u0442\u044b \u0438 \u0435\u0451 \u0441\u0443\u043c\u043c\u043e\u0439 \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_first_payment_date_and_sum_in_rubles`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.734473Z", "completed_at": "2025-05-21T12:31:16.778851Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:16.897178Z", "completed_at": "2025-05-21T12:31:16.897190Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2493422031402588, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_last_payment_date_and_sum_in_rubles_by_segment_and_partner", "compiled": true, "compiled_code": "with last_payment_info as (\nselect account_id,      -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        segment_type,   -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442\n        partner_id,     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        paid_date,      -- \u0414\u0430\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043e\u043f\u043b\u0430\u0442\u044b\n        row_number() over (partition by account_id,partner_id order by paid_date desc) rn,\n        sum(sum_in_rubles) as sum_in_rubles     -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_payments_revenue_with_waba`\nwhere sum_in_rubles!=0\ngroup by 1,2,3,4)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u043e\u043f\u043b\u0430\u0442\u0443 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432 \u043f\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0443 \u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0443\nselect *except(rn)\nfrom last_payment_info \nwhere rn = 1\n--and account_id = 93135096", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_last_payment_date_and_sum_in_rubles_by_segment_and_partner`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.939945Z", "completed_at": "2025-05-21T12:31:16.945486Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:16.954832Z", "completed_at": "2025-05-21T12:31:16.954841Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.1789252758026123, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_revenue_aggregated_by_month_and_segment", "compiled": true, "compiled_code": "-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043e\u0445\u043e\u0434\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432. \u0413\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0443 \u0438 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0443\nselect date_trunc(paid_date, month) as date,    -- \u041c\u0435\u0441\u044f\u0446\nsegments_aggregated as segment,                 -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\nsum(sum_in_rubles-waba_sum_in_rubles)  as revenue_without_waba_fact,    -- \u0414\u043e\u0445\u043e\u0434 \u0431\u0435\u0437 WABA\nsum(waba_sum_in_rubles) as revenue_waba_fact                            -- \u0414\u043e\u0445\u043e\u0434 \u0441 WABA\n\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_payments_revenue_with_waba`\nwhere paid_date>='2024-01-01' and segments_aggregated!='unknown' and currency in ('RUR','KZT')\ngroup by 1,2", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_revenue_aggregated_by_month_and_segment`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.946458Z", "completed_at": "2025-05-21T12:31:16.958338Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.001500Z", "completed_at": "2025-05-21T12:31:17.001524Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.14340806007385254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_marketing_report", "compiled": true, "compiled_code": "WITH onboarding_users AS ( /*\n \u041a\u043e\u0433\u0434\u0430 \u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432\u043f\u0435\u0440\u0432\u044b\u0435 \u043d\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e, \u043f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e \u043a\u0430\u043a \u043e\u043d \u0437\u0430\u0440\u0435\u0433\u0430\u043b\u0441\u044f \u0438 \u043f\u043e\u043f\u0430\u043b \u0443\u0436\u0435 \u0432\u043e \u0432\u043d\u0443\u0442\u0440\u044c \u043f\u0440\u0438\u043b\u044b \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u043a\u043d\u043e \u043e\u043d\u0431\u043e\u0440\u0434\u0438\u043d\u0433\u0430. \n \u0412 \u043d\u0451\u043c 2 \u043b\u0438\u0441\u0442\u0430, \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0440\u043e\u043b\u044c (\u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440, \u043f\u0440\u043e\u0434\u0430\u0436\u043d\u0438\u043a, \u0440\u043e\u043f \u0438 \u0442.\u0434) \n \u043d\u0430 \u0432\u0442\u043e\u0440\u043e\u043c \u043a\u0430\u043a\u0443\u044e \u0441\u0440\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 (\u0432\u0430\u0436\u043d\u043e: \u0442\u0430\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0438 \u043c\u044b \u043d\u0435 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0442\u0435\u0445, \u043a\u0442\u043e \u043d\u0430\u0436\u0430\u043b \u0447\u0442\u043e \u043d\u0435\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u0441\u0440\u043c)*/\n                         SELECT account_id\n                         FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts_events__role_choose`\n                         WHERE crm != 'noCrm'\n                         ),\n     profile_info AS ( --\u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c\n                         SELECT account_id\n                              , utm_source\n                              , utm_medium\n                              , register_date\n                              , registration_source\n                              , registration_source_agg\n                              , account_language\n                              , currency\n                              , region\n                              , russian_country_name\n                              , region_type\n                         FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n                         ),\n     revenue AS ( --\u0432\u0441\u044f \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0432\u0430\u0431\u044b\n                         SELECT account_id\n                              , sum(sum_in_rubles + waba_sum_in_rubles) AS sum_overall  -- \u041e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 (\u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438+\u0432\u0430\u0431\u0430 \u0431\u0430\u043b\u0430\u043d\u0441)\n                         FROM `dwh-wazzup`.`dbt_nbespalov`.`int_payments_revenue_with_waba`\n                         GROUP BY account_Id\n                         ),\n     google_ads AS ( --\u0440\u0430\u0441\u0445\u043e\u0434\u044b \u0441 google ads\n                         SELECT _DATA_DATE                               AS DATE\n                              , sum(metrics_clicks)                      AS clicks\n                              , sum(metrics_cost_micros * RUR) / 1000000 AS cost\n                         FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_google_ads` ads\n                        JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates\n                         ON ads._DATA_DATE=exchange_rates._ibk AND exchange_rates.currency = 'USD'\n                         GROUP BY 1\n                         ),\n     all_users_regs_onboarding_and_money AS (\n                         SELECT DISTINCT utm_source                             -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM source \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\n                                       , utm_medium                             -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM medium \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\n                                       , register_date    AS date               -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u0430\u044f \u0434\u0430\u0442\u0430\n                                       , registration_source                    -- \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n                                       , registration_source_agg                -- \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n                                       , account_language                       -- \u042f\u0437\u044b\u043a \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n                                       , currency                               -- \u0412\u0430\u043b\u044e\u0442\u0430\n                                       , russian_country_name                   -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\n                                       , region                                 -- \u0420\u0435\u0433\u0438\u043e\u043d\n                                       , region_type                            -- \u0422\u0438\u043f \u0440\u0435\u0433\u0438\u043e\u043d\u0430\n                                       , all_u.account_id AS regs_acc           -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439\n                                       , onb.account_id   AS passed_onboarding  -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u043e\u043d\u0431\u043e\u0440\u0434\u0438\u043d\u0433\n                                       , sum_overall      AS sum_overall        -- \u041e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 (\u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438+\u0432\u0430\u0431\u0430 \u0431\u0430\u043b\u0430\u043d\u0441)\n                         FROM profile_info all_u\n                             LEFT JOIN onboarding_users onb ON all_u.account_id = onb.account_id\n                             LEFT JOIN revenue ON all_u.account_id = revenue.account_id\n                         ),\n     marketing_data_pre AS ( --\u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u044f\u043d\u0434\u0435\u043a\u0441 \u043c\u0435\u0442\u0440\u0438\u043a\u0438\n                         SELECT CASE WHEN traffic_source = 'Search engine traffic' AND traffic_source_detailed = 'Google'             THEN 'google'\n                                     WHEN traffic_source = 'Search engine traffic' AND traffic_source_detailed = 'Yandex'             THEN 'yandex'\n                                     ELSE utm_source END                                                          AS utm_source\n                              , CASE WHEN traffic_source = 'Search engine traffic' THEN 'cpc'\n                                     ELSE utm_medium END                                                          AS utm_medium\n                              , cast(md.date AS date)                                                             AS date\n                              , sum(visits)                                                                       AS visits -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u0439 \u0438\u0437 \u044f\u043d\u0434\u0435\u043a\u0441 \u043c\u0435\u0442\u0440\u0438\u043a\u0438\n                              , sum(users)                                                                        AS users  -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044e\u0437\u0435\u0440\u043e\u0432 \u0438\u0437 \u044f\u043d\u0434\u0435\u043a\u0441 \u043c\u0435\u0442\u0440\u0438\u043a\u0438\n                         FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_yandex_metrika_data` md\n                         GROUP BY 1, 2, 3\n                         ),\n     marketing_data AS ( --\u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u044f\u043d\u0434\u0435\u043a\u0441 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 + \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u044f\u043d\u0434\u0435\u043a\u0441 \u0434\u0438\u0440\u0435\u043a\u0442\u0430 \u0438 \u0433\u0443\u0433\u043b \u044d\u0434\u0441\n                         SELECT md.*\n                              , sum(coalesce(yd.cost, 0) + coalesce(ga.cost, 0)) AS cost    -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u044f\u043d\u0434\u0435\u043a\u0441 \u0434\u0438\u0440\u0435\u043a\u0442\u0430 + \u0433\u0443\u0433\u043b \u044d\u0434\u0441\n                         FROM marketing_data_pre md\n                             LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_yandex_direct` yd\n                                                     ON md.date = yd.date AND md.utm_medium = 'cpc' AND utm_source = 'yandex'\n                             LEFT JOIN google_ads ga ON md.date = ga.date AND md.utm_medium = 'cpc' AND utm_source = 'google'\n                         GROUP BY 1, 2, 3, 4, 5\n                         )\nSELECT *    -- \u041e\u0442\u0447\u0435\u0442 \u0434\u043b\u044f \u043c\u0430\u0440\u043a\u0435\u0442\u0438\u043d\u0433\u0430\n     , CASE WHEN utm_medium = 'cpc'     THEN '\u041f\u043b\u0430\u0442\u043d\u044b\u0439 \u0442\u0440\u0430\u0444\u0438\u043a'\n            WHEN utm_medium = 'organic' THEN '\u041f\u043e\u0438\u0441\u043a\u043e\u0432\u044b\u0439 \u0442\u0440\u0430\u0444\u0438\u043a'\n            ELSE utm_medium END AS traffic_high_level --\u0432\u0435\u0440\u0445\u043d\u0435\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u043e \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u043f\u043e \u0442\u0438\u043f\u0443 \u0442\u0440\u0430\u0444\u0444\u0438\u043a\u0430, \u043b\u043e\u0433\u0438\u043a\u0430 \u043e\u0442 \u043a\u043e\u043b\u043b\u0435\u0433 \u0438\u0437 \u043c\u0430\u0440\u043a\u0435\u0442\u0438\u043d\u0433\u0430\n     , CASE WHEN utm_medium = 'cpc' AND utm_source = 'yandex'     THEN '\u042f\u043d\u0434\u0435\u043a\u0441.\u0414\u0438\u0440\u0435\u043a\u0442'\n            WHEN utm_medium = 'cpc' AND utm_source = 'google'     THEN 'Google Ads'\n            WHEN utm_medium = 'cpc' AND utm_source = 'tg'         THEN 'TG Ads'\n            WHEN utm_medium = 'cpc'                               THEN utm_source\n            WHEN utm_medium = 'organic' AND utm_source = 'direct' THEN '\u042f\u043d\u0434\u0435\u043a\u0441'\n            WHEN utm_medium = 'organic' AND utm_source = 'google' THEN 'Google'\n            ELSE utm_source END AS traffic_low_level --\u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0430\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0430 \u043f\u043e \u0442\u0438\u043f\u0443 \u0442\u0440\u0430\u0444\u0444\u0438\u043a\u0430, \u043b\u043e\u0433\u0438\u043a\u0430 \u043e\u0442 \u043a\u043e\u043b\u043b\u0435\u0433 \u0438\u0437 \u043c\u0430\u0440\u043a\u0435\u0442\u0438\u043d\u0433\u0430\nFROM marketing_data\n    LEFT JOIN all_users_regs_onboarding_and_money USING (utm_source, utm_medium, date)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_marketing_report`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.950445Z", "completed_at": "2025-05-21T12:31:16.958884Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.002224Z", "completed_at": "2025-05-21T12:31:17.002233Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.143324613571167, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_revenue_by_segments", "compiled": true, "compiled_code": "select *    -- \u0412\u044b\u0440\u0443\u0447\u043a\u0430 \u043f\u043e \u0434\u043d\u044f\u043c \u0438 \u043f\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u043c\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_payments_revenue_with_waba`", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_revenue_by_segments`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.951997Z", "completed_at": "2025-05-21T12:31:17.000376Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.003689Z", "completed_at": "2025-05-21T12:31:17.003698Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.17960262298583984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_revenue_by_segments_aggregated", "compiled": true, "compiled_code": "with revenue_data as (\n\nselect int_payments_revenue_with_waba.*,\n      date_trunc(stg_accounts.register_date,month) register_month,\n      case when paid_month = date_trunc(stg_accounts.register_date,month) then 'new' else 'old' end as client_type,\n      registration_source_agg\n  from `dwh-wazzup`.`dbt_nbespalov`.`int_payments_revenue_with_waba`\n  join `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts` on int_payments_revenue_with_waba.account_id = stg_accounts.account_id\n  join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_attribution_data` sources on stg_accounts.account_id = sources.account_id\n\n),\n  revenue_data_all as (\n  \n  select case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_,\n          paid_month,\n          case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,\n          case when grouping(client_type) = 1 then 'all' else client_type end client_type_, \n          'all' as market_type,\n          count(distinct account_id) as paying_clients,\n          count(distinct case when waba_sum_in_rubles >0 then account_id end) paying_clients_waba,\n          count(distinct case when waba_sum_in_rubles =0 then account_id end) paying_clients_without_waba,\n          \n          sum(sum_in_rubles) as revenue_amount,\n          sum(waba_sum_in_rubles) as revenue_amount_waba,\n          sum(sum_in_rubles) -sum(waba_sum_in_rubles)  as revenue_amount_without_waba,\n\n          sum(sum_in_rubles)/IF(count(distinct account_id)=0,1,count(distinct account_id)) arpu,\n          sum(waba_sum_in_rubles)/IF(count(distinct case when waba_sum_in_rubles >0 then account_id end) = 0,1,count(distinct case when waba_sum_in_rubles >0 then account_id end)) arpu_waba,\n          (sum(sum_in_rubles) -sum(waba_sum_in_rubles))/IF(count(distinct case when waba_sum_in_rubles =0 then account_id end)=0,1,count(distinct case when waba_sum_in_rubles =0 then account_id end)) arpu_without_waba\n          \n  from revenue_data\n\n  group by GROUPING SETS \n(\n  (segments_aggregated,paid_month),\n        (client_type,paid_month),\n        (segments_aggregated,paid_month,client_type),\n        (paid_month),\n\n\n  (segments_aggregated,paid_month,registration_source_agg),\n        (client_type,paid_month,registration_source_agg),\n        (segments_aggregated,paid_month,client_type,registration_source_agg),\n        (paid_month,registration_source_agg)\n\n)\n\n\n), revenue_data_ru_kzt as (\n\nselect case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_,\n          paid_month,\n          case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,\n          case when grouping(client_type) = 1 then 'all' else client_type end client_type_, \n          case when currency in ('RUR','KZT') then 'ru_kzt' else 'usd_eur' end as market_type,\n          count(distinct account_id) as paying_clients,\n          count(distinct case when waba_sum_in_rubles >0 then account_id end) paying_clients_waba,\n          count(distinct case when waba_sum_in_rubles =0 then account_id end) paying_clients_without_waba,\n          \n          sum(sum_in_rubles) as revenue_amount,\n          sum(waba_sum_in_rubles) as revenue_amount_waba,\n          sum(sum_in_rubles) -sum(waba_sum_in_rubles)  as revenue_amount_without_waba,\n\n          sum(sum_in_rubles)/IF(count(distinct account_id)=0,1,count(distinct account_id)) arpu,\n          sum(waba_sum_in_rubles)/IF(count(distinct case when waba_sum_in_rubles >0 then account_id end) = 0,1,count(distinct case when waba_sum_in_rubles >0 then account_id end)) arpu_waba,\n          (sum(sum_in_rubles) -sum(waba_sum_in_rubles))/IF(count(distinct case when waba_sum_in_rubles =0 then account_id end)=0,1,count(distinct case when waba_sum_in_rubles =0 then account_id end)) arpu_without_waba\n          \n\n  from revenue_data\n  where currency in ('RUR','KZT','USD','EUR')\n   group by GROUPING SETS \n(\n  (segments_aggregated,paid_month,market_type),\n        (client_type,paid_month,market_type),\n        (segments_aggregated,paid_month,client_type,market_type),\n        (paid_month,market_type),\n\n\n  (segments_aggregated,paid_month,registration_source_agg,market_type),\n        (client_type,paid_month,registration_source_agg,market_type),\n        (segments_aggregated,paid_month,client_type,registration_source_agg,market_type),\n        (paid_month,registration_source_agg,market_type)\n)\n\n\n), revenue_data_ru as (\n\n  select case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_,   -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n          paid_month,                                                                               -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n          case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_, -- \u0410\u0433\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n          case when grouping(client_type) = 1 then 'all' else client_type end client_type_,         -- \u0422\u0438\u043f \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n          currency as market_type,                                                                  -- \u0420\u044b\u043d\u043e\u043a\n          count(distinct account_id) as paying_clients,                                             -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043b\u0430\u0442\u044f\u0449\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n          count(distinct case when waba_sum_in_rubles >0 then account_id end) paying_clients_waba,          -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043f\u043b\u0430\u0442\u044f\u0449\u0438\u0445 \u0437\u0430 WABA\n          count(distinct case when waba_sum_in_rubles =0 then account_id end) paying_clients_without_waba,  -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043b\u0430\u0442\u044f\u0449\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0431\u0435\u0437 WABA\n          \n          sum(sum_in_rubles) as revenue_amount,                                                     -- \u0421\u0443\u043c\u043c\u0430 \u0432\u044b\u0440\u0443\u0447\u043a\u0438\n          sum(waba_sum_in_rubles) as revenue_amount_waba,                                           -- \u0421\u0443\u043c\u043c\u0430 \u0432\u044b\u0440\u0443\u0447\u043a\u0438 \u0437\u0430 WABA\n          sum(sum_in_rubles) -sum(waba_sum_in_rubles)  as revenue_amount_without_waba,              -- \u0421\u0443\u043c\u043c\u0430 \u0432\u044b\u0440\u0443\u0447\u043a\u0438 \u0431\u0435\u0437 WABA\n\n          sum(sum_in_rubles)/IF(count(distinct account_id)=0,1,count(distinct account_id)) arpu,    -- \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n          sum(waba_sum_in_rubles)/IF(count(distinct case when waba_sum_in_rubles >0 then account_id end) = 0,1,count(distinct case when waba_sum_in_rubles >0 then account_id end)) arpu_waba,                              -- \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f WABA\n          (sum(sum_in_rubles) -sum(waba_sum_in_rubles))/IF(count(distinct case when waba_sum_in_rubles =0 then account_id end)=0,1,count(distinct case when waba_sum_in_rubles =0 then account_id end)) arpu_without_waba   -- \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0431\u0435\u0437 WABA\n          \n\n  from revenue_data\n  where currency in ('RUR','KZT','USD','EUR')\n\n   group by GROUPING SETS \n(\n  (segments_aggregated,paid_month,market_type),\n        (client_type,paid_month,market_type),\n        (segments_aggregated,paid_month,client_type,market_type),\n        (paid_month,market_type),\n\n\n  (segments_aggregated,paid_month,registration_source_agg,market_type),\n        (client_type,paid_month,registration_source_agg,market_type),\n        (segments_aggregated,paid_month,client_type,registration_source_agg,market_type),\n        (paid_month,registration_source_agg,market_type)\n)\n    -- \u0412\u044b\u0440\u0443\u0447\u043a\u0430 \u043f\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u043c \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n  )\nselect * from revenue_data_all\nunion all\nselect * from revenue_data_ru_kzt\nunion all\nselect * from revenue_data_ru\n/*\nleft join revenue_data_ru_kzt on revenue_data_all.segments_aggregated = revenue_data_ru_kzt.segments_aggregated\nleft join revenue_data_ru     on  revenue_data_all.segments_aggregated =revenue_data_ru.segments_aggregated  \nleft join revenue_data_kzt    on revenue_data_all.segments_aggregated = revenue_data_kzt.segments_aggregated \nleft join revenue_data_usd    on revenue_data_all.segments_aggregated = revenue_data_usd.segments_aggregated \nleft join revenue_data_eur    on revenue_data_all.segments_aggregated = revenue_data_eur.segments_aggregated \nleft join revenue_data_eur_usd on revenue_data_all.segments_aggregated = revenue_data_eur_usd.segments_aggregated \n*/\n\n\n\n/*\n select *\n from dbt_prod.mart_revenue_by_segments*/", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_revenue_by_segments_aggregated`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.955327Z", "completed_at": "2025-05-21T12:31:17.001085Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.004575Z", "completed_at": "2025-05-21T12:31:17.004584Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2183997631072998, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_yandex_direct", "compiled": true, "compiled_code": "WITH onboarding_users AS (\n                         SELECT account_id\n                         FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts_events__role_choose`\n                         WHERE crm != 'noCrm'\n                         ),\n     profile_info AS (\n                         SELECT account_id\n                              , utm_source\n                              , utm_campaign\n                              , utm_content\n                              , register_date\n                         FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n                         ),\n     revenue AS (\n                         SELECT account_id\n                              , sum(sum_in_rubles + waba_sum_in_rubles) AS sum_overall\n                         FROM `dwh-wazzup`.`dbt_nbespalov`.`int_payments_revenue_with_waba`\n                         GROUP BY account_Id\n                         ),\n     all_users_regs_onboarding_and_money AS (\n                         SELECT utm_campaign                                            -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM campaign \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\n                              , register_date                    AS date                -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u0430\u044f \u0434\u0430\u0442\u0430\n                              , count(DISTINCT all_u.account_id) AS regs_count          -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439\n                              , count(DISTINCT onb.account_id)   AS passed_onboarding   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u043e\u043d\u0431\u043e\u0440\u0434\u0438\u043d\u0433\n                              , sum(sum_overall)                 AS sum_overall         -- \u041e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u043a\u0443\u043f\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n                         FROM profile_info all_u\n                             LEFT JOIN onboarding_users onb ON all_u.account_id = onb.account_id\n                             LEFT JOIN revenue ON all_u.account_id = revenue.account_id\n                         GROUP BY utm_campaign, register_date\n                         ),\n     direct_data AS (\n                         SELECT   date                          -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u0430\u044f \u0434\u0430\u0442\u0430\n                                , utm_campaign                  -- \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 UTM campaign \u0438\u0437 URL, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\n                                , campaign_name                 -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u043a\u043b\u0430\u043c\u044b\n                                , sum(impressions) impressions  -- \u041f\u043e\u043a\u0430\u0437\u044b \u0440\u0435\u043a\u043b\u0430\u043c\u044b\n                                , sum(clicks) AS clicks         -- \u041a\u043b\u0438\u043a\u0438 \u043d\u0430 \u0440\u0435\u043a\u043b\u0430\u043c\u0443\n                                , sum(COST) COST                -- \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\n                         FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_yandex_direct`\n                         GROUP BY 1, 2, 3\n                         )\nSELECT *    -- \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u0440\u0435\u043a\u043b\u0430\u043c\u0435 \u0432 \u044f\u043d\u0434\u0435\u043a\u0441 \u0434\u0438\u0440\u0435\u043a\u0442\nFROM direct_data\n    LEFT JOIN all_users_regs_onboarding_and_money USING (date, utm_campaign)\n    --", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_yandex_direct`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:16.998261Z", "completed_at": "2025-05-21T12:31:17.004183Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.122425Z", "completed_at": "2025-05-21T12:31:17.122438Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.25295472145080566, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_channels_active_paid_monthly_aggregated", "compiled": true, "compiled_code": "with channels_data as (\nselect accs.account_Id,\n        month,\n        currency,\n        segments_aggregated,\n        case when month = registration_month then 'new' else 'old' end as client_type,\n        sum(paid_channels_quantity) paid_channels_quantity,\n        sum(paid_channels_waba_quantity) paid_channels_waba_quantity,\n        count(distinct subscription_type) distinct_transports_count,\n        sources.registration_source_agg\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_paid_monthly` accs\njoin `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_attribution_data` sources on accs.account_id = sources.account_id\ngroup by all\n\n)\n, channels_active_all as (\n\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_,\n        month,\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,\n        case when grouping(client_type) = 1 then 'all' else client_type end client_type_,\n        sum(paid_channels_quantity) paid_channels_quantity,\n        sum(paid_channels_waba_quantity) paid_channels_waba_quantity,\n        sum(distinct_transports_count) sum_distinct_transports_count_per_user,\n        count(distinct account_id) as accounts_for_distinct_transport,\n        avg(distinct_transports_count) avg_distinct_transports_count_per_user,\n      'all' as market_type\nfrom channels_data\n   group by GROUPING SETS \n(\n  (segments_aggregated,month),\n        (client_type,month),\n        (segments_aggregated,month,client_type),\n        (month),\n\n  (segments_aggregated,month,registration_source_agg),\n        (client_type,month,registration_source_agg),\n        (segments_aggregated,month,client_type,registration_source_agg),\n        (month,registration_source_agg)\n\n)\n\n\n),channels_active_eur_usd_rur_kzt as (\n\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_,\n        month,\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,\n        case when grouping(client_type) = 1 then 'all' else client_type end client_type_,\n        sum(paid_channels_quantity) paid_channels_quantity,\n        sum(paid_channels_waba_quantity) paid_channels_waba_quantity,\n        sum(distinct_transports_count) sum_distinct_transports_count_per_user,\n        count(distinct account_id) as accounts_for_distinct_transport,\n        avg(distinct_transports_count) avg_distinct_transports_count_per_user,\n      case when currency in ('USD','EUR') then  'usd_eur' else 'ru_kzt' end  as market_type\nfrom channels_data\nwhere currency in ('RUR','USD','KZT','EUR')\n   group by GROUPING SETS \n(\n  (segments_aggregated,month,market_type),\n        (client_type,month,market_type),\n        (segments_aggregated,month,client_type,market_type),\n        (month,market_type),\n\n  (segments_aggregated,month,registration_source_agg,market_type),\n        (client_type,month,registration_source_agg,market_type),\n        (segments_aggregated,month,client_type,registration_source_agg,market_type),\n        (month,registration_source_agg,market_type)\n)\n\n\n),channels_active_rur as (\n\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_,    -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n        month,                  -- \u041c\u0435\u0441\u044f\u0446 \u043c\u0435\u0436\u0434\u0443 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u0435\u0451 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0435\u043c\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,   -- \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        case when grouping(client_type) = 1 then 'all' else client_type end client_type_,   -- \u0422\u0438\u043f \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n        sum(paid_channels_quantity) paid_channels_quantity,                     -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432\n        sum(paid_channels_waba_quantity) paid_channels_waba_quantity,           -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0441 \u0442\u0430\u0440\u0438\u0444\u043e\u043c WABA\n        sum(distinct_transports_count) sum_distinct_transports_count_per_user,  -- \u0421\u0443\u043c\u043c\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043e\u0432 \u043d\u0430 \u044e\u0437\u0435\u0440\u0430\n        count(distinct account_id) as accounts_for_distinct_transport,          -- \u0421\u0443\u043c\u043c\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0430\u043a\u043a\u0430\u043d\u0442\u043e\u0432 \u043d\u0430 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\n        avg(distinct_transports_count) avg_distinct_transports_count_per_user,  -- \u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043e\u0432 \u043d\u0430 \u044e\u0437\u0435\u0440\u0430\n      currency as market_type   -- \u0420\u044b\u043d\u043e\u043a\nfrom channels_data\nwhere currency in ('RUR','KZT','EUR','USD')\n   group by GROUPING SETS \n(\n  (segments_aggregated,month,market_type),\n        (client_type,month,market_type),\n        (segments_aggregated,month,client_type,market_type),\n        (month,market_type),\n\n  (segments_aggregated,month,registration_source_agg,market_type),\n        (client_type,month,registration_source_agg,market_type),\n        (segments_aggregated,month,client_type,registration_source_agg,market_type),\n        (month,registration_source_agg,market_type)\n)\n\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 c \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438 \u0438 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u043a\u0430\u043d\u0430\u043b\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n)\nselect *  from channels_active_all\nunion all\nselect * from channels_active_rur\nunion all\nselect * from channels_active_eur_usd_rur_kzt", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_paid_monthly_aggregated`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:17.205403Z", "completed_at": "2025-05-21T12:31:17.211715Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.229788Z", "completed_at": "2025-05-21T12:31:17.229800Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.19291949272155762, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_paid_subscription_with_type_and_tariff_last_month_activity", "compiled": true, "compiled_code": "with last_month as (\nselect *, last_value(subscription_month) over (partition by account_id  order by subscription_month asc rows between unbounded preceding and unbounded following ) as last_value_tarif_month from \n`dwh-wazzup`.`dbt_nbespalov`.`mart_subscription_parameters_and_segment_by_month`\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0438 \u0438\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0441 \u0442\u0430\u0440\u0438\u0444\u0430\u043c\u0438 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u043c\u0435\u0441\u044f\u0446\u0435\u043c \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438\nselect account_id,                                                                          -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n string_agg(distinct concat(subscription_type, ' - ', tariff_new))  as type_and_tariff,     -- \u041a\u0430\u043d\u0430\u043b\u044b \u0438 \u0442\u0430\u0440\u0438\u0444\u044b\n min(subscription_month) as last_active_subscription_month                                  -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n  from last_month\nwhere last_value_tarif_month=subscription_month and subscription_type!='equipment'\ngroup by 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_paid_subscription_with_type_and_tariff_last_month_activity`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:17.222865Z", "completed_at": "2025-05-21T12:31:17.233122Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.278129Z", "completed_at": "2025-05-21T12:31:17.278140Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.11453819274902344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_left_and_returned_accounts_with_partner_and_account_type_with_dates", "compiled": true, "compiled_code": "\n\nwith\n    subscriptions_start_and_end_with_dates as (\n        select\n            *,\n            (\n                case\n                    when\n                        date_add(subscriptions.subscription_end, interval 1 day) = date\n                        and client_type_with_churn_period_20\n                        in ('did_not_come_back')\n                    then 'left'\n                    when\n                        date_add(subscriptions.subscription_end, interval 1 day) = date\n                        and client_type_with_churn_period_20\n                        in ('came_back_after_leaving_period')\n                    then 'came_back_after_leaving_period'\n                    when\n                        date = subscription_start\n                        and date_diff(subscription_start, last_subscription_end, day)\n                        > 20\n                    then 'returned'\n                    when client_type_with_churn_period_20 = 'may_become_active' \n                                     then 'may_become_active'\n                    else 'active'\n                end\n            ) as return_or_left_status, -- \u0421\u0442\u0430\u0442\u0443\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0434\u0435\u043d\u044c\n\n\n                \n          (\n                case\n                    when\n                        date_add(subscriptions.subscription_end, interval 1 day) = date\n                        and client_type_with_churn_period_5\n                        in ('did_not_come_back')\n                    then 'left'\n                    when\n                        date_add(subscriptions.subscription_end, interval 1 day) = date\n                        and client_type_with_churn_period_5\n                        in ('came_back_after_leaving_period')\n                    then 'came_back_after_leaving_period'\n                    when\n                        date = subscription_start\n                        and date_diff(subscription_start, last_subscription_end, day)\n                        > 5\n                    then 'returned'\n                    when client_type_with_churn_period_5= 'may_become_active' \n                                     then 'may_become_active'\n                    else 'active'\n                end\n            ) as return_or_left_status_with_churn_period_5   -- \u0421\u0442\u0430\u0442\u0443\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0434\u0435\u043d\u044c. churn_period \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0432 client_type_with_churn_period_n\n            ,\n                \n          (\n                case\n                    when\n                        date_add(subscriptions.subscription_end, interval 1 day) = date\n                        and client_type_with_churn_period_7\n                        in ('did_not_come_back')\n                    then 'left'\n                    when\n                        date_add(subscriptions.subscription_end, interval 1 day) = date\n                        and client_type_with_churn_period_7\n                        in ('came_back_after_leaving_period')\n                    then 'came_back_after_leaving_period'\n                    when\n                        date = subscription_start\n                        and date_diff(subscription_start, last_subscription_end, day)\n                        > 7\n                    then 'returned'\n                    when client_type_with_churn_period_7= 'may_become_active' \n                                     then 'may_become_active'\n                    else 'active'\n                end\n            ) as return_or_left_status_with_churn_period_7   -- \u0421\u0442\u0430\u0442\u0443\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0434\u0435\u043d\u044c. churn_period \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0432 client_type_with_churn_period_n\n            ,\n                \n          (\n                case\n                    when\n                        date_add(subscriptions.subscription_end, interval 1 day) = date\n                        and client_type_with_churn_period_90\n                        in ('did_not_come_back')\n                    then 'left'\n                    when\n                        date_add(subscriptions.subscription_end, interval 1 day) = date\n                        and client_type_with_churn_period_90\n                        in ('came_back_after_leaving_period')\n                    then 'came_back_after_leaving_period'\n                    when\n                        date = subscription_start\n                        and date_diff(subscription_start, last_subscription_end, day)\n                        > 90\n                    then 'returned'\n                    when client_type_with_churn_period_90= 'may_become_active' \n                                     then 'may_become_active'\n                    else 'active'\n                end\n            ) as return_or_left_status_with_churn_period_90   -- \u0421\u0442\u0430\u0442\u0443\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0434\u0435\u043d\u044c. churn_period \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0432 client_type_with_churn_period_n\n            \n                \n        from\n            `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_left_and_returned_date_with_account_type_and_partner_type` subscriptions\n        inner join\n            `dwh-wazzup`.`analytics_tech`.`days`\n            on subscriptions.subscription_start <= days.date\n            and date_add(subscriptions.subscription_end, interval 1 day) >= days.date\n    )\n,int_accounts_who_paid__defining_abcx_segmentation_type as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_defining_abcx_segmentation_type`\n),\nprofile_info as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u0441\u0442\u043e\u0440\u0438\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u0438 \u0431\u0435\u0437 \u0443\u0447\u0435\u0442\u0430 \u0442\u0440\u0438\u0430\u043b\u043e\u0432. \u041d\u0443\u0436\u043d\u0430 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043e\u0442\u0432\u0430\u043b\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u0438 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0445\u0441\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043f\u0435\u0440\u0438\u043e\u0434\u0435\n select subscriptions_start_and_end_with_dates.*,\n       abcx_segment,    -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043d\u0430\u0448\u0435\u0439 abcdx \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 https://www.notion.so/ABCX-7b8f5f7d3e0b470e83fe632828d64821\n       min(subscription_start) over (partition by subscriptions_start_and_end_with_dates.account_id) as min_subscription_start_month -- \u043c\u0435\u0441\u044f\u0446, \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437 \u043e\u043f\u043b\u0430\u0442\u0438\u043b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\n  from subscriptions_start_and_end_with_dates\n  left join int_accounts_who_paid__defining_abcx_segmentation_type \n                                                on subscriptions_start_and_end_with_dates.account_id = int_accounts_who_paid__defining_abcx_segmentation_type.account_id\n                                                and date_trunc(subscriptions_start_and_end_with_dates.date,month)  =  int_accounts_who_paid__defining_abcx_segmentation_type.live_month\n  \nwhere not exists (\n    select profile_info.account_id\n    from profile_info \n    where   subscriptions_start_and_end_with_dates.account_Id = profile_info.account_Id\n            and profile_info.is_employee \n)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts_with_partner_and_account_type_with_dates`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:17.226440Z", "completed_at": "2025-05-21T12:31:17.233550Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.278717Z", "completed_at": "2025-05-21T12:31:17.278728Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.15067696571350098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_left_and_returned_accounts_with_payments_and_promised_payments_with_partner_and_account_type_with_dates", "compiled": true, "compiled_code": "with\n    subscriptions_start_and_end_with_dates as (\n        select\n            *,\n            (\n                case\n                    when\n                        date_add(subscriptions.subscription_end, interval 1 day) = date\n                        and client_type_with_churn_period_20\n                        in ('did_not_come_back')\n                    then 'left'\n                    when\n                        date_add(subscriptions.subscription_end, interval 1 day) = date\n                        and client_type_with_churn_period_20\n                        in ('came_back_after_leaving_period')\n                    then 'came_back_after_leaving_period'\n                    when\n                        date = subscription_start\n                        and date_diff(subscription_start, last_subscription_end, day)\n                        > 20\n                    then 'returned'\n                    when client_type_with_churn_period_20 = 'may_become_active' \n                                     then 'may_become_active'\n                    else 'active'\n                end\n            ) as return_or_left_status, -- \u0421\u0442\u0430\u0442\u0443\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0434\u0435\u043d\u044c\n\n          (\n                case\n                    when\n                        date_add(subscriptions.subscription_end, interval 1 day) = date\n                        and client_type_with_churn_period_7\n                        in ('did_not_come_back')\n                    then 'left'\n                    when\n                        date_add(subscriptions.subscription_end, interval 1 day) = date\n                        and client_type_with_churn_period_7\n                        in ('came_back_after_leaving_period')\n                    then 'came_back_after_leaving_period'\n                    when\n                        date = subscription_start\n                        and date_diff(subscription_start, last_subscription_end, day)\n                        > 7\n                    then 'returned'\n                    when client_type_with_churn_period_7= 'may_become_active' \n                                     then 'may_become_active'\n                    else 'active'\n                end\n            ) as return_or_left_status_with_churn_period_7  -- \u0421\u0442\u0430\u0442\u0443\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0434\u0435\u043d\u044c. churn_period \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0432 client_type_with_churn_period_n\n\n        from\n            `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_left_and_returned_date_with_payments_and_promised_payments_with_account_type_and_partner_type` subscriptions\n        inner join\n            `dwh-wazzup`.`analytics_tech`.`days`\n            on subscriptions.subscription_start <= days.date\n            and subscriptions.subscription_end >= days.date\n    )\n,int_accounts_who_paid__defining_abcx_segmentation_type as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_defining_abcx_segmentation_type`\n),\nprofile_info as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u0441\u0442\u043e\u0440\u0438\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0431\u0435\u0437 \u0443\u0447\u0435\u0442\u0430 \u0442\u0440\u0438\u0430\u043b\u043e\u0432 \u0438 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439. \u041d\u0443\u0436\u043d\u0430 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043e\u0442\u0432\u0430\u043b\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u0438 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0445\u0441\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043f\u0435\u0440\u0438\u043e\u0434\u0435\n select subscriptions_start_and_end_with_dates.*,\n       abcx_segment,    -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043d\u0430\u0448\u0435\u0439 abcdx \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 https://www.notion.so/ABCX-7b8f5f7d3e0b470e83fe632828d64821\n       min(subscription_start) over (partition by subscriptions_start_and_end_with_dates.account_id) as min_subscription_start_month -- \u043c\u0435\u0441\u044f\u0446, \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437 \u043e\u043f\u043b\u0430\u0442\u0438\u043b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\n  from subscriptions_start_and_end_with_dates\n  left join int_accounts_who_paid__defining_abcx_segmentation_type \n                                                on subscriptions_start_and_end_with_dates.account_id = int_accounts_who_paid__defining_abcx_segmentation_type.account_id\n                                                and date_trunc(subscriptions_start_and_end_with_dates.date,month)  =  int_accounts_who_paid__defining_abcx_segmentation_type.live_month\n  \nwhere not exists (\n    select profile_info.account_id\n    from profile_info \n    where   subscriptions_start_and_end_with_dates.account_Id = profile_info.account_Id\n            and profile_info.is_employee \n)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts_with_payments_and_promised_payments_with_partner_and_account_type_with_dates`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:17.212882Z", "completed_at": "2025-05-21T12:31:17.234038Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.279732Z", "completed_at": "2025-05-21T12:31:17.279741Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1932694911956787, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_waba_sessions_real_money", "compiled": true, "compiled_code": "WITH profile_info AS (\n                     SELECT account_id\n                          , is_employee\n                     FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n                     ),\n     withdrawals_amount_defining AS (\n                                    SELECT date_trunc(occured_date, month) AS withdrawal_month\n                                         , currency\n                                         , sum(sum_in_rubles)              AS withdrawals_amount\n                                    FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_waba_withdrawals` withdrawals\n                                    WHERE NOT EXISTS (\n                                        SELECT account_Id\n                                        FROM profile_info\n                                        WHERE is_employee\n                                      AND withdrawals.account_id = profile_info.account_id\n                                        )\n                                    GROUP BY 1, 2\n                                    ),\n     waba_reward_by_month AS (  -- \u0412\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043d\u0438\u0435 \u0437\u0430 WABA (10% \u043f\u0440\u0438 object = 'rewardWaba')\n                     SELECT reward.paid_month\n                          , currency\n                          , sum(reward.sum_in_rubles) AS waba_reward_sum_in_rubles\n                     FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_waba_reward_by_account` reward\n                     LEFT JOIN profile_info ON reward.account_id = profile_info.account_id\n                     WHERE profile_info.is_employee IS FALSE\n                     GROUP BY 1, 2\n                     ),\n\n     waba_sessions_and_postpay_data AS (\n                     SELECT date_trunc(spendings.spend_date, month)          AS paid_month\n                          , spendings.sum_in_rubles\n                          , original_sum\n                          , currency\n                          , state\n                     FROM `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_waba_balance_spending_by_currency_and_account` spendings\n                     WHERE NOT EXISTS (\n                         SELECT account_Id\n                         FROM profile_info\n                         WHERE is_employee\n                       AND spendings.account_id = profile_info.account_id\n                         )\n                     UNION ALL\n                     SELECT CAST(date_trunc(revenue.paid_date, MONTH) AS DATE) AS paid_month\n                          , revenue.amount AS sum_in_rubles\n                          , revenue.amount AS original_sum\n                          , 'RUR'                                              AS currency\n                          , 'paid'\n                     FROM `dwh-wazzup`.`dbt_nbespalov`.`int_payments_postpay_waba_revenue` revenue\n\n                     WHERE NOT EXISTS (\n                         SELECT account_Id\n                         FROM profile_info\n                         WHERE is_employee\n                       AND revenue.account_id = CAST (profile_info.account_id AS string)\n                         )\n                     ),\n\n     waba_sessions_payments AS (\n                     SELECT paid_month\n                          , currency\n                          , sum(sum_in_rubles)   AS waba_balance_spending_sum_in_rubles\n                          , sum(original_sum)    AS waba_balance_spending_original_sum\n                          , sum(case when state = 'paid' then sum_in_rubles else 0 end)   AS waba_balance_spending_sum_in_rubles_paid\n                          , sum(case when state = 'paid' then original_sum  else 0 end)   AS waba_balance_spending_original_sum_paid\n                          , sum(case when state = 'holded' then sum_in_rubles else 0 end) AS waba_balance_spending_sum_in_rubles_holded\n                          , sum(case when state = 'holded' then original_sum else 0 end)  AS waba_balance_spending_original_sum_holded\n                     FROM waba_sessions_and_postpay_data\n                     GROUP BY 1, 2\n\n                     )\n    , waba_sessions_revenue_pre AS (\n                     SELECT date_trunc(real_money.paid_date, month)       AS paid_month\n                          , real_money.currency\n                          , sum(bad_balance_spent_on_waba_balance)        AS bad_balance_spent_on_waba_balance\n                          , sum(sum_in_rubles_spent_on_subscription)      AS sum_in_rubles_spent_on_subscription_without_bad_balance\n                          , sum(sum_in_rubles_spent_on_waba_balance)      AS sum_in_rubles_spent_on_waba_balance_without_bad_balance\n                          , sum(wapi_discount_for_partners_sum_in_rubles) AS wapi_discount_for_partners_sum_in_rubles\n                          , sum(wapi_transactions_in_rubles)              AS wapi_transactions_in_rubles_with_bad_balance\n\n                          , sum(bad_balance_spent_on_waba_balance/coalesce(rur,1))        AS bad_balance_spent_on_waba_balance_original_sum\n                          , sum(sum_in_rubles_spent_on_subscription/coalesce(rur,1))      AS original_sum_spent_on_subscription_without_bad_balance\n                          , sum(sum_in_rubles_spent_on_waba_balance/coalesce(rur,1))      AS original_sum_spent_on_waba_balance_without_bad_balance\n                          , sum(wapi_discount_for_partners_sum_in_rubles/coalesce(rur,1)) AS wapi_discount_for_partners_original_sum\n                          , sum(wapi_transactions_in_rubles/coalesce(rur,1))              AS wapi_transactions_with_bad_balance_original_sum\n\n                     FROM `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_waba_sessions_real_money` real_money\n                     LEFT JOIN profile_info ON real_money.account_id = profile_info.account_id\n\n                     LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_payments_postpay_waba_revenue` revenue ON CAST (real_money.account_id AS INT) = CAST (revenue.account_id AS INT)\n                         AND wapi_transactions_in_rubles > 0\n                         AND date_trunc(real_money.paid_date, MONTH) = CAST (date_trunc(revenue.paid_date, MONTH) AS DATE)\n\n                     LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_payments_exchange_rates_unpivoted` exchange_rates_unpivoted\n                              ON exchange_rates_unpivoted._ibk = real_money.paid_date AND exchange_rates_unpivoted.currency = real_money.currency\n                     WHERE profile_info.is_employee IS FALSE\n                       AND revenue.account_id IS NULL\n                     GROUP BY 1, 2\n\n                     UNION ALL\n                     SELECT CAST (date_trunc(revenue.paid_date, MONTH) AS DATE) AS paid_month\n                          , 'RUR'                                               AS currency\n                          , NULL                                                AS bad_balance_spent_on_waba_balance\n                          , NULL                                                AS sum_in_rubles_spent_on_subscription_without_bad_balance\n                          , NULL                                                AS sum_in_rubles_spent_on_waba_balance_without_bad_balance\n                          , NULL                                                AS wapi_discount_for_partners_sum_in_rubles\n                          , sum(revenue.amount)                                 AS wapi_transactions_in_rubles_with_bad_balance\n\n                          , NULL                                                AS bad_balance_spent_on_waba_balance_original_sum\n                          , NULL                                                AS original_sum_spent_on_subscription_without_bad_balance\n                          , NULL                                                AS original_sum_spent_on_waba_balance_without_bad_balance\n                          , NULL                                                AS wapi_discount_for_partners_original_sum\n                          , sum(revenue.amount)                                 AS wapi_transactions_with_bad_balance_original_sum\n\n                     FROM `dwh-wazzup`.`dbt_nbespalov`.`int_payments_postpay_waba_revenue` revenue\n                     WHERE NOT EXISTS (\n                         SELECT account_Id\n                         FROM profile_info\n                         WHERE is_employee\n                            AND revenue.account_id = CAST (profile_info.account_id AS string)\n                         )\n                     GROUP BY paid_month\n                     ),\n\n     waba_sessions_revenue AS (\n                     SELECT paid_month\n                          , currency\n                          , sum(bad_balance_spent_on_waba_balance)                        AS bad_balance_spent_on_waba_balance\n                          , sum(sum_in_rubles_spent_on_subscription_without_bad_balance)  AS sum_in_rubles_spent_on_subscription_without_bad_balance\n                          , sum(sum_in_rubles_spent_on_waba_balance_without_bad_balance)  AS sum_in_rubles_spent_on_waba_balance_without_bad_balance\n                          , sum(wapi_discount_for_partners_sum_in_rubles)                 AS wapi_discount_for_partners_sum_in_rubles\n                          , sum(wapi_transactions_in_rubles_with_bad_balance)             AS wapi_transactions_in_rubles_with_bad_balance\n                          \n                          , sum(bad_balance_spent_on_waba_balance_original_sum)           AS bad_balance_spent_on_waba_balance_original_sum\n                          , sum(original_sum_spent_on_subscription_without_bad_balance)   AS original_sum_spent_on_subscription_without_bad_balance\n                          , sum(original_sum_spent_on_waba_balance_without_bad_balance)   AS original_sum_spent_on_waba_balance_without_bad_balance\n                          , sum(wapi_discount_for_partners_original_sum)                  AS wapi_discount_for_partners_original_sum\n                          , sum(wapi_transactions_with_bad_balance_original_sum)          AS wapi_transactions_with_bad_balance_original_sum\n                     FROM waba_sessions_revenue_pre\n                     GROUP BY paid_month, 2\n                     ),\n\n     key_reply_invoice AS (\n                     SELECT paid_month\n                          , provider\n                          , invoice_subscriptions_original\n                          , invoice_subscriptions_in_rubles\n                          , invoice_sessions_original\n                          , invoice_sessions_in_rubles\n                     FROM `dwh-wazzup`.`dbt_nbespalov`.`int_payments_waba_key_reply_invoice`\n                     WHERE provider = 'KeyReply'\n                     ),\n\n     gupshup_invoice AS (\n                     SELECT paid_month\n                          , provider\n                          , invoice_subscriptions_original\n                          , invoice_subscriptions_in_rubles\n                          , invoice_sessions_original\n                          , invoice_sessions_in_rubles\n                     FROM `dwh-wazzup`.`dbt_nbespalov`.`int_payments_waba_key_reply_invoice`\n                     WHERE provider = 'Gupshup'\n                     ),\n     pnl AS (\n        SELECT  \n                month  \n                , uslovno_peremennye_raskhody_sessii                                  \n                , uslovno_peremennye_raskhody_sessii_vyplaty_partneram                \n                , uslovno_peremennye_raskhody_sessii_komissiya_na_vyplaty_partneram   \n                , uslovno_peremennye_raskhody_sessii_ekvairing                        \n                , uslovno_peremennye_raskhody_sessii_komissiya_stripe_za_vyvod_usd    \n                , uslovno_peremennye_raskhody_sessii_komissiya_za_oplatu_waba         \n                , uslovno_peremennye_raskhody_sessii_raskhody_na_konversatsiyu_valyuty\n        FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_pnl`\n     ),\n\n/*    waba_balance_by_month AS (\n                     SELECT *\n                     FROM `dwh-wazzup`.`dbt_nbespalov`.`int_channels_waba_balance_end_of_month`\n                     ),\n*/\n     waba_balance_by_month_by_payments_and_spendings_keyreply AS (\n                     SELECT month                             AS balance_month,\n                            currency,\n                            sum(balance)                      AS balance_in_rubles\n                     FROM `dwh-wazzup`.`dbt_nbespalov`.`int_channels_waba_balance_by_spending_by_month`\n                     WHERE month <= '2024-02-01'\n                     GROUP BY 1, 2\n                     ),\n\n     waba_balance_by_month_by_payments_and_spendings_gupshup AS (\n                     SELECT balance_month,\n                            currency,\n                            sum(balance_in_rubles)            AS balance_in_rubles\n                     FROM `dwh-wazzup`.`dbt_nbespalov`.`int_channels_waba_balance_end_of_the_month_gupshup`\n                     GROUP BY 1, 2\n                     ),\n     joining_tables AS (\nSELECT coalesce(waba_sessions_revenue.paid_month, waba_sessions_payments.paid_month, waba_reward_by_month.paid_month,\n                key_reply_invoice.paid_month, \n                gupshup_invoice.paid_month,\n                waba_balance_by_month_by_payments_and_spendings_keyreply.balance_month,\n                waba_balance_by_month_by_payments_and_spendings_gupshup.balance_month)      AS paid_month\n\n     , coalesce(waba_sessions_revenue.currency, waba_sessions_payments.currency, waba_reward_by_month.currency,\n                waba_balance_by_month_by_payments_and_spendings_keyreply.currency,\n                waba_balance_by_month_by_payments_and_spendings_gupshup.currency)            AS currency         \n     , bad_balance_spent_on_waba_balance\n     , sum_in_rubles_spent_on_subscription_without_bad_balance\n     , sum_in_rubles_spent_on_waba_balance_without_bad_balance\n     , wapi_discount_for_partners_sum_in_rubles\n     , wapi_transactions_in_rubles_with_bad_balance\n\n     , bad_balance_spent_on_waba_balance_original_sum\n     , original_sum_spent_on_subscription_without_bad_balance\n     , original_sum_spent_on_waba_balance_without_bad_balance\n     , wapi_discount_for_partners_original_sum\n     , wapi_transactions_with_bad_balance_original_sum\n     , waba_balance_spending_sum_in_rubles\n     , waba_balance_spending_original_sum\n     , waba_balance_spending_sum_in_rubles_paid\n     , waba_balance_spending_original_sum_paid\n     , waba_balance_spending_sum_in_rubles_holded\n     , waba_balance_spending_original_sum_holded\n     , waba_reward_sum_in_rubles\n     , key_reply_invoice.invoice_sessions_in_rubles                                 AS key_invoice_sessions_in_rubles\n     , gupshup_invoice.invoice_sessions_in_rubles                                   AS gupshup_invoice_sessions_in_rubles\n     , waba_balance_by_month_by_payments_and_spendings_gupshup.balance_in_rubles    AS waba_balance_by_month_sum_in_rubles --keyreply balance\n     , waba_balance_by_month_by_payments_and_spendings_keyreply.balance_in_rubles   AS balance_by_spending       -- gupshup balance\n     , withdrawals_amount_defining.withdrawals_amount                               AS withdrawals_amount\n     , uslovno_peremennye_raskhody_sessii_vyplaty_partneram\n     , uslovno_peremennye_raskhody_sessii_komissiya_na_vyplaty_partneram\n     , uslovno_peremennye_raskhody_sessii_ekvairing\n     , uslovno_peremennye_raskhody_sessii_komissiya_stripe_za_vyvod_usd\n     , uslovno_peremennye_raskhody_sessii_komissiya_za_oplatu_waba\n     , uslovno_peremennye_raskhody_sessii_raskhody_na_konversatsiyu_valyuty\n     , uslovno_peremennye_raskhody_sessii\nFROM waba_sessions_revenue\n    FULL OUTER JOIN waba_sessions_payments\n            ON waba_sessions_revenue.paid_month = waba_sessions_payments.paid_month\n                AND waba_sessions_payments.currency = waba_sessions_revenue.currency\n    FULL OUTER JOIN waba_reward_by_month\n            ON waba_reward_by_month.paid_month = waba_sessions_revenue.paid_month\n            AND waba_reward_by_month.currency = waba_sessions_revenue.currency\n    LEFT JOIN key_reply_invoice\n            ON key_reply_invoice.paid_month = waba_sessions_revenue.paid_month\n    LEFT JOIN gupshup_invoice\n            ON gupshup_invoice.paid_month = waba_sessions_revenue.paid_month\n\n    LEFT JOIN waba_balance_by_month_by_payments_and_spendings_keyreply\n            ON waba_balance_by_month_by_payments_and_spendings_keyreply.balance_month = waba_sessions_revenue.paid_month\n            AND waba_balance_by_month_by_payments_and_spendings_keyreply.currency = waba_sessions_revenue.currency\n\n    LEFT JOIN waba_balance_by_month_by_payments_and_spendings_gupshup\n            ON waba_balance_by_month_by_payments_and_spendings_gupshup.balance_month = waba_sessions_revenue.paid_month\n            AND waba_balance_by_month_by_payments_and_spendings_gupshup.currency = waba_sessions_revenue.currency\n\n\n    LEFT JOIN withdrawals_amount_defining \n            ON waba_sessions_revenue.paid_month = withdrawals_amount_defining.withdrawal_month\n            AND waba_sessions_revenue.currency = withdrawals_amount_defining.currency\n    LEFT JOIN pnl \n            ON waba_sessions_revenue.paid_month = pnl.month\n     ),final AS (\n            select paid_month,\n            \n                   sum(case when currency = 'RUR' then sum_in_rubles_spent_on_subscription_without_bad_balance else 0 end)  AS  sum_in_rubles_spent_on_subscription_without_bad_balance_RUR,\n                    sum(case when currency = 'RUR' then sum_in_rubles_spent_on_waba_balance_without_bad_balance else 0 end) AS  sum_in_rubles_spent_on_waba_balance_without_bad_balance_RUR,\n                    sum(case when currency = 'RUR' then wapi_transactions_in_rubles_with_bad_balance else 0 end)            AS  wapi_transactions_in_rubles_with_bad_balance_RUR,\n                    sum(case when currency = 'RUR'then waba_balance_spending_sum_in_rubles_paid else 0 end)                 AS  waba_balance_spending_sum_in_rubles_paid_RUR,\n                    sum(case when currency = 'RUR'then waba_balance_spending_sum_in_rubles_holded else 0 end)               AS  waba_balance_spending_sum_in_rubles_holded_RUR,\n                    sum(case when currency = 'RUR'then waba_balance_spending_sum_in_rubles else 0 end)                      AS  waba_balance_spending_sum_in_rubles_RUR,\n            \n                \n                \n                   sum(case when currency = 'KZT' then sum_in_rubles_spent_on_subscription_without_bad_balance else 0 end)  AS  sum_in_rubles_spent_on_subscription_without_bad_balance_KZT,\n                    sum(case when currency = 'KZT' then sum_in_rubles_spent_on_waba_balance_without_bad_balance else 0 end) AS  sum_in_rubles_spent_on_waba_balance_without_bad_balance_KZT,\n                    sum(case when currency = 'KZT' then wapi_transactions_in_rubles_with_bad_balance else 0 end)            AS  wapi_transactions_in_rubles_with_bad_balance_KZT,\n                    sum(case when currency = 'KZT'then waba_balance_spending_sum_in_rubles_paid else 0 end)                 AS  waba_balance_spending_sum_in_rubles_paid_KZT,\n                    sum(case when currency = 'KZT'then waba_balance_spending_sum_in_rubles_holded else 0 end)               AS  waba_balance_spending_sum_in_rubles_holded_KZT,\n                    sum(case when currency = 'KZT'then waba_balance_spending_sum_in_rubles else 0 end)                      AS  waba_balance_spending_sum_in_rubles_KZT,\n            \n                \n                \n                   sum(case when currency = 'EUR' then sum_in_rubles_spent_on_subscription_without_bad_balance else 0 end)  AS  sum_in_rubles_spent_on_subscription_without_bad_balance_EUR,\n                    sum(case when currency = 'EUR' then sum_in_rubles_spent_on_waba_balance_without_bad_balance else 0 end) AS  sum_in_rubles_spent_on_waba_balance_without_bad_balance_EUR,\n                    sum(case when currency = 'EUR' then wapi_transactions_in_rubles_with_bad_balance else 0 end)            AS  wapi_transactions_in_rubles_with_bad_balance_EUR,\n                    sum(case when currency = 'EUR'then waba_balance_spending_sum_in_rubles_paid else 0 end)                 AS  waba_balance_spending_sum_in_rubles_paid_EUR,\n                    sum(case when currency = 'EUR'then waba_balance_spending_sum_in_rubles_holded else 0 end)               AS  waba_balance_spending_sum_in_rubles_holded_EUR,\n                    sum(case when currency = 'EUR'then waba_balance_spending_sum_in_rubles else 0 end)                      AS  waba_balance_spending_sum_in_rubles_EUR,\n            \n                \n                \n                   sum(case when currency = 'USD' then sum_in_rubles_spent_on_subscription_without_bad_balance else 0 end)  AS  sum_in_rubles_spent_on_subscription_without_bad_balance_USD,\n                    sum(case when currency = 'USD' then sum_in_rubles_spent_on_waba_balance_without_bad_balance else 0 end) AS  sum_in_rubles_spent_on_waba_balance_without_bad_balance_USD,\n                    sum(case when currency = 'USD' then wapi_transactions_in_rubles_with_bad_balance else 0 end)            AS  wapi_transactions_in_rubles_with_bad_balance_USD,\n                    sum(case when currency = 'USD'then waba_balance_spending_sum_in_rubles_paid else 0 end)                 AS  waba_balance_spending_sum_in_rubles_paid_USD,\n                    sum(case when currency = 'USD'then waba_balance_spending_sum_in_rubles_holded else 0 end)               AS  waba_balance_spending_sum_in_rubles_holded_USD,\n                    sum(case when currency = 'USD'then waba_balance_spending_sum_in_rubles else 0 end)                      AS  waba_balance_spending_sum_in_rubles_USD,\n            \n                  \n\n            \n                    sum(case when currency = 'RUR' then original_sum_spent_on_subscription_without_bad_balance else 0 end) AS  original_sum_spent_on_subscription_without_bad_balance_RUR,\n                    sum(case when currency = 'RUR' then original_sum_spent_on_waba_balance_without_bad_balance else 0 end) AS  original_sum_spent_on_waba_balance_without_bad_balance_RUR,\n                    sum(case when currency = 'RUR' then wapi_transactions_with_bad_balance_original_sum else 0 end)        AS  wapi_transactions_with_bad_balance_RUR_original_sum,\n                    sum(case when currency = 'RUR'then waba_balance_spending_original_sum_paid else 0 end)                 AS  waba_balance_spendings_paid_RUR_original_sum,\n                    sum(case when currency = 'RUR'then waba_balance_spending_original_sum_holded else 0 end)               AS  waba_balance_spendings_holded_RUR_original_sum,\n                    sum(case when currency = 'RUR'then waba_balance_spending_original_sum else 0 end)                      AS  waba_balance_spendings_RUR_original_sum,\n            \n                \n                \n                    sum(case when currency = 'KZT' then original_sum_spent_on_subscription_without_bad_balance else 0 end) AS  original_sum_spent_on_subscription_without_bad_balance_KZT,\n                    sum(case when currency = 'KZT' then original_sum_spent_on_waba_balance_without_bad_balance else 0 end) AS  original_sum_spent_on_waba_balance_without_bad_balance_KZT,\n                    sum(case when currency = 'KZT' then wapi_transactions_with_bad_balance_original_sum else 0 end)        AS  wapi_transactions_with_bad_balance_KZT_original_sum,\n                    sum(case when currency = 'KZT'then waba_balance_spending_original_sum_paid else 0 end)                 AS  waba_balance_spendings_paid_KZT_original_sum,\n                    sum(case when currency = 'KZT'then waba_balance_spending_original_sum_holded else 0 end)               AS  waba_balance_spendings_holded_KZT_original_sum,\n                    sum(case when currency = 'KZT'then waba_balance_spending_original_sum else 0 end)                      AS  waba_balance_spendings_KZT_original_sum,\n            \n                \n                \n                    sum(case when currency = 'EUR' then original_sum_spent_on_subscription_without_bad_balance else 0 end) AS  original_sum_spent_on_subscription_without_bad_balance_EUR,\n                    sum(case when currency = 'EUR' then original_sum_spent_on_waba_balance_without_bad_balance else 0 end) AS  original_sum_spent_on_waba_balance_without_bad_balance_EUR,\n                    sum(case when currency = 'EUR' then wapi_transactions_with_bad_balance_original_sum else 0 end)        AS  wapi_transactions_with_bad_balance_EUR_original_sum,\n                    sum(case when currency = 'EUR'then waba_balance_spending_original_sum_paid else 0 end)                 AS  waba_balance_spendings_paid_EUR_original_sum,\n                    sum(case when currency = 'EUR'then waba_balance_spending_original_sum_holded else 0 end)               AS  waba_balance_spendings_holded_EUR_original_sum,\n                    sum(case when currency = 'EUR'then waba_balance_spending_original_sum else 0 end)                      AS  waba_balance_spendings_EUR_original_sum,\n            \n                \n                \n                    sum(case when currency = 'USD' then original_sum_spent_on_subscription_without_bad_balance else 0 end) AS  original_sum_spent_on_subscription_without_bad_balance_USD,\n                    sum(case when currency = 'USD' then original_sum_spent_on_waba_balance_without_bad_balance else 0 end) AS  original_sum_spent_on_waba_balance_without_bad_balance_USD,\n                    sum(case when currency = 'USD' then wapi_transactions_with_bad_balance_original_sum else 0 end)        AS  wapi_transactions_with_bad_balance_USD_original_sum,\n                    sum(case when currency = 'USD'then waba_balance_spending_original_sum_paid else 0 end)                 AS  waba_balance_spendings_paid_USD_original_sum,\n                    sum(case when currency = 'USD'then waba_balance_spending_original_sum_holded else 0 end)               AS  waba_balance_spendings_holded_USD_original_sum,\n                    sum(case when currency = 'USD'then waba_balance_spending_original_sum else 0 end)                      AS  waba_balance_spendings_USD_original_sum,\n            \n                  \n\n                    sum(sum_in_rubles_spent_on_subscription_without_bad_balance) AS  sum_in_rubles_spent_on_subscription_without_bad_balance,\n                    sum(sum_in_rubles_spent_on_waba_balance_without_bad_balance) AS  sum_in_rubles_spent_on_waba_balance_without_bad_balance,\n                    sum(wapi_transactions_in_rubles_with_bad_balance) AS  wapi_transactions_in_rubles_with_bad_balance,\n                    sum(waba_balance_spending_sum_in_rubles) AS  waba_balance_spending_sum_in_rubles,\n                    sum(waba_balance_spending_sum_in_rubles_paid) AS  waba_balance_spending_sum_in_rubles_paid,\n                    sum(waba_balance_spending_sum_in_rubles_holded) AS  waba_balance_spending_sum_in_rubles_holded,\n                    \n\n                    sum(waba_reward_sum_in_rubles) AS  waba_reward_sum_in_rubles,\n                    min(key_invoice_sessions_in_rubles) AS  key_invoice_sessions_in_rubles,\n                    min(gupshup_invoice_sessions_in_rubles) AS  gupshup_invoice_sessions_in_rubles,\n                    sum(waba_balance_by_month_sum_in_rubles) AS  waba_balance_by_month_sum_in_rubles,\n                    sum(balance_by_spending) AS  balance_by_spending,\n                    sum(withdrawals_amount) AS  withdrawals_amount,\n                    min(cast(uslovno_peremennye_raskhody_sessii_vyplaty_partneram as float64)) AS  uslovno_peremennye_raskhody_sessii_vyplaty_partneram,\n                    min(cast(uslovno_peremennye_raskhody_sessii_komissiya_na_vyplaty_partneram as float64)) AS  uslovno_peremennye_raskhody_sessii_komissiya_na_vyplaty_partneram,\n                    min(cast(uslovno_peremennye_raskhody_sessii_ekvairing as float64)) AS  uslovno_peremennye_raskhody_sessii_ekvairing,\n                    min(cast(uslovno_peremennye_raskhody_sessii_komissiya_stripe_za_vyvod_usd as float64)) AS  uslovno_peremennye_raskhody_sessii_komissiya_stripe_za_vyvod_usd,\n                    min(cast(uslovno_peremennye_raskhody_sessii_komissiya_za_oplatu_waba as float64)) AS  uslovno_peremennye_raskhody_sessii_komissiya_za_oplatu_waba,\n                    min(cast(uslovno_peremennye_raskhody_sessii_raskhody_na_konversatsiyu_valyuty as float64)) AS  uslovno_peremennye_raskhody_sessii_raskhody_na_konversatsiyu_valyuty,\n                    min(cast(uslovno_peremennye_raskhody_sessii as float64)) AS  uslovno_peremennye_raskhody_sessii,\n\n                    -- \u0414\u043e \u044f\u043d\u0432\u0430\u0440\u044f 2024 \u0433\u043e\u0434\u0430 \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u043f\u0440\u043e\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f\u043c \u0441 WABA \u0431\u0430\u043b\u0430\u043d\u0441\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u043f\u0440\u0438\u0431\u044b\u043b\u0435\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043f\u043e\u043b\u0435 \"\u0412\u044b\u0440\u0443\u0447\u043a\u0430 \u043e\u0442 \u0441\u0435\u0441\u0441\u0438\u0439\"\n                    CASE WHEN paid_month < '2024-01-01' THEN sum(sum_in_rubles_spent_on_waba_balance_without_bad_balance) \n                                                        - coalesce(min(key_invoice_sessions_in_rubles),0) \n                                                        - coalesce(min(gupshup_invoice_sessions_in_rubles),0)\n                                                        ELSE sum(waba_balance_spending_sum_in_rubles) \n                                                        - coalesce(min(key_invoice_sessions_in_rubles),0) \n                                                        - coalesce(min(gupshup_invoice_sessions_in_rubles),0)\n                    END                                                                                                     AS gross_profit,\n\n                    CASE WHEN paid_month < '2024-01-01' THEN (sum(sum_in_rubles_spent_on_waba_balance_without_bad_balance) \n                                                        - coalesce(min(key_invoice_sessions_in_rubles),0) \n                                                        - coalesce(min(gupshup_invoice_sessions_in_rubles),0))\n                                                        / sum(sum_in_rubles_spent_on_waba_balance_without_bad_balance) * 100\n                                                        ELSE (sum(waba_balance_spending_sum_in_rubles) \n                                                        - coalesce(min(key_invoice_sessions_in_rubles),0) \n                                                        - coalesce(min(gupshup_invoice_sessions_in_rubles),0))\n                                                        /sum(waba_balance_spending_sum_in_rubles)*100 \n                    END                                                                                                     AS gross_profit_percent,\n\n                    CASE WHEN paid_month < '2024-01-01' THEN sum(sum_in_rubles_spent_on_waba_balance_without_bad_balance)\n                                                        - coalesce(min(key_invoice_sessions_in_rubles),0) \n                                                        - coalesce(min(gupshup_invoice_sessions_in_rubles),0) \n                                                        - coalesce(min(cast(uslovno_peremennye_raskhody_sessii as float64)),0)\n                                                        ELSE sum(waba_balance_spending_sum_in_rubles) \n                                                        - coalesce(min(key_invoice_sessions_in_rubles),0) \n                                                        - coalesce(min(gupshup_invoice_sessions_in_rubles),0) \n                                                        - coalesce(min(cast(uslovno_peremennye_raskhody_sessii as float64)),0) \n                    END                                                                                                     AS margin_profit,\n\n                    CASE WHEN paid_month < '2024-01-01' THEN (sum(sum_in_rubles_spent_on_waba_balance_without_bad_balance)\n                                                        - coalesce(min(key_invoice_sessions_in_rubles),0) \n                                                        - coalesce(min(gupshup_invoice_sessions_in_rubles),0) \n                                                        - coalesce(min(cast(uslovno_peremennye_raskhody_sessii as float64)),0))\n                                                        /sum(sum_in_rubles_spent_on_waba_balance_without_bad_balance)*100\n                                                        ELSE (sum(waba_balance_spending_sum_in_rubles) \n                                                        - coalesce(min(key_invoice_sessions_in_rubles),0) \n                                                        - coalesce(min(gupshup_invoice_sessions_in_rubles),0) \n                                                        - coalesce(min(cast(uslovno_peremennye_raskhody_sessii as float64)),0))\n                                                        /sum(waba_balance_spending_sum_in_rubles)*100 \n                    END                                                                                                     AS margin_percent\n            from joining_tables\n            GROUP BY 1 \n            )\n     \nSELECT paid_month,\n       metric_name,\n       metric_value\nFROM final,\n     UNNEST([\n        STRUCT('sum_in_rubles_spent_on_subscription_without_bad_balance_RUR' as metric_name, sum_in_rubles_spent_on_subscription_without_bad_balance_RUR as metric_value),\n        STRUCT('sum_in_rubles_spent_on_waba_balance_without_bad_balance_RUR', sum_in_rubles_spent_on_waba_balance_without_bad_balance_RUR),\n        STRUCT('wapi_transactions_in_rubles_with_bad_balance_RUR', wapi_transactions_in_rubles_with_bad_balance_RUR),\n        STRUCT('waba_balance_spending_sum_in_rubles_RUR', waba_balance_spending_sum_in_rubles_RUR),\n        STRUCT('waba_balance_spending_sum_in_rubles_paid_RUR', waba_balance_spending_sum_in_rubles_paid_RUR),\n        STRUCT('waba_balance_spending_sum_in_rubles_holded_RUR', waba_balance_spending_sum_in_rubles_holded_RUR),\n\n        STRUCT('sum_in_rubles_spent_on_subscription_without_bad_balance_KZT', sum_in_rubles_spent_on_subscription_without_bad_balance_KZT),\n        STRUCT('sum_in_rubles_spent_on_waba_balance_without_bad_balance_KZT', sum_in_rubles_spent_on_waba_balance_without_bad_balance_KZT),\n        STRUCT('wapi_transactions_in_rubles_with_bad_balance_KZT', wapi_transactions_in_rubles_with_bad_balance_KZT),\n        STRUCT('waba_balance_spending_sum_in_rubles_KZT', waba_balance_spending_sum_in_rubles_KZT),\n        STRUCT('waba_balance_spending_sum_in_rubles_paid_KZT', waba_balance_spending_sum_in_rubles_paid_KZT),\n        STRUCT('waba_balance_spending_sum_in_rubles_holded_KZT', waba_balance_spending_sum_in_rubles_holded_KZT),\n\n        STRUCT('sum_in_rubles_spent_on_subscription_without_bad_balance_EUR', sum_in_rubles_spent_on_subscription_without_bad_balance_EUR),\n        STRUCT('sum_in_rubles_spent_on_waba_balance_without_bad_balance_EUR', sum_in_rubles_spent_on_waba_balance_without_bad_balance_EUR),\n        STRUCT('wapi_transactions_in_rubles_with_bad_balance_EUR', wapi_transactions_in_rubles_with_bad_balance_EUR),\n        STRUCT('waba_balance_spending_sum_in_rubles_EUR', waba_balance_spending_sum_in_rubles_EUR),\n        STRUCT('waba_balance_spending_sum_in_rubles_paid_EUR', waba_balance_spending_sum_in_rubles_paid_EUR),\n        STRUCT('waba_balance_spending_sum_in_rubles_holded_EUR', waba_balance_spending_sum_in_rubles_holded_EUR),\n\n        STRUCT('sum_in_rubles_spent_on_subscription_without_bad_balance_USD', sum_in_rubles_spent_on_subscription_without_bad_balance_USD),\n        STRUCT('sum_in_rubles_spent_on_waba_balance_without_bad_balance_USD', sum_in_rubles_spent_on_waba_balance_without_bad_balance_USD),\n        STRUCT('wapi_transactions_in_rubles_with_bad_balance_USD', wapi_transactions_in_rubles_with_bad_balance_USD),\n        STRUCT('waba_balance_spending_sum_in_rubles_USD', waba_balance_spending_sum_in_rubles_USD),\n        STRUCT('waba_balance_spending_sum_in_rubles_paid_USD', waba_balance_spending_sum_in_rubles_paid_USD),\n        STRUCT('waba_balance_spending_sum_in_rubles_holded_USD', waba_balance_spending_sum_in_rubles_holded_USD),\n\n\n        STRUCT('original_sum_spent_on_subscription_without_bad_balance_RUR', original_sum_spent_on_subscription_without_bad_balance_RUR),\n        STRUCT('original_sum_spent_on_waba_balance_without_bad_balance_RUR', original_sum_spent_on_waba_balance_without_bad_balance_RUR),\n        STRUCT('wapi_transactions_with_bad_balance_RUR_original_sum', wapi_transactions_with_bad_balance_RUR_original_sum),\n        STRUCT('waba_balance_spendings_RUR_original_sum', waba_balance_spendings_RUR_original_sum),\n        STRUCT('waba_balance_spendings_paid_RUR_original_sum', waba_balance_spendings_paid_RUR_original_sum),\n        STRUCT('waba_balance_spendings_holded_RUR_original_sum', waba_balance_spendings_holded_RUR_original_sum),\n\n        STRUCT('original_sum_spent_on_subscription_without_bad_balance_KZT', original_sum_spent_on_subscription_without_bad_balance_KZT),\n        STRUCT('original_sum_spent_on_waba_balance_without_bad_balance_KZT', original_sum_spent_on_waba_balance_without_bad_balance_KZT),\n        STRUCT('wapi_transactions_with_bad_balance_KZT_original_sum', wapi_transactions_with_bad_balance_KZT_original_sum),\n        STRUCT('waba_balance_spendings_KZT_original_sum', waba_balance_spendings_KZT_original_sum),\n        STRUCT('waba_balance_spendings_paid_KZT_original_sum', waba_balance_spendings_paid_KZT_original_sum),\n        STRUCT('waba_balance_spendings_holded_KZT_original_sum', waba_balance_spendings_holded_KZT_original_sum),\n\n        STRUCT('original_sum_spent_on_subscription_without_bad_balance_EUR', original_sum_spent_on_subscription_without_bad_balance_EUR),\n        STRUCT('original_sum_spent_on_waba_balance_without_bad_balance_EUR', original_sum_spent_on_waba_balance_without_bad_balance_EUR),\n        STRUCT('wapi_transactions_with_bad_balance_EUR_original_sum', wapi_transactions_with_bad_balance_EUR_original_sum),\n        STRUCT('waba_balance_spendings_EUR_original_sum', waba_balance_spendings_EUR_original_sum),\n        STRUCT('waba_balance_spendings_paid_EUR_original_sum', waba_balance_spendings_paid_EUR_original_sum),\n        STRUCT('waba_balance_spendings_holded_EUR_original_sum', waba_balance_spendings_holded_EUR_original_sum),\n\n        STRUCT('original_sum_spent_on_subscription_without_bad_balance_USD', original_sum_spent_on_subscription_without_bad_balance_USD),\n        STRUCT('original_sum_spent_on_waba_balance_without_bad_balance_USD', original_sum_spent_on_waba_balance_without_bad_balance_USD),\n        STRUCT('wapi_transactions_with_bad_balance_USD_original_sum', wapi_transactions_with_bad_balance_USD_original_sum),\n        STRUCT('waba_balance_spendings_USD_original_sum', waba_balance_spendings_USD_original_sum),\n        STRUCT('waba_balance_spendings_paid_USD_original_sum', waba_balance_spendings_paid_USD_original_sum),\n        STRUCT('waba_balance_spendings_holded_USD_original_sum', waba_balance_spendings_holded_USD_original_sum),\n\n        STRUCT('sum_in_rubles_spent_on_subscription_without_bad_balance', sum_in_rubles_spent_on_subscription_without_bad_balance),\n        STRUCT('sum_in_rubles_spent_on_waba_balance_without_bad_balance', sum_in_rubles_spent_on_waba_balance_without_bad_balance),\n        STRUCT('wapi_transactions_in_rubles_with_bad_balance', wapi_transactions_in_rubles_with_bad_balance),\n        STRUCT('waba_balance_spending_sum_in_rubles', waba_balance_spending_sum_in_rubles),\n\n        STRUCT('waba_reward_sum_in_rubles', waba_reward_sum_in_rubles),\n        STRUCT('key_invoice_sessions_in_rubles', key_invoice_sessions_in_rubles),\n        STRUCT('gupshup_invoice_sessions_in_rubles', gupshup_invoice_sessions_in_rubles),\n        STRUCT('waba_balance_by_month_sum_in_rubles', waba_balance_by_month_sum_in_rubles),\n        STRUCT('balance_by_spending', balance_by_spending),\n        STRUCT('withdrawals_amount', withdrawals_amount),\n        STRUCT('uslovno_peremennye_raskhody_sessii_vyplaty_partneram', uslovno_peremennye_raskhody_sessii_vyplaty_partneram),\n        STRUCT('uslovno_peremennye_raskhody_sessii_komissiya_na_vyplaty_partneram', uslovno_peremennye_raskhody_sessii_komissiya_na_vyplaty_partneram),\n        STRUCT('uslovno_peremennye_raskhody_sessii_ekvairing', uslovno_peremennye_raskhody_sessii_ekvairing),\n        STRUCT('uslovno_peremennye_raskhody_sessii_komissiya_stripe_za_vyvod_usd', uslovno_peremennye_raskhody_sessii_komissiya_stripe_za_vyvod_usd),\n        STRUCT('uslovno_peremennye_raskhody_sessii_komissiya_za_oplatu_waba', uslovno_peremennye_raskhody_sessii_komissiya_za_oplatu_waba),\n        STRUCT('uslovno_peremennye_raskhody_sessii_raskhody_na_konversatsiyu_valyuty', uslovno_peremennye_raskhody_sessii_raskhody_na_konversatsiyu_valyuty),\n        STRUCT('uslovno_peremennye_raskhody_sessii', uslovno_peremennye_raskhody_sessii),\n        STRUCT('gross_profit', gross_profit),\n        STRUCT('gross_profit_percent', gross_profit_percent),\n        STRUCT('margin_profit', margin_profit),\n        STRUCT('margin_percent', margin_percent)\n     ]) AS metrics", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_waba_sessions_real_money`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:17.230341Z", "completed_at": "2025-05-21T12:31:17.279075Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.358522Z", "completed_at": "2025-05-21T12:31:17.358534Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2306523323059082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_features_rating", "compiled": true, "compiled_code": "with ratings_text as (\n  select account_id,\n  _ibk as occured_date,\n  rating,\n  text from `dwh-wazzup`.`dbt_nbespalov`.`stg_ratings` ratings\n  where rn=1\n\n),\n\nsegments as (\n    select account_id, \n    live_month,\n    avg_sum_in_rubles,\n    abcx_segment,\n    last_value(avg_sum_in_rubles ignore nulls) over (partition by account_id order by live_month asc rows between unbounded preceding and current row) as last_value_avg_sum_in_rubles,\n    last_value(abcx_segment ignore nulls) over (partition by account_id order by live_month asc rows between unbounded preceding and current row) as last_value_abcx_segment \n    from\n   `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_defining_abcx_segmentation_type_all_segments`\n),\n\nintegrations_by_date as (\n    select account_id,\n    last_value_integration_type_month,\n    date_trunc(date,month) as integration_month\n     from `dwh-wazzup`.`dbt_nbespalov`.`mart_integrations_by_month_paying_users`\n     group by 1,2,3\n),\n\n\nratings_and_segments as (\n\n\nSELECT coalesce(ratings_text.account_id, segments.account_id) as account_id,    -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n  occured_date,                                         -- \u0414\u0430\u0442\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f\n  rating,                                               -- \u0420\u0435\u0439\u0442\u0438\u043d\u0433\n  text ,                                                -- \u0422\u0435\u043a\u0441\u0442 \u043e\u0442\u0437\u044b\u0432\u0430\nlast_value(last_value_avg_sum_in_rubles ignore nulls) over (partition by coalesce(ratings_text.account_id, segments.account_id) order by occured_date asc rows between unbounded preceding and current row) as last_value_avg_sum_in_rubles,    -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\nlast_value(last_value_abcx_segment ignore nulls) over (partition by coalesce(ratings_text.account_id, segments.account_id) order by occured_date asc rows between unbounded preceding and current row) as last_value_abcx_segment,  -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e ABCX \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438\nprofile_info.account_segment_type,                      -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nprofile_info.phone,                                     -- \u0422\u0435\u043b\u0435\u0444\u043e\u043d, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\nprofile_info.email,                                     -- \u041f\u043e\u0447\u0442\u0430, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u0430\u044f \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\nprofile_info.currency,                                  -- \u0412\u0430\u043b\u044e\u0442\u0430\nprofile_info.russian_country_name,                      -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\nprofile_info.register_date,                             -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\nprofile_info.region_international,                      -- \u0420\u0435\u0433\u0438\u043e\u043d\nprofile_info.first_paid_subscription_date_with_1_more_day_duration, -- \u0414\u0430\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0431\u043e\u043b\u044c\u0448\u0435 1 \u0434\u043d\u044f\nprofile_info.account_language,                          -- \u042f\u0437\u044b\u043a \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nprofile_info.active_integration_name,                   -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\nsegments.avg_sum_in_rubles,                             -- \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\nsegments.abcx_segment,                                  -- ABCX \u0441\u0435\u0433\u043c\u0435\u043d\u0442\nintegrations_by_date.last_value_integration_type_month  -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u0438\u043f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\nFROM segments\n\nfull outer join ratings_text on segments.account_id=ratings_text.account_id \nand segments.live_month=date_trunc(ratings_text.occured_date,month)\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\non coalesce(ratings_text.account_id, segments.account_id)=profile_info.account_id\nleft join integrations_by_date\non integrations_by_date.account_id=coalesce(ratings_text.account_id, segments.account_id)\nand date_trunc(ratings_text.occured_date,month)=integrations_by_date.integration_month\nwhere not is_employee)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c \u0444\u0438\u0447\nselect * from ratings_and_segments\nwhere occured_date is not null", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_features_rating`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:17.234397Z", "completed_at": "2025-05-21T12:31:17.280892Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.398828Z", "completed_at": "2025-05-21T12:31:17.398840Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2678253650665283, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_partners_key_metrics_for_hypothesis", "compiled": true, "compiled_code": "with metrics as (\nselect 'daughters_count' as metric\n      union all\nselect      'c2'\n      union all\nselect      'discount_sum_in_rubles'\n      union all\nselect      'paid_channels_quantity'\n      union all\nselect      'paid_channels_wa_quantity'\n      union all\nselect      'paid_channels_instagram_quantity'\n\n      union all\nselect      'paid_channels_vk_quantity'\n      union all\nselect      'paid_channels_wa_sum'\n      union all\nselect      'paid_channels_instagram_sum'\n\n      union all\nselect      'left_daughters_count'\n      union all\nselect      'paid_channels_tgapi_quantity'\n      union all\nselect      'paid_channels_waba_quantity'\n      union all\nselect      'paid_channels_tgapi_sum'\n      union all\nselect      'paid_channels_waba_sum'\n      union all\nselect      'paid_channels_vk_sum'\n      union all\nselect      'c1'\n      union all\nselect      'reg_daughters_count'\n      union all\nselect      'paid_channels_avito_quantity'\n      union all\nselect      'paid_channels_telegram_quantity'\n      union all\nselect      'paid_channels_avito_sum'\n      union all\nselect      'paid_channels_telegram_sum'\n      union all\nselect      'earned_sum_referals'\n          \n)\n    ,generated_months as (\nselect distinct active_periods.partner_id,month ,metric,currency,account_language                       \nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_active_users_for_whom_partner_paid_count` active_periods\njoin `dwh-wazzup`.`dbt_nbespalov`.`stg_months` months on 1=1\njoin `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info on active_periods.partner_id = profile_info.account_id and is_employee is False and profile_info.type = 'partner'\njoin metrics on 1 = 1\nwhere month >= '2024-03-01'\n        and month <= '2024-12-01')\n , unpivot_monthly_plus_lost_data as (\nselect unpivot_monthly.*,\n        coalesce(lost_data.lost_revenue_value,lost_data_transports.lost_revenue_value) as lost_revenue,\n        lost_sum_referals\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_all_metrics_together_unpivot_period_type` unpivot_monthly\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_lost_revenue_due_to_churn` lost_data\n                                            on unpivot_monthly.partner_id = lost_data.partner_id\n                                                and unpivot_monthly.type = lost_data.type\n                                                and unpivot_monthly.date = lost_data.churn_month\n                                                and unpivot_monthly.metric = 'discount_sum_in_rubles'\n                                                and lost_data.lost_revenue_transport = 'lost_revenue'\n\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_lost_revenue_due_to_churn` lost_data_transports\n                                            on unpivot_monthly.partner_id = lost_data_transports.partner_id\n                                                and unpivot_monthly.type = lost_data_transports.type\n                                                and unpivot_monthly.date = lost_data_transports.churn_month\n                                                and replace(metric,'paid_channels_','') = replace(lost_data_transports.lost_revenue_transport,'lost_','')\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_referal_earnings` referal_earning \n                                                on unpivot_monthly.partner_id = referal_earning.partner_id\n                                                and unpivot_monthly.type = referal_earning.type\n                                                and unpivot_monthly.date = referal_earning.paid_month\n                                                and unpivot_monthly.metric = 'earned_sum_referals'\n\n\n\n\n),unpivot_all as (\n    select * \n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_all_metrics_together_unpivot_all_type`\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u043c\u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432. \u0417\u0430\u0434\u0430\u0447\u0430 - https://wazzup.planfix.ru/task/1136620\nselect months.partner_id,                       -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        currency,                               -- \u0412\u0430\u043b\u044e\u0442\u0430\n        account_language,                       -- \u044f\u0437\u044b\u043a \u041b\u041a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442\n        month as date,                          -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u0435\u0441\u044f\u0446\u0430, \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0435\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, current_date \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430 \u0432\u0435\u0441\u044c \u043f\u0435\u0440\u0438\u043e\u0434\n        months.metric,                          -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438. \u0421 \u043e\u0431\u0449\u0438\u043c \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043c\u043e\u0436\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0442\u0443\u0442 https://www.notion.so/1136620_-373abd994fbd4dafbbfc7f39a3332846\n        unpivot_monthly_plus_lost_data.value,   -- \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0432 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 (date)\n        coalesce(unpivot_monthly_plus_lost_data.type,unpivot_all.type) type,    -- monthly, \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0435\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, all - \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430 \u0432\u0435\u0441\u044c \u043f\u0435\u0440\u0438\u043e\u0434, null - \u043a\u043e\u0433\u0434\u0430 \u0443 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0431\u044b\u043b\u043e \u043d\u0443\u043b\u0435\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 value \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 metric\n        unpivot_all.value as all_value,         -- \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0437\u0430 \u0432\u0435\u0441\u044c \u043f\u0435\u0440\u0438\u043e\u0434\n        lost_revenue,                           -- \u041f\u043e\u0442\u0435\u0440\u044f\u043d\u043d\u0430\u044f \u0432\u044b\u0440\u0443\u0447\u043a\u0430. \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u043f\u043e\u0442\u0435\u0440\u044f\u043b \u0434\u0435\u043d\u0435\u0433 \u0438\u0437-\u0437\u0430 \u043e\u0442\u0432\u0430\u043b\u0430 (\u0441\u043c\u0435\u043d\u0438\u043b\u0441\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440, \u0434\u043e\u0447\u043a\u0430 \u0441\u0442\u0430\u043b\u0430 \u0441\u0430\u043c\u0430 \u043f\u043b\u0430\u0442\u0438\u0442\u044c, \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043b \u0431\u044b\u0442\u044c \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c) \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 - https://www.notion.so/1136620_-373abd994fbd4dafbbfc7f39a3332846\n        lost_sum_referals                       -- \u0421\u0443\u043c\u043c\u0430 \u0432\u044b\u0440\u0443\u0447\u043a\u0438, \u0435\u0441\u043b\u0438 \u0431\u044b \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u044d\u0442\u0438\u0445 \u0441\u0430\u043c \u0432\u0435\u043b \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0435\u0433\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430 \u0441\u043a\u0438\u0434\u043a\u0438. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 - https://www.notion.so/1136620_-373abd994fbd4dafbbfc7f39a3332846\nfrom generated_months months\nleft join unpivot_monthly_plus_lost_data \n                       on months.partner_id = unpivot_monthly_plus_lost_data.partner_id \n                          and months.month = unpivot_monthly_plus_lost_data.date\n                          and months.metric = unpivot_monthly_plus_lost_data.metric\nleft join unpivot_all on months.metric = unpivot_all.metric\n                          and months.partner_id = unpivot_all.partner_id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_partners_key_metrics_for_hypothesis`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:17.481619Z", "completed_at": "2025-05-21T12:31:17.489499Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.499081Z", "completed_at": "2025-05-21T12:31:17.499091Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.14502573013305664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_key_metrics", "compiled": true, "compiled_code": "select mart.*,  -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u043c\u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c\u0438 Wazzup\n        int_accounts_first_subscription_date_and_type.tariff as int_accounts_first_subscription_date_and_type__tariff,      -- \u0422\u0430\u0440\u0438\u0444 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        int_accounts_first_subscription_date_and_type.period as int_accounts_first_subscription_date_and_type__period,      -- \u041f\u0435\u0440\u0438\u043e\u0434 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        int_accounts_first_subscription_date_and_type.quantity as int_accounts_first_subscription_date_and_type__quantity,  -- \u041a\u043e\u043b-\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435\n        int_accounts_first_subscription_date_and_type.start_date,       -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        int_accounts_first_subscription_date_and_type.subscription_type as int_accounts_first_subscription_date_and_type_subscription__type,    -- \u0422\u0438\u043f \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        int_accounts_first_subscription_date_and_type.paid_at,          -- \u0414\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        int_accounts_first_subscription_date_and_type.subscription_id,  -- ID \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        \n        int_accounts_mobile_app_visited_at_first_month.account_Id as int_accounts_mobile_app_visited_at_first_month_account_id, -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0441\u0435\u0442\u0438\u043b \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n\n\n        int_channels_first_month_by_type.*except(account_Id),\n        int_channels_whatsapp_paid_added_first_month.*except(account_Id),       -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 WHATSAPP, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        int_channes_unique_chats_per_accounts_first_month.*except(account_Id),  -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u0432 \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        \n        int_payments_revenue_vs_subscriptions_first_month.full_tarif_sum_in_rubles as int_payments_revenue_vs_subscriptions_first_month__full_tarif_sum_in_rubles,  -- \u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0442\u0430\u0440\u0438\u0444\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n        int_payments_revenue_vs_subscriptions_first_month.sum_in_rubles as int_payments_revenue_vs_subscriptions_first_month__sum_in_rubles,    -- \u0421\u0443\u043c\u043c\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n\n        int_subscriptions_more_than_2_types_1_month_registration.*,\n        int_subscriptions_sum_in_first_month.sum_in_rubles_by_period as int_subscriptions_sum_in_first_month__sum_in_rubles_by_period,  -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        int_subscriptions_sum_in_first_month.sum_in_rubles as int_subscriptions_sum_in_first_month__sum_in_rubles,                      -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n       \n        int_subscriptions_sum_three_month.sum_in_rubles_by_period as int_subscriptions_sum_three_month__sum_in_rubles_by_period,        -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        int_subscriptions_sum_three_month.sum_in_rubles_by_period as int_subscriptions_sum_three_month__sum_in_rubles,                  -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u0430\u044f \u043d\u0430 \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n       \n        mart_key_product_metrics__conversion_c2_1_month.*except(account_Id),\n        mart_key_product_metrics__telegram_notification.*except(account_Id),\n        profile_info.currency       -- \u0412\u0430\u043b\u044e\u0442\u0430\n\nfrom `dwh-wazzup`.`dbt_nbespalov`.`mart_onboarding__accounts_integrations_subscriptions_channels_messages` mart\njoin `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info on mart.account_id = profile_info.account_id\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_first_subscription_date_and_type` on mart.account_Id = int_accounts_first_subscription_date_and_type.account_Id\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_mobile_app_visited_at_first_month` on mart.account_id = int_accounts_mobile_app_visited_at_first_month.account_id\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_channels_first_month_by_type` on mart.account_Id = int_channels_first_month_by_type.account_Id\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_channels_whatsapp_paid_added_first_month` on mart.account_id = int_channels_whatsapp_paid_added_first_month.account_id\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_channes_unique_chats_per_accounts_first_month` on mart.account_Id =  int_channes_unique_chats_per_accounts_first_month.account_Id\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_payments_revenue_vs_subscriptions_first_month` on mart.account_Id = int_payments_revenue_vs_subscriptions_first_month.account_Id\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_more_than_2_types_1_month_registration` on mart.account_Id = int_subscriptions_more_than_2_types_1_month_registration.accounts_with_2_or_more_subscription_type\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_sum_in_first_month` on mart.account_Id = int_subscriptions_sum_in_first_month.account_Id\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_sum_three_month` on mart.account_Id = int_subscriptions_sum_three_month.account_Id\nleft join `dwh-wazzup`.`dbt_nbespalov`.`mart_key_product_metrics__conversion_c2_1_month` on mart.account_Id = mart_key_product_metrics__conversion_c2_1_month.account_Id\nleft join `dwh-wazzup`.`dbt_nbespalov`.`mart_key_product_metrics__telegram_notification` on mart.account_id = mart_key_product_metrics__telegram_notification.account_id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_key_metrics`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:17.489994Z", "completed_at": "2025-05-21T12:31:17.501397Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.544259Z", "completed_at": "2025-05-21T12:31:17.544271Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.10612344741821289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_merics_dynamics", "compiled": true, "compiled_code": "with active_period_generation as (\n  select partner_id,\n        months.month,\n        count(distinct all_account_id) as all_account_id,\n        count(distinct active_account_id) as active_account_id\n  from `dwh-wazzup`.`dbt_nbespalov`.`stg_months` months\n  left join `dwh-wazzup`.`dbt_nbespalov`.`mart_partners_metrics_by_month`  partners on months.month >= partners.month\n  group by partner_id,\n            months.month\n), all_metrics as (\nSELECT \n  cast(active_period_generation.active_account_id as float64) active_account_id, --select * from dwh-wazzup.dbt_prod.mart_partners_metrics_by_month mart_partners_metrics_by_month\n  cast(active_period_generation.all_account_id as float64) all_account_id,\n  cast(count(distinct mart_partners_metrics_by_month.active_account_id) as float64) active_in_month,\n  mart_partners_metrics_by_month.month AS month,\n  mart_partners_metrics_by_month.partner_id AS partner_id,\n  mart_partners_metrics_by_month.sum_in_rubles AS sum_in_rubles,\n  mart_partners_metrics_by_month.sum_in_rubles_partner_paid AS sum_in_rubles_partner_paid,\n\n  cast(paid_channels_quantity as float64) paid_channels_quantity,\n  cast(paid_channels_waba_quantity as float64)  paid_channels_waba_quantity,\n  cast(paid_channels_tgapi_quantity as float64)  paid_channels_tgapi_quantity,\n  cast(paid_channels_wa_quantity as float64)  paid_channels_wa_quantity,\n  cast(paid_channels_telegram_quantity as float64)  paid_channels_telegram_quantity,\n  cast(paid_channels_instagram_quantity as float64)  paid_channels_instagram_quantity,\n  cast(paid_channels_avito_quantity as float64) paid_channels_avito_quantity,\n  cast(paid_channels_vk_quantity as float64) paid_channels_vk_quantity,\n  cast(paid_channels_viber_quantity as float64) paid_channels_viber_quantity,\n\n  coalesce(mart_partners_metrics_by_month.sum_in_rubles,0)  - coalesce(mart_partners_metrics_by_month.sum_in_rubles_partner_paid,0) as client_paid,\n  coalesce(cast(active_period_generation.all_account_id as float64),0) - coalesce(cast(active_period_generation.active_account_id as float64),0) as never_paid,\n  coalesce(cast(active_period_generation.active_account_id as float64),0) - coalesce(cast(count(distinct mart_partners_metrics_by_month.active_account_id) as float64),0) as stopped_paying,\n  SAFE_DIVIDE(cast(count(distinct mart_partners_metrics_by_month.active_account_id) as float64),cast(active_period_generation.all_account_id as float64)) as working_percent,\n  SAFE_DIVIDE(coalesce(cast(active_period_generation.active_account_id as float64),0) - coalesce(cast(count(distinct mart_partners_metrics_by_month.active_account_id) as float64),0),cast(active_period_generation.active_account_id as float64)) left_percent\nFROM `dwh-wazzup`.`dbt_nbespalov`.`mart_partners_metrics_by_month` mart_partners_metrics_by_month\nleft join active_period_generation on mart_partners_metrics_by_month.partner_id = active_period_generation.partner_id\n                                    and mart_partners_metrics_by_month.month = active_period_generation.month\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_channels_sold` channels on mart_partners_metrics_by_month.partner_id = channels.partner_id \n                                                                                        and mart_partners_metrics_by_month.month = channels.paid_month and channels.type = 'monthly'\ngroup by \n         active_period_generation.all_account_id,\n         active_period_generation.active_account_id,\n         mart_partners_metrics_by_month.month,\n         mart_partners_metrics_by_month.partner_id,\n         mart_partners_metrics_by_month.sum_in_rubles,\n         mart_partners_metrics_by_month.sum_in_rubles_partner_paid,\n         cast(paid_channels_quantity as float64),\n         cast(paid_channels_waba_quantity as float64),\n         cast(paid_channels_tgapi_quantity as float64),\n         cast(paid_channels_wa_quantity as float64),\n         cast(paid_channels_telegram_quantity as float64),\n         cast(paid_channels_instagram_quantity as float64),\n         cast(paid_channels_avito_quantity as float64),\n         cast(paid_channels_vk_quantity as float64),\n         cast(paid_channels_viber_quantity as float64)\n), metrics_names as (\n select \n           'active_account_id' as metric_name\n           union all\n select          'all_account_id'\n          union all\n select          'active_in_month'\n         union all\n select          'sum_in_rubles'\n         union all\n select          'sum_in_rubles_partner_paid'\n         union all\n select          'never_paid'\n        union all\n select          'stopped_paying'\n         union all\n select          'working_percent'\n         union all\n select          'left_percent'\n          union all\n select          'client_paid'\n          union all\n\n select      'paid_channels_quantity'\n      union all\nselect      'paid_channels_wa_quantity'\n      union all\nselect      'paid_channels_instagram_quantity'\n      union all\nselect      'paid_channels_vk_quantity'\n      union all\nselect      'paid_channels_tgapi_quantity'\n      union all\nselect      'paid_channels_waba_quantity'\n      union all\nselect      'paid_channels_avito_quantity'\n      union all\nselect      'paid_channels_telegram_quantity'\n      union all\nselect      'paid_channels_viber_quantity'\n\n),  \n    metric_names_and_partners as (\n    select distinct partner_id,\n                    type as partner_type,\n                    metric_name,\n                    month\n                    \n    from `dwh-wazzup`.`dbt_nbespalov`.`mart_partners_metrics_by_month` mart_partners_metrics_by_month\n    --left join top_100 on mart_partners_metrics_by_month.partner_id = top_100.account_id\n    join metrics_names on 1=1\n),unpivot_data as (\nselect *\nfrom all_metrics\nunpivot (value for metrics in (active_account_id,\n                                all_account_id,\n                                active_in_month,\n                                sum_in_rubles,\n                                sum_in_rubles_partner_paid,\n                                never_paid,\n                                stopped_paying,\n                                working_percent,\n                                left_percent,\n                                client_paid,\n                                paid_channels_quantity,\n                                paid_channels_waba_quantity,\n                                paid_channels_tgapi_quantity,\n                                paid_channels_wa_quantity,\n                                paid_channels_telegram_quantity,\n                                paid_channels_instagram_quantity,\n                                paid_channels_avito_quantity,\n                                paid_channels_vk_quantity,\n                                paid_channels_viber_quantity\n                                ) )),\n\nmart_partners_metrics_by_month_dynamics as (                      \nselect metric_names_and_partners.* except(metric_name),\n            metric_name as metrics,     -- \u041c\u0435\u0442\u0440\u0438\u043a\u0430\n                value                   -- \u0427\u0438\u0441\u043b\u043e \u043a \u043c\u0435\u0442\u0440\u0438\u043a\u0435\nfrom metric_names_and_partners\nleft join unpivot_data on metric_names_and_partners.partner_id = unpivot_data.partner_id\n                            and metric_name = metrics\n                            and metric_names_and_partners.month = unpivot_data.month)\nselect * from mart_partners_metrics_by_month_dynamics\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_merics_dynamics`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:17.493091Z", "completed_at": "2025-05-21T12:31:17.502241Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.545211Z", "completed_at": "2025-05-21T12:31:17.545220Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.14469623565673828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_creating_intervals_based_on_first_registration_period_active_time_intervals", "compiled": true, "compiled_code": "select *,\n    case when period_regs >= subscription_start \n          and period_regs <= subscription_end \n          and period_regs >= time_period\n          and period_regs <= till_time_period\n          then 'active'\n    end as type\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_creating_intervals_based_on_first_registration_period_time_intervals` time_intervals\n    JOIN UNNEST(GENERATE_DATE_ARRAY(time_period, till_time_period,interval 1 day)) period_regs\n    where period_regs <= last_subscription_end \n  /*  where ((subscription_start <= till_time_period) and (time_period <= subscription_end)\n            and period_regs >= time_period and period_regs < till_time_period)*/", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_creating_intervals_based_on_first_registration_period_active_time_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:17.495163Z", "completed_at": "2025-05-21T12:31:17.542670Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.545975Z", "completed_at": "2025-05-21T12:31:17.545985Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.18255925178527832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_with_tariff_and_transport", "compiled": true, "compiled_code": "\n\nwith\n    subscriptions_start_and_end_with_dates as (\n        select\n            *,\n            (\n                case\n                    when\n                        date_add(subscriptions.subscription_end, interval 1 day) = date\n                        and client_type_with_churn_period_20\n                        in ('did_not_come_back')\n                    then 'left'\n                    when\n                        date_add(subscriptions.subscription_end, interval 1 day) = date\n                        and client_type_with_churn_period_20\n                        in ('came_back_after_leaving_period')\n                    then 'came_back_after_leaving_period'\n                    when\n                        date = subscription_start\n                        and date_diff(subscription_start, last_subscription_end, day)\n                        > 20\n                    then 'returned'\n                    when client_type_with_churn_period_20 = 'may_become_active' \n                                     then 'may_become_active'\n                    else 'active'\n                end\n            ) as return_or_left_status, -- \u0421\u0442\u0430\u0442\u0443\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0434\u0435\u043d\u044c\n\n\n                \n          (\n                case\n                    when\n                        date_add(subscriptions.subscription_end, interval 1 day) = date\n                        and client_type_with_churn_period_5\n                        in ('did_not_come_back')\n                    then 'left'\n                    when\n                        date_add(subscriptions.subscription_end, interval 1 day) = date\n                        and client_type_with_churn_period_5\n                        in ('came_back_after_leaving_period')\n                    then 'came_back_after_leaving_period'\n                    when\n                        date = subscription_start\n                        and date_diff(subscription_start, last_subscription_end, day)\n                        > 5\n                    then 'returned'\n                    when client_type_with_churn_period_5= 'may_become_active' \n                                     then 'may_become_active'\n                    else 'active'\n                end\n            ) as return_or_left_status_with_churn_period_5   -- \u0421\u0442\u0430\u0442\u0443\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0434\u0435\u043d\u044c. churn_period \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0432 client_type_with_churn_period_n\n            ,\n                \n          (\n                case\n                    when\n                        date_add(subscriptions.subscription_end, interval 1 day) = date\n                        and client_type_with_churn_period_7\n                        in ('did_not_come_back')\n                    then 'left'\n                    when\n                        date_add(subscriptions.subscription_end, interval 1 day) = date\n                        and client_type_with_churn_period_7\n                        in ('came_back_after_leaving_period')\n                    then 'came_back_after_leaving_period'\n                    when\n                        date = subscription_start\n                        and date_diff(subscription_start, last_subscription_end, day)\n                        > 7\n                    then 'returned'\n                    when client_type_with_churn_period_7= 'may_become_active' \n                                     then 'may_become_active'\n                    else 'active'\n                end\n            ) as return_or_left_status_with_churn_period_7   -- \u0421\u0442\u0430\u0442\u0443\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0434\u0435\u043d\u044c. churn_period \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0432 client_type_with_churn_period_n\n            ,\n                \n          (\n                case\n                    when\n                        date_add(subscriptions.subscription_end, interval 1 day) = date\n                        and client_type_with_churn_period_90\n                        in ('did_not_come_back')\n                    then 'left'\n                    when\n                        date_add(subscriptions.subscription_end, interval 1 day) = date\n                        and client_type_with_churn_period_90\n                        in ('came_back_after_leaving_period')\n                    then 'came_back_after_leaving_period'\n                    when\n                        date = subscription_start\n                        and date_diff(subscription_start, last_subscription_end, day)\n                        > 90\n                    then 'returned'\n                    when client_type_with_churn_period_90= 'may_become_active' \n                                     then 'may_become_active'\n                    else 'active'\n                end\n            ) as return_or_left_status_with_churn_period_90   -- \u0421\u0442\u0430\u0442\u0443\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0434\u0435\u043d\u044c. churn_period \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0432 client_type_with_churn_period_n\n            \n                \n        from\n            `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_left_and_returned_date_with_account_type_and_partner_type_with_tariff_and_transport` subscriptions\n        inner join\n            `dwh-wazzup`.`analytics_tech`.`days`\n            on subscriptions.subscription_start <= days.date\n            and date_add(subscriptions.subscription_end, interval 1 day) >= days.date\n    )\n,int_accounts_who_paid__defining_abcx_segmentation_type as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_defining_abcx_segmentation_type`\n),\nprofile_info as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0438\u0441\u0442\u043e\u0440\u0438\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439 \u0438 \u0431\u0435\u0437 \u0443\u0447\u0435\u0442\u0430 \u0442\u0440\u0438\u0430\u043b\u043e\u0432. \u041d\u0443\u0436\u043d\u0430 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043e\u0442\u0432\u0430\u043b\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u0438 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0445\u0441\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043f\u0435\u0440\u0438\u043e\u0434\u0435\n select subscriptions_start_and_end_with_dates.*,\n       abcx_segment,    -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043d\u0430\u0448\u0435\u0439 abcdx \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 https://www.notion.so/ABCX-7b8f5f7d3e0b470e83fe632828d64821\n       min(subscription_start) over (partition by subscriptions_start_and_end_with_dates.account_id, subscriptions_start_and_end_with_dates.tariff, subscriptions_start_and_end_with_dates.transport) as min_subscription_start_month -- \u043c\u0435\u0441\u044f\u0446, \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437 \u043e\u043f\u043b\u0430\u0442\u0438\u043b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443\n  from subscriptions_start_and_end_with_dates\n  left join int_accounts_who_paid__defining_abcx_segmentation_type \n                                                on subscriptions_start_and_end_with_dates.account_id = int_accounts_who_paid__defining_abcx_segmentation_type.account_id\n                                                and date_trunc(subscriptions_start_and_end_with_dates.date,month)  =  int_accounts_who_paid__defining_abcx_segmentation_type.live_month\n  \nwhere not exists (\n    select profile_info.account_id\n    from profile_info \n    where   subscriptions_start_and_end_with_dates.account_Id = profile_info.account_Id\n            and profile_info.is_employee \n)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_with_tariff_and_transport`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:17.499810Z", "completed_at": "2025-05-21T12:31:17.544838Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.585990Z", "completed_at": "2025-05-21T12:31:17.586001Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.21596479415893555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_creating_intervals_based_on_first_subscription_period_active_time_intervals", "compiled": true, "compiled_code": "select *,\n    case when period_subsc >= subscription_start \n          and period_subsc <= subscription_end \n          and period_subsc >= time_period\n          and period_subsc <= till_time_period\n          then 'active'\n    end as type\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_creating_intervals_based_on_first_subscription_period_time_intervals` time_intervals\n    JOIN UNNEST(GENERATE_DATE_ARRAY(time_period, till_time_period,interval 1 day)) period_subsc\n\n    where ((subscription_start <= till_time_period) and (time_period <= subscription_end)\n            and period_subsc >= time_period and period_subsc < till_time_period)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_creating_intervals_based_on_first_subscription_period_active_time_intervals`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:17.502748Z", "completed_at": "2025-05-21T12:31:17.546494Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.664354Z", "completed_at": "2025-05-21T12:31:17.664365Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.25518298149108887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_plan_vs_fact_metrics", "compiled": true, "compiled_code": "with plan_data as (\n  SELECT (case when segment='\u041a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b' then 'final_client'\n  when segment='\u041e\u0444.\u043f\u0430\u0440\u0442\u043d\u0435\u0440\u044b' then 'of-partner'\n  when segment='\u0422\u0435\u0445.\u043f\u0430\u0440\u0442\u043d\u0435\u0440\u044b' then 'tech-partner'\n  end) as segment,\n  date,\n  revenue,\n  active_clients,\n  registrations,\n  waba_rur,\n  waba_global\n  FROM `dwh-wazzup.1066401_wazzup_plan_vs_fact_metrics.wazzup_plan_fact_metrics_from_google_sheet` \n),\n\nforecasts_registrations_by_months as (\n    select *,\n    'final_client' as segment\n     from `dwh-wazzup`.`dbt_nbespalov`.`int_forecasts_registrations_by_months`\n     where registration_month<=date_trunc(current_date(), month)\n),\n\nforecast_payments_by_months as (\n    select  *,\n    'final_client' as segment\n    from `dwh-wazzup.1066401_wazzup_plan_vs_fact_metrics.forecast_revenue_with_old_and_new_users_features`\n)\n    -- \u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u043f\u043b\u0430\u043d vs \u0444\u0430\u043a\u0442\n\nSELECT plan_data.segment,                                                           -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442\nplan_data.date,                                                                     -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0435\u043c\u0430\u044f \u0434\u0430\u0442\u0430\nplan_data.revenue as revenue_without_waba_plan,                                     -- \u0412\u044b\u0440\u0443\u0447\u043a\u0430 \u0431\u0435\u0437 WABA \u043f\u043b\u0430\u043d\nplan_data.active_clients as active_clients_plan,                                    -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043b\u0430\u043d\nplan_data.registrations as registrations_plan,                                      -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439 \u043f\u043b\u0430\u043d\nforecasts_registrations_by_months.registration_by_month_forecasted,                 -- \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439\nforecasts_registrations_by_months.registrations_by_month_lower_bound_forecasted,    -- \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439 \u043f\u043e \u043d\u0438\u0436\u043d\u0435\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u0435\nforecasts_registrations_by_months.registrations_by_month_upper_bound_forecasted,    -- \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439 \u043f\u043e \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u0435\nforecast_payments_by_months.sum_in_rubles_forecasted,                               -- \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c\u0430\u044f \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\nrevenue_without_waba_fact,                                                          -- \u0412\u044b\u0440\u0443\u0447\u043a\u0430 \u0431\u0435\u0437 WABA \u0444\u0430\u043a\u0442\nregistration_by_month_fact,                                                         -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439 \u0444\u0430\u043a\u0442\nfinal_clients_by_month_fact as active_clients_by_month_fact,                        -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0444\u0430\u043a\u0442\nrevenue_waba_fact,                                                                  -- \u0412\u044b\u0440\u0443\u0447\u043a\u0430 \u0437\u0430 WABA \u0444\u0430\u043a\u0442\nwaba_rur,                                                                           -- \u0412\u044b\u0440\u0443\u0447\u043a\u0430 \u0437\u0430 WABA \u0441 \u0440\u0443 \u0440\u044b\u043d\u043a\u0430\nwaba_global                                                                         -- \u0412\u044b\u0440\u0443\u0447\u043a\u0430 \u0437\u0430 WABA \u0441 \u0437\u0430\u0440\u0443\u0431\u0435\u0436\u043a\u0438\nFROM plan_data\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_revenue_aggregated_by_month_and_segment` revenue_fact_data on plan_data.date=revenue_fact_data.date and plan_data.segment=revenue_fact_data.segment\nleft join dwh-wazzup.1066401_wazzup_plan_vs_fact_metrics.registration_aggregated_by_month_fact registrations_fact_data on registrations_fact_data.date=plan_data.date and registrations_fact_data.segment=plan_data.segment\nleft join  dwh-wazzup.1066401_wazzup_plan_vs_fact_metrics.1066401_active_accounts_by_month_final_clients active_accounts\non active_accounts.date=plan_data.date and active_accounts.segment=plan_data.segment\nleft join forecasts_registrations_by_months  on forecasts_registrations_by_months.registration_month=plan_data.date \nand forecasts_registrations_by_months.segment = plan_data.segment\nleft join forecast_payments_by_months \non forecast_payments_by_months.segment=plan_data.segment \nand forecast_payments_by_months.paid_month=plan_data.date", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_plan_vs_fact_metrics`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:17.748632Z", "completed_at": "2025-05-21T12:31:17.758849Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.765310Z", "completed_at": "2025-05-21T12:31:17.765320Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.14441728591918945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_who_paid_for_client_subscription_with_sum", "compiled": true, "compiled_code": "WITH last_datetime_client AS (    -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n  SELECT\n    bp.account_id,                        -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    MAX(su.created_at) AS last_paid_at,   -- \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0432 \u0432\u0440\u0435\u043c\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates` su\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` bp ON su.subscription_id = bp.guid\n  WHERE su.state = 'activated'            -- \u0422\u043e\u043b\u044c\u043a\u043e \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044fA\n  GROUP BY 1\n),\n\nlast_pay_month_client AS (   -- CTE \u0441 \u043c\u0435\u0441\u044f\u0446\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0432\u044b\u0440\u0443\u0447\u043a\u0438 \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443\n  SELECT\n    account_id,                                           -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    DATE_TRUNC(MAX(su.created_at), month) AS max_month    -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates` su\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` bp ON su.subscription_id = bp.guid\n  WHERE su.state = 'activated'                            -- \u0422\u043e\u043b\u044c\u043a\u043e \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n  GROUP BY 1 \n),\n\nrevenue_last_month_client AS (\n  SELECT\n    bp.account_id,                                      -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    DATE_TRUNC((su.created_at), month) AS last_month,   -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n    SUM(COALESCE(su.sum * cor_rate, su.sum)) AS revenue_last_month                   -- \u0412\u044b\u0440\u0443\u0447\u043a\u0430\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates` su\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` bp ON su.subscription_id = bp.guid\n  JOIN last_pay_month_client lpm ON lpm.account_id = bp.account_id AND lpm.max_month = DATE_TRUNC((su.created_at), month)\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`mart_revenue_by_segments` rbs ON rbs.account_id = lpm.account_id AND rbs.paid_date = su.created_date\n  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_exchangeRates` er ON er.data = su.created_date AND er.currency = su.currency AND nominal = 'RUR'\n  WHERE rbs.segment_type IN ('of-partner-client', 'tech-partner-client')  -- \u0411\u0435\u0440\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432\n  AND su.state = 'activated'             -- \u0422\u043e\u043b\u044c\u043a\u043e \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\n  GROUP BY 1, 2\n),\n\nclient_paid AS (                  -- \u0417\u0434\u0435\u0441\u044c \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u0435\u0439\u0441, \u043a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043f\u043b\u0430\u0442\u0438\u043b \u0441\u0430\u043c\n  SELECT \n    ldc.*, \n    su.sum        AS amount_paid, -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    su.currency,                  -- \u0412\u0430\u043b\u044e\u0442\u0430\n    'client_paid' AS who_paid     -- \u041a\u0442\u043e \u043f\u043b\u0430\u0442\u0438\u043b\n  FROM last_datetime_client ldc\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` bp ON bp.account_id = ldc.account_id\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_subscriptionUpdates` su ON su.created_at = ldc.last_paid_at AND bp.account_id = ldc.account_id\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`mart_revenue_by_segments` rbs ON rbs.account_id = ldc.account_id AND rbs.paid_date = su.created_date\n  WHERE rbs.segment_type IN ('of-partner-client', 'tech-partner-client')  -- \u0411\u0435\u0440\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432\n),\n\nlast_datetime_partner AS (  -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u0443 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  SELECT\n    subscription_owner        AS account_id,    -- \u0411\u0435\u0440\u0435\u043c \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    DATETIME(MAX(occured_at)) AS last_paid_at   -- \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate`\n  WHERE account_id != subscription_owner        -- \u041e\u0442\u0434\u0435\u043b\u044f\u0435\u043c \u043a\u0435\u0439\u0441\u044b, \u043a\u043e\u0433\u0434\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u043f\u043b\u0430\u0442\u0438\u0442 \u0437\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    AND object = 'subscription'                 -- \u0422\u043e\u043b\u044c\u043a\u043e \u043e\u043f\u043b\u0430\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a\n    AND subscription_update_id is not null      -- \u041f\u0435\u0440\u0435\u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u0447\u043a\u0430\n  GROUP BY 1\n),\n\nlast_pay_month_partner AS (   -- CTE \u0441 \u043c\u0435\u0441\u044f\u0446\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0432\u044b\u0440\u0443\u0447\u043a\u0438 \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443\n  SELECT\n    subscription_owner        AS account_id,           -- \u0411\u0435\u0440\u0435\u043c \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    DATE_TRUNC(MAX(occured_at), month) AS max_month    -- \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate`\n  WHERE account_id != subscription_owner        -- \u041e\u0442\u0434\u0435\u043b\u044f\u0435\u043c \u043a\u0435\u0439\u0441\u044b, \u043a\u043e\u0433\u0434\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u043f\u043b\u0430\u0442\u0438\u0442 \u0437\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    AND object = 'subscription'                 -- \u0422\u043e\u043b\u044c\u043a\u043e \u043e\u043f\u043b\u0430\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a\n    AND subscription_update_id is not null      -- \u041f\u0435\u0440\u0435\u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u0447\u043a\u0430\n  GROUP BY 1 \n),\n\nrevenue_last_month_partner AS (\n  SELECT\n    ba.subscription_owner                        AS account_id,         -- \u0411\u0435\u0440\u0435\u043c \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    DATE_TRUNC((DATETIME(ba.occured_at)), month) AS last_month,         -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n    SUM(COALESCE(ba.sum * cor_rate, ba.sum))     AS revenue_last_month  -- \u0412\u044b\u0440\u0443\u0447\u043a\u0430\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba\n  JOIN last_pay_month_partner lpp ON lpp.account_id = ba.subscription_owner AND lpp.max_month = DATE_TRUNC((occured_at), month)\n  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_exchangeRates` er ON er.data = DATETIME(ba.occured_date) AND er.currency = ba.currency AND nominal = 'RUR'\n  WHERE ba.account_id != subscription_owner     -- \u041e\u0442\u0434\u0435\u043b\u044f\u0435\u043c \u043a\u0435\u0439\u0441\u044b, \u043a\u043e\u0433\u0434\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u043f\u043b\u0430\u0442\u0438\u0442 \u0437\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    AND object = 'subscription'                 -- \u0422\u043e\u043b\u044c\u043a\u043e \u043e\u043f\u043b\u0430\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a\n    AND subscription_update_id is not null      -- \u041f\u0435\u0440\u0435\u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u0447\u043a\u0430\n  GROUP BY 1, 2\n),\n\npartner_paid AS (         -- \u0417\u0434\u0435\u0441\u044c \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u0435\u0439\u0441, \u043a\u043e\u0433\u0434\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u043f\u043b\u0430\u0442\u0438\u043b \u0437\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n  SELECT \n    ldp.*,\n    ba.sum         AS amount_paid,   -- \u0421\u0443\u043c\u043c\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    currency,                        -- \u0412\u0430\u043b\u044e\u0442\u0430\n    'partner_paid' AS who_paid       -- \u041a\u0442\u043e \u043f\u043b\u0430\u0442\u0438\u043b\n  FROM last_datetime_partner ldp\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba ON ldp.last_paid_at = DATETIME(ba.occured_at) AND ldp.account_id = ba.subscription_owner\n  WHERE ba.account_id != ba.subscription_owner  -- \u041e\u0442\u0434\u0435\u043b\u044f\u0435\u043c \u043a\u0435\u0439\u0441\u044b, \u043a\u043e\u0433\u0434\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u043f\u043b\u0430\u0442\u0438\u0442 \u0437\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    AND object = 'subscription'                 -- \u0422\u043e\u043b\u044c\u043a\u043e \u043e\u043f\u043b\u0430\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a\n    AND subscription_update_id is not null      -- \u041f\u0435\u0440\u0435\u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043e\u0447\u043a\u0430\n),\n\nunion_data AS (   -- \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0442\u0430\u0431\u043b\u0438\u0446\n  SELECT *\n  FROM client_paid\n\n  UNION ALL\n\n  SELECT *\n  FROM partner_paid\n),\n\nagg_data AS ( -- \u0411\u0435\u0440\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443\n  SELECT\n    account_id,\n    MAX(last_paid_at) AS last_paid_at\n  FROM union_data\n  GROUP BY 1\n),\n\nunion_revenue_data AS (\n  SELECT *\n  FROM revenue_last_month_client\n\n  UNION ALL\n\n  SELECT *\n  FROM revenue_last_month_partner\n),\n\nagg_revenue_data AS (\n  SELECT\n    account_id,\n    MAX(last_month) AS last_month\n  FROM union_revenue_data\n  GROUP BY 1\n)\n\nSELECT DISTINCT\n  ad.account_id,                              -- \u041d\u043e\u043c\u0435\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n  DATE(ad.last_paid_at) AS last_paid_date,    -- \u0414\u0430\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043e\u043f\u043b\u0430\u0442\u044b\n  amount_paid,                                -- \u0421\u0443\u043c\u043c\u0430\n  currency,                                   -- \u0412\u0430\u043b\u044e\u0442\u0430\n  who_paid,                                   -- \u041a\u0442\u043e \u043f\u043b\u0430\u0442\u0438\u043b?\n  COALESCE(rlmc.revenue_last_month, 0) + COALESCE(rlmp.revenue_last_month, 0) AS last_sum_in_month_with_active_subs   -- \u0412\u044b\u0440\u0443\u0447\u043a\u0430 \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\nFROM agg_data ad\nJOIN agg_revenue_data ard ON ard.account_id = ad.account_id\nJOIN union_data ud ON ud.account_id = ad.account_id AND ud.last_paid_at = ad.last_paid_at\nLEFT JOIN revenue_last_month_client rlmc ON rlmc.account_id = ad.account_id AND rlmc.last_month = ard.last_month\nLEFT JOIN revenue_last_month_partner rlmp ON rlmp.account_id = ad.account_id AND rlmp.last_month = ard.last_month", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_for_client_subscription_with_sum`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:17.756252Z", "completed_at": "2025-05-21T12:31:17.768340Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.810609Z", "completed_at": "2025-05-21T12:31:17.810629Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.10646367073059082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_partners_revenue_first_month", "compiled": true, "compiled_code": "WITH first_pay_month AS (   -- CTE \u0441 \u043c\u0435\u0441\u044f\u0446\u0435\u043c \u043f\u0435\u0440\u0432\u043e\u0439 \u0432\u044b\u0440\u0443\u0447\u043a\u0438 \u043f\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443\n  SELECT\n    account_id,                                           -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    DATE_TRUNC(MIN(paid_date), month) AS min_month        -- \u041f\u0435\u0440\u0432\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`int_payments_revenue_with_waba`\n  WHERE segment_type = 'of-partner'\n  GROUP BY 1\n),\n\nsum_first_month AS (        -- CTE \u0441 \u0441\u0443\u043c\u043c\u043e\u0439 \u0432\u044b\u0440\u0443\u0447\u043a\u0438 \u043f\u043e \u043f\u0435\u0440\u0432\u043e\u043c\u0443 \u043c\u0435\u0441\u044f\u0446\u0443 \u043e\u043f\u043b\u0430\u0442\u044b\n  SELECT\n    rbs.account_id,                              -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    paid_month,                                  -- \u041c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n    SUM(sum_in_rubles) AS revenue_first_month    -- \u0412\u044b\u0440\u0443\u0447\u043a\u0430\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`mart_revenue_by_segments` rbs\n  JOIN first_pay_month fpm ON fpm.account_id = rbs.account_id AND fpm.min_month = paid_month\n  GROUP BY 1, 2\n),\n\nchild_first_month AS (      -- CTE \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0434\u043e\u0447\u0435\u043a \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n  SELECT\n    partner_id,                                     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    month,                                          -- \u041c\u0435\u0441\u044f\u0446\n    COUNT(DISTINCT all_account_id) AS all_child_count,   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u0447\u0435\u043a\n    COUNT(DISTINCT active_account_id) AS active_child_count\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`mart_partners_metrics_by_month` mbm\n  JOIN first_pay_month fpm ON fpm.account_id = mbm.partner_id AND mbm.month = fpm.min_month\n  AND type = 'partner'                              -- \u041c\u044b \u0431\u0435\u0440\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432\n  GROUP BY 1, 2\n)\n\nSELECT DISTINCT\n  mbm.partner_id,                 -- \u041d\u043e\u043c\u0435\u0440 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  russianName,                    -- \u0421\u0442\u0440\u0430\u043d\u0430\n  currency,                       -- \u0412\u0430\u043b\u044e\u0442\u0430\n  partner_register_date,          -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  min_month,                      -- \u041f\u0435\u0440\u0432\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 \u043e\u043f\u043b\u0430\u0442\u044b\n  revenue_first_month,            -- \u0412\u044b\u0440\u0443\u0447\u043a\u0430 \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435\n  all_child_count,                     -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u0447\u0435\u043a \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435\n  active_child_count\nFROM `dwh-wazzup`.`dbt_nbespalov`.`mart_partners_metrics_by_month` mbm\nJOIN first_pay_month fpm ON fpm.account_id = mbm.partner_id\nJOIN sum_first_month sfm ON sfm.account_id = mbm.partner_id\nJOIN child_first_month cfm ON cfm.partner_id = mbm.partner_id\nORDER BY 5, 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_partners_revenue_first_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:17.759850Z", "completed_at": "2025-05-21T12:31:17.808690Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.811772Z", "completed_at": "2025-05-21T12:31:17.811781Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.14481234550476074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_left_accounts_that_returned", "compiled": true, "compiled_code": "with finding_next_status_of_account as \n        (select account_id,\n                  subscription_start,\n                  subscription_end,\n                  date,\n                  data_otvala,\n                  last_subscription_end,\n                  client_type_with_churn_period_5,\n                  account_type,\n                  account_type_partner_type,\n                  return_or_left_status_with_churn_period_5,\n                  lead(return_or_left_status_with_churn_period_5) over (partition by account_id order by date) next_status,\n                  lead(date) over (partition by account_id order by date) next_status_date\nfrom `dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts_with_partner_and_account_type_with_dates`\nwhere return_or_left_status_with_churn_period_5 in ('left','came_back_after_leaving_period','returned')\n),\n affiliates as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_affiliates`\n),   profile_info as (\n        select *\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n        ),period_numbers as (\nselect finding_next_status_of_account.account_id,       -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n       subscription_start,                              -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n       subscription_end,                                -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n       data_otvala,                                     -- \u0414\u0430\u0442\u0430 \u043e\u0442\u0432\u0430\u043b\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n       last_subscription_end,                           -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n                  account_type,                         -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n                  account_type_partner_type,            -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0441 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043e\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n       return_or_left_status_with_churn_period_5,       -- \u0421\u0442\u0430\u0442\u0443\u0441 \u0443\u0445\u043e\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0441 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u043c churn 5\n       case when next_status is distinct from 'returned' then null else next_status end as next_status,             -- \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0443\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n       case when next_status is distinct from 'returned' then null else next_status_date end as next_status_date,   -- \u0414\u0430\u0442\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0430\n       date_diff(   case when next_status is distinct from 'returned' then null else next_status_date end,\n                    data_otvala,\n                    day   \n                    ) time_period_number,\n        profile_info.currency               -- \u0412\u0430\u043b\u044e\u0442\u0430\nfrom finding_next_status_of_account\njoin  profile_info on finding_next_status_of_account.account_id = profile_info.account_Id and is_employee is false\nwhere next_status is distinct from 'came_back_after_leaving_period'\n                        and return_or_left_status_with_churn_period_5 in ('left','came_back_after_leaving_period')\n        and account_type is distinct from 'partner-demo'\n        and account_type is distinct from 'employee'\n        ),\nleft_accounts_that_returned as (\nselect *except(time_period_number),\ncast(FLOOR(SAFE_DIVIDE(time_period_number,7)) as int) time_period_number    -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043e\u0442\u0432\u0430\u043b\u043e\u043c \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u043e\u043c\nfrom period_numbers )\n,cum_money as (\n\n                  select account_id,\n                        live_month,\n                        account_segment_type,\n                     segment_type_groupped,\n                     Last_value(avg_sum_in_rubles IGNORE NULLS) over (partition by account_id order by live_month rows between unbounded preceding and current row) avg_sum_in_rubles,\n                    last_value(abcx_segment IGNORE NULLS) over (partition by account_id order by live_month rows between unbounded preceding and current row) abcx_segment,\n                  sum(avg_sum_in_rubles) over (partition by account_id order by live_month) cum_sum_up_to_live_month\n                  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_defining_abcx_segmentation_type_all_segments`\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0443\u0448\u0435\u0434\u0448\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0435\u0440\u043d\u0443\u043b\u0438\u0441\u044c\nselect left_.*,\n        coalesce(cum_money.abcx_segment,cum_money_returned.abcx_segment) abcx_segment,                          -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e ABCX \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438\n      coalesce(cum_money.segment_type_groupped,cum_money_returned.segment_type_groupped) segment_type_groupped, -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n        cum_money.cum_sum_up_to_live_month as cum_left,                     -- \u0441\u0443\u043c\u043c\u0430 \u0434\u0435\u043d\u0435\u0433 \u0443\u0448\u0435\u0434\u0448\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n       cum_money.avg_sum_in_rubles as avg_sum_in_rubles_left,               -- \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0441\u0443\u043c\u043c\u0430 \u0443\u0448\u0435\u0434\u0448\u0438\u0445\n      cum_money_returned.cum_sum_up_to_live_month as cum_returned,          -- \u0441\u0443\u043c\u043c\u0430 \u0434\u0435\u043d\u0435\u0433 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0445\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n      cum_money_returned.avg_sum_in_rubles as avg_sum_in_rubles_returned    -- \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0441\u0443\u043c\u043c\u0430 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0445\u0441\u044f\n\nfrom  left_accounts_that_returned left_ \nleft join  cum_money\n                                                    on cum_money.account_id = left_.account_id\n                                                     and cum_money.live_month = case when data_otvala = date_trunc(data_otvala,month)\n                                                                                                then date_trunc(date_add(data_otvala,interval -1 day),month)\n                                                                                    when subscription_end = date_trunc(subscription_end,month) \n                                                                                                then  date_trunc(date_add(subscription_end,interval -1 day),month)\n                                                                                                      else date_trunc(data_otvala,month)\n                                                                                                end\n                                                    \nleft join cum_money as cum_money_returned on cum_money_returned.account_id = left_.account_id\n                                                    and cum_money_returned.live_month = date_trunc(next_status_date,month)\nwhere left_.account_id != 58110403\n        and coalesce(cum_money.account_segment_type,cum_money_returned.account_segment_type) not in ('\u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0451\u0440','\u043e\u0431\u044b\u0447\u043d\u044b\u0439 \u0442\u0435\u0445\u043f\u0430\u0440\u0442\u043d\u0435\u0440')", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_left_accounts_that_returned`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:17.762476Z", "completed_at": "2025-05-21T12:31:17.809897Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.813277Z", "completed_at": "2025-05-21T12:31:17.813285Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.18386054039001465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_left_accounts_with_payments_only_with_segment_type", "compiled": true, "compiled_code": "with left_and_returned_accounts as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts_with_partner_and_account_type_with_dates`\n),\n\nsegments_by_date as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`mart_active_accounts_by_days_by_segment`\n)\n    -- \u041f\u0435\u0440\u0438\u043e\u0434\u044b \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u0434\u043d\u044f\u043c\nselect left_and_returned_accounts.*, \nsegments_by_date.segment,   -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442\nrussian_country_name,       -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\nregion_international        -- \u0420\u0435\u0433\u0438\u043e\u043d\nfrom left_and_returned_accounts \nleft join segments_by_date \non segments_by_date.date=left_and_returned_accounts.date \nand segments_by_date.account_id=left_and_returned_accounts.account_id\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info \non profile_info.account_id=left_and_returned_accounts.account_id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_left_accounts_with_payments_only_with_segment_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:17.765858Z", "completed_at": "2025-05-21T12:31:17.811260Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.851653Z", "completed_at": "2025-05-21T12:31:17.851663Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.21645236015319824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_ltv_info", "compiled": true, "compiled_code": "with calculating_lt as (\n                  select account_id,\n                          live_month,       -- \u041c\u0435\u0441\u044f\u0446 \u0436\u0438\u0437\u043d\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n                          sum(revenue_amount) over (partition by account_id order by live_month) cum_sum_up_to_live_month,  -- \u0421\u0443\u043c\u043c\u0430 \u0434\u0435\u043d\u0435\u0433 \u0432 \u043c\u0435\u0441\u044f\u0446 \u0436\u0438\u0437\u043d\u0438\n                          date_diff(live_month,date_trunc(first_subscription_start,month),month) LT         -- lifetime \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n                  from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_users_living_time_with_revenue_periods` revenue_periods \n                        ),\nsegments as (\n    select   \n        account_id,\n        date segment_date,\n         case    when segment ='standart_without_partner' then '\u041a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442'\n                 when segment = 'of_partner_child_child_paid' then '\u041a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442'\n\n                 when segment = 'tech_partner_child__tech_partner_paid' then '\u0422\u0435\u0445. \u043f\u0430\u0440\u0442\u043d\u0435\u0440'\n                 when segment = 'tech_partner_child__child_paid' then '\u0422\u0435\u0445. \u043f\u0430\u0440\u0442\u043d\u0435\u0440'\n                 when segment = 'tech-partner' then '\u0422\u0435\u0445. \u043f\u0430\u0440\u0442\u043d\u0435\u0440'\n\n                 when segment = 'partner' then '\u041e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440'\n                 when segment = 'of_partner_child__of_partner_paid' then '\u041e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440'\n\n                 when segment = 'employee' then '\u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a'\n                 when segment = 'partner-demo' then '\u0434\u0435\u043c\u043e-\u043f\u0430\u0440\u0442\u043d\u0451\u0440'\n                 when segment = 'tech-partner-postpay' then '\u0442\u0435\u0445\u043f\u0430\u0440\u0442\u043d\u0435\u0440-\u043f\u043e\u0441\u0442\u043e\u043f\u043b\u0430\u0442\u043d\u0438\u043a'\n            else 'unknown' end as account_segment_type,\n        row_number() over (partition by account_id,date_trunc(date,month) order by date desc) rn_segments\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_in_dynamics_defining_clients_with_segments` segments\n    join `dwh-wazzup`.`dbt_nbespalov`.`stg_days` days on segments.segment_start <= days.date and days.date < segments.segment_end\n),\nleft_and_active_info as (\nselect  \n      mart_left_and_returned_accounts_with_partner_and_account_type_with_dates.account_id,  -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n      date,                                         -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u0430\u044f \u0434\u0430\u0442\u0430\n      currency,                                     -- \u0412\u0430\u043b\u044e\u0442\u0430\n      return_or_left_status_with_churn_period_5,    -- \u0421\u0442\u0430\u0442\u0443\u0441 \u0443\u0445\u043e\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0441 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u043c churn 5\n      return_or_left_status_with_churn_period_90,   -- \u0421\u0442\u0430\u0442\u0443\u0441 \u0443\u0445\u043e\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0441 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u043c churn 90\n      return_or_left_status,                        -- \u0421\u0442\u0430\u0442\u0443\u0441 \u0443\u0445\u043e\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n      subscription_start,                           -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n      subscription_end,                             -- \u0414\u0430\u0442\u0430 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n      segments.account_segment_type,\n      row_number() over (partition by segments.account_id,date order by segment_date desc) rn_last_segment_for_date \nfrom `dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts_with_partner_and_account_type_with_dates` mart_left_and_returned_accounts_with_partner_and_account_type_with_dates\njoin segments on segments.segment_date <= date\n                    and segments.account_id = mart_left_and_returned_accounts_with_partner_and_account_type_with_dates.account_id\n                    and rn_segments = 1\nwhere segments.account_segment_type  not in ('unknown','\u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a','\u0442\u0435\u0445\u043f\u0430\u0440\u0442\u043d\u0435\u0440-\u043f\u043e\u0441\u0442\u043e\u043f\u043b\u0430\u0442\u043d\u0438\u043a','\u0434\u0435\u043c\u043e-\u043f\u0430\u0440\u0442\u043d\u0451\u0440')\n),living_periods as (\nselect left_and_active_info.*except(rn_last_segment_for_date),\n        calculating_lt.*except(account_id),\n        row_number() over (partition by left_and_active_info.account_id,date order by live_month desc) rn\nfrom left_and_active_info\nleft join calculating_lt on left_and_active_info.account_id = calculating_lt.account_id\n                                      and live_month <= date_trunc(date,month)\nwhere rn_last_segment_for_date = 1\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0443\u0448\u0435\u0434\u0448\u0438\u0445 \u0438 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0445\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c, \u0434\u0430\u0442\u0430\u043c\u0438 \u0438 LTV\nselect *except(rn,account_segment_type),\ncase when subscription_end = date_trunc(subscription_end,month) and --(return_or_left_status in ('left','came_back_after_leaving_period')\n                                                                    --or \n                                                                      return_or_left_status_with_churn_period_5 in ('left','came_back_after_leaving_period')\n                                                                   -- )  \n            then lag(account_segment_type,2) over (partition by account_id order by date) \n        else coalesce(lag(account_segment_type) over (partition by account_id order by date),account_segment_type) end account_segment_type\nfrom living_periods\nwhere rn = 1\n\nunion all\n\nselect *except(rn,account_segment_type),\n'all' as  account_segment_type              -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\nfrom living_periods\nwhere rn = 1", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_ltv_info`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:17.769234Z", "completed_at": "2025-05-21T12:31:17.812306Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:17.891149Z", "completed_at": "2025-05-21T12:31:17.891159Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2545955181121826, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_tariff", "compiled": true, "compiled_code": "WITH churn AS (\n    SELECT *\n    FROM `dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts_with_partner_and_account_type_with_dates`\n),\n\ntariffs_used AS (\n    SELECT *\n    FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_tariffs_by_month`\n)\n\nSELECT\n    churn.*,\n    tariff\nFROM churn\nJOIN tariffs_used ON churn.account_id = tariffs_used.account_id AND DATE_TRUNC(churn.date, month) = tariffs_used.active_month", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_tariff`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:18.015357Z", "completed_at": "2025-05-21T12:31:18.020628Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:18.030344Z", "completed_at": "2025-05-21T12:31:18.030353Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.17968416213989258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_transports", "compiled": true, "compiled_code": "WITH churn AS (\n    SELECT *\n    FROM `dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts_with_partner_and_account_type_with_dates`\n),\n\nchannels_used AS (\n    SELECT *\n    FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_active_channel_transport_by_month`\n)\n\nSELECT\n    churn.*,\n    transport\nFROM churn\nJOIN channels_used ON churn.account_id = channels_used.account_id AND DATE_TRUNC(churn.date, month) = channels_used.month", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_transports`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:18.021164Z", "completed_at": "2025-05-21T12:31:18.032746Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:18.073876Z", "completed_at": "2025-05-21T12:31:18.073886Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.10109424591064453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_standart_russian_left_accounts_for_communication", "compiled": true, "compiled_code": "with left_accounts as (\n    select distinct account_id,\n                    subscription_end as data_otvala\n    from `dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts_with_partner_and_account_type_with_dates`\n    where return_or_left_status_with_churn_period_7  = 'left'\n),   profile_info as (\n        select *\n        from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n),active_at_the_moment as (\n    select distinct account_id\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages`\n    where state = 'active' and paid_At is not null\n)/*, \n\nhas_active_free_subscription as (\n    select distinct account_id\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages`\n    where state = 'active' and is_free = True\n)*/\n,\n affiliates as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`stg_affiliates`\n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u0442\u0430\u043c\u0438 \u043e\u0442\u0432\u0430\u043b\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 (\u0431\u0435\u0437 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430).\nselect  \n        left_accounts.account_id,   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        left_accounts.data_otvala,  -- \u0414\u0430\u0442\u0430 \u043e\u0442\u0432\u0430\u043b\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n        profile_info.currency,      -- \u0412\u0430\u043b\u044e\u0442\u0430\n        phone,                      -- \u0442\u0435\u043b\u0435\u0444\u043e\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        name,                       -- \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        country,                    -- \u0421\u0442\u0440\u0430\u043d\u0430\n        email,                      -- \u043f\u043e\u0447\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u0430\u044f \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        account_language            -- \u044f\u0437\u044b\u043a \u041b\u041a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442\nfrom  left_accounts\njoin  profile_info on left_accounts.account_id = profile_info.account_Id\nwhere profile_info.type = 'standart'\n      AND  not EXISTS (SELECT 1\n                        FROM  affiliates\n                        WHERE affiliates.child_id = profile_info.account_id\n                        and partner_id is not null\n                        )     \n      and not EXISTS (select 1\n                      from active_at_the_moment\n                      where active_at_the_moment.account_id = left_accounts.account_Id  \n                        )\n      and account_language = 'ru'\n      /*and not Exists  (select 1\n                      from has_active_free_subscription\n                      where has_active_free_subscription.account_id = left_accounts.account_Id \n                      )*/\n\n/*\nfor test\nwith t  as (select account_id\n    from `dwh-wazzup`.`dbt_swazzup`.`mart_left_and_returned_accounts_with_partner_and_account_type_with_dates`\n    where return_or_left_status_marketing in ('left')\n    order by data_otvala desc)\n    select wd.account_id,max(subscription_end)\n    from t\n    join `dwh-wazzup`.`dbt_swazzup`.`mart_left_and_returned_accounts_with_partner_and_account_type_with_dates` wd on t.account_id = wd.account_id\n    group by 1\n    order by 2 desc*/", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_standart_russian_left_accounts_for_communication`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:18.026549Z", "completed_at": "2025-05-21T12:31:18.033591Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:18.074654Z", "completed_at": "2025-05-21T12:31:18.074663Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.13752198219299316, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_c1_aggregated", "compiled": true, "compiled_code": "with registration_data as (\n  select distinct case when account_registration_type_current in ('referal_code','standart') then 'final_client'\n                      when account_registration_type_current = 'partner_code' then 'of-partner'\n                      when account_registration_type_current = 'tech_partner_code' then 'tech-partner'\n            end as segments_aggregated,\n            date_trunc(registration_date,month) registration_month,\n            account_id,\n            case when min_subscription_date is not null then account_id end as paid_account_ids,\n            currency,\n            case when is_renewal then account_id end as returned_account_ids,\n            registration_source_agg\nfrom `dwh-wazzup`.`dbt_nbespalov`.`mart_key_metrics`\nwhere account_registration_type_current is distinct from 'manual_registration'\n)\n, c_one_all as (\n\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_,\n        registration_month,\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,\n        count(distinct account_id) all_users_for_c1,\n        count(distinct paid_account_ids) paid_accounts,\n        count(distinct returned_account_ids) returned_accounts,\n        count(distinct paid_account_ids)/count(distinct account_id) c1_conv,\n        count(distinct returned_account_ids)/IF(count(distinct paid_account_ids)=0,1,count(distinct paid_account_ids)) as c2_conv,\n      'all' as market_type\nfrom registration_data\n   group by GROUPING SETS \n(\n  (segments_aggregated,registration_month),\n        (registration_source_agg,registration_month),\n        (segments_aggregated,registration_month,registration_source_agg),\n        (registration_month)\n)\n\n),c_one_eur_usd_kzt_rur as (\n\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_,\n        registration_month,\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,\n        count(distinct account_id) all_users_for_c1,\n        count(distinct paid_account_ids) paid_accounts,\n        count(distinct returned_account_ids) returned_accounts,\n        count(distinct paid_account_ids)/count(distinct account_id) c1_conv,\n        count(distinct returned_account_ids)/IF(count(distinct paid_account_ids)=0,1,count(distinct paid_account_ids)) as c2_conv,\n      case when currency in ('USD','EUR') then  'usd_eur' else 'ru_kzt' end  as market_type\nfrom registration_data\nwhere currency in ('USD','EUR','RUR','KZT')\n   group by GROUPING SETS \n(\n    (segments_aggregated,registration_month,market_type),\n        (registration_source_agg,registration_month,market_type),\n        (segments_aggregated,registration_month,registration_source_agg,market_type),\n        (registration_month,market_type)\n)       \n)\n,c_one_rur as (\n\nselect   case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_,                   -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n        registration_month,                                                     -- \u041c\u0435\u0441\u044f\u0446 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,       -- \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n        count(distinct account_id) all_users_for_c1,                            -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0448\u043b\u0438 \u043a\u043e\u043d\u0432\u0435\u0440\u0441\u0438\u044e 1\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f\n        count(distinct paid_account_ids) paid_accounts,                         -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043b\u0430\u0442\u044f\u0449\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n        count(distinct returned_account_ids) returned_accounts,                 -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0445\u0441\u044f\n        count(distinct paid_account_ids)/count(distinct account_id) c1_conv,    -- \u041a\u043e\u043d\u0432\u0435\u0440\u0441\u0438\u044f 1\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f\n        count(distinct returned_account_ids)/IF(count(distinct paid_account_ids)=0,1,count(distinct paid_account_ids)) as c2_conv,  -- \u041a\u043e\u043d\u0432\u0435\u0440\u0441\u0438\u044f 2\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f\n      currency as market_type                                                   -- \u0420\u044b\u043d\u043e\u043a\nfrom registration_data\nwhere currency in ('RUR','USD','KZT','EUR')\n   group by GROUPING SETS \n(\n    (segments_aggregated,registration_month,market_type),\n        (registration_source_agg,registration_month,market_type),\n        (segments_aggregated,registration_month,registration_source_agg,market_type),\n        (registration_month,market_type)\n)       \n     \n)   -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043d\u0432\u0435\u0440\u0441\u0438\u044e c1 \u0438 c2\nselect 'new' as client_type_,*  from c_one_all\nunion all\nselect 'new' as client_type_,* from c_one_rur\nunion all\nselect 'new' as  client_type_,* from c_one_eur_usd_kzt_rur\n\nunion all\n \nselect 'all' as  client_type_,*  from c_one_all\nunion all\nselect 'all' as  client_type_,* from c_one_rur\nunion all\nselect 'all' as  client_type_,* from c_one_eur_usd_kzt_rur", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_c1_aggregated`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:18.024359Z", "completed_at": "2025-05-21T12:31:18.033926Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:18.075173Z", "completed_at": "2025-05-21T12:31:18.075181Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.17870855331420898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_left_accounts_with_payments_and_promised_payments_with_segment_type", "compiled": true, "compiled_code": "with left_and_returned_accounts as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts_with_payments_and_promised_payments_with_partner_and_account_type_with_dates`\n),\n\nsegments_by_date as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`mart_active_accounts_by_days_by_segment`\n)\n    -- \u041f\u0435\u0440\u0438\u043e\u0434\u044b \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 (\u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u0438 \u043d\u0430 \u043e\u0431\u0435\u0449\u0430\u043d\u043d\u043e\u043c \u043f\u043b\u0430\u0442\u0435\u0436\u0435) \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u0434\u043d\u044f\u043c\nselect left_and_returned_accounts.*, \nsegments_by_date.segment,   -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442\nrussian_country_name,       -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u044b\u0437\u043a\u0435\nregion_international        -- \u0420\u0435\u0433\u0438\u043e\u043d\nfrom left_and_returned_accounts \nleft join segments_by_date \non segments_by_date.date=left_and_returned_accounts.date \nand segments_by_date.account_id=left_and_returned_accounts.account_id\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info \non profile_info.account_id=left_and_returned_accounts.account_id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_left_accounts_with_payments_and_promised_payments_with_segment_type`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:18.028547Z", "completed_at": "2025-05-21T12:31:18.073218Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:18.076265Z", "completed_at": "2025-05-21T12:31:18.076275Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.21502447128295898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_top_100_ru_of_partners", "compiled": true, "compiled_code": "WITH QuarterlyRevenue AS (\n  select \n      month_dynamics.partner_id as partner_id,\n      date_trunc(month,quarter) quarter,\n      sum(value) revenue\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_merics_dynamics` month_dynamics\n    join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info \n    on month_dynamics.partner_id = profile_info.account_Id \n    where metrics = 'sum_in_rubles_partner_paid'\n         and profile_info.type = 'partner'\n         and profile_info.currency in ('RUR','KZT')\n    group by month_dynamics.partner_id ,2\n),\n\n-- \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u0432\u0430\u0440\u0442\u0430\u043b n-1 \u043a\u0430\u043a \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 \u043a\u0432\u0430\u0440\u0442\u0430\u043b \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u044d\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\nPreviousQuarterRevenue AS (\n  SELECT\n    a.partner_id,\n    a.quarter AS current_quarter,\n    b.revenue AS previous_quarter_revenue\n  FROM \n    QuarterlyRevenue a\n  LEFT JOIN \n    QuarterlyRevenue b\n  ON \n    a.partner_id = b.partner_id \n    AND\n          DATE_SUB(a.quarter, INTERVAL 1 QUARTER) = b.quarter\n)\n,calculating_top as (\n    SELECT \n        current_quarter, \n        partner_id, \n        previous_quarter_revenue\n  FROM \n    PreviousQuarterRevenue\n)       -- \u041f\u0430\u0440\u0442\u043d\u0435\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u043d\u0435\u0441\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 200\u043a \u0432\u044b\u0440\u0443\u0447\u043a\u0438 \u0437\u0430 \u043f\u0440\u043e\u0448\u043b\u044b\u0439 \u043a\u0432\u0430\u0440\u0442\u0430\u043b\nSELECT \n  current_quarter,                          -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043a\u0432\u0430\u0440\u0442\u0430\u043b\n  partner_id as account_id,                 -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n  round(previous_quarter_revenue,0) revenue -- \u0412\u044b\u0440\u0443\u0447\u043a\u0430\nFROM calculating_top\nWHERE \n  round(previous_quarter_revenue,0) >= 200000\n  and current_quarter <= date_trunc(current_date(),quarter)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_top_100_ru_of_partners`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:18.030962Z", "completed_at": "2025-05-21T12:31:18.074213Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:18.115381Z", "completed_at": "2025-05-21T12:31:18.115392Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.2537388801574707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_creating_intervals_based_on_first_registration_period_with_seven_or_more_days", "compiled": true, "compiled_code": "select * \n            except(period_regs,type,last_subscription_end),\n            count(type) cnt\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_creating_intervals_based_on_first_registration_period_active_time_intervals` active_time_intervals\n    group by  account_id,\n              subscription_start,\n              subscription_end,\n              time_period,\n              till_time_period,\n              russian_country_name,\n              account_currency,\n              account_type,     \n              registration_date,        \n              utm_source,       \n              utm_medium,       \n              utm_campaign,     \n              utm_term, \n              utm_content,      \n              registration_source_agg_current,  \n              registration_source_current,      \n              account_registration_type_current,        \n              tariff,   \n              subscription_period       ,\n              first_subscription_start,\n              time_period_number", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_creating_intervals_based_on_first_registration_period_with_seven_or_more_days`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:18.278138Z", "completed_at": "2025-05-21T12:31:18.289242Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:18.300773Z", "completed_at": "2025-05-21T12:31:18.300788Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.1540987491607666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_creating_intervals_based_on_first_subscription_period_with_seven_or_more_days", "compiled": true, "compiled_code": "select *  except(period_subsc,type,last_subscription_end),\n            count(type) cnt\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_creating_intervals_based_on_first_subscription_period_active_time_intervals` active_time_intervals\n    group by  account_id,\n              subscription_start,\n              subscription_end,\n              time_period,\n              till_time_period,\n              russian_country_name,\n              account_currency,\n              account_type,     \n              registration_date,        \n              utm_source,       \n              utm_medium,       \n              utm_campaign,     \n              utm_term, \n              utm_content,      \n              registration_source_current,  \n              registration_source_agg_current,      \n              account_registration_type_current,        \n              tariff,   \n              subscription_period,\n              first_subscription_start,\n              time_period_number", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_creating_intervals_based_on_first_subscription_period_with_seven_or_more_days`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:18.283337Z", "completed_at": "2025-05-21T12:31:18.301605Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:18.347691Z", "completed_at": "2025-05-21T12:31:18.347703Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.11465740203857422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_accounts_partners_partners_and_children_info", "compiled": true, "compiled_code": "WITH first_payment_date_and_sum_in_rubles_partner AS (\n  SELECT * \n  FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_first_payment_date_and_sum_in_rubles_by_segment_and_partner`\n  WHERE segment_type IN ('of-partner','tech-partner')\n),\n\n-- first_payment_date_and_sum_in_rubles_child AS (\n--   SELECT * \n--   FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_first_payment_date_and_sum_in_rubles_by_segment_and_partner`\n--   WHERE segment_type IN ('of-partner-client','tech-partner-client')\n-- ),\n\nfirst_payment_date_and_sum_in_rubles_child_and_partner AS (\n  SELECT * \n  FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_first_payment_date_and_sum_in_rubles_by_segment_and_partner`\n  WHERE segment_type IN ('of-partner-client','tech-partner-client')\n),\n\nlast_payment_info AS (\n    SELECT *     \n    FROM `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_who_paid_for_client_subscription_with_sum`\n),\n\nfirst_subscription_date AS (\n    SELECT * FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_first_subscription_date_and_type`\n), --\u0434\u0430\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0438 \u0442\u0438\u043f \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438,\n\nsubscription_paid_by_partner AS (\n    SELECT * FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_subscription_paid_for_client`\n),\n\npartner_lk_payments AS (\n    SELECT * \n    FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_first_payment_billing`\n),\n\npartner_data AS (\n  SELECT \n    account_id,\n    register_date,\n    country,\n    region_type,\n    partner_register_date,\n    currency,\n    type,\n    email,\n    russian_country_name,\n    phone,\n    demo_account,\n    name\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n    WHERE type IN ('partner','tech-partner')\n),\n\npartners_and_children_current_and_all_time AS (\n  SELECT partner_id, \n    account_id AS child_id,  \n    min(start_date) AS created_date, \n    max(end_date) AS max_child_date  \n    FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_type_and_partner_change_with_partner_type_deduplicated`\n  WHERE partner_id is not null\n  GROUP BY 1,2\n),\n\npaid_subscriptions AS (\n   SELECT \n      bp.account_id, \n      max(case when state='active' then True else False end) AS has_active_paid_subscription,\n      max(cast(paid_at AS date)) AS max_subscription_paid_date\n   FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingPackages` bp\n   WHERE paid_at is not null\n   GROUP BY bp.account_id\n),\n\nactive_integrations AS (\n   SELECT \n        account_id, \n        active_integration_name,\n        domain \n   FROM `dwh-wazzup`.`dbt_nbespalov`.`int_integrations_active_groupped_by_accounts_type`\n),\n\npartner_last_reward_month AS (\n  SELECT\n    DATE_TRUNC(MAX(occured_at), month) AS last_reward_month,\n    account_id, \nFROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate`\nWHERE object IN ('reward', 'rewardWaba', 'noReward')\nGROUP BY 2\n),\n\nreward_sum_last_month AS (\n  SELECT\n    ba.account_id,\n    SUM(COALESCE(sum * cor_rate, sum)) AS reward_sum_last_month\n  FROM `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba\n  JOIN partner_last_reward_month plrm ON ba.account_id = plrm.account_id AND DATE_TRUNC(ba.occured_at, month) = plrm.last_reward_month\n  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_exchangeRates` er ON er.data = ba.occured_date AND er.currency = ba.currency AND nominal = 'RUR'\n  WHERE object IN ('reward', 'rewardWaba', 'noReward')\n  GROUP BY 1\n),\n\npartner_reward_all_time_and_last_month AS (\n  SELECT\n    rslm.*,\n    SUM(COALESCE(sum * cor_rate, sum)) AS reward_all_time\n  FROM reward_sum_last_month rslm\n  JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_billingAffiliate` ba ON rslm.account_id = ba.account_id\n  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_exchangeRates` er ON er.data = CURRENT_DATE AND er.currency = ba.currency AND nominal = 'RUR'\n  WHERE object IN ('reward', 'rewardWaba')\n  GROUP BY 1, 2\n),\n\npartner_info_aggregated AS (\n  SELECT \n    partner_data.account_id                                                     AS partner_id,                                      -- \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    partner_data.country                                                        AS country,                                         -- \u0441\u0442\u0440\u0430\u043d\u0430\n    partner_data.region_type                                                    AS region_type,                                     -- \u0420\u0435\u0433\u0438\u043e\u043d. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0435 (\u0421\u041d\u0413, \u041c\u0435\u0436\u0434\u0443\u043d\u0430\u0440\u043e\u0434\u043d\u044b\u0435, \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e)\n    partner_data.register_date                                                  AS register_date,                                   -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    partner_data.partner_register_date                                          AS partner_register_date,                           -- \u0414\u0430\u0442\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043a\u0438\n    partner_data.currency                                                       AS currency,                                        -- \u0412\u0430\u043b\u044e\u0442\u0430\n    partner_data.type                                                           AS type,                                            -- \u0422\u0438\u043f: \u0442\u0435\u0445. \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0438\u043b\u0438 \u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\n    partner_data.email                                                          AS email,                                           -- \u043f\u043e\u0447\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    partner_data.name                                                           AS name,                                            -- \u0438\u043c\u044f \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    partner_data.russian_country_name                                           AS russian_country_name,                            -- \u0441\u0442\u0440\u0430\u043d\u0430 (\u0440\u0443\u0441\u0441\u043a\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435)\n    partner_data.phone                                                          AS phone,                                           -- \u0442\u0435\u043b\u0435\u0444\u043e\u043d\n    partners_and_children_current_and_all_time.child_Id                         AS child_Id,                                        -- \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0434\u043e\u0447\u043a\u0438\n    partners_and_children_current_and_all_time.created_date                     AS child_created_date,                              -- \u0434\u0430\u0442\u0430 \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u0447\u043a\u0438 \u043a \u044d\u0442\u043e\u043c\u0443 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0443\n    partners_and_children_current_and_all_time.max_child_date                   AS max_child_date,                                  -- \u0434\u0430\u0442\u0430 \u043e\u0442\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u0447\u043a\u0438 \u043e\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430. \u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0434\u043e\u0447\u043a\u0430 \u0435\u0449\u0435 \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0430 \u043a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0443, \u0431\u0443\u0434\u0435\u0442 \u0441\u0435\u0433\u043e\u0434\u043d\u044f\u0448\u043d\u044f\u044f \u0434\u0430\u0442\u0430\n    paid_subscriptions.has_active_paid_subscription                             AS has_active_paid_subscription,                    -- \u0435\u0441\u0442\u044c \u0430\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u043e\u043f\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430\n    paid_subscriptions.max_subscription_paid_date                               AS max_subscription_paid_date,                      -- \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0440\u0430\u0437, \u043a\u043e\u0433\u0434\u0430 \u0431\u044b\u043b\u0430 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u0447\u043a\u0438 (\u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u0438\u043b\u0438 \u0441\u0430\u043c\u043e\u0439 \u0434\u043e\u0447\u043a\u043e\u0439)\n    active_integrations.active_integration_name                                 AS integration_type,                                -- \u0442\u0438\u043f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438\n  --  first_payment_date_and_sum_in_rubles_child.first_payment_date               AS first_revenue_date_child,                        -- \u043f\u0435\u0440\u0432\u0430\u044f \u043e\u043f\u043b\u0430\u0442\u0430 \u043e\u0442 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u0434\u043e\u0447\u043a\u0438\n  --  first_payment_date_and_sum_in_rubles_child.sum_in_rubles                    AS sum_in_rubles_child,                             -- \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u043e\u0442 \u0434\u043e\u0447\u043a\u0438\n    first_payment_date_and_sum_in_rubles_partner.first_payment_date             AS first_revenue_date_partner,                      -- \u043f\u0435\u0440\u0432\u0430\u044f \u043e\u043f\u043b\u0430\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    first_payment_date_and_sum_in_rubles_partner.sum_in_rubles                  AS sum_in_rubles_partner,                           -- \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u043e\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n    partner_lk_payments.first_billing_date_partner                              AS first_billing_date_partner,                      -- \u0434\u0430\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u041b\u041a\n    partner_lk_payments.billing_sum                                             AS billing_sum,                                     -- \u0441\u0443\u043c\u043c\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u043f\u043e\u043f\u043e\u043b\u043d\u0438\u043b \u041b\u041a \u0437\u0430 \u0432\u0441\u0435 \u0432\u0440\u0435\u043c\u044f\n    first_subscription_date.start_date                                          AS first_subscription_date_child,                   -- \u0434\u0430\u0442\u0430 \u043f\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0439 \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0443 \u0434\u043e\u0447\u043a\u0438\n    first_payment_date_and_sum_in_rubles_child_and_partner.first_payment_date   AS first_payment_date_child_at_partner,             -- \u043f\u0435\u0440\u0432\u0430\u044f \u0434\u0430\u0442\u0430 \u043e\u043f\u043b\u0430\u0442\u044b\n    first_payment_date_and_sum_in_rubles_child_and_partner.sum_in_rubles        AS sum_in_rubles_child_at_partner,                  -- \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445 \u043e\u0442 \u0434\u043e\u0447\u043a\u0438 \u0432 \u0442\u043e\u0442 \u043f\u0435\u0440\u0438\u043e\u0434, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d\u0430 \u0431\u044b\u043b\u0430 \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0430 \u043a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0443\n    subscription_paid_by_partner.balance_spent_by_partner                       AS balance_spent_by_partner,                        -- \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u044b\u043b\u043e \u0441\u043f\u0438\u0441\u0430\u043d\u043e \u0441 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430 \u0434\u043e\u0447\u043a\u0443\n    subscription_paid_by_partner.good_balance_spent_by_partner                  AS good_balance_spent_by_partner,                   -- \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u044b\u043b\u043e \u0441\u043f\u0438\u0441\u0430\u043d\u043e \u0445\u043e\u0440\u043e\u0448\u0435\u0433\u043e \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430 \u0434\u043e\u0447\u043a\u0443\n    subscription_paid_by_partner.good_balance_spent_by_partner_on_subscription  AS good_balance_spent_by_partner_on_subscription,   -- \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u044b\u043b\u043e \u0441\u043f\u0438\u0441\u0430\u043d\u043e \u0445\u043e\u0440\u043e\u0448\u0435\u0433\u043e \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443 \u0434\u043e\u0447\u043a\u0438\n    subscription_paid_by_partner.good_balance_spent_by_partner_on_waba_balance  AS good_balance_spent_by_partner_on_waba_balance,   -- \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u044b\u043b\u043e \u0441\u043f\u0438\u0441\u0430\u043d\u043e \u0445\u043e\u0440\u043e\u0448\u0435\u0433\u043e \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u043d\u0430 \u0432\u0430\u0431\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 \u0434\u043e\u0447\u043a\u0438\n    children_info.account_segment_type                                          AS account_segment_type,                            -- \u0441\u0435\u0433\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0434\u043e\u0447\u043a\u0438 (\u043f\u043b\u0430\u0442\u0438\u0442 \u0441\u0430\u043c\u0430 \u0438\u043b\u0438 \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430). \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043e\u043f\u043b\u0430\u0442\u0435\n    children_info.email                                                         AS child_email,                                     -- \u043f\u043e\u0447\u0442\u0430 \u0434\u043e\u0447\u043a\u0438\n    COALESCE(affiliates_info.name,children_info.name)                           AS child_name,                                      -- \u0438\u043c\u044f \u0434\u043e\u0447\u043a\u0438\n    affiliates_info.partner_id                                                  AS current_child_partner,                           -- \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0434\u043e\u0447\u043a\u0438\n    active_integrations.domain                                                  AS domain,                                          -- \u0434\u043e\u043c\u0435\u043d \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043e\u0447\u043a\u0438\n    children_info.register_date                                                 AS child_register_date,                             -- \u0434\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u043e\u0447\u043a\u0438\n    last_sum_in_month_with_active_subs                                          AS last_sum_in_month_with_active_subs,              -- \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u0447\u043a\u0438\n    lpi.who_paid                                                                AS who_paid,                                        -- \u043a\u0442\u043e \u043f\u043b\u0430\u0442\u0438\u043b \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0440\u0430\u0437 \u0437\u0430 \u0434\u043e\u0447\u043a\u0443\n    reward_sum_last_month                                                       AS reward_sum_last_month,                           -- \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u043d\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    reward_all_time                                                             AS reward_all_time,                                 -- \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u043e\u0437\u043d\u0430\u0433\u0440\u0430\u0436\u0434\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0437\u0430 \u0432\u0441\u0451 \u0432\u0440\u0435\u043c\u044f \u0432 \u0440\u0443\u0431\u043b\u044f\u0445 (\u0431\u0435\u0440\u0435\u0442\u0441\u044f \u043a\u0443\u0440\u0441 \u043d\u0430 \u0441\u0435\u0433\u043e\u0434\u043d\u044f)\n    subscription_sum                                                            AS subscription_sum_client,                         -- \u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0434\u043e\u0447\u043a\u0430 \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u043b\u0430 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0441\u0430\u043c\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    waba_sum_without_bonus                                                      AS waba_sum_without_bonus_client,                    -- \u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0434\u043e\u0447\u043a\u0430 \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u043b\u0430 \u043d\u0430 \u0431\u0430\u043b\u0430\u043d\u0441 \u0432\u0430\u0431\u044b \u0441\u0430\u043c\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    bad_balance_spent_on_subscription                                           AS bad_balance_spent_on_subscription,               -- \u0441\u0443\u043c\u043c\u0430 \u043f\u043b\u043e\u0445\u043e\u0433\u043e \u0431\u0430\u043b\u0430\u043d\u0441\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u043e\u0447\u043a\u0430 \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u043b\u0430 \u043d\u0430 \u0441\u0432\u043e\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    bad_balance_spent_on_waba_balance                                           AS bad_balance_spent_on_waba_balance                -- \u0441\u0443\u043c\u043c\u0430 \u043f\u043b\u043e\u0445\u043e\u0433\u043e \u0431\u0430\u043b\u0430\u043d\u0441\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u043e\u0447\u043a\u0430 \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u043b\u0430 \u043d\u0430 \u0441\u0432\u043e\u0439 \u0432\u0430\u0431\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\n  FROM partner_data\n  LEFT JOIN partners_and_children_current_and_all_time ON partner_data.account_Id=partners_and_children_current_and_all_time.partner_Id AND partners_and_children_current_and_all_time.child_Id!=partner_data.demo_account\n  LEFT JOIN paid_subscriptions ON partners_and_children_current_and_all_time.child_Id=paid_subscriptions.account_Id\n  LEFT JOIN active_integrations ON active_integrations.account_id=partners_and_children_current_and_all_time.child_Id\n  LEFT JOIN partner_lk_payments ON partner_data.account_id=partner_lk_payments.account_id\n -- LEFT JOIN first_payment_date_and_sum_in_rubles_child ON partners_and_children_current_and_all_time.child_id = first_payment_date_and_sum_in_rubles_child.account_Id\n  LEFT JOIN first_payment_date_and_sum_in_rubles_partner ON partner_data.account_id=first_payment_date_and_sum_in_rubles_partner.account_id        \n  LEFT JOIN first_subscription_date ON partners_and_children_current_and_all_time.child_id=first_subscription_date.account_id        \n  LEFT JOIN first_payment_date_and_sum_in_rubles_child_and_partner ON first_payment_date_and_sum_in_rubles_child_and_partner.account_id=partners_and_children_current_and_all_time.child_id AND    first_payment_date_and_sum_in_rubles_child_and_partner.partner_id=partner_data.account_id\n  LEFT JOIN subscription_paid_by_partner ON subscription_paid_by_partner.partner_id=partner_data.account_id AND subscription_paid_by_partner.client_id=partners_and_children_current_and_all_time.child_id        \n  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` children_info ON children_info.account_id=partners_and_children_current_and_all_time.child_id    \n  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`stg_affiliates` affiliates_info ON affiliates_info.child_id=partners_and_children_current_and_all_time.child_id\n  LEFT JOIN last_payment_info lpi ON lpi.account_id = partners_and_children_current_and_all_time.child_id\n  LEFT JOIN partner_reward_all_time_and_last_month ON partner_reward_all_time_and_last_month.account_id = partners_and_children_current_and_all_time.partner_Id\n  LEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_payments_revenue_clients_without_bad_balance` ON int_payments_revenue_clients_without_bad_balance.account_id = partners_and_children_current_and_all_time.child_id AND int_payments_revenue_clients_without_bad_balance.partner_id = partners_and_children_current_and_all_time.partner_id\n)\n    -- \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u043c \u0438 \u0438\u0445 \u0434\u043e\u0447\u043a\u0430\u043c: \u0441\u0442\u0440\u0430\u043d\u0430, \u0434\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u0434\u0430\u0442\u0430 \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0438 \u043e\u0442\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u0447\u043a\u0438, \u043e\u043f\u043b\u0430\u0442\u044b \u0438 \u0432\u044b\u0440\u0443\u0447\u043a\u0430\nSELECT * \nFROM partner_info_aggregated", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_partners_and_children_info`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:18.290607Z", "completed_at": "2025-05-21T12:31:18.308007Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:18.349257Z", "completed_at": "2025-05-21T12:31:18.349266Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.15316271781921387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_lt_info_aggregated", "compiled": true, "compiled_code": "with left_data_pre as (\nselect distinct\n        mart.currency,\n        mart.account_id,\n        first_value(live_month) over (partition by mart.account_id order by live_month) first_active_month,\n        live_month,\n        case when account_segment_type = '\u041a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442' then 'final_client'\n        when account_segment_type = '\u041e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440' then 'of-partner'\n        when account_segment_type = '\u0422\u0435\u0445. \u043f\u0430\u0440\u0442\u043d\u0435\u0440' then 'tech-partner'\n        end as segments_aggregated,\n        case when date_trunc(date,month) = date_trunc(register_date,month) then 'new' else 'old' end as client_type,\n        cum_sum_up_to_live_month,\n        registration_source_agg,\n        LT\nfrom `dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_ltv_info` mart\njoin `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`  on mart.account_id = stg_accounts.account_id\njoin `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_attribution_data` sources on stg_accounts.account_id = sources.account_id\nwhere account_segment_type !='all'\n),\nleft_data_rn as (\n    select *,     \n        row_number() over (partition by account_id,month order by live_month desc) rn\nfrom left_data_pre\njoin `dwh-wazzup`.`dbt_nbespalov`.`stg_months` months on left_data_pre.first_active_month <= months.month\n                        and month >= live_month\n),\nleft_data as (\n    select *,\n    from left_data_rn\n    where rn = 1\n\n),\nleft_data_share as (\nselect \n        mart.currency,\n        mart.account_id,\n        return_or_left_status,\n        date_trunc(date,month) month,\n        case when account_segment_type = '\u041a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442' then 'final_client'\n              when account_segment_type = '\u041e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440' then 'of-partner'\n              when account_segment_type = '\u0422\u0435\u0445. \u043f\u0430\u0440\u0442\u043d\u0435\u0440' then 'tech-partner'\n              end as segments_aggregated,\n        case when date_trunc(date,month) = date_trunc(register_date,month) then 'new' else 'old' end as client_type,\n        cum_sum_up_to_live_month,\n        registration_source_agg,\n        LT\nfrom `dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_ltv_info` mart\njoin `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`  on mart.account_id = stg_accounts.account_id\njoin `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_attribution_data` sources on stg_accounts.account_id = sources.account_id\nwhere account_segment_type !='all'\n)\n\n,left_active_all_share as (\n    select  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_ ,\n        month,\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,\n        case when grouping(client_type) = 1 then 'all' else client_type end client_type_,\n        count(distinct case when return_or_left_status in ('left','came_back_after_leaving_period') then account_id end ) left_users_count,\n        count(distinct case when return_or_left_status in ('active','returned') then account_id end) active_users_count_for_left_share,\n        count(distinct case when return_or_left_status in ('left','came_back_after_leaving_period') then account_id end )/Case when count(distinct case when return_or_left_status in ('active','returned') then account_id end) = 0 then 1 else count(distinct case when return_or_left_status in ('active','returned') then account_id end) end left_share,\n      'all' as market_type\nfrom left_data_share\ngroup by GROUPING SETS \n(\n  (segments_aggregated,month),\n        (client_type,month),\n        (segments_aggregated,month,client_type),\n        (month),\n\n  (segments_aggregated,month,registration_source_agg),\n        (client_type,month,registration_source_agg),\n        (segments_aggregated,month,client_type,registration_source_agg),\n        (month,registration_source_agg)\n\n)\n),\n left_active_all as (\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_ ,\n        month,\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,\n        case when grouping(client_type) = 1 then 'all' else client_type end client_type_,\n        avg(LT) LT,\n        sum(LT) sum_LT,\n        count(distinct account_id) as accounts_for_lt,\n      'all' as market_type\nfrom left_data\ngroup by GROUPING SETS \n(\n  (segments_aggregated,month),\n        (client_type,month),\n        (segments_aggregated,month,client_type),\n        (month),\n\n  (segments_aggregated,month,registration_source_agg),\n        (client_type,month,registration_source_agg),\n        (segments_aggregated,month,client_type,registration_source_agg),\n        (month,registration_source_agg)\n)\n),\nleft_active_all_with_share as (\n        select left_active_all.*,\n        left_share,\n        left_users_count,\n        active_users_count_for_left_share\n        from left_active_all\n        left join left_active_all_share on left_active_all.segments_aggregated_ = left_active_all_share.segments_aggregated_\n                                            and left_active_all.month = left_active_all_share.month\n                                            and left_active_all.client_type_ = left_active_all_share.client_type_\n                                            and left_active_all.market_type = left_active_all_share.market_type\n                                            and left_active_all.registration_source_agg_ = left_active_all_share.registration_source_agg_\n)\n\n,left_active_eur_usd_rur_kzt as (\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_ ,\n        month,\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,\n        case when grouping(client_type) = 1 then 'all' else client_type end client_type_,\n        --count(distinct case when return_or_left_status in ('left','came_back_after_leaving_period') then account_id end )/count(distinct case when return_or_left_status in ('active','returned') then account_id end) left_share,\n        avg(LT) LT,\n        sum(LT) sum_LT,\n        count(distinct account_id) as accounts_for_lt,\n      case when currency in ('USD','EUR') then  'usd_eur' else 'ru_kzt' end  as market_type\nfrom left_data\nwhere currency in ('RUR','KZT','EUR','USD')\ngroup by GROUPING SETS \n(\n  (segments_aggregated,month,market_type),\n        (client_type,month,market_type),\n        (segments_aggregated,month,client_type,market_type),\n        (month,market_type),\n\n  (segments_aggregated,month,registration_source_agg,market_type),\n        (client_type,month,registration_source_agg,market_type),\n        (segments_aggregated,month,client_type,registration_source_agg,market_type),\n        (month,registration_source_agg,market_type)\n)\n)\n\n,left_active_eur_usd_rur_kzt_share as (\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_ ,\n        month,\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,\n        case when grouping(client_type) = 1 then 'all' else client_type end client_type_,\n        count(distinct case when return_or_left_status in ('left','came_back_after_leaving_period') then account_id end ) left_users_count,\n        count(distinct case when return_or_left_status in ('active','returned') then account_id end) active_users_count_for_left_share,\n        count(distinct case when return_or_left_status in ('left','came_back_after_leaving_period') then account_id end )/Case when count(distinct case when return_or_left_status in ('active','returned') then account_id end) = 0 then 1 else count(distinct case when return_or_left_status in ('active','returned') then account_id end) end left_share,\n      case when currency in ('USD','EUR') then  'usd_eur' else 'ru_kzt' end  as market_type\nfrom left_data_share\nwhere currency in ('RUR','KZT','EUR','USD')\ngroup by GROUPING SETS \n(\n  (segments_aggregated,month,market_type),\n        (client_type,month,market_type),\n        (segments_aggregated,month,client_type,market_type),\n        (month,market_type),\n\n  (segments_aggregated,month,registration_source_agg,market_type),\n        (client_type,month,registration_source_agg,market_type),\n        (segments_aggregated,month,client_type,registration_source_agg,market_type),\n        (month,registration_source_agg,market_type)\n)\n),left_active_eur_usd_rur_kzt_all as (\n\n       select left_active_eur_usd_rur_kzt.*,\n        left_share,\n        left_users_count,\n        active_users_count_for_left_share\n        from left_active_eur_usd_rur_kzt\n        left join left_active_eur_usd_rur_kzt_share on left_active_eur_usd_rur_kzt.segments_aggregated_ = left_active_eur_usd_rur_kzt_share.segments_aggregated_\n                                            and left_active_eur_usd_rur_kzt.month = left_active_eur_usd_rur_kzt_share.month\n                                            and left_active_eur_usd_rur_kzt.client_type_ = left_active_eur_usd_rur_kzt_share.client_type_\n                                            and left_active_eur_usd_rur_kzt.market_type = left_active_eur_usd_rur_kzt_share.market_type\n)\n\n\n,left_active_rur as (\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_ ,               -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n        month,                                          -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,   -- \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        case when grouping(client_type) = 1 then 'all' else client_type end client_type_,   -- \u0422\u0438\u043f \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n        avg(LT) LT,                                     -- lifetime \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n        sum(LT) sum_LT,                                 -- \u0421\u0443\u043c\u043c\u0430 LT \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n        count(distinct account_id) as accounts_for_lt,  -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u0437\u0430 LT\n      currency as market_type\nfrom left_data\nwhere currency in ('RUR','KZT','EUR','USD')\ngroup by GROUPING SETS \n(\n  (segments_aggregated,month,market_type),\n        (client_type,month,market_type),\n        (segments_aggregated,month,client_type,market_type),\n        (month,market_type),\n\n  (segments_aggregated,month,registration_source_agg,market_type),\n        (client_type,month,registration_source_agg,market_type),\n        (segments_aggregated,month,client_type,registration_source_agg,market_type),\n        (month,registration_source_agg,market_type)\n)\n),left_active_rur_share as (\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_ ,\n        month,\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,\n        case when grouping(client_type) = 1 then 'all' else client_type end client_type_,\n        count(distinct case when return_or_left_status in ('left','came_back_after_leaving_period') then account_id end ) left_users_count,\n        count(distinct case when return_or_left_status in ('active','returned') then account_id end) active_users_count_for_left_share,\n        count(distinct case when return_or_left_status in ('left','came_back_after_leaving_period') then account_id end )/Case when count(distinct case when return_or_left_status in ('active','returned') then account_id end) = 0 then 1 else count(distinct case when return_or_left_status in ('active','returned') then account_id end) end left_share,\n      currency as market_type   -- \u0420\u044b\u043d\u043e\u043a\nfrom left_data_share\nwhere currency in ('RUR','KZT','EUR','USD')\ngroup by GROUPING SETS \n(\n  (segments_aggregated,month,market_type),\n        (client_type,month,market_type),\n        (segments_aggregated,month,client_type,market_type),\n        (month,market_type),\n\n  (segments_aggregated,month,registration_source_agg,market_type),\n        (client_type,month,registration_source_agg,market_type),\n        (segments_aggregated,month,client_type,registration_source_agg,market_type),\n        (month,registration_source_agg,market_type)\n)\n),left_active_rur_all as (\n       select left_active_rur.*,\n                            left_share,     -- \u0414\u043e\u043b\u044f \u0443\u0448\u0435\u0434\u0448\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n        left_users_count,                   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0448\u0435\u0434\u0448\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n        active_users_count_for_left_share   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u044e\u0437\u0435\u0440\u043e\u0432\n        from left_active_rur\n        left join left_active_rur_share on left_active_rur.segments_aggregated_ = left_active_rur_share.segments_aggregated_\n                                                        and left_active_rur.month = left_active_rur_share.month\n                                                        and left_active_rur.client_type_ = left_active_rur_share.client_type_\n                                                        and left_active_rur.market_type = left_active_rur_share.market_type\n                                                        and left_active_rur.registration_source_agg_ = left_active_rur_share.registration_source_agg_\n\n\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0443\u0448\u0435\u0434\u0448\u0438\u0445 \u0438 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0445\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c, \u0434\u0430\u0442\u0430\u043c\u0438 \u0438 LT \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\nselect * from left_active_all_with_share\nunion all\nselect * from left_active_rur_all\nunion all\nselect * from left_active_eur_usd_rur_kzt_all", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_lt_info_aggregated`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:18.297314Z", "completed_at": "2025-05-21T12:31:18.308759Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:18.350635Z", "completed_at": "2025-05-21T12:31:18.350645Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.18902826309204102, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_key_partner_metrics_aggregated", "compiled": true, "compiled_code": "with metrics_info as (select partner_id,\n'register' as event,\ncast(null as string) as currency,\ncast(null as string) as segments_aggregated,\nmin(date_trunc(partner_register_date,MONTH)) as month,\nsum(cast(null as float64)) as sum,\nsum(cast(null as float64)) as original_sum,\nsum(cast(null as float64)) as waba_sum_in_rubles,\nsum(cast(null as float64)) as waba_original_sum\nfrom `dwh-wazzup`.`dbt_nbespalov`.`mart_partners_metrics_by_month`\ngroup by 1,2,3,4\n\nunion all \n\nselect account_id as partner_id,\n'payment' as event,\n currency as currency,\n cast(null as string) as segments_aggregated,\nmin(paid_month) as month, \nsum(sum_in_rubles) as sum,\nsum(cast(null as float64)) as original_sum,\nsum(cast(null as float64)) as waba_sum_in_rubles,\nsum(cast(null as float64)) as waba_original_sum\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_payments_revenue_with_waba`\nwhere segment_type in ('of-partner','tech-partner')\ngroup by 1,2,3,4\n\n\nUNION ALL \n\nselect partner_id,\n'partner_50' as event,\ncast(null as string) as currency,\ncast(null as string) as segments_aggregated,\ndate_trunc(occured_date,MONTH) as month,\nnull as sum, \nnull as original_sum,\ncast(null as float64) as waba_sum_in_rubles,\ncast(null as float64) as waba_original_sum\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_fifty_discount_by_month_and_account`\n\nunion all\n\nselect partner_id as partner_id,\n'tech_partner_payment' as event,\n cast(null as string) as currency,\n cast(null as string) as segments_aggregated,\nmin(month) as month, \nsum(cast(null as float64)) as sum,\nsum(cast(null as float64)) as original_sum,\nsum(cast(null as float64)) as waba_sum_in_rubles,\nsum(cast(null as float64)) as waba_original_sum\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_is_client_active_by_month`\nwhere active_account_id is not null\ngroup by 1,2,3,4\n\nunion all \nselect partner_id,\n'discount' as event,\ncurrency,\ncast(null as string) as segments_aggregated,\npaid_month as month,\ndiscount_sum_in_rubles as sum, \ndiscount_sum_original as original_sum ,\ncast(null as float64) as waba_sum_in_rubles,\ncast(null as float64)as waba_original_sum\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_discount_by_month_and_account`\n\nUNION ALL \n\nselect account_id as partner_id,\n'reward' as event,\ncurrency,\ncast(null as string) as segments_aggregated,\npaid_month as month,\nsum_in_rubles as sum, \noriginal_sum as original_sum ,\ncast(null as float64) as waba_sum_in_rubles,\ncast(null as float64) as waba_original_sum\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_reward_by_month_and_account`\n\nUNION ALL\n\nselect (case when account_type in ('partner','tech-partner') then account_id\nwhen partner_type='tech-partner' then partner_id\nend\n) as partner_id,\n'revenue' as event,\n currency,\n (case when segments_aggregated='of-partner' then 'partner'\nwhen segments_aggregated='tech-partner' then 'tech-partner'\nend ) as segments_aggregated,\npaid_month as month,\n\nsum(sum_in_rubles) as sum,\nsum(original_sum) as original_sum,\nsum(waba_sum_in_rubles) as waba_sum_in_rubles,\nsum(waba_original_sum) as waba_original_sum\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_payments_revenue_with_waba`\nwhere segment_type in ('of-partner','tech-partner') or partner_type='tech-partner'\ngroup by 1,2,3,4,5\n\n),top_100 as (\nselect \n      account_id,\n      current_quarter\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_top_100_ru_of_partners`\n) \n    -- \u0410\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043a\u0438\nselect metrics_info.partner_id, -- \u0410\u043a\u043a\u0430\u0443\u043d\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043e\u0431\u0438\u0440\u0430\u044e\u0442\u0441\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0438\nmetrics_info.event,             -- reward - \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u0432\u044b\u043f\u043b\u0430\u0442\u044b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0443 \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, payment - \u043f\u0435\u0440\u0432\u043e\u0435 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u041b\u041a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c (\u043a\u043e\u0433\u0434\u0430 \u043e\u043d \u0431\u044b\u043b \u0432 \u0441\u0442\u0430\u0442\u0443\u0441\u0435 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430), revenue - \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u041b\u041a, discount - \u0441\u043a\u0438\u0434\u043a\u0430 \u043f\u0440\u0438 \u043e\u043f\u043b\u0430\u0442\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, register - \u0434\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, partner_50 - \u043f\u0435\u0440\u0432\u0430\u044f \u043e\u043f\u043b\u0430\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043f\u0440\u0438 \u0441\u043a\u0438\u0434\u043a\u0435 50%, tech_partner_payment - \u043f\u0435\u0440\u0432\u0430\u044f \u043e\u043f\u043b\u0430\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0442\u0435\u0445. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u043b\u0438\u0431\u043e \u0435\u0433\u043e \u0434\u043e\u0447\u043a\u043e\u0439\nmetrics_info.currency,          -- \u0432\u0430\u043b\u044e\u0442\u0430 \u0434\u043b\u044f \u043e\u043f\u043b\u0430\u0442 (revenue, discount)\nmetrics_info.month,             -- \u043c\u0435\u0441\u044f\u0446\nmetrics_info.sum,               -- \u0441\u0443\u043c\u043c\u0430 \u0434\u043b\u044f reward\nmetrics_info.original_sum,      -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0432\u0430\u043b\u044e\u0442\u0435 \u0434\u043b\u044f revenue \u0438 discount\nmetrics_info.waba_sum_in_rubles,-- \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0432\u0430\u0431\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\nmetrics_info.waba_original_sum, -- \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0432\u0430\u0431\u044b \u0432 \u0432\u0430\u043b\u044e\u0442\u0435\nprofile_info.region_type,       -- \u0440\u0435\u0433\u0438\u043e\u043d (\u0421\u041d\u0413, \u041d\u0415-\u0421\u041d\u0413, \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e)\nprofile_info.country,           -- \u0421\u0442\u0440\u0430\u043d\u0430\ncoalesce(segments_aggregated, profile_info.type) as  account_type,  -- \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 (\u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440, \u0442\u0435\u0445. \u043f\u0430\u0440\u0442\u043d\u0435\u0440)\nprofile_info.currency as partner_currency,                          -- \u0432\u0430\u043b\u044e\u0442\u0430 \u041b\u041a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n(case when top_100.account_id is not null then True else False end) as is_top_100   -- \u0435\u0441\u0442\u044c \u043b\u0438 \u044d\u0442\u043e\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0432 \u0442\u043e\u043f-100\n from metrics_info\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info \n            on metrics_info.partner_id=profile_info.account_id \nleft join  top_100\n        on top_100.account_id=metrics_info.partner_id\n            and date_trunc(metrics_info.month,quarter) = top_100.current_quarter\nwhere is_employee is false", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_key_partner_metrics_aggregated`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:18.294682Z", "completed_at": "2025-05-21T12:31:18.309169Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:18.351179Z", "completed_at": "2025-05-21T12:31:18.351189Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.23237848281860352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_ltv_info_aggregated", "compiled": true, "compiled_code": "with left_data_pre as (\nselect distinct\n        mart.currency,\n        mart.account_id,\n        first_value(live_month) over (partition by mart.account_id order by live_month) first_active_month,\n        live_month,\n        case when account_segment_type = '\u041a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442' then 'final_client'\n        when account_segment_type = '\u041e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440' then 'of-partner'\n        when account_segment_type = '\u0422\u0435\u0445. \u043f\u0430\u0440\u0442\u043d\u0435\u0440' then 'tech-partner'\n        end as segments_aggregated,\n        case when first_value(live_month) over (partition by mart.account_id order by live_month) = date_trunc(register_date,month) then 'new' else 'old' end as client_type,\n        cum_sum_up_to_live_month,\n        registration_source_agg,\n        LT\nfrom `dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_ltv_info` mart\njoin `dwh-wazzup`.`dbt_nbespalov`.`stg_accounts`  on mart.account_id = stg_accounts.account_id\njoin `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_attribution_data` sources on stg_accounts.account_id = sources.account_id\nwhere account_segment_type !='all'\n),\nleft_data_rn as (\n    select *,\n        date_add(left_data_pre.first_active_month,interval 11 month) month_after_eleven_months,\n        date_add(left_data_pre.first_active_month,interval 12 month) month_after_year,        \n        row_number() over (partition by account_id,month order by live_month desc) rn\nfrom left_data_pre\njoin `dwh-wazzup`.`dbt_nbespalov`.`stg_months` months on left_data_pre.first_active_month <= months.month\n                        and months.month <= date_add(left_data_pre.first_active_month,interval 11 month)\n                        and month >= live_month\n),\nleft_data as (\n    select *,\n    from left_data_rn\n    where rn = 1\n            and month = month_after_eleven_months\n\n),\n\n left_active_all as (\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_ ,\n        month,\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,\n        case when grouping(client_type) = 1 then 'all' else client_type end client_type_,\n        avg(cum_sum_up_to_live_month) LTV,\n        sum(cum_sum_up_to_live_month) LTV_sum,\n        count(distinct account_id) LTV_users_count,\n      'all' as market_type\nfrom left_data\ngroup by GROUPING SETS \n(\n  (segments_aggregated,month),\n        (client_type,month),\n        (segments_aggregated,month,client_type),\n        (month),\n\n  (segments_aggregated,month,registration_source_agg),\n        (client_type,month,registration_source_agg),\n        (segments_aggregated,month,client_type,registration_source_agg),\n        (month,registration_source_agg)\n\n)\n)\n,left_active_eur_usd_rur_kzt as (\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_ ,\n        month,\n                case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,\n        case when grouping(client_type) = 1 then 'all' else client_type end client_type_,\n        --count(distinct case when return_or_left_status in ('left','came_back_after_leaving_period') then account_id end )/count(distinct case when return_or_left_status in ('active','returned') then account_id end) left_share,\n        avg(cum_sum_up_to_live_month) LTV,\n        sum(cum_sum_up_to_live_month) LTV_sum,\n        count(distinct account_id) LTV_users_count,\n      case when currency in ('USD','EUR') then  'usd_eur' else 'ru_kzt' end  as market_type\nfrom left_data\nwhere currency in ('RUR','KZT','EUR','USD')\ngroup by GROUPING SETS \n(\n  (segments_aggregated,month,market_type),\n        (client_type,month,market_type),\n        (segments_aggregated,month,client_type,market_type),\n        (month,market_type),\n\n  (segments_aggregated,month,registration_source_agg,market_type),\n        (client_type,month,registration_source_agg,market_type),\n        (segments_aggregated,month,client_type,registration_source_agg,market_type),\n        (month,registration_source_agg,market_type)\n\n)\n)\n\n,left_active_rur as (\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_ ,   -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n        month,                                          -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\n                case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,   -- \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        case when grouping(client_type) = 1 then 'all' else client_type end client_type_,   -- \u0422\u0438\u043f \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n        avg(cum_sum_up_to_live_month) LTV,              -- lifetimevalue \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n        sum(cum_sum_up_to_live_month) LTV_sum,          -- \u0421\u0443\u043c\u043c\u0430 LTV \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n        count(distinct account_id) LTV_users_count,     -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044e\u0437\u0435\u0440\u043e\u0432 \u0437\u0430 LTV\n      currency as market_type                           -- \u0420\u044b\u043d\u043e\u043a\nfrom left_data\nwhere currency in ('RUR','KZT','EUR','USD')\ngroup by GROUPING SETS \n(\n  (segments_aggregated,month,market_type),\n        (client_type,month,market_type),\n        (segments_aggregated,month,client_type,market_type),\n        (month,market_type),\n\n  (segments_aggregated,month,registration_source_agg,market_type),\n        (client_type,month,registration_source_agg,market_type),\n        (segments_aggregated,month,client_type,registration_source_agg,market_type),\n        (month,registration_source_agg,market_type)\n)\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0443\u0448\u0435\u0434\u0448\u0438\u0445 \u0438 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0445\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c, \u0434\u0430\u0442\u0430\u043c\u0438 \u0438 LTV \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\nselect * from left_active_all\nunion all\nselect * from left_active_rur\nunion all\nselect * from left_active_eur_usd_rur_kzt", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_ltv_info_aggregated`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:18.302107Z", "completed_at": "2025-05-21T12:31:18.350045Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:18.430677Z", "completed_at": "2025-05-21T12:31:18.430689Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.26943325996398926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_key_partner_metrics_aggregated_granulation", "compiled": true, "compiled_code": "WITH metrics_info AS (\n    SELECT \n        account_id                 AS partner_id,\n        'register'                 AS event,\n        currency,\n        CAST(NULL AS string)       AS segments_aggregated,\n        MIN(partner_register_date) AS date,\n        SUM(CAST(NULL AS float64)) AS sum,\n        NULL                       AS sum_waba,\n        SUM(CAST(NULL AS float64)) AS original_sum,\n        SUM(CAST(NULL AS float64)) AS waba_sum_in_rubles,\n        SUM(CAST(NULL AS float64)) AS waba_original_sum\n    FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n    GROUP BY 1,2,3,4\n\nUNION ALL \n\n    SELECT \n        rww.account_id                  AS partner_id,\n        'payment'                       AS event,\n        api.currency                    AS currency,\n        CAST(null AS string)            AS segments_aggregated,\n        MIN(paid_date)                  AS date,\n        SUM(sum_in_rubles)              AS sum,\n        NULL                            AS sum_waba,\n        SUM(CAST(NULL AS float64))      AS original_sum,\n        SUM(CAST(NULL AS float64))      AS waba_sum_in_rubles,\n        SUM(CAST(NULL AS float64))      AS waba_original_sum\n    FROM `dwh-wazzup`.`dbt_nbespalov`.`int_payments_revenue_with_waba` rww\n    JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` api ON api.account_id = rww.account_id\n    WHERE segment_type in ('of-partner','tech-partner')\n    GROUP BY 1,2,3,4\n\n\nUNION ALL \n\n    SELECT \n        maa.partner_id,\n        'partner_50'          AS event,\n        api.currency,\n        CAST(NULL AS string)  AS segments_aggregated,\n        maa.occured_date      AS date,\n        NULL                  AS sum,\n        NULL                  AS sum_waba,\n        NULL                  AS original_sum,\n        CAST(NULL AS float64) AS waba_sum_in_rubles,\n        CAST(NULL AS float64) AS waba_original_sum\n    FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_fifty_discount_by_month_and_account` maa\n    JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` api ON api.account_id = maa.partner_id\n\nUNION ALL\n\n    SELECT \n        CASE WHEN segment_type = 'tech-partner' THEN mart_revenue_by_segments.account_id\n        WHEN partner_type = 'tech-partner' THEN mart_revenue_by_segments.partner_id END     AS partner_id,\n        'tech_partner_payment'                                                              AS event,\n        int_accounts_profile_info.currency,\n        CAST(NULL AS string)                                                                AS segments_aggregated,\n        MIN(paid_date)                                                                      AS date, \n        SUM(CAST(NULL AS float64))                                                          AS sum,\n        NULL                                                                                AS sum_waba,\n        SUM(CAST(NULL AS float64))                                                          AS original_sum,\n        SUM(CAST(NULL AS float64))                                                          AS waba_sum_in_rubles,\n        SUM(CAST(NULL AS float64))                                                          AS waba_original_sum\n    FROM `dwh-wazzup`.`dbt_nbespalov`.`mart_revenue_by_segments` mart_revenue_by_segments\n    JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` int_accounts_profile_info ON int_accounts_profile_info.account_id = CASE WHEN segment_type = 'tech-partner' THEN mart_revenue_by_segments.account_id\n        WHEN mart_revenue_by_segments.partner_type = 'tech-partner' THEN mart_revenue_by_segments.partner_id END\n    WHERE segments_aggregated = 'tech-partner' \n    GROUP BY 1,2,3,4\n\nUNION ALL \n\n    SELECT \n        partner_id,\n        'discount'              AS event,\n        currency,\n        CAST(NULL AS string)    AS segments_aggregated,\n        paid_date               AS date,\n        discount_sum_in_rubles  AS sum,\n        NULL                    AS sum_waba,\n        discount_sum_original   AS original_sum,\n        CAST(NULL AS float64)   AS waba_sum_in_rubles,\n        CAST(NULL AS float64)   AS waba_original_sum\n    FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_discounts_by_day_and_account`\n\nUNION ALL \n\n    SELECT \n        account_id                              AS partner_id,\n        'reward'                                AS event,\n        currency,\n        CAST(NULL AS string)                    AS segments_aggregated,\n        occured_date_sub                        AS date,\n        sum_in_rubles                           AS sum, \n        sum_in_rubles_waba                      AS sum_waba,\n        (original_sum + original_sum_waba)      AS original_sum,\n        CAST(NULL AS float64)                   AS waba_sum_in_rubles,\n        CAST(NULL AS float64)                   AS waba_original_sum\n    FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_reward_by_rewardtype_by_date`\n\nUNION ALL\n\n    SELECT \n        (CASE WHEN account_type in ('partner','tech-partner', 'tech-partner-postpay') THEN account_id \n              WHEN partner_type IN ('tech-partner', 'tech-partner-postpay') THEN partner_id END) AS partner_id,\n        'revenue'                                                                                AS event,\n        currency,\n        (CASE WHEN segment_type ='of-partner' THEN 'partner' \n            WHEN segment_type IN ('tech-partner', 'tech-partner-client') THEN 'tech-partner' \n            WHEN segment_type = 'tech-partner-postpay' THEN 'tech-partner-postpay' END) AS segments_aggregated,\n        paid_date                                                                                AS date,\n        SUM(sum_in_rubles)                                                                       AS sum,\n        NULL                                                                                     AS sum_waba,\n        SUM(original_sum)                                                                        AS original_sum,\n        SUM(waba_sum_in_rubles)                                                                  AS waba_sum_in_rubles,\n        SUM(waba_original_sum)                                                                   AS waba_original_sum\n    FROM `dwh-wazzup`.`dbt_nbespalov`.`int_payments_revenue_with_waba`\n    WHERE segment_type IN ('of-partner','tech-partner', 'tech-partner-postpay') OR partner_type IN ('tech-partner', 'tech-partner-postpay')\n    GROUP BY 1,2,3,4,5\n),\n\ntop_100 AS (\n    SELECT \n      account_id,\n      current_quarter\n    FROM `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_top_100_ru_of_partners`\n) \n    -- \u0410\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043a\u0438\nSELECT \n    metrics_info.partner_id, -- \u0410\u043a\u043a\u0430\u0443\u043d\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043e\u0431\u0438\u0440\u0430\u044e\u0442\u0441\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0438\n    metrics_info.event,             -- reward - \u0440\u0435\u0444\u0435\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u0432\u044b\u043f\u043b\u0430\u0442\u044b \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0443 \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, payment - \u043f\u0435\u0440\u0432\u043e\u0435 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u041b\u041a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c (\u043a\u043e\u0433\u0434\u0430 \u043e\u043d \u0431\u044b\u043b \u0432 \u0441\u0442\u0430\u0442\u0443\u0441\u0435 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430), revenue - \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u041b\u041a, discount - \u0441\u043a\u0438\u0434\u043a\u0430 \u043f\u0440\u0438 \u043e\u043f\u043b\u0430\u0442\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438, register - \u0434\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430, partner_50 - \u043f\u0435\u0440\u0432\u0430\u044f \u043e\u043f\u043b\u0430\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043f\u0440\u0438 \u0441\u043a\u0438\u0434\u043a\u0435 50%, tech_partner_payment - \u043f\u0435\u0440\u0432\u0430\u044f \u043e\u043f\u043b\u0430\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u0442\u0435\u0445. \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043c \u043b\u0438\u0431\u043e \u0435\u0433\u043e \u0434\u043e\u0447\u043a\u043e\u0439\n    metrics_info.currency,          -- \u0432\u0430\u043b\u044e\u0442\u0430 \u0434\u043b\u044f \u043e\u043f\u043b\u0430\u0442 (revenue, discount)\n    metrics_info.date,              -- \u0434\u0430\u0442\u0430\n    metrics_info.sum,               -- \u0441\u0443\u043c\u043c\u0430 \u0434\u043b\u044f reward\n    metrics_info.sum_waba,          -- \u0441\u0443\u043c\u043c\u0430 \u0434\u043b\u044f waba reward\n    metrics_info.original_sum,      -- \u0441\u0443\u043c\u043c\u0430 \u0432 \u0432\u0430\u043b\u044e\u0442\u0435 \u0434\u043b\u044f revenue \u0438 discount\n    metrics_info.waba_sum_in_rubles,-- \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0432\u0430\u0431\u044b \u0432 \u0440\u0443\u0431\u043b\u044f\u0445\n    metrics_info.waba_original_sum, -- \u0441\u0443\u043c\u043c\u0430 \u043f\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0432\u0430\u0431\u044b \u0432 \u0432\u0430\u043b\u044e\u0442\u0435\n    profile_info.region_type,       -- \u0440\u0435\u0433\u0438\u043e\u043d (\u0421\u041d\u0413, \u041d\u0415-\u0421\u041d\u0413, \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e)\n    profile_info.country,           -- \u0421\u0442\u0440\u0430\u043d\u0430\n    COALESCE(segments_aggregated, profile_info.type) AS  account_type,  -- \u0442\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 (\u043e\u0444. \u043f\u0430\u0440\u0442\u043d\u0435\u0440, \u0442\u0435\u0445. \u043f\u0430\u0440\u0442\u043d\u0435\u0440)\n    profile_info.currency AS partner_currency,                          -- \u0432\u0430\u043b\u044e\u0442\u0430 \u041b\u041a \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430   \n    (CASE WHEN top_100.account_id IS NOT NULL THEN True ELSE False END) AS is_top_100   -- \u0435\u0441\u0442\u044c \u043b\u0438 \u044d\u0442\u043e\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440 \u0432 \u0442\u043e\u043f-100\nFROM metrics_info\nLEFT JOIN `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info ON metrics_info.partner_id=profile_info.account_id \nLEFT JOIN  top_100 ON top_100.account_id=metrics_info.partner_id AND DATE_TRUNC(metrics_info.date,quarter) = top_100.current_quarter\nWHERE is_employee IS FALSE", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_key_partner_metrics_aggregated_granulation`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:18.555023Z", "completed_at": "2025-05-21T12:31:18.562494Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:18.567051Z", "completed_at": "2025-05-21T12:31:18.567060Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.09563970565795898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_partners_metrics_by_month_dynamics", "compiled": true, "compiled_code": "with mart_partners_metrics_by_month_dynamics as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_merics_dynamics`\n),\ntop_100 as (\n    select \n          account_id,\n          current_quarter\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_top_100_ru_of_partners`\n   -- where date_trunc(current_date(),quarter) = current_quarter\n)   -- \u0414\u0438\u043d\u0430\u043c\u0438\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0441\u043a\u0438\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c\nselect mart_partners_metrics_by_month_dynamics.*,\n        russian_country_name,                                                           -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\n        account_currency_by_country,                                                    -- \u0412\u0430\u043b\u044e\u0442\u0430 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0435\n        region_international,                                                           -- \u0420\u0435\u0433\u0438\u043e\u043d\n        partner_discount,                                                               -- \u0421\u043a\u0438\u0434\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n        partner_register_date,                                                          -- \u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043a\u0438\n        case when top_100.account_id is not null then TRUE else FALSE end as is_top_100 -- \u041f\u0430\u0440\u0442\u043d\u0435\u0440 \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u0442\u043e\u043f100 \u043f\u043e \u0432\u044b\u0440\u0443\u0447\u043a\u0435?\nfrom mart_partners_metrics_by_month_dynamics\nleft join top_100 on mart_partners_metrics_by_month_dynamics.partner_id = top_100.account_id \n                                            and date_trunc(mart_partners_metrics_by_month_dynamics.month,quarter) = top_100.current_quarter\nleft join `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info on mart_partners_metrics_by_month_dynamics.partner_id = profile_info.account_Id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_partners_metrics_by_month_dynamics`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:18.558021Z", "completed_at": "2025-05-21T12:31:18.566435Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:18.567664Z", "completed_at": "2025-05-21T12:31:18.567674Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.0971372127532959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_subscriptions_retention", "compiled": true, "compiled_code": "with retention_based_on_subscriptions as(\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_creating_intervals_based_on_first_subscription_period_with_seven_or_more_days`\n    where cnt >= 7\n    and account_type != 'employee'\n),\nretention_based_on_registrations as(\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_creating_intervals_based_on_first_registration_period_with_seven_or_more_days`\n    where cnt >= 7 \n    and account_type != 'employee'\n),\nunion_operation as (\nselect *,'subscriptions' as type\nfrom retention_based_on_subscriptions\nunion all\nselect *,'registrations' as type\nfrom retention_based_on_registrations)\nselect *    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043a\u043e\u0433\u043e\u0440\u043e\u0442\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043f\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430\u043c.\u041e\u043d\u0430 \u043d\u0443\u0436\u043d\u0430, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043e\u0442\u0447\u0435\u0442\u0435 \u043d\u0435 \u0432\u0430\u0436\u043d\u043e, \u043a\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u0432\u043d\u0435\u0441 \u043e\u043f\u043b\u0430\u0442\u0443 \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443. \u0412\u0430\u0436\u043d\u043e \u0442\u043e, \u043a\u043e\u043c\u0443 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430!\nfrom union_operation\nwhere subscription_period is null or subscription_period not in (3,24)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_subscriptions_retention`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:18.560568Z", "completed_at": "2025-05-21T12:31:18.568115Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:18.649818Z", "completed_at": "2025-05-21T12:31:18.649832Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.13682246208190918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_partner_and_child_info", "compiled": true, "compiled_code": "with profile_info as (\n    select account_id\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n    where is_employee is true\n)   -- \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\u0445 \u0438 \u0438\u0445 \u0434\u043e\u0447\u043a\u0430\u0445\nselect *,\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_partners_and_children_info` partners_and_children_info\nwhere child_id not in (\n    select account_id\n    from profile_info\n)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_partner_and_child_info`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:18.563074Z", "completed_at": "2025-05-21T12:31:18.568715Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:18.650402Z", "completed_at": "2025-05-21T12:31:18.650411Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.17442893981933594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_sales_managers", "compiled": true, "compiled_code": "with childs_registration_activation_info as (\n  select partner_id,\n        reg_month,\n        converted_daughters_count as activated_users,\n        all_daughters_count as registrations_count,\n  from  `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_reg_to_active`\n  where type = 'monthly'\n),\n    payments_info as (\n  select distinct partner_id,\n          month as first_payment_month\n  from `dwh-wazzup`.`dbt_nbespalov`.`mart_key_partner_metrics_aggregated`\n  where event in('payment','tech_partner_payment') \n\n),\n    revenue_info as (\n\n\n--first version\n/*\n  select partner_id,\n          value as revenue_amount,\n          month as revenue_month\n  from dbt_prod.mart_partners_metrics_by_month_dynamics \n  where metrics = 'sum_in_rubles_partner_paid' --\u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u043e\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n            --and metrics = 'sum_in_rubles' --\u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u043e\u0442 \u043f\u0430\u0440\u0442\u0435\u043d\u0440\u0430 + \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n*/\nselect \n              partner_id,\n              month as revenue_month,\n              sum(sum) as revenue_amount,\n              sum(waba_sum_in_rubles) as waba_revenue_amount\n              \n  from `dwh-wazzup`.`dbt_nbespalov`.`mart_key_partner_metrics_aggregated`\n  where event in ('revenue') \n  group by partner_id,month\n\n\n), mart_partners_key_metrics_for_hypothesis as (\n  select partner_id,\n         date as month,\n         sum(case when metric = 'daughters_count' then value end) active_users_count, -- \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0434\u043e\u0447\u0435\u043a\n         sum(case when metric = 'paid_channels_quantity' then value end) sold_channels_count, --\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0443\u043f\u043b\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435\n  from  `dwh-wazzup`.`dbt_nbespalov`.`mart_partners_key_metrics_for_hypothesis`\n  where type = 'monthly'\n  group by partner_id,\n                date\n), /*avg_price_info as ( --\u043d\u0435 \u043d\u0443\u0436\u0435\u043d\n  select partner_id,\n          paid_month as avg_price_month,\n          sum_in_rubles,--\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432 \u0432\u044b\u0440\u0443\u0447\u043a\u0443 \u043e\u0442 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n          distinct_users_count\n  from dbt_swazzup.int_accounts_partners_revenue_by_month\n  where partner_id is not null\n),\n*/\namocrm_info as (\n  select distinct company_id,\n                name,\n                responsible_user_id,\n                replace(account_number,'-','') account_number,\n                created_at,\n                updated_at,\n                row_number() over (partition by account_number order by created_at desc) rn,\n                manager_name\nfrom `dwh-wazzup`.`wazzup`.`amocrm_companies` amocrm_companies\njoin `dwh-wazzup`.`wazzup`.`sales_managers` sales_managers on amocrm_companies.responsible_user_id = sales_managers.manager_code\n\n)\n    -- \u0412\u044b\u0440\u0443\u0447\u043a\u0430 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u043e\u0432 \u043f\u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0430\u043c \u0438\u0437 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043a\u0438\nselect \n        manager_name,                                       -- \u0418\u043c\u044f \u043d\u0430\u0448\u0435\u0433\u043e \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430\n       profile_info.account_id as partner_id,               -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430\n       stg_months.month,                                    -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\n        case when stg_months.month = date_trunc(partner_register_date,month)  then profile_info.account_id end  partnerships_count, -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u043a\n        registrations_count,                                -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439\n        payments_info.partner_id as first_payments_count,   -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0432\u044b\u0445 \u043e\u043f\u043b\u0430\u0442\n        revenue_info.partner_id as partner_id_for_revenue,  -- ID \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u0430 \u0434\u043b\u044f \u0432\u044b\u0440\u0443\u0447\u043a\u0438\n        revenue_amount revenue_amount,                      -- \u0421\u0443\u043c\u043c\u0430 \u0432\u044b\u0440\u0443\u0447\u043a\u0438\n        waba_revenue_amount as waba_revenue_amount,         -- \u0421\u0443\u043c\u043c\u0430 \u0432\u044b\u0440\u0443\u0447\u043a\u0438 \u0437\u0430 WABA\n        activated_users,                                    -- \u0410\u043a\u0442\u0438\u0432\u0438\u0440\u0438\u0432\u0430\u043d\u043e \u044e\u0437\u0435\u0440\u043e\u0432\n       active_users_count as active_users_count,            -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u044e\u0437\u0435\u0440\u043e\u0432\n       sold_channels_count as sold_channels_count           -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u043d\u0430\u043b\u043e\u0432\nfrom `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info` profile_info\njoin amocrm_info on cast(profile_info.account_id as string) = amocrm_info.account_number and rn = 1\njoin `dwh-wazzup`.`dbt_nbespalov`.`stg_months` stg_months on   stg_months.month >=  date_trunc(partner_register_date,month)\n                            and stg_months.month <= date_trunc(current_date(),month)\n\nleft join  payments_info on  payments_info.first_payment_month = stg_months.month \n                              and payments_info.partner_id = profile_info.account_id \n\nleft join childs_registration_activation_info regs_to_active_info \n                                                                    on regs_to_active_info.partner_id = profile_info.account_id\n                                                                        and regs_to_active_info.reg_month = stg_months.month\nleft join revenue_info on \n                            profile_info.account_Id = revenue_info.partner_id\n                            and stg_months.month = revenue_info.revenue_month\n\nleft join mart_partners_key_metrics_for_hypothesis on profile_info.account_id = mart_partners_key_metrics_for_hypothesis.partner_id\n                                                    and stg_months.month = mart_partners_key_metrics_for_hypothesis.month\n\nwhere profile_info.type = case when manager_name in ('\u0418\u043d\u043d\u0430 \u0411\u043e\u0440\u043e\u0434\u0438\u043d\u0430','\u0412\u0430\u0441\u0438\u043b\u0438\u0439 \u041f\u0440\u0430\u0441\u043e\u043b\u043e\u0432') then 'tech-partner' else 'partner' end\n      and currency in ('RUR','KZT')", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_sales_managers`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:18.731042Z", "completed_at": "2025-05-21T12:31:18.733562Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:18.734004Z", "completed_at": "2025-05-21T12:31:18.734012Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04457521438598633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.int_subscriptions_active_or_left", "compiled": true, "compiled_code": "with\n    left_or_active as (\n        select distinct\n            date_trunc(date, month) as month, \n            account_id, \n            return_or_left_status\n        from\n            `dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts_with_partner_and_account_type_with_dates`\n    ),\n\n    left_or_active_wide as (\n        \n        select month,   -- \u041c\u0435\u0441\u044f\u0446\n        account_id,     -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        max(case when return_or_left_status in ('active','returned') then True else False end) as is_active,    -- \u0410\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0430\u043a\u043a\u0430\u0443\u043d\u0442?\n        max(case when return_or_left_status ='left' then True  else False  end) as has_left,                    -- \u041a\u043b\u0438\u0435\u043d\u0442 \u0443\u0445\u043e\u0434\u0438\u043b?\n        from left_or_active\n        group by 1,2\n\n    ),\n\n    subscription_retention as (\n        select account_id,   -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n        max(case when  type = 'subscriptions' and time_period_number = 2 and cnt >= 7 then True else False end) as is_retained_second_month, -- \u041a\u043b\u0438\u0435\u043d\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043b\u0441\u044f 2 \u043c\u0435\u0441\u044f\u0446\u0430?\n        max(first_subscription_start) as first_subscription_start   -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n        from `dwh-wazzup`.`dbt_nbespalov`.`mart_subscriptions_retention`\n        group by 1\n    ),\n\n\n    retained_second_month as (\n        select\n            left_or_active_wide.*,\n            is_retained_second_month,\n            first_subscription_start\n        from left_or_active_wide\n        left join\n            subscription_retention\n            on left_or_active_wide.account_id = subscription_retention.account_id\n    )\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438 \u0438\u043b\u0438 \u0443\u0448\u0435\u0434\u0448\u0438\u043c\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438\nselect *\nfrom  retained_second_month", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_active_or_left`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:18.776699Z", "completed_at": "2025-05-21T12:31:18.781351Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:18.781802Z", "completed_at": "2025-05-21T12:31:18.781809Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.044116973876953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_feature_usage", "compiled": true, "compiled_code": "with analytics_usages as (\n    select  cast(account_id as integer) as account_id, month,  'analytics_usage' as feature from `dwh-wazzup`.`dbt_nbespalov`.`int_features_analytics_usages_by_month`\n),\n\niframe_usages as (\n    select  cast(account_id as integer) as account_id, month, iframe_open_employees , 'iframe_usage' as feature from `dwh-wazzup`.`dbt_nbespalov`.`int_features_iframe_usage_by_month`\n),\n\nsstt as (\n    select  cast(account_id as integer) as account_id, month,  'sstt' as feature from `dwh-wazzup`.`dbt_nbespalov`.`int_features_messages_sstt`\n),\n\ngroupchats as (\n    select  cast(account_id as integer) as account_id, month,  'groupchats' as feature from `dwh-wazzup`.`dbt_nbespalov`.`int_features_groupchats`\n),\n\nnotifications as (\n    select  cast(account_id as integer) as account_id, month, 'notifications' as feature from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_notifications_active_by_month`\n    where active_days>=7\n),\n\nnet_churn_revenue as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_net_churn_revenue`\n),\n\nonboarding as (\n    select  cast(account_id as integer) as account_id,\n    russian_country_name,\n    account_registration_type_current,\n    region_international,\n    account_currency,\n    registration_date,\n    date_trunc(registration_date, month) as registration_month\n    from `dwh-wazzup`.`dbt_nbespalov`.`mart_onboarding__accounts_integrations_subscriptions_channels_messages`\n), \n\nactive_or_left as (\n    select account_id, \n    month, \n    is_active, \n    has_left from  `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_active_or_left`\n),\n\nretained_second_month as (\n   select account_id,\n   max(is_retained_second_month) as is_retained_second_month,\n   max(date_trunc(first_subscription_start,month)) as first_subscription_start_month\n    from   `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_active_or_left`\n   group by 1\n),\n\nhas_max_by_month as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`int_subscriptions_deduplicated_by_id_tariff`\n),\n\n\nfeatures_by_month as (\nselect coalesce(coalesce(coalesce(coalesce(coalesce(coalesce(coalesce(analytics_usages.month, iframe_usages.month), sstt.month),groupchats.month), notifications.month), active_or_left.month), has_max_by_month.month), net_churn_revenue.paid_month) as month, \ncoalesce(coalesce(coalesce(coalesce(coalesce(coalesce(coalesce(analytics_usages.account_id, iframe_usages.account_id), sstt.account_id),groupchats.account_id), notifications.account_id), active_or_left.account_id), has_max_by_month.account_id), net_churn_revenue.account_id)  as account_id, \nmax(case when analytics_usages.account_id is not null then True else False end) as has_analytics_usage,\nmax(case when iframe_usages.account_id is not null then True else False end)  as has_iframe_usage,\nmax(case when sstt.account_id is not null then True else False end)  as has_sstt_usage,\nmax(case when groupchats.account_id is not null then True else False end)  as has_groupchats_usage,\nmax(case when notifications.account_id is not null then True else False end)  as has_notifications_usage,\nmax(is_active) as is_active,\nmax(has_left) as has_left,\nmax(iframe_open_employees) as iframe_open_employees,\nmax(has_max_by_month.has_max) as has_max,\nmax(sum_in_rubles_downsell_loss) as sum_in_rubles_downsell_loss,\nmax(sum_in_rubles_returned_revenue) as sum_in_rubles_returned_revenue,\nmax(sum_in_rubles_churn_loss) as sum_in_rubles_churn_loss,\nmax(sum_in_rubles_new_users_revenue) as sum_in_rubles_new_users_revenue,\nmax(sum_in_rubles_old_users_new_subscription) as sum_in_rubles_old_users_new_subscription,\nmax(sum_in_rubles_upsell_revenue) as sum_in_rubles_upsell_revenue\n   from analytics_usages\nfull outer join iframe_usages\non analytics_usages.account_id = iframe_usages.account_id and analytics_usages.month=iframe_usages.month\nfull outer join sstt\non iframe_usages.account_id = sstt.account_id and iframe_usages.month=sstt.month\nfull outer join groupchats\non groupchats.account_id = iframe_usages.account_id and iframe_usages.month=groupchats.month\nfull outer join notifications\non notifications.account_id = iframe_usages.account_id and iframe_usages.month=notifications.month\nfull outer join active_or_left\non active_or_left.account_id=iframe_usages.account_id and iframe_usages.month=active_or_left.month\nfull outer join has_max_by_month\non has_max_by_month.account_id=iframe_usages.account_id and has_max_by_month.month= iframe_usages.month\nfull outer join net_churn_revenue\non net_churn_revenue.account_id=iframe_usages.account_id and iframe_usages.month=net_churn_revenue.paid_month\ngroup by 1,2\n),\n\nfeatures_with_account_info as (\n    select month, \n    coalesce(features_by_month.account_id, onboarding.account_id) as account_id,\n    has_analytics_usage, \n    has_iframe_usage, \n    has_sstt_usage, \n    has_groupchats_usage, \n    has_notifications_usage, \n    is_active, \n    has_left, \n    iframe_open_employees,   \n    has_max,\n    sum_in_rubles_downsell_loss,\n    sum_in_rubles_returned_revenue,\n    sum_in_rubles_churn_loss,\n    sum_in_rubles_new_users_revenue,\n    sum_in_rubles_old_users_new_subscription,\n    sum_in_rubles_upsell_revenue,\n    russian_country_name,\n    account_registration_type_current,\n    account_currency,\n    registration_date,\n    registration_month\n    from  features_by_month \n    left join  onboarding\n                on features_by_month.account_id=onboarding.account_id\n    ),\n\naccounts_active_month_after_registration_month as (\n    SELECT account_id FROM features_with_account_info\n    where account_registration_type_current is not null\n    group by 1\n    having max(registration_month)<min(month)\n    ),\n\nunion_with_registration_info as (\n    select * from features_with_account_info\n    UNION ALL \n    select  distinct registration_month as month,       -- \u0443\u0447\u0435\u0442\u043d\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\n    account_id,                                         -- ID \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\n    False as has_analytics_usage,                       -- \u041f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u043e\u0439  \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435 - https://www.notion.so/Feature-Usage-269170c780bb42a9ab5c949bc34935ca?pvs=4\n    False as has_iframe_usage,                          -- \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0430\u0439\u0444\u0440\u0435\u0439\u043c  \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435 https://www.notion.so/Feature-Usage-17a51441f7c34e568e50c70de900c725?pvs=4\n    False as has_sstt_usage,                            -- \u041f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u043e\u0439 \u0433\u043e\u043b\u043e\u0441\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435 - https://www.notion.so/Feature-Usage-5f51c77233604a8ba862219d29318b08?pvs=4\n    false as has_groupchats_usage,                      -- \u041f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0433\u0440\u0443\u043f\u043f\u043e\u0432\u044b\u043c\u0438 \u0447\u0430\u0442\u0430\u043c\u0438 \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435 - https://www.notion.so/Feature-Usage-743e4d5dd0b8480ea8cb3e055a2177e7?pvs=4\n    false as has_notifications_usage,                   -- \u041f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f\u043c\u0438 \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435 - https://www.notion.so/bfe09d016b2249a8a7816372944b2a6c?pvs=4#11ac57f0e617410991ce03fb93d334d3\n    false as is_active,                                 -- \u0411\u044b\u043b\u0430 \u043b\u0438 \u0430\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435\n    false as has_left,                                  -- \u0417\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u0430\u0441\u044c \u043b\u0438 \u0430\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u044d\u0442\u043e\u043c \u043c\u0435c\u044f\u0446\u0435\n    null as iframe_open_employees,                      -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432, \u0437\u0430\u0445\u043e\u0434\u0438\u0432\u0448\u0438\u0445 \u0432 \u0430\u0439\u0444\u0440\u0435\u0439\u043c\n    false as has_max,                                   -- \u0415\u0441\u0442\u044c \u043b\u0438 \u0430\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u043e\u043f\u043b\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 max \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435\n    0 as sum_in_rubles_downsell_loss,                   -- \u041f\u043e\u0442\u0435\u0440\u044f\u043d\u043d\u0430\u044f \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445 \u043e\u0442 \u043f\u043e\u043d\u0438\u0436\u0435\u043d\u0438\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 https://www.notion.so/4b61bed20364452ab4cd3aac5de09590?pvs=4\n    0 as sum_in_rubles_returned_revenue,                -- \u0412\u044b\u0440\u0443\u0447\u043a\u0430 \u043e\u0442 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0445\u0441\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 https://www.notion.so/4b61bed20364452ab4cd3aac5de09590?pvs=4\n    0 as sum_in_rubles_churn_loss,                      -- \u041f\u043e\u0442\u0435\u0440\u044f\u043d\u043d\u0430\u044f \u0432\u044b\u0440\u0443\u0447\u043a\u0430 \u043e\u0442 \u043d\u0435\u043f\u0440\u043e\u0434\u043b\u0435\u043d\u043d\u044b\u0445/\u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a https://www.notion.so/4b61bed20364452ab4cd3aac5de09590?pvs=4\n    0 as sum_in_rubles_new_users_revenue,               -- \u0412\u044b\u0440\u0443\u0447\u043a\u0430 \u043e\u0442 \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 https://www.notion.so/4b61bed20364452ab4cd3aac5de09590?pvs=4\n    0 as sum_in_rubles_old_users_new_subscription,      -- \u0412\u044b\u0440\u0443\u0447\u043a\u0430 \u043e\u0442 \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 https://www.notion.so/4b61bed20364452ab4cd3aac5de09590?pvs=4\n    0 as sum_in_rubles_upsell_revenue,                  -- \u0412\u044b\u0440\u0443\u0447\u043a\u0430 \u043e\u0442 \u043f\u043e\u0432\u044b\u0448\u0435\u043d\u0438\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u043e\u0434\u043f\u0438\u0441\u043e\u043a \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 https://www.notion.so/4b61bed20364452ab4cd3aac5de09590?pvs=4\n    russian_country_name,                               -- \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\n    account_registration_type_current,                  -- \u0422\u0438\u043f \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n    account_currency,                                   -- \u0422\u0435\u043a\u0443\u0449\u0430\u044f \u0432\u0430\u043b\u044e\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n    registration_date,                                  -- \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n    registration_month                                  -- \u041c\u0435\u0441\u044f\u0446 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n    from  features_with_account_info \n    where exists \n    (select account_id from accounts_active_month_after_registration_month \n    where accounts_active_month_after_registration_month.account_id=features_with_account_info.account_id ) \n),\n\nfeature_usages_and_profile_info as (\n\nselect union_with_registration_info.*,\n    is_retained_second_month,           -- True, \u0435\u0441\u043b\u0438 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0435\u0441\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0432\u0442\u043e\u0440\u043e\u0439 \u043c\u0435\u0441\u044f\u0446\n    first_subscription_start_month      -- \u0414\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438\n    from union_with_registration_info \n    left join retained_second_month \n    on retained_second_month.account_id=union_with_registration_info.account_id\n    \n    )\n,int_accounts_who_paid__defining_abcx_segmentation_type as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_abcx_segmentation_defining_abcx_segmentation_type`\n),\nprofile_info as (\n    select *\n    from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_profile_info`\n)\n    -- \u041a\u0430\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0444\u0438\u0447\u0438 \u0432\u0430\u0437\u0437\u0430\u043f \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c\n select feature_usages_and_profile_info.*,\n       abcx_segment ,       -- ABCX \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f\n       is_employee,         -- True, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430\n       region_international -- \u0420\u0435\u0433\u0438\u043e\u043d\n  from feature_usages_and_profile_info\n  left join int_accounts_who_paid__defining_abcx_segmentation_type \n                                                on feature_usages_and_profile_info.account_id = int_accounts_who_paid__defining_abcx_segmentation_type.account_id\n                                                and feature_usages_and_profile_info.month  =  int_accounts_who_paid__defining_abcx_segmentation_type.live_month\n  left join  profile_info on feature_usages_and_profile_info.account_id = profile_info.account_id", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_feature_usage`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:18.822381Z", "completed_at": "2025-05-21T12:31:18.824996Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:18.825412Z", "completed_at": "2025-05-21T12:31:18.825419Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.04291415214538574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_retention_of_second_month", "compiled": true, "compiled_code": "with all_data as (\nselect accounts.account_Id,\n        case when accounts.account_registration_type_current in ('referal_code','standart') then 'final_client'\n                      when accounts.account_registration_type_current = 'partner_code' then 'of-partner'\n                      when accounts.account_registration_type_current = 'tech_partner_code' then 'tech-partner'\n            end as segments_aggregated,\n        accounts.account_currency as currency,\n        accounts.month,\n        case when registration_month = month then 'new' else 'old' end as client_type,\n        case when is_retained_second_month then accounts.account_id end retained_users,\n        sources.registration_source_agg\nfrom `dwh-wazzup`.`dbt_nbespalov`.`mart_feature_usage` accounts\njoin `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_attribution_data` sources on accounts.account_id = sources.account_id\nwhere  first_subscription_start_month = month\nand accounts.account_registration_type_current is not null\nand accounts.account_registration_type_current in ('referal_code','standart','partner_code','tech_partner_code')\n\n), retention_all as (\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_ ,\n        month,\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,\n        case when grouping(client_type) = 1 then 'all' else client_type end client_type_,\n        count(distinct retained_users) retained_users_for_second_month_retention,\n        count(distinct account_id) all_users_for_second_month_retention,\n        count(distinct retained_users)/IF(count(distinct account_id) = 0,1,count(distinct account_id)) retention_of_second_month,\n      'all' as market_type\nfrom all_data\ngroup by GROUPING SETS \n(\n  (segments_aggregated,month),\n        (client_type,month),\n        (segments_aggregated,month,client_type),\n        (month),\n\n  (segments_aggregated,month,registration_source_agg),\n        (client_type,month,registration_source_agg),\n        (segments_aggregated,month,client_type,registration_source_agg),\n        (month,registration_source_agg)\n)\n\n\n),retention_eur_usd_rur_kzt as (\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_ ,\n        month,\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,\n        case when grouping(client_type) = 1 then 'all' else client_type end client_type_,\n        count(distinct retained_users) retained_users_for_second_month_retention,\n        count(distinct account_id) all_users_for_second_month_retention,\n        count(distinct retained_users)/IF(count(distinct account_id) = 0,1,count(distinct account_id)) retention_of_second_month,\n\n      case when currency in ('USD','EUR') then  'usd_eur' else 'ru_kzt' end  as market_type\nfrom all_data\nwhere currency in ('RUR','KZT','EUR','USD')\ngroup by GROUPING SETS \n(\n  (segments_aggregated,month,market_type),\n        (client_type,month,market_type),\n        (segments_aggregated,month,client_type,market_type),\n        (month,market_type),\n\n  (segments_aggregated,month,registration_source_agg,market_type),\n        (client_type,month,registration_source_agg,market_type),\n        (segments_aggregated,month,client_type,registration_source_agg,market_type),\n        (month,registration_source_agg,market_type)\n)\n)    \n,retention_rur as (\nselect  case when grouping(segments_aggregated) =1 then 'all' else segments_aggregated end segments_aggregated_ ,               -- \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u0441\u043b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438\n        month,                                                                              -- \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0441\u044f\u0446\n        case when grouping(registration_source_agg) = 1 then 'all' else registration_source_agg end registration_source_agg_,   -- \u0410\u0433\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438\n        case when grouping(client_type) = 1 then 'all' else client_type end client_type_,   -- \u0422\u0438\u043f \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n        count(distinct retained_users) retained_users_for_second_month_retention,           -- \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 2 \u043c\u0435\u0441\u044f\u0446 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n        count(distinct account_id) all_users_for_second_month_retention,                    -- \u0412\u0441\u0435 \u044e\u0437\u0435\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u043b\u0438\u0441\u044c \u043d\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0432 2 \u043c\u0435\u0441\u044f\u0446\u0430\n        count(distinct retained_users)/IF(count(distinct account_id) = 0,1,count(distinct account_id)) retention_of_second_month,   -- \u0414\u043e\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 2 \u043c\u0435\u0441\u044f\u0446\u0430\n      currency as market_type       -- \u0420\u044b\u043d\u043e\u043a\nfrom all_data\nwhere currency in ('RUR','KZT','EUR','USD')\ngroup by GROUPING SETS \n(\n  (segments_aggregated,month,market_type),\n        (client_type,month,market_type),\n        (segments_aggregated,month,client_type,market_type),\n        (month,market_type),\n\n  (segments_aggregated,month,registration_source_agg,market_type),\n        (client_type,month,registration_source_agg,market_type),\n        (segments_aggregated,month,client_type,registration_source_agg,market_type),\n        (month,registration_source_agg,market_type)\n)\n    -- \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043d\u0430 2 \u043c\u0435\u0441\u044f\u0446\u0430\n)\nselect * from retention_all\nunion all\nselect * from retention_rur\nunion all\nselect * from retention_eur_usd_rur_kzt", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_retention_of_second_month`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-21T12:31:18.866862Z", "completed_at": "2025-05-21T12:31:18.871124Z"}, {"name": "execute", "started_at": "2025-05-21T12:31:18.871573Z", "completed_at": "2025-05-21T12:31:18.871580Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04409933090209961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.Profeat_site.mart_all_metrics_for_commercial_report", "compiled": true, "compiled_code": "with mart_revenue_by_segments as (\n        select * from `dwh-wazzup`.`dbt_nbespalov`.`mart_revenue_by_segments_aggregated`\n), \n    mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_lt_info_aggregated as (\n        select * from `dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_lt_info_aggregated`\n), \n    mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_ltv_info_aggregated as (\n        select * from `dwh-wazzup`.`dbt_nbespalov`.`mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_ltv_info_aggregated`\n), \n    mart_c1_aggregated as (\n        select * from `dwh-wazzup`.`dbt_nbespalov`.`mart_c1_aggregated`\n),  \n    mart_active_accounts_by_month_by_segment_aggregated_active_at_the_end_of_the_month as (\n        select * from `dwh-wazzup`.`dbt_nbespalov`.`mart_active_accounts_by_month_by_segment_aggregated_active_at_the_end_of_the_month`\n),\n    mart_accounts_registration_sources_aggregated as (\n        select * from `dwh-wazzup`.`dbt_nbespalov`.`mart_accounts_registration_sources_aggregated`\n),\n    int_channels_active_paid_monthly_aggregated as (\n        select * from `dwh-wazzup`.`dbt_nbespalov`.`int_channels_active_paid_monthly_aggregated`\n),\n    int_accounts_partners_metrics_for_partners_active_users_aggregated as (\n        select * from `dwh-wazzup`.`dbt_nbespalov`.`int_accounts_partners_metrics_for_partners_active_users_aggregated`\n),mart_retention_of_second_month as (\n    select * from `dwh-wazzup`.`dbt_nbespalov`.`mart_retention_of_second_month`\n)   -- \u0412\u0441\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0434\u043b\u044f \u0440\u0435\u043a\u043b\u0430\u043c\u043d\u043e\u0433\u043e \u043e\u0442\u0447\u0435\u0442\u0430\n  select commercial_report.*,\n          mart_revenue_by_segments.*except(segments_aggregated_,client_type_,paid_month,market_type,registration_source_agg_),\n          mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_lt_info_aggregated.*except(segments_aggregated_,client_type_,month,market_type,registration_source_agg_),\n          mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_ltv_info_aggregated.*except(segments_aggregated_,client_type_,month,market_type,registration_source_agg_),\n          mart_c1_aggregated.*except(segments_aggregated_,client_type_,registration_month,market_type,registration_source_agg_),\n          mart_active_accounts_by_month_by_segment_aggregated_active_at_the_end_of_the_month.*except(segments_aggregated_,client_type_,month,market_type,registration_source_agg_),\n          mart_accounts_registration_sources_aggregated.*except(segments_aggregated_,client_type_,registration_month,market_type,registration_source_agg_),\n          int_channels_active_paid_monthly_aggregated.*except(segments_aggregated_,client_type_,month,market_type,registration_source_agg_),\n          int_accounts_partners_metrics_for_partners_active_users_aggregated.*except(segments_aggregated_,client_type_,month,market_type,registration_source_agg_),\n          mart_retention_of_second_month.*except(segments_aggregated_,client_type_,month,market_type,registration_source_agg_)\n  from `dwh-wazzup`.`analytics_tech`.`metrics_template_for_commercial_director_report` commercial_report\n  left join mart_revenue_by_segments\n                                    on commercial_report.segments_aggregated_ = mart_revenue_by_segments.segments_aggregated_\n                                       and commercial_report.client_type_ = mart_revenue_by_segments.client_type_\n                                       and commercial_report.month = mart_revenue_by_segments.paid_month\n                                       and commercial_report.market_type = mart_revenue_by_segments.market_type\n                                       and commercial_report.registration_source_agg_ = mart_revenue_by_segments.registration_source_agg_\n\n  left join mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_lt_info_aggregated \n                                    on commercial_report.segments_aggregated_ = mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_lt_info_aggregated.segments_aggregated_\n                                       and commercial_report.client_type_ = mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_lt_info_aggregated.client_type_\n                                       and commercial_report.month = mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_lt_info_aggregated.month\n                                       and commercial_report.market_type = mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_lt_info_aggregated.market_type\n                                       and commercial_report.registration_source_agg_ = mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_lt_info_aggregated.registration_source_agg_\n\n  left join mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_ltv_info_aggregated \n                                    on commercial_report.segments_aggregated_ = mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_ltv_info_aggregated.segments_aggregated_\n                                       and commercial_report.client_type_ = mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_ltv_info_aggregated.client_type_\n                                       and commercial_report.month = mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_ltv_info_aggregated.month\n                                       and commercial_report.market_type = mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_ltv_info_aggregated.market_type\n                                       and commercial_report.registration_source_agg_ = mart_left_and_returned_accounts_with_partner_and_account_type_with_dates_and_ltv_info_aggregated.registration_source_agg_\n\n  left join  mart_c1_aggregated \n                                    on  commercial_report.segments_aggregated_ = mart_c1_aggregated.segments_aggregated_\n                                       and commercial_report.client_type_ = mart_c1_aggregated.client_type_\n                                       and commercial_report.month = mart_c1_aggregated.registration_month\n                                       and commercial_report.market_type = mart_c1_aggregated.market_type\n                                       and commercial_report.registration_source_agg_ = mart_c1_aggregated.registration_source_agg_\n\n  left join mart_active_accounts_by_month_by_segment_aggregated_active_at_the_end_of_the_month \n                                                                    on commercial_report.segments_aggregated_ = mart_active_accounts_by_month_by_segment_aggregated_active_at_the_end_of_the_month.segments_aggregated_\n                                                                        and commercial_report.client_type_ = mart_active_accounts_by_month_by_segment_aggregated_active_at_the_end_of_the_month.client_type_\n                                                                        and commercial_report.month = mart_active_accounts_by_month_by_segment_aggregated_active_at_the_end_of_the_month.month\n                                                                        and commercial_report.market_type = mart_active_accounts_by_month_by_segment_aggregated_active_at_the_end_of_the_month.market_type\n                                                                        and commercial_report.registration_source_agg_ = mart_active_accounts_by_month_by_segment_aggregated_active_at_the_end_of_the_month.registration_source_agg_\n\n\n  left join mart_accounts_registration_sources_aggregated\n                                                                    on commercial_report.segments_aggregated_ = mart_accounts_registration_sources_aggregated.segments_aggregated_\n                                                                        and commercial_report.client_type_ = mart_accounts_registration_sources_aggregated.client_type_\n                                                                        and commercial_report.month = mart_accounts_registration_sources_aggregated.registration_month\n                                                                        and commercial_report.market_type = mart_accounts_registration_sources_aggregated.market_type \n                                                                        and commercial_report.registration_source_agg_ = mart_accounts_registration_sources_aggregated.registration_source_agg_\n\n  left join int_channels_active_paid_monthly_aggregated\n                                                                    on commercial_report.segments_aggregated_ = int_channels_active_paid_monthly_aggregated.segments_aggregated_\n                                                                        and commercial_report.client_type_ = int_channels_active_paid_monthly_aggregated.client_type_\n                                                                        and commercial_report.month = int_channels_active_paid_monthly_aggregated.month\n                                                                        and commercial_report.market_type = int_channels_active_paid_monthly_aggregated.market_type \n                                                                        and commercial_report.registration_source_agg_ = int_channels_active_paid_monthly_aggregated.registration_source_agg_ \n\n  left join int_accounts_partners_metrics_for_partners_active_users_aggregated\n                                                                    on commercial_report.segments_aggregated_ = int_accounts_partners_metrics_for_partners_active_users_aggregated.segments_aggregated_\n                                                                        and commercial_report.client_type_ = int_accounts_partners_metrics_for_partners_active_users_aggregated.client_type_\n                                                                        and commercial_report.month = int_accounts_partners_metrics_for_partners_active_users_aggregated.month\n                                                                        and commercial_report.market_type = int_accounts_partners_metrics_for_partners_active_users_aggregated.market_type \n                                                                        and commercial_report.registration_source_agg_ = int_accounts_partners_metrics_for_partners_active_users_aggregated.registration_source_agg_ \n\n left join mart_retention_of_second_month\n                                                                    on commercial_report.segments_aggregated_ = mart_retention_of_second_month.segments_aggregated_\n                                                                        and commercial_report.client_type_ = mart_retention_of_second_month.client_type_\n                                                                        and commercial_report.month = mart_retention_of_second_month.month\n                                                                        and commercial_report.market_type = mart_retention_of_second_month.market_type \n                                                                        and commercial_report.registration_source_agg_ = mart_retention_of_second_month.registration_source_agg_\n\n\n  where commercial_report.month <= date_trunc(current_date(),month)", "relation_name": "`dwh-wazzup`.`dbt_nbespalov`.`mart_all_metrics_for_commercial_report`", "batch_results": null}], "elapsed_time": 24.626567840576172, "args": {"require_nested_cumulative_type_params": false, "use_colors_file": true, "compile": true, "partial_parse_file_diff": true, "send_anonymous_usage_stats": true, "state_modified_compare_more_unrendered_values": false, "populate_cache": true, "log_path": "logs", "invocation_command": "dbt ", "skip_nodes_if_on_run_start_fails": false, "strict_mode": false, "show_resource_report": false, "macro_debugging": false, "require_explicit_package_overrides_for_builtin_materializations": true, "profiles_dir": "./", "show_all_deprecations": false, "require_resource_names_without_spaces": false, "require_all_warnings_handled_by_warn_error": false, "warn_error_options": {"include": [], "exclude": []}, "exclude": [], "state_modified_compare_vars": false, "which": "generate", "write_json": true, "partial_parse": true, "introspect": true, "skip_semantic_layer": false, "log_file_max_bytes": 0, "empty_catalog": false, "target_path": "target", "defer": false, "vars": {}, "log_level_file": "debug", "skip_write_msgpack_if_exist": false, "validate_macro_args": false, "use_fast_test_edges": false, "profile": "user", "cache_selected_only": false, "favor_state": false, "log_level": "debug", "select": [], "use_colors": true, "project_dir": "/app/dbt_project/c332c4bb-923e-4cb3-b4a8-6e68690bb4f1", "upload_to_artifacts_ingest_api": false, "log_format": "json", "require_yaml_configuration_for_mf_time_spines": false, "static": false, "require_batched_execution_for_custom_microbatch_strategy": false, "print": true, "indirect_selection": "eager", "printer_width": 80, "source_freshness_run_project_hooks": true, "quiet": false, "version_check": true, "static_parser": true, "log_format_file": "json"}}